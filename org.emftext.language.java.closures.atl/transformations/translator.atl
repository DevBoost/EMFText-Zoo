-- @path MMJava=/org.emftext.language.java/metamodel/java.ecore
-- @path MMClosures=/org.emftext.language.java.closures/metamodel/closures.ecore

module translator;
create OUT : MMJava from IN : MMClosures;

helper context MMClosures!Closures def : isExpressionStatement(): Boolean =
	self.oclIsTypeOf(MMClosures!ExpressionStatement)

helper context MMClosures!Expression def : isExpression():Boolean = 
	self.oclIsTypOf(MMCLosures!Expression)

helper context MMClosures!Closures def : isClosure(): Boolean =
	self.oclIsTypeOf(MMClosures!Closures)

rule Closure2Method
	from 
		c : MMClosures!Closure
			(c.isClosure)
	to
		m : MMJava!ClassMethod
	(
		m.name<-'invoke'
		m.parameters <- c.parameters
		m.statements <- c.statements
	)

rule Closure2Class
	from
		a : MMCLosures!AssignmentExpression
	
	to
		c : MMJava!AnonymousClass
		(
				c.name <- a.IdentifireReference.name
				c.members <- this.Module.Closure2Method(a)
				
		)

		
rule ClosureEStatement2JavaEStatement
	from 
		closureEStatement : MMCLosures!ExpressionStatement
	to
		javaEStatement : MMJava!ExpressionStatement
		(
			if (closureEStatement.expression.isClosure())
			then
			(
				javaEstatement.expression <- this.Module.Closure2Class(javaEStatement)
			)
			else
			(
				javaEStatement.expression <- closureEStatement.expression
			)	
		)
		

rule ClosureMember2JavaMember
		from 
			closureMember : MMClosures!Member
		to
			javaMember : MMJava!Member
			(
				
			)
		
rule ClosureClass2JavaClass
	from
		closureClass : MMClosures!Class
		
	to
		javaClass: MMJava!Class
		(
			javaClass.name<-closureClass.name
			javaClass.members <- defClosure
			
			defClosure : distinct MMJava!Class foreach(closureMember in closureClass.members)
			(
				if (closureMember.isExpressionStatement())
				{
					this.Module.ClosureEStatement2JavaEStatement(closureMember)
					//javaClass.members <- ClosureEStatement2JavaEStatement(closureMember)
				}
				else
				{
					this.Module.ClosureMember2JavaMember(closureMember)
					//javaClass.members <- closureMemeber
				}
			)
			
			
			javaClass.members <- this.Module.Closure2Class(closureClass)
		)
		