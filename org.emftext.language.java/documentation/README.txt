- JaMoPP Requirements -
* Eclipse Europa
* EMFTextEdit
* TBD ...

- JaMoPP Project Structure -

The EMFTextEdit JavaModelParser currently consists of the following plug-ins:

[org.reuseware.emftextedit.language.java]
    This it the JaMoPP main plug-in. Folder /documentation contains the documentation artefacts for JaMoPP.
    The folder /metamodel holds the JaMoPP Java metamodel in Ecore, a corresponding EMFTextEdit concrete 
    syntax specification, and the .genmodel configuring the EMF code generation. The folder /src-gen is the 
    target directory for EMF code generation from the Java metamodel (model code, edit code, editor code).
                    
[org.reuseware.emftextedit.language.java.resource.java]
    This plug-in is is the container for the JavaParser generated by EMFTextEdit from the concrete syntax 
    specification.
    
[org.reuseware.emftextedit.language.java.test]
    This plug-in contains a test suite with unit tests for JaMoPP. 
    
    New test cases can be added by the following steps:
    * Put a java source file that contains java expressions to test in the /input folder
      of this plug-in.
    * Declare a test method in org.reuseware.emftextedit.language.java.test.JavaParserTest. 
      You can use this template:
        
        @Test
	    public void test[PathToSourceFile] throws IOException, CoreException {
            CompilationUnit model = parseResource([PathToSourceFile]);
            // TODO check the parsing result for correctness
        }        
        
    *	Implement correctness checks for parsing results in test method.
    

- Getting Started with Parser Development -

* Import all plug-ins to an Eclipse with EMFTextEdit installed. 
* Generate EMF infrastructure from .genmodel (model, edit, editor).
* Generate Parser from .cs specification
* Run org.reuseware.emftextedit.language.java.test as JUnit Plug-in Test.