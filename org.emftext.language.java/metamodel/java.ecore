<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmi:id="_WosmsNz1Ed2bJ_pQViWxFg"
    name="java" nsURI="http://www.emftext.org/java" nsPrefix="java">
  <eSubpackages xmi:id="_Wosmsdz1Ed2bJ_pQViWxFg" name="annotations" nsURI="http://www.emftext.org/java/annotations"
      nsPrefix="annotations">
    <eClassifiers xsi:type="ecore:EClass" name="Annotable" abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="annotations" upperBound="-1"
          eType="#_Wosms9z1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wosms9z1Ed2bJ_pQViWxFg" name="AnnotationInstance"
        eSuperTypes="#//references/Reference #//modifiers/AnnotationInstanceOrModifier #//commons/NamespaceAwareElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="annotation" lowerBound="1"
          eType="#//classifiers/Classifier"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wosmttz1Ed2bJ_pQViWxFg"
          name="parameter" eType="#//annotations/AnnotationParameter" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AnnotationParameter" abstract="true"
        eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" name="SingleAnnotationParameter" eSuperTypes="#//annotations/AnnotationParameter">
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
          eType="#//annotations/AnnotationValue" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AnnotationParameterList" eSuperTypes="#//annotations/AnnotationParameter">
      <eStructuralFeatures xsi:type="ecore:EReference" name="settings" upperBound="-1"
          eType="#_Wosmt9z1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wosmt9z1Ed2bJ_pQViWxFg" name="AnnotationAttributeSetting"
        eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_WosmuNz1Ed2bJ_pQViWxFg"
          name="attribute" lowerBound="1" eType="#//members/InterfaceMethod"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wosmudz1Ed2bJ_pQViWxFg"
          name="value" lowerBound="1" eType="#//annotations/AnnotationValue" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AnnotationValue" abstract="true" eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wosmv9z1Ed2bJ_pQViWxFg" name="AnnotationAttribute"
        eSuperTypes="#//members/InterfaceMethod">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_WosmwNz1Ed2bJ_pQViWxFg"
          name="defaultValue" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="arrays" nsURI="http://www.emftext.org/java/arrays" nsPrefix="arrays">
    <eClassifiers xsi:type="ecore:EClass" name="ArrayTypeable" abstract="true" eSuperTypes="#//commons/Commentable">
      <eOperations name="getArrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="arrayDimensionsBefore"
          upperBound="-1" eType="#//arrays/ArrayDimension" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="arrayDimensionsAfter"
          upperBound="-1" eType="#//arrays/ArrayDimension" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayDimension" eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayInitializer" eSuperTypes="#//arrays/ArrayInitializationValue #//annotations/AnnotationValue">
      <eStructuralFeatures xsi:type="ecore:EReference" name="initialValues" upperBound="-1"
          eType="#//arrays/ArrayInitializationValue" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayInitializationValue" abstract="true"
        eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayInstantiation" abstract="true"
        eSuperTypes="#_Wo2YDNz1Ed2bJ_pQViWxFg #//references/Reference"/>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayInstantiationBySize" eSuperTypes="#//arrays/ArrayInstantiation #_Wo2ZP9z1Ed2bJ_pQViWxFg #//arrays/ArrayTypeable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="sizes" lowerBound="1"
          upperBound="-1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayInstantiationByValues" abstract="true"
        eSuperTypes="#//arrays/ArrayInstantiation">
      <eStructuralFeatures xsi:type="ecore:EReference" name="arrayInitializer" lowerBound="1"
          eType="#//arrays/ArrayInitializer" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayInstantiationByValuesUntyped"
        eSuperTypes="#//arrays/ArrayInstantiationByValues"/>
    <eClassifiers xsi:type="ecore:EClass" name="ArrayInstantiationByValuesTyped" eSuperTypes="#//arrays/ArrayInstantiationByValues #_Wo2ZP9z1Ed2bJ_pQViWxFg #//arrays/ArrayTypeable"/>
    <eClassifiers xsi:type="ecore:EClass" name="ArraySelector" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="position" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg"
          containment="true"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="classifiers" nsURI="http://www.emftext.org/java/classifiers"
      nsPrefix="classifiers">
    <eClassifiers xsi:type="ecore:EClass" name="Classifier" abstract="true" eSuperTypes="#_Wo2ZO9z1Ed2bJ_pQViWxFg #//references/ReferenceableElement">
      <eOperations name="getAllSuperClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="throw new java.lang.UnsupportedOperationException ();&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ConcreteClassifier" abstract="true"
        eSuperTypes="#//classifiers/Classifier #//generics/TypeParametrizable #//members/MemberContainer #//members/Member #_Wo2YzNz1Ed2bJ_pQViWxFg #//modifiers/AnnotableAndModifiable">
      <eOperations name="getInnerClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (this.eIsProxy()) {&#xD;&#xA;&#x9;java.lang.String uriString = (( org.eclipse.emf.ecore.InternalEObject ) this).eProxyURI().trimFragment().toString();&#xD;&#xA;&#x9;java.lang.String fullName = uriString.substring( org.emftext.language.java.JavaUniquePathConstructor .JAVA_CLASSIFIER_PATHMAP.length(),uriString.length() - &quot;.java&quot;.length()) + &quot;$&quot;;&#xD;&#xA;&#x9;return getConcreteClassifierProxies(fullName,&quot;*&quot;);&#xD;&#xA;}else {&#xD;&#xA;&#x9;java.lang.String suffix = &quot;&quot;;&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier containingClass = this;&#xD;&#xA;&#x9;while (containingClass.eContainer()instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;containingClass = ( org.emftext.language.java.classifiers.ConcreteClassifier ) containingClass.eContainer();&#xD;&#xA;&#x9;&#x9;suffix = containingClass.getName() + org.emftext.language.java.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR + suffix;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (containingClass.eContainer()instanceof org.emftext.language.java.containers.CompilationUnit ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.containers.CompilationUnit compilationUnit = ( org.emftext.language.java.containers.CompilationUnit ) containingClass.eContainer();&#xD;&#xA;&#x9;&#x9;java.lang.String fullName = compilationUnit.getNamespacesAsString() + suffix + getName() + org.emftext.language.java.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR;&#xD;&#xA;&#x9;&#x9;return getConcreteClassifierProxies(fullName,&quot;*&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;result.add(( org.emftext.language.java.classifiers.ConcreteClassifier ) member);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier:getAllSuperClassifiers()) {&#xD;&#xA;&#x9;for ( org.emftext.language.java.members.Member member:superClassifier.getMembers()) {&#xD;&#xA;&#x9;&#x9;if (member instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;result.add(( org.emftext.language.java.classifiers.ConcreteClassifier ) member);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getAllInnerClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >innerClassifierList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;innerClassifierList.addAll(getInnerClassifiers());&#xD;&#xA;for ( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier:getAllSuperClassifiers()) {&#xD;&#xA;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >superInnerList = superClassifier.getInnerClassifiers();&#xD;&#xA;&#x9;for ( org.emftext.language.java.classifiers.ConcreteClassifier superInner:superInnerList) {&#xD;&#xA;&#x9;&#x9;if (superInner.eIsProxy()) {&#xD;&#xA;&#x9;&#x9;&#x9;superInner = ( org.emftext.language.java.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(superInner,this);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (!superInner.isHidden(this)) {&#xD;&#xA;&#x9;&#x9;&#x9;innerClassifierList.add(superInner);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return innerClassifierList;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getSuperTypeReferences" upperBound="-1" eType="#//types/ClassifierReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.ClassifierReference >typeReferenceList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.types.ClassifierReference >();&#xD;&#xA;if (this == null) {&#xD;&#xA;&#x9;return typeReferenceList;&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.classifiers.Class ) {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.Class javaClass = ( org.emftext.language.java.classifiers.Class ) this;&#xD;&#xA;&#x9;if (javaClass.getExtends() != null) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference classifierReference = javaClass.getExtends().getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;typeReferenceList.add(classifierReference);&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier target = ( org.emftext.language.java.classifiers.ConcreteClassifier ) classifierReference.getTarget();&#xD;&#xA;&#x9;&#x9;if (!target.equals(getObjectClass())) {&#xD;&#xA;&#x9;&#x9;&#x9;typeReferenceList.addAll(target.getSuperTypeReferences());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;for ( org.emftext.language.java.types.TypeReference interfaceReference:javaClass.getImplements()) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference classifierReference = interfaceReference.getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;typeReferenceList.add(classifierReference);&#xD;&#xA;&#x9;&#x9;typeReferenceList.addAll((( org.emftext.language.java.classifiers.ConcreteClassifier ) classifierReference.getTarget()).getSuperTypeReferences());&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (this instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.Interface javaInterface = ( org.emftext.language.java.classifiers.Interface ) this;&#xD;&#xA;&#x9;for ( org.emftext.language.java.types.TypeReference interfaceReference:javaInterface.getExtends()) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference classifierReference = interfaceReference.getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;typeReferenceList.add(classifierReference);&#xD;&#xA;&#x9;&#x9;typeReferenceList.addAll((( org.emftext.language.java.classifiers.ConcreteClassifier ) classifierReference.getTarget()).getSuperTypeReferences());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return typeReferenceList;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getAllMembers" upperBound="-1" eType="#//members/Member">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Member >memberList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.members.Member >();&#xD;&#xA;org.emftext.language.java.classifiers.ConcreteClassifier concreteClassifier = ( org.emftext.language.java.classifiers.ConcreteClassifier ) this;&#xD;&#xA;memberList.addAll(concreteClassifier.getMembers());&#xD;&#xA;memberList.addAll(concreteClassifier.getDefaultMembers());&#xD;&#xA;memberList.addAll(concreteClassifier.getAllInnerClassifiers());&#xD;&#xA;for ( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier:getAllSuperClassifiers()) {&#xD;&#xA;&#x9;for ( org.emftext.language.java.members.Member member:superClassifier.getMembers()) {&#xD;&#xA;&#x9;&#x9;if (member instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable ) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.modifiers.AnnotableAndModifiable modifiable = ( org.emftext.language.java.modifiers.AnnotableAndModifiable ) member;&#xD;&#xA;&#x9;&#x9;&#x9;if (!modifiable.isHidden(context)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;memberList.add(member);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;memberList.add(member);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;memberList.addAll(superClassifier.getDefaultMembers());&#xD;&#xA;}&#xD;&#xA;return memberList;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns all members of the given classifier including inner classes and &#xA; all members of super types (extended classes and implemented interfaces).&#xA; &#xA; @param context to check protected visibility&#xA; @return member list&#xA;"/>
        </eAnnotations>
        <eParameters name="context" eType="#//commons/Commentable"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Implementor" abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="implements" upperBound="-1"
          eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#//classifiers/ConcreteClassifier #//classifiers/Implementor">
      <eOperations name="getAllSuperClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;org.emftext.language.java.classifiers.Class superClass = this;&#xD;&#xA;while (superClass != null&amp;&amp;!superClass.eIsProxy()&amp;&amp;!superClass.equals(getObjectClass())) {&#xD;&#xA;&#x9;superClass = superClass.getSuperClass();&#xD;&#xA;&#x9;if (superClass != null) {&#xD;&#xA;&#x9;&#x9;result.add(superClass);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.types.TypeReference typeArg:this.getImplements()) {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier ) typeArg.getTarget();&#xD;&#xA;&#x9;if (superInterface != null) {&#xD;&#xA;&#x9;&#x9;result.add(superInterface);&#xD;&#xA;&#x9;&#x9;if (superInterface instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;&#x9;&#x9;result.addAll((( org.emftext.language.java.classifiers.Interface ) superInterface).getAllSuperClassifiers());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;superClass = this.getSuperClass();&#xD;&#xA;if (superClass != null&amp;&amp;!superClass.eIsProxy()&amp;&amp;!superClass.equals(getObjectClass())) {&#xD;&#xA;&#x9;result.addAll(superClass.getAllSuperClassifiers());&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Recursively collects all super types (extended classes and implemented interfaces)&#xA; of the given class.&#xA; &#xA; @param classifierList the list for the result&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getSuperClass" eType="#//classifiers/Class">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.types.TypeReference superClassReference = this.getExtends();&#xD;&#xA;if (superClassReference == null) {&#xD;&#xA;&#x9;superClassReference = this.getDefaultExtends();&#xD;&#xA;}&#xD;&#xA;if (superClassReference == null) {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;org.emftext.language.java.types.Type result = superClassReference.getTarget();&#xD;&#xA;if (result instanceof org.emftext.language.java.classifiers.Class ) {&#xD;&#xA;&#x9;return( org.emftext.language.java.classifiers.Class ) result;&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param this&#xA; @return the direct super class&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="unWrapPrimitiveType" eType="#_Wo2ZR9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (getLibClass(&quot;Boolean&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createBoolean() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Byte&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createByte() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Character&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createChar() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Float&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createFloat() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Double&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createDouble() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Integer&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createInt() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Long&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createLong() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Short&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createShort() ;&#xD;&#xA;}&#xD;&#xA;if (getLibClass(&quot;Void&quot;).equals(this)) {&#xD;&#xA;&#x9;return org.emftext.language.java.types.TypesFactory.eINSTANCE.createVoid() ;&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param this&#xA; @return primitive type, if the class can be wrapped&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extends" eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="defaultExtends" eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Interface" eSuperTypes="#//classifiers/ConcreteClassifier">
      <eOperations name="getAllSuperClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;for ( org.emftext.language.java.types.TypeReference typeArg:this.getExtends()) {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier ) typeArg.getTarget();&#xD;&#xA;&#x9;if (superInterface != null) {&#xD;&#xA;&#x9;&#x9;result.add(superInterface);&#xD;&#xA;&#x9;&#x9;if (superInterface instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;&#x9;&#x9;result.addAll((( org.emftext.language.java.classifiers.Interface ) superInterface).getAllSuperClassifiers());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.types.TypeReference typeArg:this.getDefaultExtends()) {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier ) typeArg.getTarget();&#xD;&#xA;&#x9;if (superInterface != null) {&#xD;&#xA;&#x9;&#x9;result.add(superInterface);&#xD;&#xA;&#x9;&#x9;if (superInterface instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;&#x9;&#x9;result.addAll((( org.emftext.language.java.classifiers.Interface ) superInterface).getAllSuperClassifiers());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return all interfaces extended by this interface. The type is &#xA; ConcreteClassifier, because java.lang.Object is also extended although&#xA; it is a Class.&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extends" upperBound="-1"
          eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="defaultExtends" upperBound="-1"
          eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//classifiers/ConcreteClassifier #//classifiers/Implementor">
      <eOperations name="getAllSuperClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;org.emftext.language.java.classifiers.Class enumClass = getLibClass(&quot;Enum&quot;);&#xD;&#xA;result.add(enumClass);&#xD;&#xA;result.addAll(enumClass.getAllSuperClassifiers());&#xD;&#xA;for ( org.emftext.language.java.types.TypeReference typeArg:this.getImplements()) {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier superInterface = ( org.emftext.language.java.classifiers.ConcreteClassifier ) typeArg.getTarget();&#xD;&#xA;&#x9;if (superInterface != null) {&#xD;&#xA;&#x9;&#x9;result.add(superInterface);&#xD;&#xA;&#x9;&#x9;if (superInterface instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;&#x9;&#x9;result.addAll((( org.emftext.language.java.classifiers.Interface ) superInterface).getAllSuperClassifiers());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return all interfaces extended by this enumeration.&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getContainedConstant" eType="#//members/EnumConstant">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="for ( org.emftext.language.java.members.EnumConstant constant:getConstants()) {&#xD;&#xA;&#x9;if (name.equals(constant.getName())) {&#xD;&#xA;&#x9;&#x9;return constant;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="constants" upperBound="-1"
          eType="#//members/EnumConstant" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Annotation" eSuperTypes="#//classifiers/ConcreteClassifier">
      <eOperations name="getAllSuperClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;result.add(getAnnotationInterface());&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return &lt;code>java.lang.annotation.Annotation&lt;/code> &#xA;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AnonymousClass" eSuperTypes="#_Wo2ZO9z1Ed2bJ_pQViWxFg #//members/MemberContainer">
      <eOperations name="getAllSuperClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >superClassifierList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;org.emftext.language.java.classifiers.ConcreteClassifier superClassifier = getSuperClassifier();&#xD;&#xA;if (superClassifier != null) {&#xD;&#xA;&#x9;superClassifierList.add(superClassifier);&#xD;&#xA;&#x9;superClassifierList.addAll(superClassifier.getAllSuperClassifiers());&#xD;&#xA;}else {&#xD;&#xA;&#x9;superClassifierList.add(getObjectClass());&#xD;&#xA;}&#xD;&#xA;return superClassifierList;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return a view on all super classifiers&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getSuperClassifier" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.instantiations.NewConstructorCall ncCall = null;&#xD;&#xA;if (this.eContainer()instanceof org.emftext.language.java.instantiations.NewConstructorCall ) {&#xD;&#xA;&#x9;ncCall = ( org.emftext.language.java.instantiations.NewConstructorCall ) this.eContainer();&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier superClassifier = ( org.emftext.language.java.classifiers.ConcreteClassifier ) ncCall.getTypeReference().getTarget();&#xD;&#xA;&#x9;return superClassifier;&#xD;&#xA;}else if (this.eContainer()instanceof org.emftext.language.java.members.EnumConstant ) {&#xD;&#xA;&#x9;if (this.eContainer().eContainer()instanceof org.emftext.language.java.classifiers.Enumeration ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.java.classifiers.Enumeration ) this.eContainer().eContainer();&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return the direct super classifier&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getAllMembers" upperBound="-1" eType="#//members/Member">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Member >memberList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.members.Member >();&#xD;&#xA;memberList.addAll(this.getMembers());&#xD;&#xA;memberList.addAll(this.getDefaultMembers());&#xD;&#xA;org.emftext.language.java.instantiations.NewConstructorCall ncCall = null;&#xD;&#xA;if (this.eContainer()instanceof org.emftext.language.java.instantiations.NewConstructorCall ) {&#xD;&#xA;&#x9;ncCall = ( org.emftext.language.java.instantiations.NewConstructorCall ) this.eContainer();&#xD;&#xA;&#x9;;&#xD;&#xA;}&#xD;&#xA;if (ncCall == null) {&#xD;&#xA;&#x9;return memberList;&#xD;&#xA;}else {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier classifier = ( org.emftext.language.java.classifiers.ConcreteClassifier ) ncCall.getTypeReference().getTarget();&#xD;&#xA;&#x9;if (classifier != null) {&#xD;&#xA;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Member >superMemberList = classifier.getAllMembers(context);&#xD;&#xA;&#x9;&#x9;for ( org.emftext.language.java.members.Member superMember:superMemberList) {&#xD;&#xA;&#x9;&#x9;&#x9;if (superMember instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (superMember.eIsProxy()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;superMember = ( org.emftext.language.java.members.Member ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(superMember,this);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.modifiers.AnnotableAndModifiable modifiable = ( org.emftext.language.java.modifiers.AnnotableAndModifiable ) superMember;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!modifiable.isHidden(context)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;memberList.add(superMember);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;memberList.add(superMember);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return memberList;&#xD;&#xA;}&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param context to check protected visibility&#xA; @return a view on all members including super classifiers' members&#xA;"/>
        </eAnnotations>
        <eParameters name="context" eType="#//commons/Commentable"/>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="commons" nsURI="http://www.emftext.org/java/commons" nsPrefix="commons">
    <eClassifiers xsi:type="ecore:EClass" name="Commentable" abstract="true">
      <eOperations name="getConcreteClassifier" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return( org.emftext.language.java.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve( org.emftext.language.java.JavaClasspath .get(this).getClassifier(name),this);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the &lt;code>org.emftext.language.java.classifiers.ConcreteClassifier&lt;/code>&#xA; representing the class with the given classified name.&#xA; &#xA; @param name classified name of the ConcreteClassifier&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getConcreteClassifierProxy" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return( org.emftext.language.java.classifiers.ConcreteClassifier ) org.emftext.language.java.JavaClasspath .get(this).getClassifier(name);&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getConcreteClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;for ( org.eclipse.emf.ecore.EObject classifier: org.emftext.language.java.JavaClasspath .get(this).getClassifiers(packageName,classifierQuery)) {&#xD;&#xA;&#x9;result.add(( org.emftext.language.java.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(classifier,this));&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds all &lt;code>org.emftext.language.java.classifiers.ConcreteClassifier&lt;/code>&#xA; representing the classes in the given package or a single class from that package.&#xA; &#xA; @param packageName name of the package&#xA; for all classifiers or name of a single classifier&#xA;"/>
        </eAnnotations>
        <eParameters name="packageName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eParameters name="classifierQuery" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getConcreteClassifierProxies" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;for ( org.eclipse.emf.ecore.EObject classifier: org.emftext.language.java.JavaClasspath .get(this).getClassifiers(packageName,classifierQuery)) {&#xD;&#xA;&#x9;result.add(( org.emftext.language.java.classifiers.ConcreteClassifier ) classifier);&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="packageName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eParameters name="classifierQuery" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getLibClass" eType="#//classifiers/Class">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.Class classClass = ( org.emftext.language.java.classifiers.Class ) getConcreteClassifierProxy(&quot;java.lang.&quot; + name);&#xD;&#xA;org.eclipse.emf.ecore.EObject resolved = ( org.emftext.language.java.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(classClass,this);&#xD;&#xA;if (resolved instanceof org.emftext.language.java.classifiers.Class ) {&#xD;&#xA;&#x9;return( org.emftext.language.java.classifiers.Class ) resolved;&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the &lt;code>org.emftext.language.java.classifiers.Class&lt;/code>&#xA; representing the class with the given name located in &lt;code>java.lang&lt;/code>.&#xA; &#xA; @param name name of the Class&#xA; @return the Class&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getLibInterface" eType="#//classifiers/Interface">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.ConcreteClassifier interfaceClass = getConcreteClassifierProxy(&quot;java.lang.&quot; + name);&#xD;&#xA;org.eclipse.emf.ecore.EObject resolved = org.eclipse.emf.ecore.util.EcoreUtil .resolve(interfaceClass,this);&#xD;&#xA;if (resolved instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;return( org.emftext.language.java.classifiers.Interface ) resolved;&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the &lt;code>org.emftext.language.java.classifiers.Interface&lt;/code>&#xA; representing the interface with the given name located in &lt;code>java.lang&lt;/code>.&#xA; &#xA; @param name name of the Interface&#xA; @return the Class&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getClassClass" eType="#//classifiers/Class">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getLibClass(&quot;Class&quot;);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the &lt;code>org.emftext.language.java.classifiers.Class&lt;/code>&#xA; representing &lt;code>java.lang.Class&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getObjectClass" eType="#//classifiers/Class">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getLibClass(&quot;Object&quot;);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the &lt;code>org.emftext.language.java.classifiers.Class&lt;/code>&#xA; representing &lt;code>java.lang.Object&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getStringClass" eType="#//classifiers/Class">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getLibClass(&quot;String&quot;);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the &lt;code>org.emftext.language.java.classifiers.Class&lt;/code>&#xA; representing &lt;code>java.lang.String&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getAnnotationInterface" eType="#//classifiers/Interface">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.Interface annotationClass = ( org.emftext.language.java.classifiers.Interface ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(getConcreteClassifierProxy(&quot;java.lang.annotation.Annotation&quot;),this);&#xD;&#xA;org.eclipse.emf.ecore.EObject resolved = org.eclipse.emf.ecore.util.EcoreUtil .resolve(annotationClass,this);&#xD;&#xA;if (resolved instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;return( org.emftext.language.java.classifiers.Interface ) resolved;&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the &lt;code>org.emftext.language.java.classifiers.Interface&lt;/code>&#xA; representing &lt;code>java.lang.annotation.Annotation&lt;/code>.&#xA; &#xA; @return the Class&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getContainingAnnotationInstance" eType="#_Wosms9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.ecore.EObject value = this;&#xD;&#xA;while (!(value instanceof org.emftext.language.java.annotations.AnnotationInstance )&amp;&amp;value != null) {&#xD;&#xA;&#x9;value = value.eContainer();&#xD;&#xA;}&#xD;&#xA;return( org.emftext.language.java.annotations.AnnotationInstance ) value;&#xD;&#xA;"/>
          <details key="documentation" value=" &#xA; Finds the containing annotation instance for the given element.&#xA; &#xA; @param value&#xA; @return containing annotation instance&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getContainingAnonymousClass" eType="#//classifiers/AnonymousClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.ecore.EObject value = this;&#xD;&#xA;while (!(value instanceof org.emftext.language.java.classifiers.AnonymousClass )&amp;&amp;!(value instanceof org.emftext.language.java.classifiers.ConcreteClassifier )&amp;&amp;value != null) {&#xD;&#xA;&#x9;value = value.eContainer();&#xD;&#xA;}&#xD;&#xA;if (!(value instanceof org.emftext.language.java.classifiers.AnonymousClass )) {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;return( org.emftext.language.java.classifiers.AnonymousClass ) value;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the containing anonymous class for the given element.&#xA; &#xA; @param value&#xA; @return containing anonymous class &#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getContainingConcreteClassifier" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.ecore.EObject value = this;&#xD;&#xA;while (!(value instanceof org.emftext.language.java.classifiers.ConcreteClassifier )&amp;&amp;value != null) {&#xD;&#xA;&#x9;value = value.eContainer();&#xD;&#xA;}&#xD;&#xA;return( org.emftext.language.java.classifiers.ConcreteClassifier ) value;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getContainingCompilationUnit" eType="#//containers/CompilationUnit">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.ecore.EObject value = this;&#xD;&#xA;while (!(value instanceof org.emftext.language.java.containers.CompilationUnit )&amp;&amp;value != null) {&#xD;&#xA;&#x9;value = value.eContainer();&#xD;&#xA;}&#xD;&#xA;return( org.emftext.language.java.containers.CompilationUnit ) value;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the containing compilation unit for the given element.&#xA; &#xA; @param value&#xA; @return containing compilation unit&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getContainingPackageName" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.containers.CompilationUnit cu = getContainingCompilationUnit();&#xD;&#xA;if (cu == null) {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;int idx = cu.getNamespaces().size();&#xD;&#xA;if (cu.getName() != null) {&#xD;&#xA;&#x9;char[]fullName = cu.getName().toCharArray();&#xD;&#xA;&#x9;for (int i = 0;i &lt; fullName.length;i++) {&#xD;&#xA;&#x9;&#x9;if (fullName[i] == '$') {&#xD;&#xA;&#x9;&#x9;&#x9;idx--;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return new org.eclipse.emf.common.util.BasicEList &lt; java.lang.String >(cu.getNamespaces().subList(0,idx));&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getParentConcreteClassifier" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.ConcreteClassifier classifier = getContainingConcreteClassifier();&#xD;&#xA;if (classifier == null) {&#xD;&#xA;&#x9;org.emftext.language.java.containers.CompilationUnit cu = getContainingCompilationUnit();&#xD;&#xA;&#x9;if (cu != null&amp;&amp;cu.getName() != null&amp;&amp;cu.getName().contains(&quot;$&quot;)) {&#xD;&#xA;&#x9;&#x9;classifier = ( org.emftext.language.java.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(getConcreteClassifierProxy(cu.getNamespacesAsString()),this);&#xD;&#xA;&#x9;&#x9;if (classifier.eIsProxy()) {&#xD;&#xA;&#x9;&#x9;&#x9;classifier = null;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return classifier;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Finds the classifier that is the parent of this element. If &#xA; this element is an inner classifier the parent classifier does&#xA; not necessarily contain this element, since it can reside in &#xA; a different compilation unit when stored in byte code.&#xA; &#xA; @param value&#xA; @return containing classifier&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getParentByEType" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.ecore.EObject container = this.eContainer();&#xD;&#xA;while (container != null) {&#xD;&#xA;&#x9;if (type.isInstance(container)) {&#xD;&#xA;&#x9;&#x9;return container;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Walks up the containment hierarchy and returns the first parent with the&#xA; given type. If no such parent is found, null is returned.&#xA;"/>
        </eAnnotations>
        <eParameters name="type" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EClass"/>
      </eOperations>
      <eOperations name="getFirstChildByEType" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.util.Iterator &lt; org.eclipse.emf.ecore.EObject >it = this.eAllContents();&#xD;&#xA;while (it.hasNext()) {&#xD;&#xA;&#x9;org.eclipse.emf.ecore.EObject next = it.next();&#xD;&#xA;&#x9;if (type.isInstance(next)) {&#xD;&#xA;&#x9;&#x9;return next;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Searches for the first child with the given type. If no such child is found, null is returned.&#xA;"/>
        </eAnnotations>
        <eParameters name="type" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EClass"/>
      </eOperations>
      <eOperations name="getParentByType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.ecore.EObject container = this.eContainer();&#xD;&#xA;while (container != null) {&#xD;&#xA;&#x9;if (type.isInstance(container)) {&#xD;&#xA;&#x9;&#x9;return type.cast(container);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;container = container.eContainer();&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Walks up the containment hierarchy and returns the first parent with the&#xA; given type. If no such parent is found, null is returned.&#xA;"/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//commons/Commentable/getParentByType/T"/>
        <eTypeParameters name="T"/>
        <eParameters name="type">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaClass">
            <eTypeArguments eTypeParameter="#//commons/Commentable/getParentByType/T"/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="getFirstChildByType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.util.Iterator &lt; org.eclipse.emf.ecore.EObject >it = this.eAllContents();&#xD;&#xA;while (it.hasNext()) {&#xD;&#xA;&#x9;org.eclipse.emf.ecore.EObject next = it.next();&#xD;&#xA;&#x9;if (type.isInstance(next)) {&#xD;&#xA;&#x9;&#x9;return type.cast(next);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Searches for the first child with the given type. If no such child is found, null is returned.&#xA;"/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//commons/Commentable/getFirstChildByType/T"/>
        <eTypeParameters name="T"/>
        <eParameters name="type">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaClass">
            <eTypeArguments eTypeParameter="#//commons/Commentable/getFirstChildByType/T"/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="getChildrenByEType" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.eclipse.emf.ecore.EObject >children = new org.eclipse.emf.common.util.BasicEList &lt; org.eclipse.emf.ecore.EObject >();&#xD;&#xA;java.util.Iterator &lt; org.eclipse.emf.ecore.EObject >it = this.eAllContents();&#xD;&#xA;while (it.hasNext()) {&#xD;&#xA;&#x9;org.eclipse.emf.ecore.EObject next = it.next();&#xD;&#xA;&#x9;if (type.isInstance(next)) {&#xD;&#xA;&#x9;&#x9;children.add(next);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return children;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns all children of the given type.&#xA;"/>
        </eAnnotations>
        <eParameters name="type" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EClass"/>
      </eOperations>
      <eOperations name="getChildrenByType" upperBound="-1">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt;T>children = new org.eclipse.emf.common.util.BasicEList &lt;T>();&#xD;&#xA;java.util.Iterator &lt; org.eclipse.emf.ecore.EObject >it = this.eAllContents();&#xD;&#xA;while (it.hasNext()) {&#xD;&#xA;&#x9;org.eclipse.emf.ecore.EObject next = it.next();&#xD;&#xA;&#x9;if (type.isInstance(next)) {&#xD;&#xA;&#x9;&#x9;children.add(type.cast(next));&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return children;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns all children of the given type.&#xA;"/>
        </eAnnotations>
        <eGenericType eTypeParameter="#//commons/Commentable/getChildrenByType/T"/>
        <eTypeParameters name="T"/>
        <eParameters name="type">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaClass">
            <eTypeArguments eTypeParameter="#//commons/Commentable/getChildrenByType/T"/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="getComments" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; java.lang.String >comments = new org.eclipse.emf.common.util.BasicEList &lt; java.lang.String >();&#xD;&#xA;if (this instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable ) {&#xD;&#xA;&#x9;for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier aom:(( org.emftext.language.java.modifiers.AnnotableAndModifiable ) this).getAnnotationsAndModifiers()) {&#xD;&#xA;&#x9;&#x9;comments.addAll(aom.getComments());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.commons.layout.LayoutInformation layoutInformation:getLayoutInformations()) {&#xD;&#xA;&#x9;java.lang.String text = layoutInformation.getHiddenTokenText();&#xD;&#xA;&#x9;if (text.contains(&quot;/*&quot;)||text.contains(&quot;//&quot;)) {&#xD;&#xA;&#x9;&#x9;comments.add(layoutInformation.getHiddenTokenText().trim());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return comments;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="layoutInformations" upperBound="-1"
          eType="ecore:EClass ../../org.emftext.commons.layout/metamodel/layout.ecore#//LayoutInformation"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="NamespaceAwareElement" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eOperations name="getNamespacesAsString" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String containerName = &quot;&quot;;&#xD;&#xA;for ( java.util.Iterator &lt; java.lang.String >it = getNamespaces().iterator();it.hasNext();) {&#xD;&#xA;&#x9;java.lang.String namespaceFragment = it.next();&#xD;&#xA;&#x9;java.lang.String assumedPackageName = containerName + namespaceFragment + org.emftext.language.java.JavaUniquePathConstructor .PACKAGE_SEPARATOR;&#xD;&#xA;&#x9;java.lang.String assumedClassifierName = containerName + namespaceFragment + org.emftext.language.java.JavaUniquePathConstructor .CLASSIFIER_SEPARATOR;&#xD;&#xA;&#x9;if (it.hasNext()) {&#xD;&#xA;&#x9;&#x9;if ( org.emftext.language.java.JavaClasspath .get(this).existsPackage(assumedClassifierName)) {&#xD;&#xA;&#x9;&#x9;&#x9;containerName = assumedClassifierName;&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;containerName = assumedPackageName;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;if ( org.emftext.language.java.JavaClasspath .get(this).existsPackage(assumedPackageName)) {&#xD;&#xA;&#x9;&#x9;&#x9;containerName = assumedPackageName;&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;containerName = assumedClassifierName;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return containerName;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Converts the namespaces array of the given namespace aware element into&#xA; a String representation using package (.) and class ($) delimiters. The method&#xA; uses the classpath to determine for each element of the namespace if it &#xA; identifies a package or a class.&#xA; &#xA; @param naElement&#xA; @return single string representation of namespace&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getClassifierAtNamespaces" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String fullQualifiedName = getNamespacesAsString();&#xD;&#xA;if (fullQualifiedName == null||fullQualifiedName.endsWith( org.emftext.language.java.JavaUniquePathConstructor .PACKAGE_SEPARATOR)) {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;fullQualifiedName = fullQualifiedName.substring(0,fullQualifiedName.length() - 1);&#xD;&#xA;return( org.emftext.language.java.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(getConcreteClassifierProxy(fullQualifiedName),this);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Assuming the namespace&#xA; identifies a classifier, that classifier is returned.&#xA; &#xA; @return classifier at namespace&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="namespaces" unique="false"
          upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="containers" nsURI="http://www.emftext.org/java/containers" nsPrefix="containers">
    <eClassifiers xsi:type="ecore:EClass" name="JavaRoot" abstract="true" eSuperTypes="#//commons/NamedElement #//commons/NamespaceAwareElement #//imports/ImportingElement">
      <eOperations name="getClassifiersInSamePackage" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >defaultImportList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;java.lang.String packageName = getNamespacesAsString();&#xD;&#xA;defaultImportList.addAll(getConcreteClassifierProxies(packageName,&quot;*&quot;));&#xD;&#xA;return defaultImportList;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return all classes in the same package imports&#xA;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CompilationUnit" eSuperTypes="#//containers/JavaRoot">
      <eOperations name="getContainedClassifier" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (name == null) {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.classifiers.ConcreteClassifier candidate:getClassifiers()) {&#xD;&#xA;&#x9;if (name.equals(candidate.getName())) {&#xD;&#xA;&#x9;&#x9;return candidate;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param name name of the contained Classifier&#xA; @return the Classifier&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getClassifiersInSamePackage" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >defaultImportList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;java.lang.String packageName = getNamespacesAsString();&#xD;&#xA;defaultImportList.addAll(getClassifiers());&#xD;&#xA;defaultImportList.addAll(getConcreteClassifierProxies(packageName,&quot;*&quot;));&#xD;&#xA;return defaultImportList;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return all classes in the same package imports&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="classifiers" lowerBound="1"
          upperBound="-1" eType="#//classifiers/ConcreteClassifier" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="#//containers/JavaRoot #//annotations/Annotable">
      <eOperations name="getNamespacesAsString" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String packageName = &quot;&quot;;&#xD;&#xA;for ( java.util.Iterator &lt; java.lang.String >it = getNamespaces().iterator();it.hasNext();) {&#xD;&#xA;&#x9;java.lang.String namespaceFragment = it.next();&#xD;&#xA;&#x9;packageName = packageName + namespaceFragment + org.emftext.language.java.JavaUniquePathConstructor .PACKAGE_SEPARATOR;&#xD;&#xA;}&#xD;&#xA;return packageName;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getClassifiersInSamePackage" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >defaultImportList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;java.lang.String packageName = getNamespacesAsString();&#xD;&#xA;defaultImportList.addAll(getConcreteClassifierProxies(packageName + getName(),&quot;*&quot;));&#xD;&#xA;return defaultImportList;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return all classes in the same package&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="compilationUnits" upperBound="-1"
          eType="#//containers/CompilationUnit" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EmptyModel" eSuperTypes="#//containers/JavaRoot"/>
  </eSubpackages>
  <eSubpackages xmi:id="_Wo2YC9z1Ed2bJ_pQViWxFg" name="expressions" nsURI="http://www.emftext.org/java/expressions"
      nsPrefix="expressions">
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YF9z1Ed2bJ_pQViWxFg" name="ExpressionList"
        eSuperTypes="#_Wo2Y9tz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YGNz1Ed2bJ_pQViWxFg"
          name="expressions" upperBound="-1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YDNz1Ed2bJ_pQViWxFg" name="Expression"
        abstract="true" eSuperTypes="#//arrays/ArrayInitializationValue #//annotations/AnnotationValue">
      <eOperations name="getType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getOneType(false);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns the type of the expression considering all concrete&#xA; subtypes of Expression.&#xA; &#xA; @return type of expression&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getAlternativeType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getOneType(true);&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getOneType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.Class stringClass = getStringClass();&#xD;&#xA;org.emftext.language.java.types.Type type = null;&#xD;&#xA;if (this instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;org.emftext.language.java.references.Reference reference = ( org.emftext.language.java.references.Reference ) this;&#xD;&#xA;&#x9;while (reference.getNext() != null) {&#xD;&#xA;&#x9;&#x9;reference = reference.getNext();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;type = reference.getReferencedType();&#xD;&#xA;}else if (this instanceof org.emftext.language.java.literals.Literal ) {&#xD;&#xA;&#x9;type = (( org.emftext.language.java.literals.Literal ) this).getType();&#xD;&#xA;}else if (this instanceof org.emftext.language.java.expressions.CastExpression ) {&#xD;&#xA;&#x9;type = (( org.emftext.language.java.expressions.CastExpression ) this).getTypeReference().getTarget();&#xD;&#xA;}else if (this instanceof org.emftext.language.java.expressions.AssignmentExpression ) {&#xD;&#xA;&#x9;type = (( org.emftext.language.java.expressions.AssignmentExpression ) this).getChild().getOneType(alternative);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.expressions.ConditionalExpression &amp;&amp;(( org.emftext.language.java.expressions.ConditionalExpression ) this).getExpressionIf() != null) {&#xD;&#xA;&#x9;if (alternative) {&#xD;&#xA;&#x9;&#x9;type = (( org.emftext.language.java.expressions.ConditionalExpression ) this).getExpressionElse().getOneType(alternative);&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;type = (( org.emftext.language.java.expressions.ConditionalExpression ) this).getExpressionIf().getOneType(alternative);&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (this instanceof org.emftext.language.java.expressions.EqualityExpression ||this instanceof org.emftext.language.java.expressions.RelationExpression ||this instanceof org.emftext.language.java.expressions.ConditionalOrExpression ||this instanceof org.emftext.language.java.expressions.ConditionalAndExpression ||this instanceof org.emftext.language.java.expressions.InstanceOfExpression ) {&#xD;&#xA;&#x9;type = getLibClass(&quot;Boolean&quot;);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.expressions.AdditiveExpression ||this instanceof org.emftext.language.java.expressions.MultiplicativeExpression ||this instanceof org.emftext.language.java.expressions.InclusiveOrExpression ||this instanceof org.emftext.language.java.expressions.ExclusiveOrExpression ||this instanceof org.emftext.language.java.expressions.AndExpression ||this instanceof org.emftext.language.java.expressions.ShiftExpression ) {&#xD;&#xA;&#x9;if (this instanceof org.emftext.language.java.expressions.AdditiveExpression ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.expressions.AdditiveExpression additiveExpression = ( org.emftext.language.java.expressions.AdditiveExpression ) this;&#xD;&#xA;&#x9;&#x9;for ( org.emftext.language.java.expressions.Expression subExp:additiveExpression.getChildren()) {&#xD;&#xA;&#x9;&#x9;&#x9;if (stringClass.equals(subExp.getOneType(alternative))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return stringClass;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;@SuppressWarnings(&quot;unchecked&quot;) org.emftext.language.java.expressions.Expression subExp = (( org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.expressions.Expression >) this.eGet(this.eClass().getEStructuralFeature(&quot;children&quot;))).get(0);&#xD;&#xA;&#x9;return subExp.getOneType(alternative);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.expressions.UnaryExpression ) {&#xD;&#xA;&#x9;org.emftext.language.java.expressions.Expression subExp = (( org.emftext.language.java.expressions.UnaryExpression ) this).getChild();&#xD;&#xA;&#x9;return subExp.getOneType(alternative);&#xD;&#xA;}else for ( org.eclipse.emf.common.util.TreeIterator &lt; org.eclipse.emf.ecore.EObject >i = this.eAllContents();i.hasNext();) {&#xD;&#xA;&#x9;org.eclipse.emf.ecore.EObject next = i.next();&#xD;&#xA;&#x9;org.emftext.language.java.types.Type nextType = null;&#xD;&#xA;&#x9;if (next instanceof org.emftext.language.java.expressions.PrimaryExpression ) {&#xD;&#xA;&#x9;&#x9;if (next instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.references.Reference ref = ( org.emftext.language.java.references.Reference ) next;&#xD;&#xA;&#x9;&#x9;&#x9;while (ref.getNext() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ref = ref.getNext();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;next = ref;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (next instanceof org.emftext.language.java.literals.Literal ) {&#xD;&#xA;&#x9;&#x9;&#x9;nextType = (( org.emftext.language.java.literals.Literal ) next).getType();&#xD;&#xA;&#x9;&#x9;}else if (next instanceof org.emftext.language.java.expressions.CastExpression ) {&#xD;&#xA;&#x9;&#x9;&#x9;nextType = (( org.emftext.language.java.expressions.CastExpression ) next).getTypeReference().getTarget();&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;nextType = (( org.emftext.language.java.references.Reference ) next).getReferencedType();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;i.prune();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (nextType != null) {&#xD;&#xA;&#x9;&#x9;type = nextType;&#xD;&#xA;&#x9;&#x9;if (stringClass.equals(type)) {&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return type;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="alternative" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      </eOperations>
      <eOperations name="getArrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="long size = 0;&#xD;&#xA;org.emftext.language.java.arrays.ArrayTypeable arrayType = null;&#xD;&#xA;if (this instanceof org.emftext.language.java.expressions.NestedExpression &amp;&amp;(( org.emftext.language.java.expressions.NestedExpression ) this).getNext() == null) {&#xD;&#xA;&#x9;return(( org.emftext.language.java.expressions.NestedExpression ) this).getExpression().getArrayDimension() - (( org.emftext.language.java.expressions.NestedExpression ) this).getArraySelectors().size();&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.expressions.ConditionalExpression &amp;&amp;(( org.emftext.language.java.expressions.ConditionalExpression ) this).getExpressionIf() != null) {&#xD;&#xA;&#x9;return(( org.emftext.language.java.expressions.ConditionalExpression ) this).getExpressionIf().getArrayDimension();&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.expressions.AssignmentExpression ) {&#xD;&#xA;&#x9;return(( org.emftext.language.java.expressions.AssignmentExpression ) this).getValue().getArrayDimension();&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.expressions.InstanceOfExpression ) {&#xD;&#xA;&#x9;return 0;&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;org.emftext.language.java.references.Reference reference = ( org.emftext.language.java.references.Reference ) this;&#xD;&#xA;&#x9;while (reference.getNext() != null) {&#xD;&#xA;&#x9;&#x9;reference = reference.getNext();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (reference instanceof org.emftext.language.java.references.ElementReference &amp;&amp;reference.getPrevious() != null) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.references.ReferenceableElement target = (( org.emftext.language.java.references.ElementReference ) reference).getTarget();&#xD;&#xA;&#x9;&#x9;if (target instanceof org.emftext.language.java.members.Method ) {&#xD;&#xA;&#x9;&#x9;&#x9;if (&quot;clone&quot;.equals((( org.emftext.language.java.members.Method ) target).getName())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;reference = ( org.emftext.language.java.references.Reference ) reference.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (reference instanceof org.emftext.language.java.references.ElementReference ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.references.ElementReference elementReference = ( org.emftext.language.java.references.ElementReference ) reference;&#xD;&#xA;&#x9;&#x9;if (elementReference.getTarget()instanceof org.emftext.language.java.arrays.ArrayTypeable ) {&#xD;&#xA;&#x9;&#x9;&#x9;arrayType = ( org.emftext.language.java.arrays.ArrayTypeable ) elementReference.getTarget();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (elementReference.getTarget()instanceof org.emftext.language.java.variables.AdditionalLocalVariable ) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.variables.AdditionalLocalVariable additionalLocalVariable = ( org.emftext.language.java.variables.AdditionalLocalVariable ) elementReference.getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;arrayType = ( org.emftext.language.java.variables.LocalVariable ) additionalLocalVariable.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;size += additionalLocalVariable.getArrayDimensionsAfter().size();&#xD;&#xA;&#x9;&#x9;&#x9;size -= arrayType.getArrayDimensionsAfter().size();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (elementReference.getTarget()instanceof org.emftext.language.java.members.AdditionalField ) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.members.AdditionalField additionalField = ( org.emftext.language.java.members.AdditionalField ) elementReference.getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;arrayType = ( org.emftext.language.java.members.Field ) additionalField.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;size += additionalField.getArrayDimensionsAfter().size();&#xD;&#xA;&#x9;&#x9;&#x9;size -= arrayType.getArrayDimensionsAfter().size();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}else if (this instanceof org.emftext.language.java.arrays.ArrayTypeable ) {&#xD;&#xA;&#x9;&#x9;size += (( org.emftext.language.java.arrays.ArrayTypeable ) this).getArrayDimensionsBefore().size() + (( org.emftext.language.java.arrays.ArrayTypeable ) this).getArrayDimensionsAfter().size();&#xD;&#xA;&#x9;&#x9;if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter ) {&#xD;&#xA;&#x9;&#x9;&#x9;size++;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;size -= reference.getArraySelectors().size();&#xD;&#xA;}else if (this instanceof org.emftext.language.java.arrays.ArrayTypeable ) {&#xD;&#xA;&#x9;size += (( org.emftext.language.java.arrays.ArrayTypeable ) this).getArrayDimensionsBefore().size() + (( org.emftext.language.java.arrays.ArrayTypeable ) this).getArrayDimensionsAfter().size();&#xD;&#xA;&#x9;if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter ) {&#xD;&#xA;&#x9;&#x9;size++;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.arrays.ArrayInstantiationBySize ) {&#xD;&#xA;&#x9;size += (( org.emftext.language.java.arrays.ArrayInstantiationBySize ) this).getSizes().size();&#xD;&#xA;}&#xD;&#xA;if (arrayType != null) {&#xD;&#xA;&#x9;size += arrayType.getArrayDimension();&#xD;&#xA;}&#xD;&#xA;return size;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentExpression" eSuperTypes="#_Wo2YDNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" name="child" lowerBound="1"
          eType="#//expressions/AssignmentExpressionChild" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="assignmentOperator" lowerBound="1"
          eType="#//operators/AssignmentOperator" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
          eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentExpressionChild" abstract="true"
        eSuperTypes="#_Wo2YDNz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YIdz1Ed2bJ_pQViWxFg" name="ConditionalExpression"
        eSuperTypes="#//expressions/AssignmentExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YI9z1Ed2bJ_pQViWxFg"
          name="child" eType="#//expressions/ConditionalExpressionChild" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YJdz1Ed2bJ_pQViWxFg"
          name="expressionIf" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="expressionElse" lowerBound="1"
          eType="#//expressions/AssignmentExpressionChild" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ConditionalExpressionChild" abstract="true"
        eSuperTypes="#//expressions/AssignmentExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YHdz1Ed2bJ_pQViWxFg" name="ConditionalOrExpression"
        eSuperTypes="#//expressions/ConditionalExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YH9z1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/ConditionalOrExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ConditionalOrExpressionChild" abstract="true"
        eSuperTypes="#//expressions/ConditionalExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YGtz1Ed2bJ_pQViWxFg" name="ConditionalAndExpression"
        eSuperTypes="#//expressions/ConditionalOrExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YHNz1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/ConditionalAndExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ConditionalAndExpressionChild" abstract="true"
        eSuperTypes="#//expressions/ConditionalOrExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YJ9z1Ed2bJ_pQViWxFg" name="InclusiveOrExpression"
        eSuperTypes="#//expressions/ConditionalAndExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YKdz1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/InclusiveOrExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InclusiveOrExpressionChild" abstract="true"
        eSuperTypes="#//expressions/ConditionalAndExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" name="ExclusiveOrExpression" eSuperTypes="#//expressions/InclusiveOrExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" name="children" lowerBound="1"
          upperBound="-1" eType="#//expressions/ExclusiveOrExpressionChild" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExclusiveOrExpressionChild" abstract="true"
        eSuperTypes="#//expressions/InclusiveOrExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YLdz1Ed2bJ_pQViWxFg" name="AndExpression"
        eSuperTypes="#//expressions/ExclusiveOrExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YL9z1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/AndExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AndExpressionChild" abstract="true"
        eSuperTypes="#//expressions/ExclusiveOrExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YMNz1Ed2bJ_pQViWxFg" name="EqualityExpression"
        eSuperTypes="#//expressions/AndExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YM9z1Ed2bJ_pQViWxFg"
          name="equalityOperators" lowerBound="1" upperBound="-1" eType="#//operators/EqualityOperator"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YMtz1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/EqualityExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="EqualityExpressionChild" abstract="true"
        eSuperTypes="#//expressions/AndExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YNdz1Ed2bJ_pQViWxFg" name="InstanceOfExpression"
        eSuperTypes="#//arrays/ArrayTypeable #_Wo2ZP9z1Ed2bJ_pQViWxFg #//expressions/EqualityExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YONz1Ed2bJ_pQViWxFg"
          name="child" lowerBound="1" eType="#//expressions/InstanceOfExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InstanceOfExpressionChild" abstract="true"
        eSuperTypes="#//expressions/EqualityExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YOtz1Ed2bJ_pQViWxFg" name="RelationExpression"
        eSuperTypes="#//expressions/InstanceOfExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YPNz1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/RelationExpressionChild"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YPdz1Ed2bJ_pQViWxFg"
          name="relationOperators" lowerBound="1" upperBound="-1" eType="#//operators/RelationOperator"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="RelationExpressionChild" abstract="true"
        eSuperTypes="#//expressions/InstanceOfExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YPtz1Ed2bJ_pQViWxFg" name="ShiftExpression"
        eSuperTypes="#//expressions/RelationExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YQNz1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/ShiftExpressionChild"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YQdz1Ed2bJ_pQViWxFg"
          name="shiftOperators" lowerBound="1" upperBound="-1" eType="#//operators/ShiftOperator"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ShiftExpressionChild" abstract="true"
        eSuperTypes="#//expressions/RelationExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YQtz1Ed2bJ_pQViWxFg" name="AdditiveExpression"
        eSuperTypes="#//expressions/ShiftExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YRNz1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/AdditiveExpressionChild"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YRdz1Ed2bJ_pQViWxFg"
          name="additiveOperators" lowerBound="1" upperBound="-1" eType="#//operators/AdditiveOperator"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AdditiveExpressionChild" abstract="true"
        eSuperTypes="#//expressions/ShiftExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YRtz1Ed2bJ_pQViWxFg" name="MultiplicativeExpression"
        eSuperTypes="#//expressions/AdditiveExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YSNz1Ed2bJ_pQViWxFg"
          name="children" lowerBound="1" upperBound="-1" eType="#//expressions/MultiplicativeExpressionChild"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YSdz1Ed2bJ_pQViWxFg"
          name="multiplicativeOperators" lowerBound="1" upperBound="-1" eType="#//operators/MultiplicativeOperator"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="MultiplicativeExpressionChild" abstract="true"
        eSuperTypes="#//expressions/AdditiveExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YStz1Ed2bJ_pQViWxFg" name="UnaryExpression"
        eSuperTypes="#//expressions/MultiplicativeExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YTNz1Ed2bJ_pQViWxFg"
          name="operators" lowerBound="1" upperBound="-1" eType="#//operators/UnaryOperator"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YT9z1Ed2bJ_pQViWxFg"
          name="child" lowerBound="1" eType="#//expressions/UnaryExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UnaryExpressionChild" abstract="true"
        eSuperTypes="#//expressions/MultiplicativeExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnaryModificationExpression" abstract="true"
        eSuperTypes="#//expressions/UnaryExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" name="child" lowerBound="1"
          eType="#//expressions/UnaryModificationExpressionChild" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="operator" lowerBound="1"
          eType="#//operators/UnaryModificationOperator" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PrefixUnaryModificationExpression"
        eSuperTypes="#//expressions/UnaryModificationExpression"/>
    <eClassifiers xsi:type="ecore:EClass" name="SuffixUnaryModificationExpression"
        eSuperTypes="#//expressions/UnaryModificationExpression"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnaryModificationExpressionChild"
        abstract="true" eSuperTypes="#//expressions/UnaryExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YWdz1Ed2bJ_pQViWxFg" name="CastExpression"
        eSuperTypes="#_Wo2ZP9z1Ed2bJ_pQViWxFg #//arrays/ArrayTypeable #//expressions/UnaryModificationExpressionChild">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2YXdz1Ed2bJ_pQViWxFg"
          name="child" lowerBound="1" eType="#//expressions/MultiplicativeExpressionChild"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PrimaryExpression" abstract="true"
        eSuperTypes="#//expressions/UnaryModificationExpressionChild"/>
    <eClassifiers xsi:type="ecore:EClass" name="NestedExpression" eSuperTypes="#//references/Reference">
      <eStructuralFeatures xsi:type="ecore:EReference" name="expression" lowerBound="1"
          eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="generics" nsURI="http://www.emftext.org/java/generics" nsPrefix="generics">
    <eClassifiers xsi:type="ecore:EClass" name="TypeArgument" abstract="true" eSuperTypes="#//arrays/ArrayTypeable"/>
    <eClassifiers xsi:type="ecore:EClass" name="TypeArgumentable" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeArguments" upperBound="-1"
          eType="#//generics/TypeArgument" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="CallTypeArgumentable" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="callTypeArguments" upperBound="-1"
          eType="#//generics/TypeArgument" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeParametrizable" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameters" upperBound="-1"
          eType="#//generics/TypeParameter" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExtendsTypeArgument" eSuperTypes="#//generics/TypeArgument">
      <eStructuralFeatures xsi:type="ecore:EReference" name="extendTypes" lowerBound="1"
          upperBound="-1" eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="QualifiedTypeArgument" eSuperTypes="#//generics/TypeArgument #_Wo2ZP9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" name="SuperTypeArgument" eSuperTypes="#//generics/TypeArgument">
      <eStructuralFeatures xsi:type="ecore:EReference" name="superType" lowerBound="1"
          eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="TypeParameter" eSuperTypes="#//classifiers/Classifier">
      <eOperations name="getAllSuperClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;for ( org.emftext.language.java.types.TypeReference typeRef:getExtendTypes()) {&#xD;&#xA;&#x9;org.emftext.language.java.types.Type type = typeRef.getTarget();&#xD;&#xA;&#x9;if (type instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;result.add(( org.emftext.language.java.classifiers.ConcreteClassifier ) type);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (type instanceof org.emftext.language.java.classifiers.Classifier ) {&#xD;&#xA;&#x9;&#x9;result.addAll((( org.emftext.language.java.classifiers.Classifier ) type).getAllSuperClassifiers());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return all type restrictions&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getAllMembers" upperBound="-1" eType="#//members/Member">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Member >memberList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.members.Member >();&#xD;&#xA;org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.types.Type >possiblyVisibleSuperClassifier = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.types.Type >();&#xD;&#xA;for ( org.emftext.language.java.types.TypeReference typeReference:(( org.emftext.language.java.generics.TypeParameter ) this).getExtendTypes()) {&#xD;&#xA;&#x9;possiblyVisibleSuperClassifier.add(typeReference.getTarget());&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.classifiers.ConcreteClassifier superClassifier:getAllSuperClassifiers()) {&#xD;&#xA;&#x9;for ( org.emftext.language.java.members.Member member:superClassifier.getMembers()) {&#xD;&#xA;&#x9;&#x9;if (member instanceof org.emftext.language.java.modifiers.AnnotableAndModifiable ) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.modifiers.AnnotableAndModifiable modifiable = ( org.emftext.language.java.modifiers.AnnotableAndModifiable ) member;&#xD;&#xA;&#x9;&#x9;&#x9;if (!modifiable.isHidden(context)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;memberList.add(member);&#xD;&#xA;&#x9;&#x9;&#x9;}else if (possiblyVisibleSuperClassifier.contains(superClassifier)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;memberList.add(member);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;memberList.add(member);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;memberList.addAll(superClassifier.getDefaultMembers());&#xD;&#xA;}&#xD;&#xA;return memberList;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns all members of the given classifier including inner classes and &#xA; all members of super types (extended classes and implemented interfaces).&#xA; &#xA; @param context to check protected visibility&#xA; @return member list&#xA;"/>
        </eAnnotations>
        <eParameters name="context" eType="#//commons/Commentable"/>
      </eOperations>
      <eOperations name="getBoundType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.Type >resultList = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.types.Type >();&#xD;&#xA;org.emftext.language.java.generics.TypeParametrizable typeParameterDeclarator = ( org.emftext.language.java.generics.TypeParametrizable ) this.eContainer();&#xD;&#xA;org.emftext.language.java.references.Reference parentReference = null;&#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.Type >prevTypeList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.types.Type >();&#xD;&#xA;if (reference != null&amp;&amp;reference.getPrevious()instanceof org.emftext.language.java.expressions.NestedExpression ) {&#xD;&#xA;&#x9;org.emftext.language.java.expressions.NestedExpression nestedExpression = ( org.emftext.language.java.expressions.NestedExpression ) reference.getPrevious();&#xD;&#xA;&#x9;org.emftext.language.java.expressions.Expression expression = null;&#xD;&#xA;&#x9;if (nestedExpression.getExpression()instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;&#x9;expression = nestedExpression.getExpression();&#xD;&#xA;&#x9;}else if (nestedExpression.getExpression()instanceof org.emftext.language.java.expressions.ConditionalExpression ) {&#xD;&#xA;&#x9;&#x9;expression = (( org.emftext.language.java.expressions.ConditionalExpression ) nestedExpression.getExpression()).getExpressionIf();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (expression instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.references.Reference expressionReference = ( org.emftext.language.java.references.Reference ) expression;&#xD;&#xA;&#x9;&#x9;while (expressionReference.getNext() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;expressionReference = expressionReference.getNext();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;parentReference = expressionReference;&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.Type prevType = nestedExpression.getExpression().getType();&#xD;&#xA;&#x9;&#x9;if (prevType instanceof org.emftext.language.java.util.TemporalCompositeClassifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType:(( org.emftext.language.java.util.TemporalCompositeClassifier ) prevType).getSuperTypes()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;prevTypeList.add(( org.emftext.language.java.types.Type ) aType);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;prevTypeList.add(prevType);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}else if (nestedExpression.getExpression()instanceof org.emftext.language.java.expressions.CastExpression ) {&#xD;&#xA;&#x9;&#x9;prevTypeList.add((( org.emftext.language.java.expressions.CastExpression ) nestedExpression.getExpression()).getTypeReference().getTarget());&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (reference != null&amp;&amp;reference.getPrevious() != null) {&#xD;&#xA;&#x9;parentReference = reference.getPrevious();&#xD;&#xA;&#x9;while (parentReference instanceof org.emftext.language.java.references.SelfReference ) {&#xD;&#xA;&#x9;&#x9;if ((( org.emftext.language.java.references.SelfReference ) parentReference).getSelf()instanceof org.emftext.language.java.literals.Super ) {&#xD;&#xA;&#x9;&#x9;&#x9;if (parentReference.eContainer()instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parentReference = ( org.emftext.language.java.references.Reference ) parentReference.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier containingClassifier = reference.getContainingConcreteClassifier();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (containingClassifier != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;prevTypeList.add(containingClassifier);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parentReference = null;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (parentReference != null) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.Type prevType = parentReference.getReferencedType();&#xD;&#xA;&#x9;&#x9;if (prevType instanceof org.emftext.language.java.util.TemporalCompositeClassifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType:(( org.emftext.language.java.util.TemporalCompositeClassifier ) prevType).getSuperTypes()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;prevTypeList.add(( org.emftext.language.java.types.Type ) aType);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;prevTypeList.add(prevType);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (reference != null) {&#xD;&#xA;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier containingClassifier = reference.getContainingConcreteClassifier();&#xD;&#xA;&#x9;while (containingClassifier != null) {&#xD;&#xA;&#x9;&#x9;prevTypeList.add(containingClassifier);&#xD;&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject container = containingClassifier.eContainer();&#xD;&#xA;&#x9;&#x9;if (container instanceof org.emftext.language.java.commons.Commentable ) {&#xD;&#xA;&#x9;&#x9;&#x9;containingClassifier = (( org.emftext.language.java.commons.Commentable ) container).getContainingConcreteClassifier();&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;containingClassifier = null;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.types.Type prevType:prevTypeList) {&#xD;&#xA;&#x9;int typeParameterIndex = -1;&#xD;&#xA;&#x9;if (typeParameterDeclarator instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;typeParameterIndex = typeParameterDeclarator.getTypeParameters().indexOf(this);&#xD;&#xA;&#x9;&#x9;if (reference != null) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference classifierReference = null;&#xD;&#xA;&#x9;&#x9;&#x9;if (parentReference instanceof org.emftext.language.java.references.ElementReference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.references.ReferenceableElement prevReferenced = (( org.emftext.language.java.references.ElementReference ) parentReference).getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (prevReferenced instanceof org.emftext.language.java.types.TypedElement ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.TypeReference prevTypeReference = (( org.emftext.language.java.types.TypedElement ) prevReferenced).getTypeReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (prevTypeReference != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;classifierReference = prevTypeReference.getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if (parentReference instanceof org.emftext.language.java.types.TypedElement ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.TypeReference prevParentReference = (( org.emftext.language.java.types.TypedElement ) parentReference).getTypeReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (prevParentReference != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;classifierReference = prevParentReference.getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if (prevType instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;int idx = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.types.ClassifierReference superClassifierReference:(( org.emftext.language.java.classifiers.ConcreteClassifier ) prevType).getSuperTypeReferences()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeParameterIndex &lt; superClassifierReference.getTypeArguments().size()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeParameterDeclarator.equals(superClassifierReference.getTarget())||(( org.emftext.language.java.classifiers.Classifier ) superClassifierReference.getTarget()).getAllSuperClassifiers().contains(typeParameterDeclarator)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.generics.TypeArgument arg = superClassifierReference.getTypeArguments().get(typeParameterIndex);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (arg instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(idx,(( org.emftext.language.java.generics.QualifiedTypeArgument ) arg).getTypeReference().getTarget());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;idx++;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.generics.TypeArgument >typeArgumentList;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.util.TemporalTypeArgumentHolder ttah = null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for ( org.eclipse.emf.common.notify.Adapter adapter:prevType.eAdapters()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (adapter instanceof org.emftext.language.java.util.TemporalTypeArgumentHolder ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ttah = ( org.emftext.language.java.util.TemporalTypeArgumentHolder ) adapter;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prevType.eAdapters().remove(ttah);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (ttah != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;typeArgumentList = ttah.getTypeArguments();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}else if (classifierReference != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;typeArgumentList = classifierReference.getTypeArguments();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;typeArgumentList = org.eclipse.emf.common.util.ECollections .emptyEList();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (typeParameterIndex &lt; typeArgumentList.size()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.generics.TypeArgument arg = typeArgumentList.get(typeParameterIndex);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (arg instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference theTypeRef = (( org.emftext.language.java.generics.QualifiedTypeArgument ) arg).getTypeReference().getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (theTypeRef != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.Type theType = theTypeRef.getBoundTarget(parentReference);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (theType != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!theTypeRef.getTypeArguments().isEmpty()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ttah = new org.emftext.language.java.util.TemporalTypeArgumentHolder ();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ttah.getTypeArguments().addAll(theTypeRef.getTypeArguments());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;theType.eAdapters().add(ttah);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,theType);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (arg instanceof org.emftext.language.java.generics.ExtendsTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.types.TypeReference extendedType:(( org.emftext.language.java.generics.ExtendsTypeArgument ) arg).getExtendTypes()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,extendedType.getBoundTarget(parentReference));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}else if (prevType instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;resultList.add(prevType);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.types.TypeReference extendedRef:(( org.emftext.language.java.generics.TypeParameter ) prevType).getExtendTypes()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.classifiers.ConcreteClassifier extended = ( org.emftext.language.java.classifiers.ConcreteClassifier ) extendedRef.getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int idx = (( org.emftext.language.java.generics.TypeParametrizable ) prevType.eContainer()).getTypeParameters().indexOf(prevType);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (extended.getTypeParameters().size() > idx) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(extended.getTypeParameters().get(idx));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (reference != null&amp;&amp;reference.eContainer()instanceof org.emftext.language.java.references.ReflectiveClassReference ) {&#xD;&#xA;&#x9;&#x9;&#x9;if (reference.eContainer().eContainer()instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;resultList.add(0,(( org.emftext.language.java.references.Reference ) reference.eContainer().eContainer()).getReferencedType());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (typeParameterDeclarator instanceof org.emftext.language.java.members.Method ) {&#xD;&#xA;&#x9;if (reference instanceof org.emftext.language.java.references.MethodCall ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.members.Method method = ( org.emftext.language.java.members.Method ) typeParameterDeclarator;&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.references.MethodCall methodCall = ( org.emftext.language.java.references.MethodCall ) reference;&#xD;&#xA;&#x9;&#x9;if (method.getTypeParameters().size() == methodCall.getCallTypeArguments().size()) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.generics.TypeArgument typeArgument = methodCall.getCallTypeArguments().get(method.getTypeParameters().indexOf(this));&#xD;&#xA;&#x9;&#x9;&#x9;if (typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;resultList.add(0,(( org.emftext.language.java.generics.QualifiedTypeArgument ) typeArgument).getTypeReference().getBoundTarget(parentReference));&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;int idx = method.getParameters().indexOf(typeReference.eContainer());&#xD;&#xA;&#x9;&#x9;if (idx == -1) {&#xD;&#xA;&#x9;&#x9;&#x9;for ( org.emftext.language.java.parameters.Parameter parameter:method.getParameters()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.generics.TypeArgument typeArgument:parameter.getTypeArguments()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((( org.emftext.language.java.generics.QualifiedTypeArgument ) typeArgument).getTypeReference().getTarget().equals(this)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;idx = method.getParameters().indexOf(parameter);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference paramTypeReference = parameter.getTypeReference().getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (paramTypeReference != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.generics.TypeArgument typeArgument:paramTypeReference.getTypeArguments()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (this.equals((( org.emftext.language.java.generics.QualifiedTypeArgument ) typeArgument).getTypeReference().getTarget())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;idx = method.getParameters().indexOf(parameter);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (idx &lt; methodCall.getArguments().size()&amp;&amp;idx >= 0) {&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.expressions.Expression argument = methodCall.getArguments().get(idx);&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.parameters.Parameter parameter = method.getParameters().get(idx);&#xD;&#xA;&#x9;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference parameterType = parameter.getTypeReference().getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;&#x9;if (argument instanceof org.emftext.language.java.instantiations.NewConstructorCall ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference argumentType = (( org.emftext.language.java.instantiations.NewConstructorCall ) argument).getTypeReference().getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (argumentType != null&amp;&amp;parameterType.getTypeArguments().size() == argumentType.getTypeArguments().size()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.generics.TypeArgument typeArgument:parameterType.getTypeArguments()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((( org.emftext.language.java.generics.QualifiedTypeArgument ) typeArgument).getTypeReference().getTarget().equals(this)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,(( org.emftext.language.java.generics.QualifiedTypeArgument ) argumentType.getTypeArguments().get(parameterType.getTypeArguments().indexOf(typeArgument))).getTypeReference().getTarget());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (argumentType != null&amp;&amp;parameterType.getTarget()instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,argumentType.getTarget());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}else if (parameterType != null&amp;&amp;argument instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.references.Reference argReference = ( org.emftext.language.java.references.Reference ) argument;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;while (argReference.getNext()instanceof org.emftext.language.java.references.Reference &amp;&amp;!(argReference.getNext()instanceof org.emftext.language.java.references.ReflectiveClassReference )) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;argReference = argReference.getNext();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (argReference instanceof org.emftext.language.java.references.ElementReference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.references.ElementReference elementReference = ( org.emftext.language.java.references.ElementReference ) argReference;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (elementReference.getNext()instanceof org.emftext.language.java.references.ElementReference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementReference = ( org.emftext.language.java.references.ElementReference ) elementReference.getNext();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (elementReference.getTarget()instanceof org.emftext.language.java.types.TypedElement ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.ClassifierReference argumentType = (( org.emftext.language.java.types.TypedElement ) elementReference.getTarget()).getTypeReference().getPureClassifierReference();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (argumentType != null&amp;&amp;parameterType.getTypeArguments().size() == argumentType.getTypeArguments().size()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.generics.TypeArgument typeArgument:parameterType.getTypeArguments()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((( org.emftext.language.java.generics.QualifiedTypeArgument ) typeArgument).getTypeReference().getTarget().equals(this)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int idx2 = parameterType.getTypeArguments().indexOf(typeArgument);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (argumentType.getTypeArguments().get(idx2)instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,(( org.emftext.language.java.generics.QualifiedTypeArgument ) argumentType.getTypeArguments().get(idx2)).getTypeReference().getTarget());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (argumentType.getTypeArguments().get(idx2)instanceof org.emftext.language.java.generics.ExtendsTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.types.TypeReference extendedType:(( org.emftext.language.java.generics.ExtendsTypeArgument ) argumentType.getTypeArguments().get(idx2)).getExtendTypes()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,extendedType.getTarget());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (argumentType != null&amp;&amp;parameterType.getTarget()instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,argumentType.getTarget());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (elementReference.getNext()instanceof org.emftext.language.java.references.ReflectiveClassReference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterType.getTypeArguments().size() == 1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.generics.TypeArgument typeArgument:parameterType.getTypeArguments()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeArgument instanceof org.emftext.language.java.generics.QualifiedTypeArgument ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((( org.emftext.language.java.generics.QualifiedTypeArgument ) typeArgument).getTypeReference().getTarget().equals(this)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,elementReference.getReferencedType());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterType.getTarget()instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (argReference.getNext()instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;argReference = argReference.getNext();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultList.add(0,(( org.emftext.language.java.references.Reference ) argReference).getReferencedType());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (method.equals(typeReference.eContainer())) {&#xD;&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.Classifier >allSuperTypes = null;&#xD;&#xA;&#x9;&#x9;&#x9;for ( org.emftext.language.java.parameters.Parameter parameter:method.getParameters()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (this.equals(parameter.getTypeReference().getTarget())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;idx = method.getParameters().indexOf(parameter);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.classifiers.Classifier argumentType = ( org.emftext.language.java.classifiers.Classifier ) methodCall.getArguments().get(idx).getType();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (allSuperTypes == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.Classifier >();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes.add(argumentType);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes.addAll(argumentType.getAllSuperClassifiers());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes.add(argumentType);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.Classifier >allOtherSuperTypes = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.Classifier >();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allOtherSuperTypes.add(argumentType);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allOtherSuperTypes.addAll(argumentType.getAllSuperClassifiers());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.Classifier >temp = allSuperTypes;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.Classifier >();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( org.emftext.language.java.classifiers.Classifier st:allOtherSuperTypes) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (temp.contains(st)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allSuperTypes.add(st);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if (allSuperTypes != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;resultList.addAll(allSuperTypes);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( java.util.Iterator &lt;?>it = resultList.iterator();it.hasNext();) {&#xD;&#xA;&#x9;if (it.next() == null) {&#xD;&#xA;&#x9;&#x9;it.remove();&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (resultList.isEmpty()||(resultList.size() == 1&amp;&amp;resultList.get(0).equals(this))) {&#xD;&#xA;&#x9;return this;&#xD;&#xA;}else {&#xD;&#xA;&#x9;org.emftext.language.java.util.TemporalCompositeClassifier temp = new org.emftext.language.java.util.TemporalCompositeClassifier (this);&#xD;&#xA;&#x9;for ( org.emftext.language.java.types.Type aResult:resultList) {&#xD;&#xA;&#x9;&#x9;if (aResult instanceof org.emftext.language.java.types.PrimitiveType ) {&#xD;&#xA;&#x9;&#x9;&#x9;aResult = (( org.emftext.language.java.types.PrimitiveType ) aResult).wrapPrimitiveType();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (aResult instanceof org.emftext.language.java.util.TemporalCompositeClassifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;temp.getSuperTypes().addAll((( org.emftext.language.java.util.TemporalCompositeClassifier ) aResult).getSuperTypes());&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;temp.getSuperTypes().add(( org.emftext.language.java.classifiers.Classifier ) aResult);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;temp.getSuperTypes().add(this);&#xD;&#xA;&#x9;return temp;&#xD;&#xA;}&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns the type bound to the given parameter in the context&#xA; of the given reference.&#xA; &#xA; @param typeReference&#xA; @param reference&#xA; @return bound type or parameter if not bound&#xA;"/>
        </eAnnotations>
        <eParameters name="typeReference" eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg"/>
        <eParameters name="reference" eType="#//references/Reference"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="extendTypes" upperBound="-1"
          eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="UnknownTypeArgument" eSuperTypes="#//generics/TypeArgument"/>
  </eSubpackages>
  <eSubpackages name="imports" nsURI="http://www.emftext.org/java/imports" nsPrefix="imports">
    <eClassifiers xsi:type="ecore:EClass" name="Import" abstract="true" eSuperTypes="#//commons/NamespaceAwareElement">
      <eOperations name="getImportedClassifier" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String containerName = getNamespacesAsString();&#xD;&#xA;if (containerName == null) {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;java.lang.String fullQualifiedName = containerName + name;&#xD;&#xA;return getConcreteClassifierProxy(fullQualifiedName);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns the classifier with the given name &#xA; located in the namespace defined by the import.&#xA; &#xA; @param name the name of the classifier&#xA; @return imported classifier (proxy)&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getImportedClassifiers" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.lang.String containerName = getNamespacesAsString();&#xD;&#xA;if (containerName == null) {&#xD;&#xA;&#x9;return org.eclipse.emf.common.util.ECollections .emptyEList();&#xD;&#xA;}&#xD;&#xA;return getConcreteClassifierProxies(containerName,&quot;*&quot;);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns a list of imported classifiers assuming the import's namespace&#xA; identifies a package.&#xA; &#xA; @param _this &#xA; @return imported classifier (proxy)&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getImportedMembers" upperBound="-1" eType="#//commons/NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.ConcreteClassifier concreteClassifier = getClassifierAtNamespaces();&#xD;&#xA;if (concreteClassifier == null||concreteClassifier.eIsProxy()) {&#xD;&#xA;&#x9;return org.eclipse.emf.common.util.ECollections .emptyEList();&#xD;&#xA;}&#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.commons.NamedElement >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.commons.NamedElement >();&#xD;&#xA;result.addAll(concreteClassifier.getAllMembers(this));&#xD;&#xA;if (concreteClassifier instanceof org.emftext.language.java.classifiers.Enumeration ) {&#xD;&#xA;&#x9;result.addAll((( org.emftext.language.java.classifiers.Enumeration ) concreteClassifier).getConstants());&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns all imported members assuming the import's namespace&#xA; identifies a classifier.&#xA; &#xA; @param _this &#xA; @return list of imported classifiers (proxies)&#xA;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ImportingElement" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eOperations name="getDefaultImports" upperBound="-1" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >result = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.classifiers.ConcreteClassifier >();&#xD;&#xA;for ( org.eclipse.emf.ecore.EObject classifier: org.emftext.language.java.JavaClasspath .get(this).getDefaultImports()) {&#xD;&#xA;&#x9;result.add(( org.emftext.language.java.classifiers.ConcreteClassifier ) classifier);&#xD;&#xA;}&#xD;&#xA;return result;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="imports" upperBound="-1"
          eType="#//imports/Import" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="StaticImport" abstract="true" eSuperTypes="#//imports/Import">
      <eStructuralFeatures xsi:type="ecore:EReference" name="static" lowerBound="1"
          eType="#_Wo2Yv9z1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ClassifierImport" eSuperTypes="#//imports/Import">
      <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" lowerBound="1"
          eType="#//classifiers/ConcreteClassifier"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PackageImport" eSuperTypes="#//imports/Import"/>
    <eClassifiers xsi:type="ecore:EClass" name="StaticClassifierImport" eSuperTypes="#//imports/StaticImport"/>
    <eClassifiers xsi:type="ecore:EClass" name="StaticMemberImport" eSuperTypes="#//imports/StaticImport">
      <eStructuralFeatures xsi:type="ecore:EReference" name="staticMembers" lowerBound="1"
          upperBound="-1" eType="#//references/ReferenceableElement"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages name="instantiations" nsURI="http://www.emftext.org/java/instantiations"
      nsPrefix="instantiations">
    <eClassifiers xsi:type="ecore:EClass" name="Initializable" abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="initialValue" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Instantiation" abstract="true" eSuperTypes="#//references/Reference #//references/Argumentable"/>
    <eClassifiers xsi:type="ecore:EClass" name="NewConstructorCall" eSuperTypes="#_Wo2ZP9z1Ed2bJ_pQViWxFg #//instantiations/Instantiation #//generics/CallTypeArgumentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="anonymousClass" eType="#//classifiers/AnonymousClass"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ExplicitConstructorCall" eSuperTypes="#//instantiations/Instantiation">
      <eStructuralFeatures xsi:type="ecore:EReference" name="callTarget" lowerBound="1"
          eType="#//literals/Self" containment="true"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages xmi:id="_Wo2Yntz1Ed2bJ_pQViWxFg" name="literals" nsURI="http://www.emftext.org/java/literals"
      nsPrefix="literals">
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YsNz1Ed2bJ_pQViWxFg" name="Literal"
        abstract="true" eSuperTypes="#//expressions/PrimaryExpression">
      <eOperations name="getOneType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.Class javaClass = null;&#xD;&#xA;if (this instanceof org.emftext.language.java.literals.NullLiteral ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Void&quot;);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.literals.BooleanLiteral ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Boolean&quot;);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.literals.DoubleLiteral ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Double&quot;);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.literals.FloatLiteral ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Float&quot;);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.literals.IntegerLiteral ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Integer&quot;);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.literals.LongLiteral ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Long&quot;);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.literals.CharacterLiteral ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Character&quot;);&#xD;&#xA;}&#xD;&#xA;return javaClass;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return type of the literal&#xA;"/>
        </eAnnotations>
        <eParameters name="alternative" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Self" abstract="true" eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YrNz1Ed2bJ_pQViWxFg" name="BooleanLiteral"
        eSuperTypes="#_Wo2YsNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EAttribute" xmi:id="_Wo2Yrdz1Ed2bJ_pQViWxFg"
          name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Ypdz1Ed2bJ_pQViWxFg" name="CharacterLiteral"
        eSuperTypes="#_Wo2YsNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EAttribute" xmi:id="_Wo2Yptz1Ed2bJ_pQViWxFg"
          name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EChar"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="FloatLiteral" abstract="true" eSuperTypes="#_Wo2YsNz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" name="DecimalFloatLiteral" eSuperTypes="#//literals/FloatLiteral">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="decimalValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="HexFloatLiteral" eSuperTypes="#//literals/FloatLiteral">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="hexValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yotz1Ed2bJ_pQViWxFg" name="DoubleLiteral"
        abstract="true" eSuperTypes="#_Wo2YsNz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" name="DecimalDoubleLiteral" eSuperTypes="#_Wo2Yotz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="decimalValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDouble"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="HexDoubleLiteral" eSuperTypes="#_Wo2Yotz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="hexValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDouble"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yn9z1Ed2bJ_pQViWxFg" name="IntegerLiteral"
        abstract="true" eSuperTypes="#_Wo2YsNz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" name="DecimalIntegerLiteral" eSuperTypes="#_Wo2Yn9z1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="decimalValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigInteger"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="HexIntegerLiteral" eSuperTypes="#_Wo2Yn9z1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="hexValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigInteger"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OctalIntegerLiteral" eSuperTypes="#_Wo2Yn9z1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="octalValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigInteger"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LongLiteral" abstract="true" eSuperTypes="#_Wo2YsNz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" name="DecimalLongLiteral" eSuperTypes="#//literals/LongLiteral">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="decimalValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigInteger"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="HexLongLiteral" eSuperTypes="#//literals/LongLiteral">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="hexValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigInteger"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OctalLongLiteral" eSuperTypes="#//literals/LongLiteral">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="octalValue" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBigInteger"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yr9z1Ed2bJ_pQViWxFg" name="NullLiteral"
        eSuperTypes="#_Wo2YsNz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" name="Super" eSuperTypes="#//literals/Self"/>
    <eClassifiers xsi:type="ecore:EClass" name="This" eSuperTypes="#//literals/Self"/>
  </eSubpackages>
  <eSubpackages name="members" nsURI="http://www.emftext.org/java/members" nsPrefix="members">
    <eClassifiers xsi:type="ecore:EClass" name="ExceptionThrower" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="exceptions" upperBound="-1"
          eType="#_Wo2ZQ9z1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Member" abstract="true" eSuperTypes="#//commons/NamedElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="MemberContainer" abstract="true" eSuperTypes="#//commons/Commentable">
      <eOperations name="getContainedClassifier" eType="#//classifiers/ConcreteClassifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.classifiers.ConcreteClassifier &amp;&amp;name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.java.classifiers.ConcreteClassifier ) member;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getDefaultMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.classifiers.ConcreteClassifier &amp;&amp;name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.java.classifiers.ConcreteClassifier ) member;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param name&#xA; @return classifier with the given name defined in this member container&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getContainedField" eType="#//members/Field">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.members.Field &amp;&amp;name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.java.members.Field ) member;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getDefaultMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.members.Field &amp;&amp;name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.java.members.Field ) member;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param name&#xA; @return field with the given name defined in this member container&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getContainedMethod" eType="#//members/Method">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.members.Method found = null;&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.members.Method &amp;&amp;name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;if (found != null) {&#xD;&#xA;&#x9;&#x9;&#x9;return null;&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;found = ( org.emftext.language.java.members.Method ) member;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getDefaultMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.members.Method &amp;&amp;name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;if (found != null) {&#xD;&#xA;&#x9;&#x9;&#x9;return null;&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;found = ( org.emftext.language.java.members.Method ) member;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return found;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param name&#xA; @return method with the given name defined in this member container;&#xA;         null, if there is no such method &#xA;         or if there are multiple methods with the same name&#xA;"/>
        </eAnnotations>
        <eParameters name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getMethods" upperBound="-1" eType="#//members/Method">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Method >methodList = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.members.Method >();&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.members.Method ) {&#xD;&#xA;&#x9;&#x9;methodList.add(( org.emftext.language.java.members.Method ) member);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return methodList;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="removeMethods">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Method >methodsToRemove = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.members.Method >();&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.members.Method ) {&#xD;&#xA;&#x9;&#x9;if (name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;&#x9;methodsToRemove.add(( org.emftext.language.java.members.Method ) member);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;getMembers().removeAll(methodsToRemove);&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getMembersByName" upperBound="-1" eType="#//members/Member">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Member >matchingMembers = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.members.Member >();&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (name.equals(member.getName())) {&#xD;&#xA;&#x9;&#x9;matchingMembers.add(member);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return matchingMembers;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="createField" eType="#//members/Field">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.members.Field field = org.emftext.language.java.members.MembersFactory.eINSTANCE.createField() ;&#xD;&#xA;field.setName(name);&#xD;&#xA;org.emftext.language.java.types.ClassifierReference typeRef = org.emftext.language.java.types.TypesFactory.eINSTANCE.createClassifierReference() ;&#xD;&#xA;typeRef.setTarget(getConcreteClassifier(qualifiedTypeName));&#xD;&#xA;field.setTypeReference(typeRef);&#xD;&#xA;getMembers().add(field);&#xD;&#xA;return field;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eParameters name="qualifiedTypeName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eOperations name="getFields" upperBound="-1" eType="#//members/Field">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.members.Field >fieldList = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.members.Field >();&#xD;&#xA;for ( org.emftext.language.java.members.Member member:getMembers()) {&#xD;&#xA;&#x9;if (member instanceof org.emftext.language.java.members.Field ) {&#xD;&#xA;&#x9;&#x9;fieldList.add(( org.emftext.language.java.members.Field ) member);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return fieldList;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="members" upperBound="-1"
          eType="#//members/Member" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="defaultMembers" upperBound="-1"
          eType="#//members/Member" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AdditionalField" eSuperTypes="#//references/ReferenceableElement #//arrays/ArrayTypeable #//instantiations/Initializable">
      <eOperations name="getArrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();&#xD;&#xA;return size;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Constructor" eSuperTypes="#//members/Member #//statements/StatementListContainer #//parameters/Parametrizable #//generics/TypeParametrizable #//members/ExceptionThrower #//modifiers/AnnotableAndModifiable"/>
    <eClassifiers xsi:type="ecore:EClass" name="EmptyMember" eSuperTypes="#//members/Member"/>
    <eClassifiers xsi:type="ecore:EClass" name="Field" eSuperTypes="#//members/Member #//instantiations/Initializable #//variables/Variable #//references/ReferenceableElement #//modifiers/AnnotableAndModifiable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="additionalFields" upperBound="-1"
          eType="#//members/AdditionalField" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Method" abstract="true" eSuperTypes="#//members/Member #_Wo2ZP9z1Ed2bJ_pQViWxFg #//arrays/ArrayTypeable #//generics/TypeParametrizable #//parameters/Parametrizable #//references/ReferenceableElement #//members/ExceptionThrower #//modifiers/AnnotableAndModifiable">
      <eOperations name="isMethodForCall" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.Type >argumentTypeList = methodCall.getArgumentTypes();&#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.parameters.Parameter >parameterList = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.parameters.Parameter >(this.getParameters());&#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.Type >parameterTypeList = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.types.Type >();&#xD;&#xA;for ( org.emftext.language.java.parameters.Parameter parameter:parameterList) {&#xD;&#xA;&#x9;parameterTypeList.add(parameter.getTypeReference().getBoundTarget(methodCall));&#xD;&#xA;}&#xD;&#xA;if (!parameterList.isEmpty()) {&#xD;&#xA;&#x9;org.emftext.language.java.parameters.Parameter lastParameter = parameterList.get(parameterList.size() - 1);&#xD;&#xA;&#x9;org.emftext.language.java.types.Type lastParameterType = parameterTypeList.get(parameterTypeList.size() - 1);&#xD;&#xA;&#x9;;&#xD;&#xA;&#x9;if (lastParameter instanceof org.emftext.language.java.parameters.VariableLengthParameter ) {&#xD;&#xA;&#x9;&#x9;while (parameterList.size() &lt; argumentTypeList.size()) {&#xD;&#xA;&#x9;&#x9;&#x9;if (needsPerfectMatch)return false;&#xD;&#xA;&#x9;&#x9;&#x9;parameterList.add(lastParameter);&#xD;&#xA;&#x9;&#x9;&#x9;parameterTypeList.add(lastParameterType);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (parameterList.size() > argumentTypeList.size()) {&#xD;&#xA;&#x9;&#x9;&#x9;if (needsPerfectMatch)return false;&#xD;&#xA;&#x9;&#x9;&#x9;parameterList.remove(lastParameter);&#xD;&#xA;&#x9;&#x9;&#x9;parameterTypeList.remove(parameterTypeList.size() - 1);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (parameterList.size() == argumentTypeList.size()) {&#xD;&#xA;&#x9;boolean parametersMatch = true;&#xD;&#xA;&#x9;for (int i = 0;i &lt; argumentTypeList.size();i++) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.parameters.Parameter parameter = parameterList.get(i);&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.expressions.Expression argument = methodCall.getArguments().get(i);&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.Type parameterType = parameterTypeList.get(i);&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.Type argumentType = argumentTypeList.get(i);&#xD;&#xA;&#x9;&#x9;if (argumentType == null||parameterType == null) {&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (parameterType != null&amp;&amp;argumentType != null) {&#xD;&#xA;&#x9;&#x9;&#x9;if (!parameterType.eIsProxy()||!argumentType.eIsProxy()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (needsPerfectMatch) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parametersMatch = parametersMatch&amp;&amp;argumentType.equalsType(argument.getArrayDimension(),parameterType,parameter.getArrayDimension());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parametersMatch = parametersMatch&amp;&amp;argumentType.isSuperType(argument.getArrayDimension(),parameterType,parameter);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return parametersMatch;&#xD;&#xA;}&#xD;&#xA;return false;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="methodCall" eType="#//references/MethodCall"/>
        <eParameters name="needsPerfectMatch" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      </eOperations>
      <eOperations name="isSomeMethodForCall" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return isMethodForCall(methodCall,false);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Decides if the given method matches the given call. &#xA; &#xA; @param methodCall&#xA; @return&#xA;"/>
        </eAnnotations>
        <eParameters name="methodCall" eType="#//references/MethodCall"/>
      </eOperations>
      <eOperations name="isBetterMethodForCall" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (!isMethodForCall(methodCall,false)) {&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;if (otherMethod.isMethodForCall(methodCall,true)) {&#xD;&#xA;&#x9;if (isMethodForCall(methodCall,true)) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.Type target = getTypeReference().getTarget();&#xD;&#xA;&#x9;&#x9;if (target instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;if ((( org.emftext.language.java.classifiers.ConcreteClassifier ) target).getAllSuperClassifiers().contains(otherMethod.getTypeReference().getTarget())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;if (!otherMethod.isMethodForCall(methodCall,false)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;return isMethodForCall(methodCall,true);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Only returns true if the given Method is a better match for the given calls than the&#xA; otherMethod given.&#xA; &#xA; @param otherMethod&#xA; @param methodCall&#xA; @return&#xA;"/>
        </eAnnotations>
        <eParameters name="otherMethod" eType="#//members/Method"/>
        <eParameters name="methodCall" eType="#//references/MethodCall"/>
      </eOperations>
      <eOperations name="getArrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();&#xD;&#xA;if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter ) {&#xD;&#xA;&#x9;size++;&#xD;&#xA;}&#xD;&#xA;return size;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="InterfaceMethod" eSuperTypes="#//members/Method"/>
    <eClassifiers xsi:type="ecore:EClass" name="ClassMethod" eSuperTypes="#//members/Method #//statements/StatementListContainer"/>
    <eClassifiers xsi:type="ecore:EClass" name="EnumConstant" eSuperTypes="#//references/ReferenceableElement #//references/Argumentable #//annotations/Annotable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="anonymousClass" eType="#//classifiers/AnonymousClass"
          containment="true"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages xmi:id="_Wo2Ystz1Ed2bJ_pQViWxFg" name="modifiers" nsURI="http://www.emftext.org/java/modifiers"
      nsPrefix="modifiers">
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Ys9z1Ed2bJ_pQViWxFg" name="Modifier"
        abstract="true" eSuperTypes="#//modifiers/AnnotationInstanceOrModifier"/>
    <eClassifiers xsi:type="ecore:EClass" name="AnnotationInstanceOrModifier" abstract="true"
        eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" name="AnnotableAndModifiable" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eOperations name="isHidden" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (this.eIsProxy()) {&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;if (this.eContainer()instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;if (context.eIsProxy()) {&#xD;&#xA;&#x9;context = ( org.emftext.language.java.commons.Commentable ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(context,this);&#xD;&#xA;}&#xD;&#xA;org.emftext.language.java.classifiers.ConcreteClassifier contextClassifier = context.getContainingConcreteClassifier();&#xD;&#xA;if (!(eContainer()instanceof org.emftext.language.java.commons.Commentable )) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;org.emftext.language.java.classifiers.ConcreteClassifier myClassifier = (( org.emftext.language.java.commons.Commentable ) eContainer()).getParentConcreteClassifier();&#xD;&#xA;if (context instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;if ((( org.emftext.language.java.references.Reference ) context).getPrevious()instanceof org.emftext.language.java.references.SelfReference ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.references.SelfReference selfReference = ( org.emftext.language.java.references.SelfReference ) (( org.emftext.language.java.references.Reference ) context).getPrevious();&#xD;&#xA;&#x9;&#x9;if (selfReference.getSelf()instanceof org.emftext.language.java.literals.Self ) {&#xD;&#xA;&#x9;&#x9;&#x9;if (selfReference.getPrevious() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.types.Type type = selfReference.getPrevious().getReferencedType();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (type instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;contextClassifier = ( org.emftext.language.java.classifiers.ConcreteClassifier ) type;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier:this.getAnnotationsAndModifiers()) {&#xD;&#xA;&#x9;if (modifier instanceof org.emftext.language.java.modifiers.Private ) {&#xD;&#xA;&#x9;&#x9;if (myClassifier.equalsType(0,contextClassifier,0)) {&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (modifier instanceof org.emftext.language.java.modifiers.Public ) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (modifier instanceof org.emftext.language.java.modifiers.Protected ) {&#xD;&#xA;&#x9;&#x9;if (getContainingPackageName() != null&amp;&amp;getContainingPackageName().equals(context.getContainingPackageName())) {&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;while (contextClassifier instanceof org.emftext.language.java.classifiers.Classifier ) {&#xD;&#xA;&#x9;&#x9;&#x9;if (contextClassifier.isSuperType(0,myClassifier,null)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject container = contextClassifier.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;if (container instanceof org.emftext.language.java.commons.Commentable ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;contextClassifier = (( org.emftext.language.java.commons.Commentable ) container).getParentConcreteClassifier();&#xD;&#xA;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;contextClassifier = null;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if (contextClassifier != null&amp;&amp;!contextClassifier.eIsProxy()&amp;&amp;contextClassifier.isSuperType(0,myClassifier,null)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.classifiers.AnonymousClass anonymousClass = context.getContainingAnonymousClass();&#xD;&#xA;&#x9;&#x9;while (anonymousClass != null) {&#xD;&#xA;&#x9;&#x9;&#x9;contextClassifier = anonymousClass.getSuperClassifier();&#xD;&#xA;&#x9;&#x9;&#x9;if (contextClassifier == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if (contextClassifier.isSuperType(0,myClassifier,null)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject container = anonymousClass.eContainer();&#xD;&#xA;&#x9;&#x9;&#x9;if (container instanceof org.emftext.language.java.commons.Commentable ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;anonymousClass = (( org.emftext.language.java.commons.Commentable ) container).getContainingAnonymousClass();&#xD;&#xA;&#x9;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;anonymousClass = null;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (getContainingPackageName() != null&amp;&amp;getContainingPackageName().equals(context.getContainingPackageName())) {&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;return true;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="context" eType="#//commons/Commentable"/>
      </eOperations>
      <eOperations name="isStatic" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (this.eContainer()instanceof org.emftext.language.java.classifiers.Interface ) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier:this.getAnnotationsAndModifiers()) {&#xD;&#xA;&#x9;if (modifier instanceof org.emftext.language.java.modifiers.Static ) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return false;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns true if this element is static (either by an explicit modifier &lt;code>static&lt;/code>&#xA; or because this element is part of an interface).&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="removeModifier">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.util.List &lt; org.emftext.language.java.modifiers.AnnotationInstanceOrModifier >modifiers = getAnnotationsAndModifiers();&#xD;&#xA;java.util.List &lt; org.emftext.language.java.modifiers.AnnotationInstanceOrModifier >modifiersToRemove = new java.util.ArrayList &lt; org.emftext.language.java.modifiers.AnnotationInstanceOrModifier >();&#xD;&#xA;for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier:modifiers) {&#xD;&#xA;&#x9;if (modifierType.isInstance(modifier)) {&#xD;&#xA;&#x9;&#x9;modifiersToRemove.add(modifier);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;modifiers.removeAll(modifiersToRemove);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Removes the given type of modifier from this element.&#xA;"/>
        </eAnnotations>
        <eParameters name="modifierType">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaClass">
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="makePublic">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (isPublic()) {&#xD;&#xA;&#x9;return;&#xD;&#xA;}&#xD;&#xA;removeModifier( org.emftext.language.java.modifiers.Private .class);&#xD;&#xA;removeModifier( org.emftext.language.java.modifiers.Protected .class);&#xD;&#xA;getAnnotationsAndModifiers().add( org.emftext.language.java.modifiers.ModifiersFactory.eINSTANCE.createPublic() );&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Sets the visibility of this element to &lt;code>public&lt;/code>.&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="makePrivate">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (isPrivate()) {&#xD;&#xA;&#x9;return;&#xD;&#xA;}&#xD;&#xA;removeModifier( org.emftext.language.java.modifiers.Public .class);&#xD;&#xA;removeModifier( org.emftext.language.java.modifiers.Protected .class);&#xD;&#xA;getAnnotationsAndModifiers().add( org.emftext.language.java.modifiers.ModifiersFactory.eINSTANCE.createPrivate() );&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Sets the visibility of this element to &lt;code>private&lt;/code>.&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="makeProtected">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (isProtected()) {&#xD;&#xA;&#x9;return;&#xD;&#xA;}&#xD;&#xA;removeModifier( org.emftext.language.java.modifiers.Private .class);&#xD;&#xA;removeModifier( org.emftext.language.java.modifiers.Public .class);&#xD;&#xA;getAnnotationsAndModifiers().add( org.emftext.language.java.modifiers.ModifiersFactory.eINSTANCE.createProtected() );&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Sets the visibility of this element to &lt;code>protected&lt;/code>.&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getModifiers" upperBound="-1" eType="#_Wo2Ys9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.modifiers.AnnotationInstanceOrModifier >elements = getAnnotationsAndModifiers();&#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.modifiers.Modifier >modifiers = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.modifiers.Modifier >();&#xD;&#xA;for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier next:elements) {&#xD;&#xA;&#x9;if (next instanceof org.emftext.language.java.modifiers.Modifier ) {&#xD;&#xA;&#x9;&#x9;modifiers.add(( org.emftext.language.java.modifiers.Modifier ) next);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return org.eclipse.emf.common.util.ECollections .unmodifiableEList(modifiers);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns an unmodifiable list of the modifiers that apply to this element.&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="removeAllModifiers">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.util.List &lt; org.emftext.language.java.modifiers.Modifier >modifiers = getModifiers();&#xD;&#xA;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.modifiers.AnnotationInstanceOrModifier >elements = getAnnotationsAndModifiers();&#xD;&#xA;elements.removeAll(modifiers);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Removes all modifiers from this element.&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="hasModifier" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="java.util.List &lt; org.emftext.language.java.modifiers.AnnotationInstanceOrModifier >modifiers = getAnnotationsAndModifiers();&#xD;&#xA;for ( org.emftext.language.java.modifiers.AnnotationInstanceOrModifier modifier:modifiers) {&#xD;&#xA;&#x9;if (type.isInstance(modifier)) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return false;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Checks whether this element has an modifier of the given type.&#xA;"/>
        </eAnnotations>
        <eParameters name="type">
          <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaClass">
            <eTypeArguments/>
          </eGenericType>
        </eParameters>
      </eOperations>
      <eOperations name="isPublic" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return hasModifier( org.emftext.language.java.modifiers.Public .class);&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isPrivate" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return hasModifier( org.emftext.language.java.modifiers.Private .class);&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="isProtected" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return hasModifier( org.emftext.language.java.modifiers.Protected .class);&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="annotationsAndModifiers"
          upperBound="-1" eType="#//modifiers/AnnotationInstanceOrModifier" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Modifiable" abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="modifiers" upperBound="-1"
          eType="#_Wo2Ys9z1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yt9z1Ed2bJ_pQViWxFg" name="Abstract"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yvdz1Ed2bJ_pQViWxFg" name="Final"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Ywdz1Ed2bJ_pQViWxFg" name="Native"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yudz1Ed2bJ_pQViWxFg" name="Protected"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Ytdz1Ed2bJ_pQViWxFg" name="Public"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yu9z1Ed2bJ_pQViWxFg" name="Private"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yv9z1Ed2bJ_pQViWxFg" name="Static"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yydz1Ed2bJ_pQViWxFg" name="Strictfp"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yw9z1Ed2bJ_pQViWxFg" name="Synchronized"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yxdz1Ed2bJ_pQViWxFg" name="Transient"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yx9z1Ed2bJ_pQViWxFg" name="Volatile"
        eSuperTypes="#_Wo2Ys9z1Ed2bJ_pQViWxFg"/>
  </eSubpackages>
  <eSubpackages name="operators" nsURI="http://www.emftext.org/java/operators" nsPrefix="operators">
    <eClassifiers xsi:type="ecore:EClass" name="Operator" abstract="true" eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" name="AdditiveOperator" abstract="true"
        eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentOperator" abstract="true"
        eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="EqualityOperator" abstract="true"
        eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="MultiplicativeOperator" abstract="true"
        eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="RelationOperator" abstract="true"
        eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="ShiftOperator" abstract="true" eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnaryOperator" abstract="true" eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnaryModificationOperator" abstract="true"
        eSuperTypes="#//operators/Operator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Assignment" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentAnd" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentDivision" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentExclusiveOr" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentMinus" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentModulo" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentMultiplication" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentLeftShift" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentOr" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentPlus" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentRightShift" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="AssignmentUnsignedRightShift" eSuperTypes="#//operators/AssignmentOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Equal" eSuperTypes="#//operators/EqualityOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="NotEqual" eSuperTypes="#//operators/EqualityOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="GreaterThan" eSuperTypes="#//operators/RelationOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="GreaterThanOrEqual" eSuperTypes="#//operators/RelationOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="LessThan" eSuperTypes="#//operators/RelationOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="LessThanOrEqual" eSuperTypes="#//operators/RelationOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Addition" eSuperTypes="#//operators/AdditiveOperator #//operators/UnaryOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Subtraction" eSuperTypes="#//operators/AdditiveOperator #//operators/UnaryOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Division" eSuperTypes="#//operators/MultiplicativeOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Multiplication" eSuperTypes="#//operators/MultiplicativeOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Remainder" eSuperTypes="#//operators/MultiplicativeOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Complement" eSuperTypes="#//operators/UnaryOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="MinusMinus" eSuperTypes="#//operators/UnaryModificationOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="Negate" eSuperTypes="#//operators/UnaryOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="PlusPlus" eSuperTypes="#//operators/UnaryModificationOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="LeftShift" eSuperTypes="#//operators/ShiftOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="RightShift" eSuperTypes="#//operators/ShiftOperator"/>
    <eClassifiers xsi:type="ecore:EClass" name="UnsignedRightShift" eSuperTypes="#//operators/ShiftOperator"/>
  </eSubpackages>
  <eSubpackages name="parameters" nsURI="http://www.emftext.org/java/parameters" nsPrefix="parameters">
    <eClassifiers xsi:type="ecore:EClass" name="Parameter" abstract="true" eSuperTypes="#//variables/Variable #//modifiers/AnnotableAndModifiable"/>
    <eClassifiers xsi:type="ecore:EClass" name="Parametrizable" abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
          eType="#//parameters/Parameter" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="OrdinaryParameter" eSuperTypes="#//parameters/Parameter"/>
    <eClassifiers xsi:type="ecore:EClass" name="VariableLengthParameter" eSuperTypes="#//parameters/Parameter"/>
  </eSubpackages>
  <eSubpackages name="references" nsURI="http://www.emftext.org/java/references" nsPrefix="references">
    <eClassifiers xsi:type="ecore:EClass" name="Reference" abstract="true" eSuperTypes="#//expressions/PrimaryExpression #//generics/TypeArgumentable">
      <eOperations name="getReferencedType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (this instanceof org.emftext.language.java.literals.Literal ) {&#xD;&#xA;&#x9;return(( org.emftext.language.java.literals.Literal ) this).getType();&#xD;&#xA;}&#xD;&#xA;org.emftext.language.java.types.Type type = null;&#xD;&#xA;if (this instanceof org.emftext.language.java.types.TypedElement ) {&#xD;&#xA;&#x9;org.emftext.language.java.types.TypeReference typeRef = (( org.emftext.language.java.types.TypedElement ) this).getTypeReference();&#xD;&#xA;&#x9;type = typeRef.getBoundTarget(this);&#xD;&#xA;}else if (this instanceof org.emftext.language.java.references.SelfReference ) {&#xD;&#xA;&#x9;org.emftext.language.java.types.Type thisClass = null;&#xD;&#xA;&#x9;if (this.getPrevious() != null) {&#xD;&#xA;&#x9;&#x9;thisClass = this.getPrevious().getReferencedType();&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.classifiers.AnonymousClass anonymousContainer = getContainingAnonymousClass();&#xD;&#xA;&#x9;&#x9;if (anonymousContainer != null) {&#xD;&#xA;&#x9;&#x9;&#x9;thisClass = anonymousContainer;&#xD;&#xA;&#x9;&#x9;}else {&#xD;&#xA;&#x9;&#x9;&#x9;thisClass = getContainingConcreteClassifier();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ((( org.emftext.language.java.references.SelfReference ) this).getSelf()instanceof org.emftext.language.java.literals.Super ) {&#xD;&#xA;&#x9;&#x9;if (thisClass instanceof org.emftext.language.java.classifiers.Class ) {&#xD;&#xA;&#x9;&#x9;&#x9;return(( org.emftext.language.java.classifiers.Class ) thisClass).getSuperClass();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (thisClass instanceof org.emftext.language.java.classifiers.AnonymousClass ) {&#xD;&#xA;&#x9;&#x9;&#x9;return(( org.emftext.language.java.classifiers.AnonymousClass ) thisClass).getSuperClassifier();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return thisClass;&#xD;&#xA;}else if (this instanceof org.emftext.language.java.references.ReflectiveClassReference ) {&#xD;&#xA;&#x9;return getClassClass();&#xD;&#xA;}else if (this instanceof org.emftext.language.java.references.ElementReference ) {&#xD;&#xA;&#x9;org.emftext.language.java.references.ReferenceableElement target = ( org.emftext.language.java.references.ReferenceableElement ) (( org.emftext.language.java.references.ElementReference ) this).getTarget();&#xD;&#xA;&#x9;if (target.eIsProxy()) {&#xD;&#xA;&#x9;&#x9;type = null;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (target instanceof org.emftext.language.java.variables.AdditionalLocalVariable ) {&#xD;&#xA;&#x9;&#x9;target = ( org.emftext.language.java.references.ReferenceableElement ) target.eContainer();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (target instanceof org.emftext.language.java.members.AdditionalField ) {&#xD;&#xA;&#x9;&#x9;target = ( org.emftext.language.java.references.ReferenceableElement ) target.eContainer();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (target instanceof org.emftext.language.java.types.TypedElement ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.types.TypeReference typeRef = (( org.emftext.language.java.types.TypedElement ) target).getTypeReference();&#xD;&#xA;&#x9;&#x9;if (typeRef != null) {&#xD;&#xA;&#x9;&#x9;&#x9;type = typeRef.getBoundTarget(this);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}else if (target instanceof org.emftext.language.java.types.Type ) {&#xD;&#xA;&#x9;&#x9;return( org.emftext.language.java.types.Type ) target;&#xD;&#xA;&#x9;}else if (target instanceof org.emftext.language.java.members.EnumConstant ) {&#xD;&#xA;&#x9;&#x9;type = ( org.emftext.language.java.classifiers.Enumeration ) target.eContainer();&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (this instanceof org.emftext.language.java.references.StringReference ) {&#xD;&#xA;&#x9;return getStringClass();&#xD;&#xA;}else if (this instanceof org.emftext.language.java.expressions.NestedExpression ) {&#xD;&#xA;&#x9;type = (( org.emftext.language.java.expressions.NestedExpression ) this).getExpression().getType();&#xD;&#xA;}else if (this instanceof org.emftext.language.java.references.PrimitiveTypeReference ) {&#xD;&#xA;&#x9;type = (( org.emftext.language.java.references.PrimitiveTypeReference ) this).getPrimitiveType();&#xD;&#xA;}else {&#xD;&#xA;&#x9;assert(false);&#xD;&#xA;}&#xD;&#xA;return type;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Determines the &lt;code>Type&lt;/code> of the reference. That is,&#xA; either the type to which the reference points directly, or the&#xA; type of the element to which the reference points.&#xA; &#xA; @return the determined type&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getPrevious" eType="#//references/Reference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (eContainer()instanceof org.emftext.language.java.references.Reference ) {&#xD;&#xA;&#x9;org.emftext.language.java.references.Reference container = ( org.emftext.language.java.references.Reference ) eContainer();&#xD;&#xA;&#x9;if (this.equals(container.getNext())) {&#xD;&#xA;&#x9;&#x9;return container;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return null;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="next" eType="#//references/Reference"
          containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" name="arraySelectors" upperBound="-1"
          eType="#//arrays/ArraySelector" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Argumentable" abstract="true" eSuperTypes="#//commons/Commentable">
      <eOperations name="getArgumentTypes" upperBound="-1" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.Type >resultList = new org.eclipse.emf.common.util.BasicEList &lt; org.emftext.language.java.types.Type >();&#xD;&#xA;for ( org.emftext.language.java.expressions.Expression exp:getArguments()) {&#xD;&#xA;&#x9;org.emftext.language.java.types.Type type = exp.getType();&#xD;&#xA;&#x9;resultList.add(type);&#xD;&#xA;}&#xD;&#xA;return resultList;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return list of types of my arguments&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="arguments" upperBound="-1"
          eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ReferenceableElement" abstract="true"
        eSuperTypes="#//commons/NamedElement"/>
    <eClassifiers xsi:type="ecore:EClass" name="ElementReference" abstract="true"
        eSuperTypes="#//references/Reference">
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//references/ReferenceableElement"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="IdentifierReference" eSuperTypes="#//references/ElementReference"/>
    <eClassifiers xsi:type="ecore:EClass" name="MethodCall" eSuperTypes="#//references/ElementReference #//references/Argumentable #//generics/CallTypeArgumentable"/>
    <eClassifiers xsi:type="ecore:EClass" name="ReflectiveClassReference" eSuperTypes="#//references/Reference"/>
    <eClassifiers xsi:type="ecore:EClass" name="PrimitiveTypeReference" eSuperTypes="#//references/Reference">
      <eStructuralFeatures xsi:type="ecore:EReference" name="primitiveType" lowerBound="1"
          eType="#_Wo2ZR9z1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="StringReference" eSuperTypes="#//references/Reference">
      <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1"
          eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="SelfReference" eSuperTypes="#//references/Reference">
      <eStructuralFeatures xsi:type="ecore:EReference" name="self" lowerBound="1"
          eType="#//literals/Self" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="PackageReference" eSuperTypes="#//references/ReferenceableElement">
      <eStructuralFeatures xsi:type="ecore:EReference" name="subpackages" upperBound="-1"
          eType="#//references/PackageReference" containment="true"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages xmi:id="_Wo2Yy9z1Ed2bJ_pQViWxFg" name="statements" nsURI="http://www.emftext.org/java/statements"
      nsPrefix="statements">
    <eClassifiers xsi:type="ecore:EClass" name="StatementContainer" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="statement" lowerBound="1"
          eType="#_Wo2YzNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="StatementListContainer" abstract="true"
        eSuperTypes="#//commons/Commentable">
      <eOperations name="getLocalVariable" lowerBound="1" eType="#//variables/LocalVariable">
        <eParameters name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eOperations>
      <eStructuralFeatures xsi:type="ecore:EReference" name="statements" upperBound="-1"
          eType="#_Wo2YzNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Conditional" abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y9tz1Ed2bJ_pQViWxFg" name="ForLoopInitializer"
        abstract="true" eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2YzNz1Ed2bJ_pQViWxFg" name="Statement"
        abstract="true" eSuperTypes="#//commons/Commentable"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y4tz1Ed2bJ_pQViWxFg" name="SwitchCase"
        abstract="true" eSuperTypes="#//statements/StatementListContainer"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Yztz1Ed2bJ_pQViWxFg" name="Assert"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/Conditional">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y0tz1Ed2bJ_pQViWxFg"
          name="errorMessage" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZI9z1Ed2bJ_pQViWxFg" name="Break"
        eSuperTypes="#//statements/Jump"/>
    <eClassifiers xsi:type="ecore:EClass" name="Block" eSuperTypes="#//members/Member #_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementListContainer #//modifiers/Modifiable"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZD9z1Ed2bJ_pQViWxFg" name="CatchBlock"
        eSuperTypes="#//statements/StatementListContainer">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZEdz1Ed2bJ_pQViWxFg"
          name="parameter" lowerBound="1" eType="#//parameters/OrdinaryParameter"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y1Nz1Ed2bJ_pQViWxFg" name="Condition"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementContainer #//statements/Conditional">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y2tz1Ed2bJ_pQViWxFg"
          name="elseStatement" eType="#_Wo2YzNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZJ9z1Ed2bJ_pQViWxFg" name="Continue"
        eSuperTypes="#//statements/Jump"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y69z1Ed2bJ_pQViWxFg" name="DefaultSwitchCase"
        eSuperTypes="#_Wo2Y4tz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZBtz1Ed2bJ_pQViWxFg" name="DoWhileLoop"
        eSuperTypes="#_Wo2ZANz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZK9z1Ed2bJ_pQViWxFg" name="EmptyStatement"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZMtz1Ed2bJ_pQViWxFg" name="ExpressionStatement"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZNNz1Ed2bJ_pQViWxFg"
          name="expression" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y7dz1Ed2bJ_pQViWxFg" name="ForLoop"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementContainer #//statements/Conditional">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y79z1Ed2bJ_pQViWxFg"
          name="init" eType="#_Wo2Y9tz1Ed2bJ_pQViWxFg" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y8tz1Ed2bJ_pQViWxFg"
          name="updates" upperBound="-1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y-Nz1Ed2bJ_pQViWxFg" name="ForEachLoop"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementContainer">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y-tz1Ed2bJ_pQViWxFg"
          name="next" lowerBound="1" eType="#//parameters/OrdinaryParameter" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y_Nz1Ed2bJ_pQViWxFg"
          name="collection" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="Jump" abstract="true" eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="#_Wo2ZLdz1Ed2bJ_pQViWxFg"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZLdz1Ed2bJ_pQViWxFg" name="JumpLabel"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementContainer #//commons/NamedElement"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZNtz1Ed2bJ_pQViWxFg" name="LocalVariableStatement"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZONz1Ed2bJ_pQViWxFg"
          name="variable" lowerBound="1" eType="#//variables/LocalVariable" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y6dz1Ed2bJ_pQViWxFg" name="NormalSwitchCase"
        eSuperTypes="#_Wo2Y4tz1Ed2bJ_pQViWxFg #//statements/Conditional"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZG9z1Ed2bJ_pQViWxFg" name="Return"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZHdz1Ed2bJ_pQViWxFg"
          name="returnValue" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2Y3Nz1Ed2bJ_pQViWxFg" name="Switch"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y3tz1Ed2bJ_pQViWxFg"
          name="cases" upperBound="-1" eType="#_Wo2Y4tz1Ed2bJ_pQViWxFg" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2Y4Nz1Ed2bJ_pQViWxFg"
          name="variable" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZFdz1Ed2bJ_pQViWxFg" name="SynchronizedBlock"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementListContainer">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZF9z1Ed2bJ_pQViWxFg"
          name="lockProvider" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZH9z1Ed2bJ_pQViWxFg" name="Throw"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZIdz1Ed2bJ_pQViWxFg"
          name="throwable" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZCNz1Ed2bJ_pQViWxFg" name="TryBlock"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementListContainer">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZDtz1Ed2bJ_pQViWxFg"
          name="catcheBlocks" upperBound="-1" eType="#_Wo2ZD9z1Ed2bJ_pQViWxFg" containment="true"/>
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZDNz1Ed2bJ_pQViWxFg"
          name="finallyBlock" eType="#//statements/Block" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZANz1Ed2bJ_pQViWxFg" name="WhileLoop"
        eSuperTypes="#_Wo2YzNz1Ed2bJ_pQViWxFg #//statements/StatementContainer">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZAtz1Ed2bJ_pQViWxFg"
          name="condition" lowerBound="1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
  </eSubpackages>
  <eSubpackages xmi:id="_Wo2ZOtz1Ed2bJ_pQViWxFg" name="types" nsURI="http://www.emftext.org/java/types"
      nsPrefix="types">
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZO9z1Ed2bJ_pQViWxFg" name="Type"
        abstract="true" eSuperTypes="#//commons/Commentable">
      <eOperations name="equalsType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.types.Type _this = this;&#xD;&#xA;if (_this instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;org.emftext.language.java.generics.TypeParameter typeParameter = ( org.emftext.language.java.generics.TypeParameter ) _this;&#xD;&#xA;&#x9;for ( org.emftext.language.java.types.TypeReference referencedType:typeParameter.getExtendTypes()) {&#xD;&#xA;&#x9;&#x9;if (referencedType.getTarget() != null&amp;&amp;!referencedType.getTarget().eIsProxy()&amp;&amp;referencedType.getTarget().equalsType(arrayDimension,otherType,otherArrayDimension)) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (typeParameter.getExtendTypes().isEmpty()) {&#xD;&#xA;&#x9;&#x9;if (getObjectClass().equalsType(arrayDimension,otherType,otherArrayDimension)) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (otherType instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;org.emftext.language.java.generics.TypeParameter typeParameter = ( org.emftext.language.java.generics.TypeParameter ) otherType;&#xD;&#xA;&#x9;for ( org.emftext.language.java.types.TypeReference referencedType:typeParameter.getExtendTypes()) {&#xD;&#xA;&#x9;&#x9;if (referencedType.getTarget() != null&amp;&amp;!referencedType.getTarget().eIsProxy()&amp;&amp;equalsType(arrayDimension,referencedType.getTarget(),otherArrayDimension)) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (typeParameter.getExtendTypes().isEmpty()) {&#xD;&#xA;&#x9;&#x9;if (equalsType(arrayDimension,getObjectClass(),otherArrayDimension)) {&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.types.PrimitiveType ) {&#xD;&#xA;&#x9;_this = (( org.emftext.language.java.types.PrimitiveType ) _this).wrapPrimitiveType();&#xD;&#xA;}&#xD;&#xA;if (otherType instanceof org.emftext.language.java.types.PrimitiveType ) {&#xD;&#xA;&#x9;otherType = (( org.emftext.language.java.types.PrimitiveType ) otherType).wrapPrimitiveType();&#xD;&#xA;}&#xD;&#xA;if (arrayDimension == otherArrayDimension&amp;&amp;otherType instanceof org.emftext.language.java.classifiers.Classifier &amp;&amp;_this instanceof org.emftext.language.java.classifiers.Classifier &amp;&amp;(otherType.equals(_this))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;return false;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param arrayDimension&#xA; @param otherType&#xA; @param otherArrayDimension&#xA; @return if both type are equal&#xA;"/>
        </eAnnotations>
        <eParameters name="arrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"/>
        <eParameters name="otherType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg"/>
        <eParameters name="otherArrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"/>
      </eOperations>
      <eOperations name="isSuperType" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="if (otherType == null) {&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;org.emftext.language.java.types.Type _this = this;&#xD;&#xA;if (_this instanceof org.emftext.language.java.util.TemporalCompositeClassifier ||otherType instanceof org.emftext.language.java.util.TemporalCompositeClassifier ) {&#xD;&#xA;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.Type >_thisTypeList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.types.Type >();&#xD;&#xA;&#x9;org.eclipse.emf.common.util.EList &lt; org.emftext.language.java.types.Type >otherTypeList = new org.emftext.language.java.util.UniqueEList &lt; org.emftext.language.java.types.Type >();&#xD;&#xA;&#x9;if (_this instanceof org.emftext.language.java.util.TemporalCompositeClassifier ) {&#xD;&#xA;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType:(( org.emftext.language.java.util.TemporalCompositeClassifier ) _this).getSuperTypes()) {&#xD;&#xA;&#x9;&#x9;&#x9;_thisTypeList.add(( org.emftext.language.java.types.Type ) aType);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;_thisTypeList.add(_this);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (otherType instanceof org.emftext.language.java.util.TemporalCompositeClassifier ) {&#xD;&#xA;&#x9;&#x9;for ( org.eclipse.emf.ecore.EObject aType:(( org.emftext.language.java.util.TemporalCompositeClassifier ) otherType).getSuperTypes()) {&#xD;&#xA;&#x9;&#x9;&#x9;otherTypeList.add(( org.emftext.language.java.types.Type ) aType);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;otherTypeList.add(_this);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;for ( org.emftext.language.java.types.Type one_thisType:_thisTypeList) {&#xD;&#xA;&#x9;&#x9;for ( org.emftext.language.java.types.Type oneOtherType:otherTypeList) {&#xD;&#xA;&#x9;&#x9;&#x9;boolean result = one_thisType.isSuperType(arrayDimension,oneOtherType,otherArrayType);&#xD;&#xA;&#x9;&#x9;&#x9;if (result) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;if (_this.equals(getLibClass(&quot;Void&quot;))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;if (otherType.equals(getObjectClass())) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;org.emftext.language.java.classifiers.ConcreteClassifier serializableClass = ( org.emftext.language.java.classifiers.ConcreteClassifier ) org.eclipse.emf.ecore.util.EcoreUtil .resolve(getConcreteClassifierProxy(&quot;java.io.Serializable&quot;),_this);&#xD;&#xA;if (otherType.equals(serializableClass)) {&#xD;&#xA;&#x9;if (_this.equals(serializableClass)) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}else if (_this.equals(getStringClass())) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}else if (_this instanceof org.emftext.language.java.types.PrimitiveType ) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}else if (arrayDimension > 0) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;if (otherType instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;boolean isTypeParameter = false;&#xD;&#xA;if (otherArrayType instanceof org.emftext.language.java.types.TypedElement ) {&#xD;&#xA;&#x9;org.emftext.language.java.types.Type type = (( org.emftext.language.java.types.TypedElement ) otherArrayType).getTypeReference().getTarget();&#xD;&#xA;&#x9;isTypeParameter = type instanceof org.emftext.language.java.generics.TypeParameter ;&#xD;&#xA;}&#xD;&#xA;boolean isVariableLengthParameter = otherArrayType instanceof org.emftext.language.java.parameters.VariableLengthParameter ;&#xD;&#xA;long otherArrayDim = 0;&#xD;&#xA;if (otherArrayType != null) {&#xD;&#xA;&#x9;otherArrayDim = otherArrayType.getArrayDimension();&#xD;&#xA;}&#xD;&#xA;if (isTypeParameter&amp;&amp;isVariableLengthParameter) {&#xD;&#xA;&#x9;if (arrayDimension != otherArrayDim&amp;&amp;arrayDimension != otherArrayDim - 1&amp;&amp;arrayDimension &lt; otherArrayDim) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (isTypeParameter) {&#xD;&#xA;&#x9;if (arrayDimension &lt; otherArrayDim) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (isVariableLengthParameter) {&#xD;&#xA;&#x9;if (arrayDimension != otherArrayDim&amp;&amp;arrayDimension != otherArrayDim - 1) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}else {&#xD;&#xA;&#x9;if (arrayDimension != otherArrayDim) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.classifiers.Annotation &amp;&amp;(otherType.equals(getAnnotationInterface())||(( org.emftext.language.java.classifiers.ConcreteClassifier ) _this).getAllSuperClassifiers().contains(getAnnotationInterface()))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.types.PrimitiveType ) {&#xD;&#xA;&#x9;_this = (( org.emftext.language.java.types.PrimitiveType ) _this).wrapPrimitiveType();&#xD;&#xA;}&#xD;&#xA;if (otherType instanceof org.emftext.language.java.types.PrimitiveType ) {&#xD;&#xA;&#x9;otherType = (( org.emftext.language.java.types.PrimitiveType ) otherType).wrapPrimitiveType();&#xD;&#xA;}&#xD;&#xA;if (otherType instanceof org.emftext.language.java.classifiers.ConcreteClassifier &amp;&amp;_this instanceof org.emftext.language.java.classifiers.ConcreteClassifier &amp;&amp;(otherType.equals(_this)||(( org.emftext.language.java.classifiers.ConcreteClassifier ) _this).getAllSuperClassifiers().contains(otherType))) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;if (otherType instanceof org.emftext.language.java.classifiers.ConcreteClassifier &amp;&amp;_this instanceof org.emftext.language.java.classifiers.AnonymousClass &amp;&amp;(( org.emftext.language.java.classifiers.AnonymousClass ) _this).getAllSuperClassifiers().contains(otherType)) {&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;org.emftext.language.java.classifiers.Interface charSequenceClass = getLibInterface(&quot;CharSequence&quot;);&#xD;&#xA;if (otherType instanceof org.emftext.language.java.classifiers.ConcreteClassifier ) {&#xD;&#xA;&#x9;if (otherType.equals(charSequenceClass)||(( org.emftext.language.java.classifiers.ConcreteClassifier ) otherType).getAllSuperClassifiers().contains(charSequenceClass)) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (otherType instanceof org.emftext.language.java.classifiers.Class ) {&#xD;&#xA;&#x9;org.emftext.language.java.types.PrimitiveType primitiveType = (( org.emftext.language.java.classifiers.Class ) otherType).unWrapPrimitiveType();&#xD;&#xA;&#x9;if (primitiveType == null) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;otherType = primitiveType;&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.classifiers.Class ) {&#xD;&#xA;&#x9;org.emftext.language.java.types.PrimitiveType primitiveType = (( org.emftext.language.java.classifiers.Class ) _this).unWrapPrimitiveType();&#xD;&#xA;&#x9;if (primitiveType == null) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;_this = primitiveType;&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.types.Boolean ) {&#xD;&#xA;&#x9;if (otherType instanceof org.emftext.language.java.types.Boolean ) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.types.Byte ||_this instanceof org.emftext.language.java.types.Int ||_this instanceof org.emftext.language.java.types.Short ||_this instanceof org.emftext.language.java.types.Long ||_this instanceof org.emftext.language.java.types.Char ) {&#xD;&#xA;&#x9;if (otherType instanceof org.emftext.language.java.types.Byte ||otherType instanceof org.emftext.language.java.types.Int ||otherType instanceof org.emftext.language.java.types.Short ||otherType instanceof org.emftext.language.java.types.Long ||otherType instanceof org.emftext.language.java.types.Char ||otherType instanceof org.emftext.language.java.types.Float ||otherType instanceof org.emftext.language.java.types.Double ) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (_this instanceof org.emftext.language.java.types.Float ||_this instanceof org.emftext.language.java.types.Double ) {&#xD;&#xA;&#x9;if (otherType instanceof org.emftext.language.java.types.Float ||otherType instanceof org.emftext.language.java.types.Double ) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}else {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return false;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param arrayDimension&#xA; @param otherType&#xA; @param otherArrayType&#xA; @return if the other type is equal to me or a super type of me&#xA;"/>
        </eAnnotations>
        <eParameters name="arrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"/>
        <eParameters name="otherType" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg"/>
        <eParameters name="otherArrayType" eType="#//arrays/ArrayTypeable"/>
      </eOperations>
      <eOperations name="getAllMembers" upperBound="-1" eType="#//members/Member">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="throw new java.lang.UnsupportedOperationException ();&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
        <eParameters name="context" eType="#//commons/Commentable"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZP9z1Ed2bJ_pQViWxFg" name="TypedElement"
        abstract="true" eSuperTypes="#//commons/Commentable">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZQdz1Ed2bJ_pQViWxFg"
          name="typeReference" lowerBound="1" eType="#_Wo2ZPdz1Ed2bJ_pQViWxFg" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZPdz1Ed2bJ_pQViWxFg" name="TypeReference"
        abstract="true" eSuperTypes="#//commons/Commentable">
      <eOperations name="getTarget" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="return getBoundTarget(null);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns the type referenced by this &lt;code>TypeReference&lt;/code>&#xA; considering all concrete subclasses of &lt;code>TypeReference&lt;/code> used&#xA; by the Java metamodel. &#xA; &#xA; @param _this &#xA; @return the type&#xA;"/>
        </eAnnotations>
      </eOperations>
      <eOperations name="getBoundTarget" eType="#_Wo2ZO9z1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.types.Type type = null;&#xD;&#xA;if (this instanceof org.emftext.language.java.types.ClassifierReference ||this instanceof org.emftext.language.java.types.NamespaceClassifierReference ) {&#xD;&#xA;&#x9;org.emftext.language.java.types.ClassifierReference classifierRef = getPureClassifierReference();&#xD;&#xA;&#x9;if (classifierRef != null) {&#xD;&#xA;&#x9;&#x9;type = classifierRef.getTarget();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (reference instanceof org.emftext.language.java.references.MethodCall ) {&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.references.MethodCall potentialCloneCall = ( org.emftext.language.java.references.MethodCall ) reference;&#xD;&#xA;&#x9;&#x9;org.emftext.language.java.references.ReferenceableElement potentialCloneCallTarget = potentialCloneCall.getTarget();&#xD;&#xA;&#x9;&#x9;if (potentialCloneCallTarget != null&amp;&amp;&quot;clone&quot;.equals(potentialCloneCallTarget.getName())) {&#xD;&#xA;&#x9;&#x9;&#x9;if (potentialCloneCall.getPrevious()instanceof org.emftext.language.java.references.ElementReference ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;org.emftext.language.java.references.ElementReference prevRef = ( org.emftext.language.java.references.ElementReference ) potentialCloneCall.getPrevious();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (prevRef.getTarget()instanceof org.emftext.language.java.arrays.ArrayTypeable &amp;&amp;(( org.emftext.language.java.arrays.ArrayTypeable ) prevRef.getTarget()).getArrayDimension() > 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;type = prevRef.getReferencedType();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}else if (this instanceof org.emftext.language.java.types.PrimitiveType ) {&#xD;&#xA;&#x9;return( org.emftext.language.java.types.PrimitiveType ) this;&#xD;&#xA;}&#xD;&#xA;if (type instanceof org.emftext.language.java.generics.TypeParameter ) {&#xD;&#xA;&#x9;type = (( org.emftext.language.java.generics.TypeParameter ) type).getBoundType(this,reference);&#xD;&#xA;}&#xD;&#xA;if (type != null&amp;&amp;type.eIsProxy()) {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;return type;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Returns the type referenced by this &lt;code>TypeReference&lt;/code>&#xA; considering all concrete subclasses of &lt;code>TypeReference&lt;/code> used&#xA; by the Java metamodel. If type parameters are bound in the given reference,&#xA; the bound type will be returned instead of the parameter.&#xA; &#xA; @return the type&#xA;"/>
        </eAnnotations>
        <eParameters name="reference" eType="#//references/Reference"/>
      </eOperations>
      <eOperations name="getPureClassifierReference" eType="#//types/ClassifierReference">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.types.ClassifierReference classifierReference = null;&#xD;&#xA;if (this instanceof org.emftext.language.java.types.ClassifierReference ) {&#xD;&#xA;&#x9;classifierReference = ( org.emftext.language.java.types.ClassifierReference ) this;&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.NamespaceClassifierReference ) {&#xD;&#xA;&#x9;org.emftext.language.java.types.NamespaceClassifierReference nsClassifierReference = ( org.emftext.language.java.types.NamespaceClassifierReference ) this;&#xD;&#xA;&#x9;if (!nsClassifierReference.getClassifierReferences().isEmpty()) {&#xD;&#xA;&#x9;&#x9;int lastIndex = nsClassifierReference.getClassifierReferences().size() - 1;&#xD;&#xA;&#x9;&#x9;classifierReference = nsClassifierReference.getClassifierReferences().get(lastIndex);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return classifierReference;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Extracts the (possibly nested) classifier reference (if any) &#xA; from this type references.&#xA; &#xA; @return&#xA;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ClassifierReference" eSuperTypes="#_Wo2ZPdz1Ed2bJ_pQViWxFg #//generics/TypeArgumentable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
          eType="#//classifiers/Classifier"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZQ9z1Ed2bJ_pQViWxFg" name="NamespaceClassifierReference"
        eSuperTypes="#_Wo2ZPdz1Ed2bJ_pQViWxFg #//commons/NamespaceAwareElement">
      <eStructuralFeatures xsi:type="ecore:EReference" xmi:id="_Wo2ZRdz1Ed2bJ_pQViWxFg"
          name="classifierReferences" lowerBound="1" upperBound="-1" eType="#//types/ClassifierReference"
          containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZR9z1Ed2bJ_pQViWxFg" name="PrimitiveType"
        abstract="true" eSuperTypes="#_Wo2ZO9z1Ed2bJ_pQViWxFg #_Wo2ZPdz1Ed2bJ_pQViWxFg">
      <eOperations name="getAllMembers" upperBound="-1" eType="#//members/Member">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.Class javaClass = wrapPrimitiveType();&#xD;&#xA;return javaClass.getAllMembers(context);&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @param context to check protected visibility&#xA; @return all members (including super type members)&#xA;"/>
        </eAnnotations>
        <eParameters name="context" eType="#//commons/Commentable"/>
      </eOperations>
      <eOperations name="wrapPrimitiveType" eType="#//classifiers/Class">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.classifiers.Class javaClass = null;&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Boolean ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Boolean&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Byte ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Byte&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Char ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Character&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Double ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Double&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Float ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Float&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Int ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Integer&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Long ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Long&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Short ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Short&quot;);&#xD;&#xA;}&#xD;&#xA;if (this instanceof org.emftext.language.java.types.Void ) {&#xD;&#xA;&#x9;javaClass = getLibClass(&quot;Void&quot;);&#xD;&#xA;}&#xD;&#xA;return javaClass;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; @return primitive type as a class representation&#xA;"/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZS9z1Ed2bJ_pQViWxFg" name="Boolean"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZT9z1Ed2bJ_pQViWxFg" name="Byte"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZTdz1Ed2bJ_pQViWxFg" name="Char"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZWdz1Ed2bJ_pQViWxFg" name="Double"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZV9z1Ed2bJ_pQViWxFg" name="Float"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZU9z1Ed2bJ_pQViWxFg" name="Int"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZVdz1Ed2bJ_pQViWxFg" name="Long"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" xmi:id="_Wo2ZUdz1Ed2bJ_pQViWxFg" name="Short"
        eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
    <eClassifiers xsi:type="ecore:EClass" name="Void" eSuperTypes="#_Wo2ZR9z1Ed2bJ_pQViWxFg"/>
  </eSubpackages>
  <eSubpackages name="variables" nsURI="http://www.emftext.org/java/variables" nsPrefix="variables">
    <eClassifiers xsi:type="ecore:EClass" name="Variable" abstract="true" eSuperTypes="#//commons/NamedElement #_Wo2ZP9z1Ed2bJ_pQViWxFg #//arrays/ArrayTypeable #//references/ReferenceableElement #//generics/TypeArgumentable">
      <eOperations name="getArrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();&#xD;&#xA;if (this instanceof org.emftext.language.java.parameters.VariableLengthParameter ) {&#xD;&#xA;&#x9;size++;&#xD;&#xA;}&#xD;&#xA;return size;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
      <eOperations name="createMethodCallStatement" eType="#_Wo2YzNz1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.statements.ExpressionStatement callStatement = org.emftext.language.java.statements.StatementsFactory.eINSTANCE.createExpressionStatement() ;&#xD;&#xA;callStatement.setExpression(createMethodCall(methodName,arguments));&#xD;&#xA;return callStatement;&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Creates a statement that calls the method with the given name on this&#xA; variable. If the variable's type does not offer such a method, null is&#xA; returned.&#xA;"/>
        </eAnnotations>
        <eParameters name="methodName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eParameters name="arguments" upperBound="-1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg"/>
      </eOperations>
      <eOperations name="createMethodCall" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="org.emftext.language.java.references.IdentifierReference thisRef = org.emftext.language.java.references.ReferencesFactory.eINSTANCE.createIdentifierReference() ;&#xD;&#xA;thisRef.setTarget(this);&#xD;&#xA;org.emftext.language.java.references.MethodCall methodCall = org.emftext.language.java.references.ReferencesFactory.eINSTANCE.createMethodCall() ;&#xD;&#xA;org.emftext.language.java.types.Type thisType = getTypeReference().getTarget();&#xD;&#xA;if (thisType instanceof org.emftext.language.java.members.MemberContainer ) {&#xD;&#xA;&#x9;org.emftext.language.java.members.MemberContainer castedType = ( org.emftext.language.java.members.MemberContainer ) thisType;&#xD;&#xA;&#x9;org.emftext.language.java.members.Method method = castedType.getContainedMethod(methodName);&#xD;&#xA;&#x9;if (method == null) {&#xD;&#xA;&#x9;&#x9;return null;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;methodCall.setTarget(method);&#xD;&#xA;&#x9;methodCall.getArguments().addAll(arguments);&#xD;&#xA;&#x9;thisRef.setNext(methodCall);&#xD;&#xA;&#x9;return thisRef;&#xD;&#xA;}else {&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;"/>
          <details key="documentation" value="&#xA; Creates an expression that calls the method with the given name on this&#xA; variable. If the variable's type does not offer such a method, null is&#xA; returned.&#xA;"/>
        </eAnnotations>
        <eParameters name="methodName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eParameters name="arguments" upperBound="-1" eType="#_Wo2YDNz1Ed2bJ_pQViWxFg"/>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="LocalVariable" eSuperTypes="#//variables/Variable #//instantiations/Initializable #_Wo2Y9tz1Ed2bJ_pQViWxFg #//modifiers/AnnotableAndModifiable">
      <eStructuralFeatures xsi:type="ecore:EReference" name="additionalLocalVariables"
          upperBound="-1" eType="#//variables/AdditionalLocalVariable" containment="true"/>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="AdditionalLocalVariable" eSuperTypes="#//references/ReferenceableElement #//arrays/ArrayTypeable #//instantiations/Initializable">
      <eOperations name="getArrayDimension" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="body" value="long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();&#xD;&#xA;return size;&#xD;&#xA;"/>
          <details key="documentation" value=""/>
        </eAnnotations>
      </eOperations>
    </eClassifiers>
  </eSubpackages>
</ecore:EPackage>
