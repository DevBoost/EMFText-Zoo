-- Anmerkung: 

-- quellmodell muss invasiv geÃ¤ndert werden, um korrektes Mapping zu realisieren
-- parameterTypes erfordenr wieder viele einzelne regeln :-(
-- wie genau mit statements umgehen das alle closures gefunden werden?

transformation copy(JAVA : java, CLOSURES : closures) {
	
	relation References_Argumentable {

		enforce domain JAVA s : java::references::Argumentable {
			arguments = s_a : java::instantiations::NewConstructorCall{}
		};

		enforce domain CLOSURES t : java::references::Argumentable {
			arguments = t_a : closures::Closure{}
		};
		where {
			Closures_Closure(s_a,t_a);
		}

	}

	relation Closures_Closure {

		methodName : String;
		statementElements : OrderedSet(java::statements::Statement);
		valueTypeElement : java::types::TypeReference;
		
		enforce domain JAVA s : java::instantiations::NewConstructorCall {
			anonymousClass = s_ac : java::classifiers::AnonymousClass {
				members = s_ac_m : java::members::ClassMethod {
					statements = statementElements,
					name = methodName,
					typeReference = valueTypeElement
					-- modifier
				}
			}
			-- typeReference
		};

		enforce domain CLOSURES t : closures::Closure {
			
			valueType = valueTypeElement,
			statements = statementElements,
			methodName = methodName
		--	parameterTypes = t_pt : java::types::TypeReference {}
		};
		when{
			if s.typeReference.oclIsUndefined()
					and
					s.anonymousClass.oclIsUndefined() then
				true
			else
				s_ac.members->size() = 1
				and
				s_ac.members->at(1).oclIsTypeOf(java::members::ClassMethod)
				and
				not s_ac.members->at(1).oclAsType(java::members::ClassMethod).typeReference.oclIsUndefined()
				and 
				not s_ac.members->at(1).oclAsType(java::members::ClassMethod).statements->isEmpty()
			endif; 
		}
		where{
			 AnnotableAndModifiable_Modifier_Private(s_ac_m,t) or 
			 AnnotableAndModifiable_Modifier_Public(s_ac_m,t) or
			 AnnotableAndModifiable_Modifier_Static(s_ac_m,t) or
			 AnnotableAndModifiable_Modifier_Final(s_ac_m,t) or
			 AnnotableAndModifiable_Modifier_Protected(s_ac_m,t)
			 or
			 TypedElement_TypeReference_NamespaceClassifierReference(s,t) or
			 TypedElement_TypeReference_Int(s,t) or
			 TypedElement_TypeReference_Void(s,t) or
			 TypedElement_TypeReference_Boolean(s,t) or
			 TypedElement_TypeReference_Byte(s,t) or
			 TypedElement_TypeReference_Double(s,t) or
			 TypedElement_TypeReference_Float(s,t) or
			 TypedElement_TypeReference_Long(s,t) or
			 TypedElement_TypeReference_Short(s,t) or
			 TypedElement_TypeReference_Char(s,t)
			 or
		--	 Parametrizable_Parameter(s_ac_m,t)
		--	 or
			 Closure_ParameterType_NamespaceClassifierReference(s_ac_m,t) or
			 Closure_ParameterType_Integer(s_ac_m,t) or
			 Closure_ParameterType_Long(s_ac_m,t) or
			 Closure_ParameterType_Double(s_ac_m,t) or
			 Closure_ParameterType_Short(s_ac_m,t) or
			 Closure_ParameterType_Float(s_ac_m,t) or
			 Closure_ParameterType_Boolean(s_ac_m,t) or
			 Closure_ParameterType_Char(s_ac_m,t) or
			 Closure_ParameterType_Byte(s_ac_m,t)
			 ;
			
		}
	}
	
	relation Closure_ParameterType_NamespaceClassifierReference {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::NamespaceClassifierReference {
					classifierReferences = s_p_tr_cr : java::types::ClassifierReference {
						target = targetElement
					}
				},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::NamespaceClassifierReference {
					classifierReferences = t_p_tr_cr : java::types::ClassifierReference {
						target = targetElement
					}
				},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::NamespaceClassifierReference {
				classifierReferences = t_pt_cr : java::types::ClassifierReference {
					target = targetElement
				}
			}
		};
	}
	
	relation Closure_ParameterType_Integer {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Int{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Int{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Int{}
		};
	}
	
	relation Closure_ParameterType_Boolean {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Boolean{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Boolean{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Boolean{}
		};
	}
	
	relation Closure_ParameterType_Float {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Float{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Float{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Float{}
		};
	}

	relation Closure_ParameterType_Long {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Long{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Long{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Long{}
		};
	}
	
	relation Closure_ParameterType_Byte {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Byte{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Byte{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Byte{}
		};
	}
	
	relation Closure_ParameterType_Double {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Double{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Double{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Double{}
		};
	}
	
	relation Closure_ParameterType_Char {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Char{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Char{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Char{}
		};
	}
	
	relation Closure_ParameterType_Short {

		targetElement : java::classifiers::Classifier;
		parameterName : String;
		
		enforce domain JAVA s : java::members::ClassMethod{
			parameters = s_p : java::parameters::OrdinaryParameter {
				typeReference = s_p_tr : java::types::Short{},
				name = parameterName
			}
		};
		enforce domain CLOSURES t : closures::Closure {
		
			parameters = t_p : java::parameters::OrdinaryParameter {
				typeReference = t_p_tr : java::types::Short{},
				name = parameterName
			},
			parameterTypes = t_pt : java::types::Short{}
		};
	}
	
	top relation CompilationUnit {
		
		varName : String;
		varNamespace : Sequence(String);
				
		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			name = varName,
			namespaces = varNamespace
		};
		
		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			name = varName,
			namespaces = varNamespace
		};
		where{
			CompilationUnit_Import(s_cu,t_cu) or
			CompilationUnit_Class(s_cu,t_cu)or
			CompilationUnit_Interface(s_cu,t_cu) or
			CompilationUnit_Annotation(s_cu,t_cu) or
			CompilationUnit_Enumeration(s_cu,t_cu);
		}
	}
	
	relation CompilationUnit_Class {

		varClassName : String;
					
		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Class {
				name = varClassName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Class  {
				name = varClassName
			}
		};
		where{
			-- is necessary to get a TRUE in this OCL constraint 
			Class_Extends_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Implementor_Implements_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Members_Constructor(s_cl,t_cl) or
			Members_EmptyMember(s_cl,t_cl) or
			Members_Field(s_cl,t_cl) or
			Members_ClassMethod(s_cl,t_cl) or
			Members_Class(s_cl,t_cl) or
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl);
		}

	}
	
	relation CompilationUnit_Interface {

		varInterfaceName : String;

		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Interface {
				name = varInterfaceName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Interface  {
				name = varInterfaceName
			}
		};
		where{
			Members_InterfaceMethod(s_cl,t_cl) or
			Members_Field(s_cl,t_cl) or
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl) or
			Interface_Extends_TypeReference_NamespaceClassifierReference(s_cl,t_cl);
		}
	}
	
	relation CompilationUnit_Annotation {

		varInterfaceName : String;

		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Annotation {
				name = varInterfaceName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Annotation  {
				name = varInterfaceName
			}
		};
		where{
			Members_AnnotationMethod(s_cl,t_cl) or
			Annotation_Attribute(s_cl,t_cl) or 
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl) or true;
		}
	}
	
	relation CompilationUnit_Enumeration {

		varInterfaceName : String;

		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			classifiers = s_cl : java::classifiers::Enumeration {
				name = varInterfaceName
			}
		};

		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			classifiers = t_cl : java::classifiers::Enumeration  {
				name = varInterfaceName
			}
		};
		where{
			Enumeration_Enum_Constant(s_cl,t_cl) or
			Implementor_Implements_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Members_InterfaceMethod(s_cl,t_cl) or
			AnnotableAndModifiable_Modifier_Public(s_cl,t_cl);
		}
	}
	
	relation CompilationUnit_Import {
		
		varImportName : String;
		varImportNamespace : Sequence(String);
				
		enforce domain JAVA s_cu : java::containers::CompilationUnit {
			
			imports = s_imp : java::imports::ClassifierImport  {
				namespaces = varImportNamespace,
				classifier = s_cl : java::classifiers::Class {
					name = varImportName
				}
			}
		};
		
		enforce domain CLOSURES t_cu : java::containers::CompilationUnit {
			
			imports = t_imp : java::imports::ClassifierImport  {
				namespaces = varImportNamespace,
				classifier = s_cl : java::classifiers::Class {
					name = varImportName
				}
			}
		};
	}
	
	relation Members_ClassMethod {

		varName : String;
		
		enforce domain JAVA s_c2 : java::classifiers::Class  {
			members =  s_cm : java::members::ClassMethod {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Class  {
			members = t_cm : java::members::ClassMethod {
				name = varName
			}
		};
		
		where{
			ArrayTypeable_ArrayDimension(s_cm,t_cm) 
			or
			Parametrizable_Parameter(s_cm,t_cm) 
			or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm) 
			or
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Protected(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Static(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Abstract(s_cm,t_cm)
			or
			Statements_StatementListContainer_NewConstructorCall(s_cm,t_cm) or
			Statements_StatementListContainer_MethodCall(s_cm,t_cm) or
			Statements_StatementListContainer_IdentifierReference(s_cm,t_cm) or
			Statements_StatementListContainer_SelfReference(s_cm,t_cm);
		}
		
	}
	
	relation Members_InterfaceMethod {

		varName : String;

		enforce domain JAVA s_cl : java::members::MemberContainer  {
			members =  s_cm : java::members::InterfaceMethod {
				name = varName
			}
		};

		enforce domain CLOSURES t_cl : java::members::MemberContainer  {
			members = t_cm : java::members::InterfaceMethod {
				name = varName
			}
		};
		where{
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm) 
			or
			AnnotableAndModifiable_Modifier_Abstract(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm)
			or
			Parametrizable_Parameter(s_cm,t_cm)
			or
			ArrayTypeable_ArrayDimension(s_cm,t_cm);
		}
	}
	
	relation Members_AnnotationMethod {

		varName : String;

		enforce domain JAVA s_cl : java::classifiers::Annotation  {
			members =  s_cm : java::members::InterfaceMethod {
				name = varName
			}
		};

		enforce domain CLOSURES t_cl : java::classifiers::Annotation  {
			members = t_cm : java::members::InterfaceMethod {
				name = varName
			}
		};
		where{
			(TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm))  
			and
			(AnnotableAndModifiable_Modifier_Abstract(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm)) 
			or
			Parametrizable_Parameter(s_cm,t_cm)
			or
			ArrayTypeable_ArrayDimension(s_cm,t_cm);
		}
	}
	
	relation Members_Constructor {

		varName : String;

		enforce domain JAVA s_c2 : java::classifiers::Class  {
			members =  s_mem : java::members::Constructor {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Class  {
			members = t_mem : java::members::Constructor {
				name = varName
			}
		};
		where{
			Parametrizable_Parameter(s_mem,t_mem) 
			or
			AnnotableAndModifiable_Modifier_Public(s_mem,t_mem) or
			AnnotableAndModifiable_Modifier_Private(s_mem,t_mem) or
			true --when modifier is empty 
			or
			Statements_StatementListContainer_NewConstructorCall(s_mem,t_mem) or
			Statements_StatementListContainer_MethodCall(s_mem,t_mem) or
			Statements_StatementListContainer_IdentifierReference(s_mem,t_mem) or
			Statements_StatementListContainer_SelfReference(s_mem,t_mem);
		}
	}
	
	relation Members_EmptyMember {

		varName : String;

		enforce domain JAVA s_c2 : java::classifiers::Class  {
			members =  s_mem : java::members::EmptyMember {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Class  {
			members = t_mem : java::members::EmptyMember {
				name = varName
			}
		};

	}
	
	relation Members_Field {

		varName : String;

		enforce domain JAVA s_c2 : java::members::MemberContainer  {
			members =  s_cm : java::members::Field {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::members::MemberContainer  {
			members = t_cm : java::members::Field {
				name = varName
			}
		};
		
		where{
			ArrayTypeable_ArrayDimension(s_cm,t_cm) or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm) or  
			AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Protected(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Static(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Final(s_cm,t_cm);
			
		}
	}
	
	relation Members_Class {

		varClassName : String;
					
		enforce domain JAVA s_cu : java::classifiers::Class {
			members = s_cl : java::classifiers::Class {
				name = varClassName,
				annotationsAndModifiers = s_aam : java::modifiers::Public {}
			}
		};

		enforce domain CLOSURES t_cu : java::classifiers::Class {
			members = t_cl : java::classifiers::Class  {
				name = varClassName,
				annotationsAndModifiers = t_aam : java::modifiers::Public {}
			}
		};
		where{
			Class_Extends_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Implementor_Implements_TypeReference_NamespaceClassifierReference(s_cl,t_cl) or
			Members_Constructor(s_cl,t_cl) or
			Members_EmptyMember(s_cl,t_cl) or
			Members_Field(s_cl,t_cl) or
			Members_ClassMethod(s_cl,t_cl);
		}

	}
	
	relation Statements_StatementListContainer_NewConstructorCall {

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::instantiations::NewConstructorCall {}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::instantiations::NewConstructorCall {}
			}
		};
		where{
			References_Argumentable(s_s_e,t_s_e) 
			or
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e);
		}
	}
	
	relation Statements_StatementListContainer_MethodCall {

		targetElement : java::references::ReferenceableElement;

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::MethodCall {
					target =  targetElement
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::MethodCall {
					target =  targetElement
				}
			}
		};
		where{
			References_Argumentable(s_s_e,t_s_e) 
			or
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e);
		}
	}
	
	relation Statements_StatementListContainer_SelfReference {

		selfElement : java::literals::Self;

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::SelfReference{
					_self = selfElement
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::SelfReference{
					_self = selfElement
				}
			}
		};
		where{
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e);
		}
	}
	
	relation Statements_StatementListContainer_IdentifierReference {

		targetElement : java::references::ReferenceableElement;

		enforce domain JAVA s : java::statements::StatementListContainer  {
			statements = s_s : java::statements::ExpressionStatement{
				expression = s_s_e : java::references::IdentifierReference{
					target =  targetElement
				}
			}
		};

		enforce domain CLOSURES t : java::statements::StatementListContainer  {
			statements = t_s : java::statements::ExpressionStatement{
				expression = t_s_e : java::references::IdentifierReference{
					target =  targetElement
				}
			}
		};
		where{
			References_Reference_NewConstructorCall(s_s_e,t_s_e) or
			References_Reference_IdentifierReference(s_s_e,t_s_e) or
			References_Reference_MethodCall(s_s_e,t_s_e);
		}
	}
	
	relation References_Reference_NewConstructorCall {

		enforce domain JAVA s : java::references::Reference {
			next = s_n : java::instantiations::NewConstructorCall{}
		};

		enforce domain CLOSURES t : java::references::Reference  {
			next = t_n : java::instantiations::NewConstructorCall{}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n)
			or
			References_Argumentable(s_n,t_n)
			or true;
		}
		
	
	}
	
	-- References_Reference_SelfReference ist sinnlos

	relation References_Reference_MethodCall {

		targetElement : java::references::ReferenceableElement;

		enforce domain JAVA s : java::references::Reference {
			next = s_n : java::references::MethodCall{
				target = targetElement
			}
		};

		enforce domain CLOSURES t : java::references::Reference  {
			next = t_n : java::references::MethodCall{
				target = targetElement
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n)
			or
			References_Argumentable(s_n,t_n)
			or true;
		}
	
	}
	
	relation References_Reference_IdentifierReference {

		targetElement : java::references::ReferenceableElement;

		enforce domain JAVA s : java::references::Reference {
			next = s_n : java::references::IdentifierReference{
				target = targetElement
			}
		};

		enforce domain CLOSURES t : java::references::Reference  {
			next = t_n : java::references::IdentifierReference{
				target = targetElement
			}
		};
		where{
			References_Reference_NewConstructorCall(s_n,t_n) or
			References_Reference_IdentifierReference(s_n,t_n) or
			References_Reference_MethodCall(s_n,t_n)
			or true;
		}
	}
	
	relation Enumeration_Enum_Constant{

		varName : String;

		enforce domain JAVA s_c2 : java::classifiers::Enumeration  {
			constants =  s_f : java::members::EnumConstant {
				name = varName
			}
		};

		enforce domain CLOSURES t_c2 : java::classifiers::Enumeration  {
			constants = t_f : java::members::EnumConstant {
				name = varName
			}
		};
	}
	
	relation Annotation_Attribute{

		varName : String;

		enforce domain JAVA s : java::classifiers::Annotation  {
			members =  s_cm : java::annotations::AnnotationAttribute {
				name = varName
			}
		};

		enforce domain CLOSURES t : java::classifiers::Annotation  {
			members = t_cm : java::annotations::AnnotationAttribute {
				name = varName
			}
		};
		where{
			(ArrayTypeable_ArrayDimension(s_cm,t_cm) or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm))  
			and
			(AnnotableAndModifiable_Modifier_Public(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Private(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Protected(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Static(s_cm,t_cm) or
			AnnotableAndModifiable_Modifier_Final(s_cm,t_cm));
		}
	}
	
	relation AnnotableAndModifiable_Modifier_Private {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Private {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Private {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Public {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Public {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Public {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Protected {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Protected {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Protected {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Static {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Static {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Static {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Final {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Final {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Final {}
		};

	}
	
	relation AnnotableAndModifiable_Modifier_Abstract {

		enforce domain JAVA s : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = s_aam : java::modifiers::Abstract {}
		};

		enforce domain CLOSURES t : java::modifiers::AnnotableAndModifiable  {
			annotationsAndModifiers = t_aam : java::modifiers::Abstract {}
		};

	}
	
	relation TypedElement_TypeReference_NamespaceClassifierReference {

		varClass : java::classifiers::Classifier;

		enforce domain JAVA s_f : java::types::TypedElement {
			typeReference = s_ncr : java::types::NamespaceClassifierReference {
				classifierReferences = s_cr : java::types::ClassifierReference {
					target = varClass
				}
			}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_ncr : java::types::NamespaceClassifierReference {
				classifierReferences = t_cr : java::types::ClassifierReference {
					target = varClass
				}
			}
		};
	}
	
	relation TypedElement_TypeReference_Int {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Int {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Int {}
		};
	}
	
	relation TypedElement_TypeReference_Boolean {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Boolean {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Boolean {}
		};
	}
	
	relation TypedElement_TypeReference_Byte {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Byte {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Byte {}
		};
	}
	
	relation TypedElement_TypeReference_Char {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Char {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Char {}
		};
	}
	
	relation TypedElement_TypeReference_Double {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Double {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Double {}
		};
	}
	
	relation TypedElement_TypeReference_Float {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Float {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Float {}
		};
	}
	
	relation TypedElement_TypeReference_Long {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Long {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Long {}
		};
	}
	
	relation TypedElement_TypeReference_Short {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Short {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Short {}
		};
	}
	
	relation TypedElement_TypeReference_Void {

		enforce domain JAVA s_f : java::types::TypedElement  {
			typeReference = s_cr : java::types::Void {}
		};

		enforce domain CLOSURES t_f : java::types::TypedElement  {
			typeReference = t_cr : java::types::Void {}
		};
	}
	
	
	relation ArrayTypeable_ArrayDimension {

		enforce domain JAVA s : java::arrays::ArrayTypeable {
			arrayDimensionsBefore = s_adb : java::arrays::ArrayDimension {}
		};

		enforce domain CLOSURES t : java::arrays::ArrayTypeable {
			arrayDimensionsBefore = t_adb : java::arrays::ArrayDimension {}
		};

	}
	
	relation Parametrizable_Parameter {

		varName : String;

		enforce domain JAVA s : java::parameters::Parametrizable {
			parameters = s_cm : java::parameters::OrdinaryParameter {
				name = varName
			}
		};
		enforce domain CLOSURES t : java::parameters::Parametrizable  {
			parameters = t_cm : java::parameters::OrdinaryParameter {
				name = varName
			}	
		};
		where{
			ArrayTypeable_ArrayDimension(s_cm,t_cm) or
			TypedElement_TypeReference_NamespaceClassifierReference(s_cm,t_cm) or
			TypedElement_TypeReference_Int(s_cm,t_cm) or
			TypedElement_TypeReference_Void(s_cm,t_cm) or
			TypedElement_TypeReference_Boolean(s_cm,t_cm) or
			TypedElement_TypeReference_Byte(s_cm,t_cm) or
			TypedElement_TypeReference_Double(s_cm,t_cm) or
			TypedElement_TypeReference_Float(s_cm,t_cm) or
			TypedElement_TypeReference_Long(s_cm,t_cm) or
			TypedElement_TypeReference_Short(s_cm,t_cm) or
			TypedElement_TypeReference_Char(s_cm,t_cm);  
		}
	}
	
	relation Class_Extends_TypeReference_NamespaceClassifierReference {

		varClassifier : java::classifiers::Classifier;

		enforce domain JAVA s_cm : java::classifiers::Class  {
			_extends = s_ex : java::types::NamespaceClassifierReference {
				classifierReferences = s_ref : java::types::ClassifierReference {
					target =  varClassifier
				}
			}
		};

		enforce domain CLOSURES t_cm : java::classifiers::Class  {
			_extends = t_ex : java::types::NamespaceClassifierReference {
				classifierReferences = t_ref : java::types::ClassifierReference {
					target = varClassifier
				}
			}
		};
	}
	
	relation Interface_Extends_TypeReference_NamespaceClassifierReference {

		varClassifier : java::classifiers::Classifier;

		enforce domain JAVA s_cm : java::classifiers::Interface  {
			_extends = s_ex : java::types::NamespaceClassifierReference {
				classifierReferences = s_ref : java::types::ClassifierReference {
					target =  varClassifier
				}
			}
		};

		enforce domain CLOSURES t_cm : java::classifiers::Interface  {
			_extends = t_ex : java::types::NamespaceClassifierReference {
				classifierReferences = t_ref : java::types::ClassifierReference {
					target = varClassifier
				}
			}
		};
	}
	
	relation Implementor_Implements_TypeReference_NamespaceClassifierReference {

		varClassifier : java::classifiers::Classifier;

		enforce domain JAVA s_cm : java::classifiers::Implementor  {
			implements = s_imp : java::types::NamespaceClassifierReference {
				classifierReferences = s_ref : java::types::ClassifierReference {
					target =  varClassifier
				}
			}
		};

		enforce domain CLOSURES t_cm : java::classifiers::Implementor  {
			implements = t_imp : java::types::NamespaceClassifierReference {
				classifierReferences = t_ref : java::types::ClassifierReference {
					target = varClassifier
				}
			}
		};
	}

}