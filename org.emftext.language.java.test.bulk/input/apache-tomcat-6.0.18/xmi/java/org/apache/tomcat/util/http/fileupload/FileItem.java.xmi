<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="FileItem.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>tomcat</namespaces>
  <namespaces>util</namespaces>
  <namespaces>http</namespaces>
  <namespaces>fileupload</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../io/OutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="FileItem">
    <members xsi:type="members:InterfaceMethod" name="getInputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>// ------------------------------- Methods from javax.activation.DataSource</comments>
          <comments>/**&#xA;     * Returns an {@link java.io.InputStream InputStream} that can be&#xA;     * used to retrieve the contents of the file.&#xA;     *&#xA;     * @return An {@link java.io.InputStream InputStream} that can be&#xA;     *         used to retrieve the contents of the file.&#xA;     *&#xA;     * @exception IOException if an error occurs.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the content type passed by the browser or &lt;code>null&lt;/code> if&#xA;     * not defined.&#xA;     *&#xA;     * @return The content type passed by the browser or &lt;code>null&lt;/code> if&#xA;     *         not defined.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the original filename in the client's filesystem, as provided by&#xA;     * the browser (or other client software). In most cases, this will be the&#xA;     * base file name, without path information. However, some clients, such as&#xA;     * the Opera browser, do include path information.&#xA;     *&#xA;     * @return The original filename in the client's filesystem.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isInMemory">
      <typeReference xsi:type="types:Boolean">
        <comments>// ------------------------------------------------------- FileItem methods</comments>
        <comments>/**&#xA;     * Provides a hint as to whether or not the file contents will be read&#xA;     * from memory.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the file contents will be read from memory;&#xA;     *         &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSize">
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;     * Returns the size of the file item.&#xA;     *&#xA;     * @return The size of the file item, in bytes.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Returns the contents of the file item as an array of bytes.&#xA;     *&#xA;     * @return The contents of the file item as an array of bytes.&#xA;     */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the contents of the file item as a String, using the specified&#xA;     * encoding.  This method uses {@link #get()} to retrieve the&#xA;     * contents of the item.&#xA;     *&#xA;     * @param encoding The character encoding to use.&#xA;     *&#xA;     * @return The contents of the item, as a string.&#xA;     *&#xA;     * @exception UnsupportedEncodingException if the requested character&#xA;     *                                         encoding is not available.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="encoding">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the contents of the file item as a String, using the default&#xA;     * character encoding.  This method uses {@link #get()} to retrieve the&#xA;     * contents of the item.&#xA;     *&#xA;     * @return The contents of the item, as a string.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * A convenience method to write an uploaded item to disk. The client code&#xA;     * is not concerned with whether or not the item is stored in memory, or on&#xA;     * disk in a temporary location. They just want to write the uploaded item&#xA;     * to a file.&#xA;     * &lt;p>&#xA;     * This method is not guaranteed to succeed if called more than once for&#xA;     * the same item. This allows a particular implementation to use, for&#xA;     * example, file renaming, where possible, rather than copying all of the&#xA;     * underlying data, thus gaining a significant performance benefit.&#xA;     *&#xA;     * @param file The &lt;code>File&lt;/code> into which the uploaded item should&#xA;     *             be stored.&#xA;     *&#xA;     * @exception Exception if an error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="delete">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Deletes the underlying storage for a file item, including deleting any&#xA;     * associated temporary disk file. Although this storage will be deleted&#xA;     * automatically when the &lt;code>FileItem&lt;/code> instance is garbage&#xA;     * collected, this method can be used to ensure that this is done at an&#xA;     * earlier time, thus preserving system resources.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFieldName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the name of the field in the multipart form corresponding to&#xA;     * this file item.&#xA;     *&#xA;     * @return The name of the form field.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFieldName">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the field name used to reference this file item.&#xA;     *&#xA;     * @param name The name of the form field.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isFormField">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Determines whether or not a &lt;code>FileItem&lt;/code> instance represents&#xA;     * a simple form field.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the instance represents a simple form&#xA;     *         field; &lt;code>false&lt;/code> if it represents an uploaded file.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFormField">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Specifies whether or not a &lt;code>FileItem&lt;/code> instance represents&#xA;     * a simple form field.&#xA;     *&#xA;     * @param state &lt;code>true&lt;/code> if the instance represents a simple form&#xA;     *              field; &lt;code>false&lt;/code> if it represents an uploaded file.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOutputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an {@link java.io.OutputStream OutputStream} that can&#xA;     * be used for storing the contents of the file.&#xA;     *&#xA;     * @return An {@link java.io.OutputStream OutputStream} that can be used&#xA;     *         for storing the contensts of the file.&#xA;     *&#xA;     * @exception IOException if an error occurs.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../../../../io/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p> This class represents a file or form item that was received within a&#xA; * &lt;code>multipart/form-data&lt;/code> POST request.&#xA; *&#xA; * &lt;p> After retrieving an instance of this class from a {@link&#xA; * org.apache.tomcat.util.http.fileupload.FileUpload FileUpload} instance (see&#xA; * {@link org.apache.tomcat.util.http.fileupload.FileUpload&#xA; * #parseRequest(javax.servlet.http.HttpServletRequest)}), you may&#xA; * either request all contents of the file at once using {@link #get()} or&#xA; * request an {@link java.io.InputStream InputStream} with&#xA; * {@link #getInputStream()} and process the file without attempting to load&#xA; * it into memory, which may come handy with large files.&#xA; *&#xA; * &lt;p> While this interface does not extend&#xA; * &lt;code>javax.activation.DataSource&lt;/code> per se (to avoid a seldom used&#xA; * dependency), several of the defined methods are specifically defined with&#xA; * the same signatures as methods in that interface. This allows an&#xA; * implementation of this interface to also implement&#xA; * &lt;code>javax.activation.DataSource&lt;/code> with minimal additional work.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:Rafal.Krzewski@e-point.pl&quot;>Rafal Krzewski&lt;/a>&#xA; * @author &lt;a href=&quot;mailto:sean@informage.net&quot;>Sean Legassick&lt;/a>&#xA; * @author &lt;a href=&quot;mailto:jvanzyl@apache.org&quot;>Jason van Zyl&lt;/a>&#xA; * @author &lt;a href=&quot;mailto:martinc@apache.org&quot;>Martin Cooper&lt;/a>&#xA; *&#xA; * @version $Id: FileItem.java 467222 2006-10-24 03:17:11Z markt $&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
