<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="SSLContext.java">
  <comments>/*&#xA; *  Licensed to the Apache Software Foundation (ASF) under one or more&#xA; *  contributor license agreements.  See the NOTICE file distributed with&#xA; *  this work for additional information regarding copyright ownership.&#xA; *  The ASF licenses this file to You under the Apache License, Version 2.0&#xA; *  (the &quot;License&quot;); you may not use this file except in compliance with&#xA; *  the License.  You may obtain a copy of the License at&#xA; *&#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; *&#xA; *  Unless required by applicable law or agreed to in writing, software&#xA; *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; *  See the License for the specific language governing permissions and&#xA; *  limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>tomcat</namespaces>
  <namespaces>jni</namespaces>
  <classifiers xsi:type="classifiers:Class" name="SSLContext">
    <members xsi:type="members:InterfaceMethod" name="make">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pool">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="protocol">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mode">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Initialize new SSL context&#xA;     * @param pool The pool to use.&#xA;     * @param protocol The SSL protocol to use. It can be one of:&#xA;     * &lt;PRE>&#xA;     * SSL_PROTOCOL_SSLV2&#xA;     * SSL_PROTOCOL_SSLV3&#xA;     * SSL_PROTOCOL_SSLV2 | SSL_PROTOCOL_SSLV3&#xA;     * SSL_PROTOCOL_TLSV1&#xA;     * SSL_PROTOCOL_ALL&#xA;     * &lt;/PRE>&#xA;     * @param mode SSL mode to use&#xA;     * &lt;PRE>&#xA;     * SSL_MODE_CLIENT&#xA;     * SSL_MODE_SERVER&#xA;     * SSL_MODE_COMBINED&#xA;     * &lt;/PRE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="free">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Free the resources used by the Context&#xA;     * @param ctx Server or Client context to free.&#xA;     * @return APR Status code.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setContextId">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set Session context id. Usually host:port combination.&#xA;     * @param ctx Context to use.&#xA;     * @param id  String that uniquely identifies this context.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBIO">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bio">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dir">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Asssociate BIOCallback for input or output data capture.&#xA;     * &lt;br />&#xA;     * First word in the output string will contain error&#xA;     * level in the form:&#xA;     * &lt;PRE>&#xA;     * [ERROR]  -- Critical error messages&#xA;     * [WARN]   -- Varning messages&#xA;     * [INFO]   -- Informational messages&#xA;     * [DEBUG]  -- Debugging messaged&#xA;     * &lt;/PRE>&#xA;     * Callback can use that word to determine application logging level&#xA;     * by intercepting &lt;b>write&lt;/b> call.&#xA;     * If the &lt;b>bio&lt;/b> is set to 0 no error messages will be displayed.&#xA;     * Default is to use the stderr output stream.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param bio BIO handle to use, created with SSL.newBIO&#xA;     * @param dir BIO direction (1 for input 0 for output).&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setOptions">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="options">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set OpenSSL Option.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param options  See SSL.SSL_OP_* for option flags.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setQuietShutdown">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mode">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &quot;quiet shutdown&quot; flag for &lt;b>ctx&lt;/b> to be&#xA;     * &lt;b>mode&lt;/b>. SSL objects created from &lt;b>ctx&lt;/b> inherit the&#xA;     * &lt;b>mode&lt;/b> valid at the time and may be 0 or 1.&#xA;     * &lt;br />&#xA;     * Normally when a SSL connection is finished, the parties must send out&#xA;     * &quot;close notify&quot; alert messages using L&lt;SSL_shutdown(3)|SSL_shutdown(3)>&#xA;     * for a clean shutdown.&#xA;     * &lt;br />&#xA;     * When setting the &quot;quiet shutdown&quot; flag to 1, &lt;b>SSL.shutdown&lt;/b>&#xA;     * will set the internal flags to SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN.&#xA;     * (&lt;b>SSL_shutdown&lt;/b> then behaves like called with&#xA;     * SSL_SENT_SHUTDOWN|SSL_RECEIVED_SHUTDOWN.)&#xA;     * The session is thus considered to be shutdown, but no &quot;close notify&quot; alert&#xA;     * is sent to the peer. This behaviour violates the TLS standard.&#xA;     * The default is normal shutdown behaviour as described by the TLS standard.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param mode True to set the quiet shutdown.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCipherSuite">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ciphers">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Cipher Suite available for negotiation in SSL handshake.&#xA;     * &lt;br />&#xA;     * This complex directive uses a colon-separated cipher-spec string consisting&#xA;     * of OpenSSL cipher specifications to configure the Cipher Suite the client&#xA;     * is permitted to negotiate in the SSL handshake phase. Notice that this&#xA;     * directive can be used both in per-server and per-directory context.&#xA;     * In per-server context it applies to the standard SSL handshake when a&#xA;     * connection is established. In per-directory context it forces a SSL&#xA;     * renegotation with the reconfigured Cipher Suite after the HTTP request&#xA;     * was read but before the HTTP response is sent.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param ciphers An SSL cipher specification.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCARevocation">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set File of concatenated PEM-encoded CA CRLs or&#xA;     * directory of PEM-encoded CA Certificates for Client Auth&#xA;     * &lt;br />&#xA;     * This directive sets the all-in-one file where you can assemble the&#xA;     * Certificate Revocation Lists (CRL) of Certification Authorities (CA)&#xA;     * whose clients you deal with. These are used for Client Authentication.&#xA;     * Such a file is simply the concatenation of the various PEM-encoded CRL&#xA;     * files, in order of preference.&#xA;     * &lt;br />&#xA;     * The files in this directory have to be PEM-encoded and are accessed through&#xA;     * hash filenames. So usually you can't just place the Certificate files there:&#xA;     * you also have to create symbolic links named hash-value.N. And you should&#xA;     * always make sure this directory contains the appropriate symbolic links.&#xA;     * Use the Makefile which comes with mod_ssl to accomplish this task.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param file File of concatenated PEM-encoded CA CRLs for Client Auth.&#xA;     * @param path Directory of PEM-encoded CA Certificates for Client Auth.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCertificateChainFile">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="skipfirst">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set File of PEM-encoded Server CA Certificates&#xA;     * &lt;br />&#xA;     * This directive sets the optional all-in-one file where you can assemble the&#xA;     * certificates of Certification Authorities (CA) which form the certificate&#xA;     * chain of the server certificate. This starts with the issuing CA certificate&#xA;     * of of the server certificate and can range up to the root CA certificate.&#xA;     * Such a file is simply the concatenation of the various PEM-encoded CA&#xA;     * Certificate files, usually in certificate chain order.&#xA;     * &lt;br />&#xA;     * But be careful: Providing the certificate chain works only if you are using&#xA;     * a single (either RSA or DSA) based server certificate. If you are using a&#xA;     * coupled RSA+DSA certificate pair, this will work only if actually both&#xA;     * certificates use the same certificate chain. Else the browsers will be&#xA;     * confused in this situation.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param file File of PEM-encoded Server CA Certificates.&#xA;     * @param skipfirst Skip first certificate if chain file is inside&#xA;     *                  certificate file.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCertificate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cert">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="password">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="idx">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set Certificate&#xA;     * &lt;br />&#xA;     * Point setCertificateFile at a PEM encoded certificate.  If&#xA;     * the certificate is encrypted, then you will be prompted for a&#xA;     * pass phrase.  Note that a kill -HUP will prompt again. A test&#xA;     * certificate can be generated with `make certificate' under&#xA;     * built time. Keep in mind that if you've both a RSA and a DSA&#xA;     * certificate you can configure both in parallel (to also allow&#xA;     * the use of DSA ciphers, etc.)&#xA;     * &lt;br />&#xA;     * If the key is not combined with the certificate, use key param&#xA;     * to point at the key file.  Keep in mind that if&#xA;     * you've both a RSA and a DSA private key you can configure&#xA;     * both in parallel (to also allow the use of DSA ciphers, etc.)&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param cert Certificate file.&#xA;     * @param key Private Key file to use if not in cert.&#xA;     * @param password Certificate password. If null and certificate&#xA;     *                 is encrypted, password prompt will be dispayed.&#xA;     * @param idx Certificate index SSL_AIDX_RSA or SSL_AIDX_DSA.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCACertificate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set File and Directory of concatenated PEM-encoded CA Certificates&#xA;     * for Client Auth&#xA;     * &lt;br />&#xA;     * This directive sets the all-in-one file where you can assemble the&#xA;     * Certificates of Certification Authorities (CA) whose clients you deal with.&#xA;     * These are used for Client Authentication. Such a file is simply the&#xA;     * concatenation of the various PEM-encoded Certificate files, in order of&#xA;     * preference. This can be used alternatively and/or additionally to&#xA;     * path.&#xA;     * &lt;br />&#xA;     * The files in this directory have to be PEM-encoded and are accessed through&#xA;     * hash filenames. So usually you can't just place the Certificate files there:&#xA;     * you also have to create symbolic links named hash-value.N. And you should&#xA;     * always make sure this directory contains the appropriate symbolic links.&#xA;     * Use the Makefile which comes with mod_ssl to accomplish this task.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param file File of concatenated PEM-encoded CA Certificates for&#xA;     *             Client Auth.&#xA;     * @param path Directory of PEM-encoded CA Certificates for Client Auth.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setShutdowType">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set SSL connection shutdown type&#xA;     * &lt;br />&#xA;     * The following levels are available for level:&#xA;     * &lt;PRE>&#xA;     * SSL_SHUTDOWN_TYPE_STANDARD&#xA;     * SSL_SHUTDOWN_TYPE_UNCLEAN&#xA;     * SSL_SHUTDOWN_TYPE_ACCURATE&#xA;     * &lt;/PRE>&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param type Shutdown type to use.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setVerify">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="level">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="depth">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set Type of Client Certificate verification and Maximum depth of CA Certificates&#xA;     * in Client Certificate verification.&#xA;     * &lt;br />&#xA;     * This directive sets the Certificate verification level for the Client&#xA;     * Authentication. Notice that this directive can be used both in per-server&#xA;     * and per-directory context. In per-server context it applies to the client&#xA;     * authentication process used in the standard SSL handshake when a connection&#xA;     * is established. In per-directory context it forces a SSL renegotation with&#xA;     * the reconfigured client verification level after the HTTP request was read&#xA;     * but before the HTTP response is sent.&#xA;     * &lt;br />&#xA;     * The following levels are available for level:&#xA;     * &lt;PRE>&#xA;     * SSL_CVERIFY_NONE           - No client Certificate is required at all&#xA;     * SSL_CVERIFY_OPTIONAL       - The client may present a valid Certificate&#xA;     * SSL_CVERIFY_REQUIRE        - The client has to present a valid Certificate&#xA;     * SSL_CVERIFY_OPTIONAL_NO_CA - The client may present a valid Certificate&#xA;     *                              but it need not to be (successfully) verifiable&#xA;     * &lt;/PRE>&#xA;     * &lt;br />&#xA;     * The depth actually is the maximum number of intermediate certificate issuers,&#xA;     * i.e. the number of CA certificates which are max allowed to be followed while&#xA;     * verifying the client certificate. A depth of 0 means that self-signed client&#xA;     * certificates are accepted only, the default depth of 1 means the client&#xA;     * certificate can be self-signed or has to be signed by a CA which is directly&#xA;     * known to the server (i.e. the CA's certificate is under&#xA;     * &lt;code>setCACertificatePath&lt;/code>), etc.&#xA;     * @param ctx Server or Client context to use.&#xA;     * @param level Type of Client Certificate verification.&#xA;     * @param depth Maximum depth of CA Certificates in Client Certificate&#xA;     *              verification.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** SSL Context&#xA; *&#xA; * @author Mladen Turk&#xA; * @version $Revision: 467222 $, $Date: 2006-10-24 05:17:11 +0200 (Tue, 24 Oct 2006) $&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
  </classifiers>
</containers:CompilationUnit>
