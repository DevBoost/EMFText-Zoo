<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Valve.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>catalina</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>catalina</namespaces>
    <namespaces>connector</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../org/apache/catalina/connector/Request.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>catalina</namespaces>
    <namespaces>connector</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../org/apache/catalina/connector/Response.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Valve">
    <members xsi:type="members:InterfaceMethod" name="getInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//-------------------------------------------------------------- Properties</comments>
        <comments>/**&#xA;     * Return descriptive information about this Valve implementation.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the next Valve in the pipeline containing this Valve, if any.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setNext">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="valve">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the next Valve in the pipeline containing this Valve.&#xA;     *&#xA;     * @param valve The new next valve, or &lt;code>null&lt;/code> if none&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="backgroundProcess">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//---------------------------------------------------------- Public Methods</comments>
        <comments>/**&#xA;     * Execute a periodic task, such as reloading, etc. This method will be&#xA;     * invoked inside the classloading context of this container. Unexpected&#xA;     * throwables will be caught and logged.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invoke">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="request">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../org/apache/catalina/connector/Request.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="response">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../org/apache/catalina/connector/Response.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Perform request processing as required by this Valve.&lt;/p>&#xA;     *&#xA;     * &lt;p>An individual Valve &lt;b>MAY&lt;/b> perform the following actions, in&#xA;     * the specified order:&lt;/p>&#xA;     * &lt;ul>&#xA;     * &lt;li>Examine and/or modify the properties of the specified Request and&#xA;     *     Response.&#xA;     * &lt;li>Examine the properties of the specified Request, completely generate&#xA;     *     the corresponding Response, and return control to the caller.&#xA;     * &lt;li>Examine the properties of the specified Request and Response, wrap&#xA;     *     either or both of these objects to supplement their functionality,&#xA;     *     and pass them on.&#xA;     * &lt;li>If the corresponding Response was not generated (and control was not&#xA;     *     returned, call the next Valve in the pipeline (if there is one) by&#xA;     *     executing &lt;code>context.invokeNext()&lt;/code>.&#xA;     * &lt;li>Examine, but not modify, the properties of the resulting Response&#xA;     *     (which was created by a subsequently invoked Valve or Container).&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>A Valve &lt;b>MUST NOT&lt;/b> do any of the following things:&lt;/p>&#xA;     * &lt;ul>&#xA;     * &lt;li>Change request properties that have already been used to direct&#xA;     *     the flow of processing control for this request (for instance,&#xA;     *     trying to change the virtual host to which a Request should be&#xA;     *     sent from a pipeline attached to a Host or Context in the&#xA;     *     standard implementation).&#xA;     * &lt;li>Create a completed Response &lt;strong>AND&lt;/strong> pass this&#xA;     *     Request and Response on to the next Valve in the pipeline.&#xA;     * &lt;li>Consume bytes from the input stream associated with the Request,&#xA;     *     unless it is completely generating the response, or wrapping the&#xA;     *     request before passing it on.&#xA;     * &lt;li>Modify the HTTP headers included with the Response after the&#xA;     *     &lt;code>invokeNext()&lt;/code> method has returned.&#xA;     * &lt;li>Perform any actions on the output stream associated with the&#xA;     *     specified Response after the &lt;code>invokeNext()&lt;/code> method has&#xA;     *     returned.&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @param request The servlet request to be processed&#xA;     * @param response The servlet response to be created&#xA;     *&#xA;     * @exception IOException if an input/output error occurs, or is thrown&#xA;     *  by a subsequently invoked Valve, Filter, or Servlet&#xA;     * @exception ServletException if a servlet error occurs, or is thrown&#xA;     *  by a subsequently invoked Valve, Filter, or Servlet&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="event">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="request">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../org/apache/catalina/connector/Request.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="response">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../org/apache/catalina/connector/Response.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="event">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/CometEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Process a Comet event.&#xA;     *&#xA;     * @param request The servlet request to be processed&#xA;     * @param response The servlet response to be created&#xA;     *&#xA;     * @exception IOException if an input/output error occurs, or is thrown&#xA;     *  by a subsequently invoked Valve, Filter, or Servlet&#xA;     * @exception ServletException if a servlet error occurs, or is thrown&#xA;     *  by a subsequently invoked Valve, Filter, or Servlet&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>A &lt;b>Valve&lt;/b> is a request processing component associated with a&#xA; * particular Container.  A series of Valves are generally associated with&#xA; * each other into a Pipeline.  The detailed contract for a Valve is included&#xA; * in the description of the &lt;code>invoke()&lt;/code> method below.&lt;/p>&#xA; *&#xA; * &lt;b>HISTORICAL NOTE&lt;/b>:  The &quot;Valve&quot; name was assigned to this concept&#xA; * because a valve is what you use in a real world pipeline to control and/or&#xA; * modify flows through it.&#xA; *&#xA; * @author Craig R. McClanahan&#xA; * @author Gunnar Rjnning&#xA; * @author Peter Donald&#xA; * @version $Revision: 467222 $ $Date: 2006-10-24 05:17:11 +0200 (Tue, 24 Oct 2006) $&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
