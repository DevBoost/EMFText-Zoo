<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="Member.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>catalina</namespaces>
  <namespaces>tribes</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Member">
    <members xsi:type="members:Field" name="SHUTDOWN_PAYLOAD">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
        <arrayInitializer>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="66"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="65"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="66"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="89"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="45"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="65"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="76"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="69"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="88"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * When a member leaves the cluster, the payload of the memberDisappeared member&#xA;     * will be the following bytes. This indicates a soft shutdown, and not a crash&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of this node, should be unique within the group.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHost">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the listen host for the ChannelReceiver implementation&#xA;     * @return IPv4 or IPv6 representation of the host address this member listens to incoming data&#xA;     * @see ChannelReceiver&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPort">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the listen port for the ChannelReceiver implementation&#xA;     * @return the listen port for this member, -1 if its not listening on an unsecure port&#xA;     * @see ChannelReceiver&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSecurePort">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the secure listen port for the ChannelReceiver implementation.&#xA;     * Returns -1 if its not listening to a secure port.&#xA;     * @return the listen port for this member, -1 if its not listening on a secure port&#xA;     * @see ChannelReceiver&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMemberAliveTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Contains information on how long this member has been online.&#xA;     * The result is the number of milli seconds this member has been&#xA;     * broadcasting its membership to the group.&#xA;     * @return nr of milliseconds since this member started.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isReady">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The current state of the member&#xA;     * @return boolean - true if the member is functioning correctly&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSuspect">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The current state of the member&#xA;     * @return boolean - true if the member is suspect, but the crash has not been confirmed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isFailing">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &#xA;     * @return boolean - true if the member has been confirmed to malfunction &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUniqueId">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * returns a UUID unique for this member over all sessions.&#xA;     * If the member crashes and restarts, the uniqueId will be different.&#xA;     * @return byte[]&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPayload">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * returns the payload associated with this member&#xA;     * @return byte[]&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCommand">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * returns the command associated with this member&#xA;     * @return byte[]&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDomain">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Domain for this cluster&#xA;     * @return byte[]&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The Member interface, defines a member in the group.&#xA; * Each member can carry a set of properties, defined by the actual implementation.&lt;BR>&#xA; * A member is identified by the host/ip/uniqueId&lt;br>&#xA; * The host is what interface the member is listening to, to receive data&lt;br>&#xA; * The port is what port the member is listening to, to receive data&lt;br>&#xA; * The uniqueId defines the session id for the member. This is an important feature&#xA; * since a member that has crashed and the starts up again on the same port/host is &#xA; * not guaranteed to be the same member, so no state transfers will ever be confused&#xA; * @author Filip Hanik&#xA; * @version $Revision: 467222 $, $Date: 2006-10-24 05:17:11 +0200 (Tue, 24 Oct 2006) $&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
