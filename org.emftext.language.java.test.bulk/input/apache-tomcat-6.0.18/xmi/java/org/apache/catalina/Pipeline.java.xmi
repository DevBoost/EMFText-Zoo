<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Pipeline.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>catalina</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Pipeline">
    <members xsi:type="members:InterfaceMethod" name="getBasic">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/Valve.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ------------------------------------------------------------- Properties</comments>
        <comments>/**&#xA;     * &lt;p>Return the Valve instance that has been distinguished as the basic&#xA;     * Valve for this Pipeline (if any).&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBasic">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="valve">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/Valve.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Set the Valve instance that has been distinguished as the basic&#xA;     * Valve for this Pipeline (if any).  Prioer to setting the basic Valve,&#xA;     * the Valve's &lt;code>setContainer()&lt;/code> will be called, if it&#xA;     * implements &lt;code>Contained&lt;/code>, with the owning Container as an&#xA;     * argument.  The method may throw an &lt;code>IllegalArgumentException&lt;/code>&#xA;     * if this Valve chooses not to be associated with this Container, or&#xA;     * &lt;code>IllegalStateException&lt;/code> if it is already associated with&#xA;     * a different Container.&lt;/p>&#xA;     *&#xA;     * @param valve Valve to be distinguished as the basic Valve&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addValve">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="valve">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/Valve.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// --------------------------------------------------------- Public Methods</comments>
        <comments>/**&#xA;     * &lt;p>Add a new Valve to the end of the pipeline associated with this&#xA;     * Container.  Prior to adding the Valve, the Valve's&#xA;     * &lt;code>setContainer()&lt;/code> method will be called, if it implements&#xA;     * &lt;code>Contained&lt;/code>, with the owning Container as an argument.&#xA;     * The method may throw an&#xA;     * &lt;code>IllegalArgumentException&lt;/code> if this Valve chooses not to&#xA;     * be associated with this Container, or &lt;code>IllegalStateException&lt;/code>&#xA;     * if it is already associated with a different Container.&lt;/p>&#xA;     *&#xA;     * @param valve Valve to be added&#xA;     *&#xA;     * @exception IllegalArgumentException if this Container refused to&#xA;     *  accept the specified Valve&#xA;     * @exception IllegalArgumentException if the specifie Valve refuses to be&#xA;     *  associated with this Container&#xA;     * @exception IllegalStateException if the specified Valve is already&#xA;     *  associated with a different Container&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValves">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/Valve.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the set of Valves in the pipeline associated with this&#xA;     * Container, including the basic Valve (if any).  If there are no&#xA;     * such Valves, a zero-length array is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeValve">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="valve">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/Valve.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Remove the specified Valve from the pipeline associated with this&#xA;     * Container, if it is found; otherwise, do nothing.  If the Valve is&#xA;     * found and removed, the Valve's &lt;code>setContainer(null)&lt;/code> method&#xA;     * will be called if it implements &lt;code>Contained&lt;/code>.&#xA;     *&#xA;     * @param valve Valve to be removed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFirst">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/Valve.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;p>Return the Valve instance that has been distinguished as the basic&#xA;     * Valve for this Pipeline (if any).&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>Interface describing a collection of Valves that should be executed&#xA; * in sequence when the &lt;code>invoke()&lt;/code> method is invoked.  It is&#xA; * required that a Valve somewhere in the pipeline (usually the last one)&#xA; * must process the request and create the corresponding response, rather&#xA; * than trying to pass the request on.&lt;/p>&#xA; *&#xA; * &lt;p>There is generally a single Pipeline instance associated with each&#xA; * Container.  The container's normal request processing functionality is&#xA; * generally encapsulated in a container-specific Valve, which should always&#xA; * be executed at the end of a pipeline.  To facilitate this, the&#xA; * &lt;code>setBasic()&lt;/code> method is provided to set the Valve instance that&#xA; * will always be executed last.  Other Valves will be executed in the order&#xA; * that they were added, before the basic Valve is executed.&lt;/p>&#xA; *&#xA; * @author Craig R. McClanahan&#xA; * @author Peter Donald&#xA; * @version $Revision: 467222 $ $Date: 2006-10-24 05:17:11 +0200 (Tue, 24 Oct 2006) $&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
