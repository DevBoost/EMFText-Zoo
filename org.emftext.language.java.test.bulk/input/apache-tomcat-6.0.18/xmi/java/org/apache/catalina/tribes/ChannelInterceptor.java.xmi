<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="ChannelInterceptor.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>catalina</namespaces>
  <namespaces>tribes</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>catalina</namespaces>
    <namespaces>tribes</namespaces>
    <namespaces>group</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../org/apache/catalina/tribes/group/InterceptorPayload.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ChannelInterceptor">
    <members xsi:type="members:InterfaceMethod" name="getOptionFlag">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * An interceptor can react to a message based on a set bit on the &#xA;     * message options. &lt;br>&#xA;     * When a message is sent, the options can be retrieved from ChannelMessage.getOptions()&#xA;     * and if the bit is set, this interceptor will react to it.&lt;br>&#xA;     * A simple evaluation if an interceptor should react to the message would be:&lt;br>&#xA;     * &lt;code>boolean react = (getOptionFlag() == (getOptionFlag() &amp; ChannelMessage.getOptions()));&lt;/code>&lt;br>&#xA;     * The default option is 0, meaning there is no way for the application to trigger the&#xA;     * interceptor. The interceptor itself will decide.&lt;br>&#xA;     * @return int&#xA;     * @see ChannelMessage#getOptions()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setOptionFlag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flag">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the option flag&#xA;     * @param flag int&#xA;     * @see #getOptionFlag()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setNext">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the next interceptor in the list of interceptors&#xA;     * @param next ChannelInterceptor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieve the next interceptor in the list&#xA;     * @return ChannelInterceptor - returns the next interceptor in the list or null if no more interceptors exist&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPrevious">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="previous">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the previous interceptor in the list&#xA;     * @param previous ChannelInterceptor&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrevious">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieve the previous interceptor in the list&#xA;     * @return ChannelInterceptor - returns the previous interceptor in the list or null if no more interceptors exist&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendMessage">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="destination">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/Member.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/ChannelMessage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="payload">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/catalina/tribes/group/InterceptorPayload.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../org/apache/catalina/tribes/ChannelException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>sendMessage&lt;/code> method is called when a message is being sent to one more destinations.&#xA;     * The interceptor can modify any of the parameters and then pass on the message down the stack by&#xA;     * invoking &lt;code>getNext().sendMessage(destination,msg,payload)&lt;/code>&lt;br>&#xA;     * Alternatively the interceptor can stop the message from being sent by not invoking &#xA;     * &lt;code>getNext().sendMessage(destination,msg,payload)&lt;/code>&lt;br>&#xA;     * If the message is to be sent asynchronous the application can be notified of completion and &#xA;     * errors by passing in an error handler attached to a payload object.&lt;br>&#xA;     * The ChannelMessage.getAddress contains Channel.getLocalMember, and can be overwritten &#xA;     * to simulate a message sent from another node.&lt;br>&#xA;     * @param destination Member[] - the destination for this message&#xA;     * @param msg ChannelMessage - the message to be sent&#xA;     * @param payload InterceptorPayload - the payload, carrying an error handler and future useful data, can be null&#xA;     * @throws ChannelException&#xA;     * @see ErrorHandler&#xA;     * @see InterceptorPayload&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="messageReceived">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/ChannelMessage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * the &lt;code>messageReceived&lt;/code> is invoked when a message is received.&#xA;     * &lt;code>ChannelMessage.getAddress()&lt;/code> is the sender, or the reply-to address&#xA;     * if it has been overwritten.&#xA;     * @param data ChannelMessage&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="heartbeat">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>heartbeat()&lt;/code> method gets invoked periodically&#xA;     * to allow interceptors to clean up resources, time out object and &#xA;     * perform actions that are unrelated to sending/receiving data.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasMembers">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Intercepts the &lt;code>Channel.hasMembers()&lt;/code> method&#xA;     * @return boolean - if the channel has members in its membership group&#xA;     * @see Channel#hasMembers()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMembers">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/Member.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Intercepts the code>Channel.getMembers()&lt;/code> method&#xA;     * @return Member[]&#xA;     * @see Channel#getMembers()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalMember">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/Member.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="incAliveTime">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Intercepts the code>Channel.getLocalMember(boolean)&lt;/code> method&#xA;     * @param incAliveTime boolean&#xA;     * @return Member&#xA;     * @see Channel#getLocalMember(boolean)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMember">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/Member.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mbr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/Member.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Intercepts the code>Channel.getMember(Member)&lt;/code> method&#xA;     * @param mbr Member&#xA;     * @return Member - the actual member information, including stay alive&#xA;     * @see Channel#getMember(Member)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="start">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="svc">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../org/apache/catalina/tribes/ChannelException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Starts up the channel. This can be called multiple times for individual services to start&#xA;     * The svc parameter can be the logical or value of any constants&#xA;     * @param svc int value of &lt;BR>&#xA;     * Channel.DEFAULT - will start all services &lt;BR>&#xA;     * Channel.MBR_RX_SEQ - starts the membership receiver &lt;BR>&#xA;     * Channel.MBR_TX_SEQ - starts the membership broadcaster &lt;BR>&#xA;     * Channel.SND_TX_SEQ - starts the replication transmitter&lt;BR>&#xA;     * Channel.SND_RX_SEQ - starts the replication receiver&lt;BR>&#xA;     * @throws ChannelException if a startup error occurs or the service is already started.&#xA;     * @see Channel&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="stop">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="svc">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../org/apache/catalina/tribes/ChannelException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Shuts down the channel. This can be called multiple times for individual services to shutdown&#xA;     * The svc parameter can be the logical or value of any constants&#xA;     * @param svc int value of &lt;BR>&#xA;     * Channel.DEFAULT - will shutdown all services &lt;BR>&#xA;     * Channel.MBR_RX_SEQ - stops the membership receiver &lt;BR>&#xA;     * Channel.MBR_TX_SEQ - stops the membership broadcaster &lt;BR>&#xA;     * Channel.SND_TX_SEQ - stops the replication transmitter&lt;BR>&#xA;     * Channel.SND_RX_SEQ - stops the replication receiver&lt;BR>&#xA;     * @throws ChannelException if a startup error occurs or the service is already started.&#xA;     * @see Channel&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="fireInterceptorEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="event">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.16"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="classifiers:Interface" name="InterceptorEvent">
      <members xsi:type="members:InterfaceMethod" name="getEventType">
        <typeReference xsi:type="types:Int"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getEventTypeDesc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:InterfaceMethod" name="getInterceptor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </members>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A ChannelInterceptor is an interceptor that intercepts &#xA; * messages and membership messages in the channel stack.&#xA; * This allows interceptors to modify the message or perform&#xA; * other actions when a message is sent or received.&lt;br>&#xA; * Interceptors are tied together in a linked list.&#xA; * @see org.apache.catalina.tribes.group.ChannelInterceptorBase&#xA; * @author Filip Hanik&#xA; * @version $Revision: 467222 $, $Date: 2006-10-24 05:17:11 +0200 (Tue, 24 Oct 2006) $&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/MembershipListener.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../org/apache/catalina/tribes/Heartbeat.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
