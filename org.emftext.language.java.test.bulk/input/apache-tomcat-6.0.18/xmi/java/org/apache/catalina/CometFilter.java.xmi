<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="CometFilter.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>catalina</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/Filter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="CometFilter">
    <members xsi:type="members:InterfaceMethod" name="doFilterEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="event">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/CometEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chain">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../org/apache/catalina/CometFilterChain.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>doFilterEvent&lt;/code> method of the CometFilter is called by the container&#xA;     * each time a request/response pair is passed through the chain due&#xA;     * to a client event for a resource at the end of the chain. The CometFilterChain passed in to this&#xA;     * method allows the Filter to pass on the event to the next entity in the&#xA;     * chain.&lt;p>&#xA;     * A typical implementation of this method would follow the following pattern:- &lt;br>&#xA;     * 1. Examine the request&lt;br>&#xA;     * 2. Optionally wrap the request object contained in the event with a custom implementation to&#xA;     * filter content or headers for input filtering and pass a CometEvent instance containing&#xA;     * the wrapped request to the next filter&lt;br>&#xA;     * 3. Optionally wrap the response object contained in the event with a custom implementation to&#xA;     * filter content or headers for output filtering and pass a CometEvent instance containing&#xA;     * the wrapped request to the next filter&lt;br>&#xA;     * 4. a) &lt;strong>Either&lt;/strong> invoke the next entity in the chain using the CometFilterChain object (&lt;code>chain.doFilterEvent()&lt;/code>), &lt;br>   &#xA;     * 4. b) &lt;strong>or&lt;/strong> not pass on the request/response pair to the next entity in the filter chain to block the event processing&lt;br>&#xA;     * 5. Directly set fields on the response after invocation of the next entity in the filter chain.&#xA;     * &#xA;     * @param event the event that is being processed. Another event may be passed along the chain.&#xA;     * @param chain &#xA;     * @throws IOException&#xA;     * @throws ServletException&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A Comet filter, similar to regular filters, performs filtering tasks on either &#xA; * the request to a resource (a Comet servlet), or on the response from a resource, or both.&#xA; * &lt;br>&lt;br>&#xA; * Filters perform filtering in the &lt;code>doFilterEvent&lt;/code> method. Every Filter has access to &#xA; * a FilterConfig object from which it can obtain its initialization parameters, a&#xA; * reference to the ServletContext which it can use, for example, to load resources&#xA; * needed for filtering tasks.&#xA; * &lt;p>&#xA; * Filters are configured in the deployment descriptor of a web application&#xA; * &lt;p>&#xA; * Examples that have been identified for this design are&lt;br>&#xA; * 1) Authentication Filters &lt;br>&#xA; * 2) Logging and Auditing Filters &lt;br>&#xA; * 3) Image conversion Filters &lt;br>&#xA; * 4) Data compression Filters &lt;br>&#xA; * 5) Encryption Filters &lt;br>&#xA; * 6) Tokenizing Filters &lt;br>&#xA; * 7) Filters that trigger resource access events &lt;br>&#xA; * 8) XSL/T filters &lt;br>&#xA; * 9) Mime-type chain Filter &lt;br>&#xA; * &lt;br>&#xA; * &#xA; * @author Remy Maucherat&#xA; * @author Filip Hanik&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/Filter.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
