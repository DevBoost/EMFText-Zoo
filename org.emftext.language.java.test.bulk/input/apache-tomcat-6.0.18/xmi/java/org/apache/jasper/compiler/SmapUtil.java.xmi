<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../java.ecore#/17" name="SmapUtil.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>jasper</namespaces>
  <namespaces>compiler</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/FileInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>jasper</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>jasper</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SmapUtil">
    <members xsi:type="members:Field" name="log">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/juli/logging/LogFactory.class.xmi#//@classifiers.0/@members.17"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:ReflectiveClassReference"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/juli/logging/LogFactory.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </next>
        </next>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>apache</namespaces>
        <namespaces>juli</namespaces>
        <namespaces>logging</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="SMAP_ENCODING">
      <initialValue xsi:type="references:StringReference" value="UTF-8"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//*********************************************************************</comments>
        <comments>// Constants</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="generateSmap">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctxt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pageNodes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Node</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$Nodes.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//*********************************************************************</comments>
        <comments>// Public entry points</comments>
        <comments>/**&#xA;     * Generates an appropriate SMAP representing the current compilation&#xA;     * context.  (JSR-045.)&#xA;     *&#xA;     * @param ctxt Current compilation context&#xA;     * @param pageNodes The current JSP page&#xA;     * @return a SMAP for the page&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="psVisitor">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.9">
              <comments>// Scan the nodes for presence of Jasper generated inner classes</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.9"/>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node$Nodes.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable"/>
            </next>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="map">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.9/@members.2"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="g">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// set up our SMAP generator</comments>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>/** Disable reading of input SMAP because:&#xA;            1. There is a bug here: getRealPath() is null if .jsp is in a jar&#xA;        &#x9;Bugzilla 14660.&#xA;            2. Mappings from other sources into .jsp files are not supported.&#xA;            TODO: fix 1. if 2. is not true.&#xA;        // determine if we have an input SMAP&#xA;        String smapPath = inputSmapPath(ctxt.getRealPath(ctxt.getJspFile()));&#xA;            File inputSmap = new File(smapPath);&#xA;            if (inputSmap.exists()) {&#xA;                byte[] embeddedSmap = null;&#xA;            byte[] subSmap = SDEInstaller.readWhole(inputSmap);&#xA;            String subSmapString = new String(subSmap, SMAP_ENCODING);&#xA;            g.addSmap(subSmapString, &quot;JSP&quot;);&#xA;        }&#xA;        **/</comments>
              <comments>// now, assemble info about our own stratum (JSP) using JspLineMap</comments>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="JSP"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0/@members.64"/>
                </next>
              </arguments>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
          <comments>// Map out Node.Nodes</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.4/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/jasper/Options.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0/@members.65"/>
            </next>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.4/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.4/@variable"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="outSmap">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0/@members.69"/>
                    </next>
                  </children>
                  <children xsi:type="references:StringReference" value=".smap"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="so">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.9/@statement/@statements.0/@variable"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.9/@statement/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0/@members.31"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.10"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.9/@statement/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0/@members.15"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/jasper/Options.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0/@members.65"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="classFileName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0/@members.69"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="innerClassCount">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../util/HashMap.class.xmi#//@classifiers.0/@members.25"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="smapInfo">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <sizes xsi:type="expressions:AdditiveExpression">
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <children xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.11/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </children>
              <additiveOperators xsi:type="operators:Addition"/>
            </sizes>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.12/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.10/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.12/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.10"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="count">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="iter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../../util/Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@variable">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../util/Set.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../../util/HashMap.class.xmi#//@classifiers.0/@members.52"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="entry">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../../../util/Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>Map</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../../../util/Map$Entry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.16/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="innerClass">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../util/Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../util/Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.4/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0/@members.8"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0/@members.64"/>
                    </next>
                  </arguments>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.7"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.4/@variable"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="innerClassFileName">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.10/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.10/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.49"/>
                        <arguments xsi:type="references:StringReference" value=".class"/>
                      </next>
                    </arguments>
                  </next>
                </children>
                <children xsi:type="literals:CharacterLiteral" value="36"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.1/@variable"/>
                <children xsi:type="references:StringReference" value=".class"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="outSmap">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.7/@variable"/>
                      <children xsi:type="references:StringReference" value=".smap"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="so">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.8/@statement/@statements.0/@variable"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.8/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0/@members.31"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.10"/>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.8/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../io/PrintWriter.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/jasper/Options.class.xmi#//@classifiers.0/@members.10"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/JspCompilationContext.class.xmi#//@classifiers.0/@members.65"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.12/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.15/@variable"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.17/@statement/@statements.7/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.12/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.15/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapGenerator.class.xmi#//@classifiers.0/@members.10"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.15/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.16/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.12/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="installSmap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="smap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="outServlet">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@init"/>
                  </arraySelectors>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.11">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@statement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.32"/>
                  </next>
                  <arraySelectors>
                    <position xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@init"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </position>
                  </arraySelectors>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentPlus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="unqualify">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//*********************************************************************</comments>
        <comments>// Private utilities</comments>
        <comments>/**&#xA;     * Returns an unqualified version of the given file path.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.59"/>
              <arguments xsi:type="literals:CharacterLiteral" value="92"/>
              <arguments xsi:type="literals:CharacterLiteral" value="47"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.55"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.47"/>
                  <arguments xsi:type="literals:CharacterLiteral" value="47"/>
                </next>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="inputSmapPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns a file path corresponding to a potential SMAP input&#xA;     * for the given compilation input (JSP file).&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.56"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.47"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="46"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </next>
          </children>
          <children xsi:type="references:StringReference" value="smap"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="SDEInstaller">
      <members xsi:type="members:Field" name="log">
        <initialValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../org/apache/juli/logging/LogFactory.class.xmi#//@classifiers.0/@members.17"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                      <next xsi:type="references:ReflectiveClassReference"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../../org/apache/juli/logging/LogFactory.class.xmi#//@classifiers.0"/>
                </next>
              </next>
            </next>
          </next>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>apache</namespaces>
          <namespaces>juli</namespaces>
          <namespaces>logging</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="nameSDE">
        <initialValue xsi:type="references:StringReference" value="SourceDebugExtension"/>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="orig">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </members>
      <members xsi:type="members:Field" name="sdeAttr">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </members>
      <members xsi:type="members:Field" name="gen">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </members>
      <members xsi:type="members:Field" name="origPos">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <typeReference xsi:type="types:Int"/>
      </members>
      <members xsi:type="members:Field" name="genPos">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <typeReference xsi:type="types:Int"/>
      </members>
      <members xsi:type="members:Field" name="sdeIndex">
        <typeReference xsi:type="types:Int"/>
      </members>
      <members xsi:type="members:ClassMethod" name="main">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="args">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.10">
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.8/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </arguments>
                </arguments>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.8/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </arraySelectors>
                  </arguments>
                </arguments>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.8/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.9">
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.8/@parameters.0">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </arguments>
                  </arguments>
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.8/@parameters.0">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </arraySelectors>
                    </arguments>
                  </arguments>
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.8/@parameters.0">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      </arraySelectors>
                    </arguments>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.8/@parameters.0">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:StringReference" value="Usage: &lt;command> &lt;input class file> "/>
                        <children xsi:type="references:StringReference" value="&lt;attribute file> &lt;output class file name>&#xA;"/>
                        <children xsi:type="references:StringReference" value="&lt;command> &lt;input/output class file> &lt;attribute file>"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                    </next>
                    <target xsi:type="members:Field" href="../../../../lang/System.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../../lang/System.class.xmi#//@classifiers.0"/>
                </expression>
              </statements>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="install">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="inClassFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="attrFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="outClassFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.6"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.9/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.9/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.9/@parameters.2"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="install">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="inOutClassFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="attrFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tmpFile">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.10/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="references:StringReference" value="tmp"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.6"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.10/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.10/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.10/@statements.0/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="inOutClassFile.delete() failed"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.10/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.40"/>
              </next>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="tmpFile.renameTo(inOutClassFile) failed"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.10/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.49"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.10/@parameters.0"/>
              </next>
            </child>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="install">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="classFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="smap">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tmpFile">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.11/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="references:StringReference" value="tmp"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.6"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.11/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.11/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.11/@statements.0/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="classFile.delete() failed"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.11/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.40"/>
              </next>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="tmpFile.renameTo(classFile) failed"/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.11/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.49"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.11/@parameters.0"/>
              </next>
            </child>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:Constructor" name="SDEInstaller">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="no such file: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@parameters.0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.33"/>
              </next>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.2">
              <comments>// get the bytes</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@parameters.0"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.4"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Byte"/>
              <sizes xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.2">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@parameters.1">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </sizes>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.15">
            <comments>// do it</comments>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="outStream">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// write result</comments>
                <target xsi:type="classifiers:Class" href="../../../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@parameters.2"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@statements.5/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../io/FileOutputStream.class.xmi#//@classifiers.0/@members.13"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.4"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.12/@statements.5/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../io/FileOutputStream.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="inClassFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sdeAttr">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="outClassFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
      </members>
      <members xsi:type="members:Constructor" name="SDEInstaller">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.13/@parameters.0"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.13/@parameters.1"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.13/@parameters.2"/>
            <callTarget xsi:type="literals:This"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="inClassFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="attrFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="outClassFile">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
      </members>
      <members xsi:type="members:ClassMethod" name="readWhole">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="input">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="inStream">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../io/FileInputStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../io/FileInputStream.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@parameters.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="len">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Int"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../io/File.class.xmi#//@classifiers.0/@members.38"/>
                </next>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="bytes">
            <typeReference xsi:type="types:Byte"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Byte"/>
              <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.1/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="expected size: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.1/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../io/FileInputStream.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.2/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.1/@variable"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.1/@variable"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../io/FileInputStream.class.xmi#//@classifiers.0/@members.12"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.14/@statements.2/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="addSDE">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="i">
            <typeReference xsi:type="types:Int"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="constantPoolCountPos">
            <typeReference xsi:type="types:Int">
              <comments>// magic min/maj version</comments>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="constantPoolCount">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="constant pool count: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.3/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.3/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.7">
              <comments>// copy old constant pool return index of SDE symbol, if found</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.3/@variable"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.30">
                <comments>// if &quot;SourceDebugExtension&quot; symbol not there add it</comments>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.7">
                  <comments>// increment the countantPoolCount</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.3/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.3/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.19">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.2/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.3/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="SourceDebugExtension not found, installed at: "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.7"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.7"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="SourceDebugExtension found at: "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.7"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </condition>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interfaceCount">
            <typeReference xsi:type="types:Int">
              <comments>// access, this, super</comments>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.9/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="interfaceCount: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.9/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
            <arguments xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.9/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.16"/>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.16">
            <comments>// fields</comments>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="attrCountPos">
            <typeReference xsi:type="types:Int">
              <comments>// methods</comments>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="attrCount">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.16/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="class attrCount: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.16/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// copy the class attributes, return true if SDE attr found (not copied)</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.16/@variable"/>
                <operator xsi:type="operators:PlusPlus">
                  <comments>// we will be adding SDE and it isn't already counted</comments>
                </operator>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.19">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.15/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.16/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="references:StringReference" value="class attrCount incremented"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.17">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.15/@statements.16/@variable"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.18">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.7"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="copyMembers">
        <typeReference xsi:type="types:Void"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="count">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.0/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="members count: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.0/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="attrCount">
                <typeReference xsi:type="types:Int">
                  <comments>// access, name, descriptor</comments>
                </typeReference>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.3/@statement/@statements.1/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="member attr count: "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.3/@statement/@statements.1/@variable"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.17">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.3/@statement/@statements.1/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.3/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.0/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.16/@statements.3/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="copyAttrs">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="attrCount">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sdeFound">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="nameIndex">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// don't write old SDE</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="references:StringReference" value="SDE attr found"/>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.7"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.1/@statement/@statements.0/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="len">
                    <typeReference xsi:type="types:Int">
                      <comments>// name</comments>
                    </typeReference>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.22"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.25">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.1/@statement/@statements.1/@elseStatement/@statements.1/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.1/@statement/@statements.1/@elseStatement/@statements.1/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:StringReference" value="attr len: "/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.1/@statement/@statements.1/@elseStatement/@statements.1/@variable"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.1/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.1/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.17/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="writeAttrForSDE">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="index">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.18/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.3">
              <next xsi:type="references:IdentifierReference"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.23">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.3">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.18/@statements.2/@init"/>
                  </arraySelectors>
                </arguments>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.18/@statements.2/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.3">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.18/@statements.2/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="randomAccessWriteU2">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="val">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="savePos">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.19/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.19/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.19/@statements.0/@variable"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="readU1">
        <typeReference xsi:type="types:Int"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:AndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Int"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.2">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.5"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </child>
              </expression>
            </children>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="readU2">
        <typeReference xsi:type="types:Int"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="res">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.20"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.21/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.20"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="readU4">
        <typeReference xsi:type="types:Int"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="res">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.22/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="writeU1">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="val">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.4">
              <arraySelectors>
                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </position>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Byte"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.23/@parameters.0"/>
            </value>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="writeU2">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="val">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.23">
            <arguments xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.24/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.23">
            <arguments xsi:type="expressions:AndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.24/@parameters.0"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
            </arguments>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="writeU4">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="val">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.25/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <arguments xsi:type="expressions:AndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.25/@parameters.0"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="65535"/>
            </arguments>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="copy">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="count">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.4">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.2">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.5"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.26/@statements.0/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.26/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.26/@statements.0/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="readBytes">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="count">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="bytes">
            <typeReference xsi:type="types:Byte"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Byte"/>
              <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.27/@parameters.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.27/@statements.0/@variable">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.27/@statements.1/@init"/>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.2">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.5"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.27/@statements.1/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.27/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.27/@statements.1/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.27/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="writeBytes">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="bytes">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
        </parameters>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.4">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.6"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.28/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.28/@statements.0/@init"/>
                  </arraySelectors>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.28/@statements.0/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.28/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.28/@statements.0/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="copyConstantPool">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="constantPoolCount">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sdeIndex">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <comments>// copy const pool index zero not in class file</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="tag">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.20"/>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.23">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Switch">
              <cases xsi:type="statements:NormalSwitchCase">
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <comments>// Class</comments>
                <statements xsi:type="statements:Condition">
                  <comments>// String</comments>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
                          <children xsi:type="references:StringReference" value=" copying 2 bytes"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="9"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <comments>// Field</comments>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <comments>// Method</comments>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="11"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <comments>// InterfaceMethod</comments>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <comments>// Integer</comments>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <comments>// Float</comments>
                <statements xsi:type="statements:Condition">
                  <comments>// NameAndType</comments>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
                          <children xsi:type="references:StringReference" value=" copying 4 bytes"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <comments>// Long</comments>
                <statements xsi:type="statements:Condition">
                  <comments>// Double</comments>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
                          <children xsi:type="references:StringReference" value=" copying 8 bytes"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.26">
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="len">
                    <typeReference xsi:type="types:Int">
                      <comments>// Utf8</comments>
                    </typeReference>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.21"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.2/@cases.10/@statements.0/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="utf8">
                    <typeReference xsi:type="types:Byte"/>
                    <arrayDimensionsBefore/>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.27">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.2/@cases.10/@statements.0/@variable"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="str">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.2/@cases.10/@statements.2/@variable"/>
                      <arguments xsi:type="references:StringReference" value="UTF-8"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
                          <children xsi:type="references:StringReference" value=" read class attr -- '"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.2/@cases.10/@statements.3/@variable"/>
                          <children xsi:type="references:StringReference" value="'"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.2/@cases.10/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.1"/>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.28">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.2/@cases.10/@statements.2/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </cases>
              <cases xsi:type="statements:DefaultSwitchCase">
                <statements xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="unexpected tag: "/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.0/@variable"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </throwable>
                </statements>
              </cases>
              <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@statement/@statements.0/@variable"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@parameters.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.1/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.29/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="writeUtf8ForSDE">
        <typeReference xsi:type="types:Void"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="len">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.23">
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.24">
            <comments>// Utf8 tag</comments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.30/@statements.0/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@members.23">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.23"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.30/@statements.3/@init"/>
                  </next>
                </arguments>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.30/@statements.3/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.30/@statements.0/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:PrefixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@members.30/@statements.3/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//*********************************************************************</comments>
        <comments>// Installation logic (from Robert Field, JSR-045 spec lead)</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="evaluateNodes">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nodes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Node</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$Nodes.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="innerClassMap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="breakAtLF">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node$Nodes.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.8"/>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2"/>
              </arguments>
            </next>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="SmapGenVisitor">
      <members xsi:type="members:Field" name="smap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="breakAtLF">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="innerClassMap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="SmapGenVisitor">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.3/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.3/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.3/@parameters.2"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="breakAtLF">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="map">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="visitBody">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="smapSave">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="innerClass">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.4/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.43"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0"/>
                  <self xsi:type="literals:This"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.2">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../util/HashMap.class.xmi#//@classifiers.0/@members.27"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.4/@statements.1/@variable"/>
                    </next>
                  </child>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.4/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node$Visitor.class.xmi#//@classifiers.0/@members.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.4/@parameters.0"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.4/@statements.0/@variable"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$Declaration.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.5/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$Expression.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.6/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$Scriptlet.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.7/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$IncludeAction.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.8/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.8/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$ForwardAction.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.9/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.9/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$GetProperty.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.10/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.10/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$SetProperty.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.11/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.11/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$UseBean.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.12/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.12/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$PlugIn.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.13/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.13/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$CustomTag.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.14/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.14/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$UninterpretedTag.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.15/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.15/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$JspElement.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.16/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.16/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$JspText.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.17/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.17/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$NamedAttribute.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.18/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$JspBody.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.19/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.19/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$InvokeAction.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.20/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.20/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$DoBodyAction.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.21/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.4">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.21/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$ELExpression.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.25">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.22/@parameters.0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="visit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>Node</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$TemplateText.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/JasperException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="mark">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.35"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="fileName">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>//Add the file information</comments>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0/@members.21"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.2/@variable"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.2/@variable"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="iInputStartLine">
            <typeReference xsi:type="types:Int">
              <comments>//Add a LineInfo that corresponds to the beginning of this node</comments>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0/@members.16"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="iOutputStartLine">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.37"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="iOutputLineIncrement">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.1"/>
              <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0/@members.9"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.4/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.2/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.5/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.6/@variable"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="extraSmap">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <comments>// Output additional mappings in the text</comments>
              <namespaces>java</namespaces>
              <namespaces>util</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../util/ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node$TemplateText.class.xmi#//@classifiers.0/@members.8"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.5/@variable"/>
                    <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.6/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0/@members.9"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.4/@variable"/>
                        <children xsi:type="expressions:NestedExpression">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
                          </next>
                          <expression xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../../lang/Integer.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.8/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../../util/ArrayList.class.xmi#//@classifiers.0/@members.16"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.9/@statement/@statements.0/@init"/>
                              </next>
                            </child>
                          </expression>
                        </children>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.2/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.5/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.6/@variable"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.9/@statement/@statements.0/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.8/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../util/ArrayList.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.9/@statement/@statements.0/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.23/@statements.8/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="doSmap">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="inLineCount">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="outIncrement">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="skippedLines">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="mark">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.35"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="unqualifiedName">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0/@members.21"/>
                </next>
              </arguments>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@statements.2/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0/@members.21"/>
                </next>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0/@members.9"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@parameters.3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Mark.class.xmi#//@classifiers.0/@members.21"/>
                </next>
              </arguments>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@parameters.3"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.37"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@parameters.3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.24/@parameters.2"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="doSmap">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.25/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.25/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.39"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.25/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.37"/>
                </next>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="doSmapText">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="text">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.34"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="index">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="next">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="lineCount">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="skippedLines">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="slashStarSeen">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="beginning">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <comments>// Count lines inside text, but skipping comment lines at the</comments>
          <comments>// beginning of the text.</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="line">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.71"/>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.1/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.2/@variable"/>
                      </next>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.5/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:BooleanLiteral" value="true"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.5/@variable"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.7/@statement/@statements.0/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.42"/>
                        <arguments xsi:type="references:StringReference" value="/*"/>
                      </next>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.4/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="endIndex">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.7/@statement/@statements.0/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.49"/>
                            <arguments xsi:type="references:StringReference" value="*/"/>
                          </next>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.5/@variable">
                              <comments>// End of /* */ comment</comments>
                            </child>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="literals:BooleanLiteral"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.4/@variable">
                                  <comments>// Some executable code after comment</comments>
                                </child>
                                <operator xsi:type="operators:MinusMinus"/>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.6/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="literals:BooleanLiteral"/>
                              </expression>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.7/@statement/@statements.0/@statement/@statements.2/@statement/@statements.1/@variable"/>
                            <children xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.7/@statement/@statements.0/@statement/@statements.0/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                                </next>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </children>
                            <relationOperators xsi:type="operators:LessThan"/>
                          </condition>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.7/@statement/@statements.0/@statement/@statements.2/@statement/@statements.1/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.5/@variable"/>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.4/@variable"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.7/@statement/@statements.0/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                          </next>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.7/@statement/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.42"/>
                          <arguments xsi:type="references:StringReference" value="//"/>
                        </next>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.6/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:BooleanLiteral"/>
                        </expression>
                      </statements>
                    </elseStatement>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.6/@variable"/>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.3/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.2/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../lang/String.class.xmi#//@classifiers.0/@members.46"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="10"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.1/@variable"/>
                  </next>
                </value>
              </expression>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.3/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@members.26/@statements.4/@variable"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <namespaces>Node</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$Visitor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="PreScanVisitor">
      <members xsi:type="members:Field" name="map">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:ClassMethod" name="doVisit">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="inner">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.1/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Node.class.xmi#//@classifiers.0/@members.43"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../util/HashMap.class.xmi#//@classifiers.0/@members.31"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.1/@statements.0/@variable"/>
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/SmapStratum.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:StringReference" value="JSP"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.1/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../util/HashMap.class.xmi#//@classifiers.0/@members.29"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.1/@statements.0/@variable"/>
                </next>
              </child>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getMap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../util/HashMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@members.0"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <namespaces>Node</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Node$Visitor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Contains static utilities for generating SMAP data based on the&#xA; * current version of Jasper.&#xA; * &#xA; * @author Jayson Falkner&#xA; * @author Shawn Bayern&#xA; * @author Robert Field (inner SDEInstaller class)&#xA; * @author Mark Roth&#xA; * @author Kin-man Chung&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
