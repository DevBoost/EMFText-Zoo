<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../../java.ecore#/17" name="UTF8Reader.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>jasper</namespaces>
  <namespaces>xmlparser</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/Reader.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/UTFDataFormatException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>jasper</namespaces>
    <namespaces>compiler</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="UTF8Reader">
    <comments>// invalidSurrogate(int)</comments>
    <members xsi:type="members:Field" name="log">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../../org/apache/juli/logging/LogFactory.class.xmi#//@classifiers.0/@members.17"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:ReflectiveClassReference"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../../org/apache/juli/logging/LogFactory.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </next>
        </next>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>apache</namespaces>
        <namespaces>juli</namespaces>
        <namespaces>logging</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_BUFFER_SIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2048"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Constants</comments>
        <comments>//</comments>
        <comments>/** Default byte buffer size (2048). */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEBUG_READ">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// debugging</comments>
        <comments>/** Debug read. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="fInputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>//</comments>
        <comments>// Data</comments>
        <comments>//</comments>
        <comments>/** Input stream. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fBuffer">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Byte buffer. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fOffset">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** Offset into buffer. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="fSurrogate">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Surrogate character. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="UTF8Reader">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Byte"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inputStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Constructors</comments>
        <comments>//</comments>
        <comments>/** &#xA;     * Constructs a UTF-8 reader from the specified input stream, &#xA;     * buffer size and MessageFormatter.&#xA;     *&#xA;     * @param inputStream The input stream.&#xA;     * @param size        The initial buffer size.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Reader methods</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Read a single character.  This method will block until a character is&#xA;     * available, an I/O error occurs, or the end of the stream is reached.&#xA;     *&#xA;     * &lt;p> Subclasses that intend to support efficient single-character input&#xA;     * should override this method.&#xA;     *&#xA;     * @return     The character read, as an integer in the range 0 to 16383&#xA;     *             (&lt;tt>0x00-0xffff&lt;/tt>), or -1 if the end of the stream has&#xA;     *             been reached&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="c">
          <typeReference xsi:type="types:Int">
            <comments>// decode character</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// use surrogate</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="index">
              <typeReference xsi:type="types:Int">
                <comments>// NOTE: We use the index into the buffer if there are remaining</comments>
                <comments>//       bytes from the last block read. -Ac</comments>
              </typeReference>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="b0">
              <typeReference xsi:type="types:Int">
                <comments>// get first byte</comments>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </expressionIf>
                <expressionElse xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// UTF-8:   [0xxx xxxx]</comments>
            <comments>// Unicode: [0000 0000] [0xxx xxxx]</comments>
            <comments>// UTF-8:   [110y yyyy] [10xx xxxx]</comments>
            <comments>// Unicode: [0000 0yyy] [yyxx xxxx]</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Char"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <comments>// UTF-8:   [1110 zzzz] [10yy yyyy] [10xx xxxx]</comments>
              <comments>// Unicode: [zzzz yyyy] [yyxx xxxx]</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="b1">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                      </child>
                      <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </expressionIf>
                      <expressionElse xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="expressions:SuffixUnaryModificationExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                              <operator xsi:type="operators:PlusPlus"/>
                            </position>
                          </arraySelectors>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </expressionElse>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@statement/@statements.0/@variable"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@statement/@statements.0/@variable"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:InclusiveOrExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AndExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ShiftExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                              <shiftOperators xsi:type="operators:LeftShift"/>
                            </expression>
                          </children>
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="1984"/>
                        </expression>
                      </children>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
                        </expression>
                      </children>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="224"/>
                  </expression>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <comments>// UTF-8:   [1111 0uuu] [10uu zzzz] [10yy yyyy] [10xx xxxx]*</comments>
                <comments>// Unicode: [1101 10ww] [wwzz zzyy] (high surrogate)</comments>
                <comments>//          [1101 11yy] [yyxx xxxx] (low surrogate)</comments>
                <comments>//          * uuuuu = wwww + 1</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="b1">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                        </child>
                        <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                        </expressionIf>
                        <expressionElse xsi:type="expressions:AndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                                <operator xsi:type="operators:PlusPlus"/>
                              </position>
                            </arraySelectors>
                          </children>
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                        </expressionElse>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="b2">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                        </child>
                        <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                          </next>
                        </expressionIf>
                        <expressionElse xsi:type="expressions:AndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                                <operator xsi:type="operators:PlusPlus"/>
                              </position>
                            </arraySelectors>
                          </children>
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                        </expressionElse>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AndExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:InclusiveOrExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AndExpression">
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:ShiftExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
                                <shiftOperators xsi:type="operators:LeftShift"/>
                              </expression>
                            </children>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="61440"/>
                          </expression>
                        </children>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AndExpression">
                            <children xsi:type="expressions:NestedExpression">
                              <expression xsi:type="expressions:ShiftExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                                <shiftOperators xsi:type="operators:LeftShift"/>
                              </expression>
                            </children>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="4032"/>
                          </expression>
                        </children>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
                          </expression>
                        </children>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="240"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="224"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <comments>// error</comments>
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="b1">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          </child>
                          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                            </next>
                          </expressionIf>
                          <expressionElse xsi:type="expressions:AndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                              <arraySelectors>
                                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                                  <operator xsi:type="operators:PlusPlus"/>
                                </position>
                              </arraySelectors>
                            </children>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                          </expressionElse>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="b2">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          </child>
                          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                            </next>
                          </expressionIf>
                          <expressionElse xsi:type="expressions:AndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                              <arraySelectors>
                                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                                  <operator xsi:type="operators:PlusPlus"/>
                                </position>
                              </arraySelectors>
                            </children>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                          </expressionElse>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="b3">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          </child>
                          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                            </next>
                          </expressionIf>
                          <expressionElse xsi:type="expressions:AndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                              <arraySelectors>
                                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.0/@variable"/>
                                  <operator xsi:type="operators:PlusPlus"/>
                                </position>
                              </arraySelectors>
                            </children>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                          </expressionElse>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.6/@variable"/>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.6/@variable"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AndExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.6/@variable"/>
                            <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="uuuuu">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:InclusiveOrExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:ShiftExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                                  <shiftOperators xsi:type="operators:LeftShift"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="28"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:ShiftExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                                  <shiftOperators xsi:type="operators:RightShift"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="3"/>
                            </expression>
                          </children>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.9/@variable"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.9/@variable"/>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="16"/>
                        <relationOperators xsi:type="operators:GreaterThan"/>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="wwww">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.9/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="hs">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:InclusiveOrExpression">
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="55296"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:ShiftExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.11/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                                  <shiftOperators xsi:type="operators:LeftShift"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="960"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:ShiftExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                                  <shiftOperators xsi:type="operators:LeftShift"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="60"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:ShiftExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                                  <shiftOperators xsi:type="operators:RightShift"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="3"/>
                            </expression>
                          </children>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="ls">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:InclusiveOrExpression">
                          <children xsi:type="literals:HexIntegerLiteral" hexValue="56320"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:ShiftExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                                  <shiftOperators xsi:type="operators:LeftShift"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="960"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.6/@variable"/>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
                            </expression>
                          </children>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.12/@variable"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.3/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.13/@variable"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="248"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="240"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@statement/@statements.1/@variable"/>
                      </expression>
                    </statements>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// return character</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="read(): 0x"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../../lang/Integer.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../../lang/Integer.class.xmi#//@classifiers.0"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// read():int</comments>
        <comments>/**&#xA;     * Read characters into a portion of an array.  This method will block&#xA;     * until some input is available, an I/O error occurs, or the end of the&#xA;     * stream is reached.&#xA;     *&#xA;     * @param      ch     Destination buffer&#xA;     * @param      offset Offset at which to start storing characters&#xA;     * @param      length Maximum number of characters to read&#xA;     *&#xA;     * @return     The number of characters read, or -1 if the end of the&#xA;     *             stream has been reached&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="out">
          <typeReference xsi:type="types:Int">
            <comments>// handle surrogate</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Char"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="count">
          <typeReference xsi:type="types:Int">
            <comments>// read bytes</comments>
          </typeReference>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// skip read; last character was in error</comments>
        <comments>// NOTE: Having an offset value other than zero means that there was</comments>
        <comments>//       an error in the last character read. In this case, we have</comments>
        <comments>//       skipped the read so we don't consume any bytes past the </comments>
        <comments>//       error. By signalling the error on the next block read we</comments>
        <comments>//       allow the method to return the most valid characters that</comments>
        <comments>//       it can on the previous block read. -Ac</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// adjust length to read</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <next xsi:type="references:IdentifierReference"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable">
                <comments>// perform read operation</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="total">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
          <annotationsAndModifiers xsi:type="modifiers:Final">
            <comments>// convert bytes to characters</comments>
          </annotationsAndModifiers>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="b0">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// UTF-8:   [0xxx xxxx]</comments>
            <comments>// Unicode: [0000 0000] [0xxx xxxx]</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Char"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// UTF-8:   [110y yyyy] [10xx xxxx]</comments>
            <comments>// Unicode: [0000 0yyy] [yyxx xxxx]</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="b1">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                          </arraySelectors>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </returnValue>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="c">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ShiftExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                            <shiftOperators xsi:type="operators:LeftShift"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="1984"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
                      </expression>
                    </children>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Char"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.2/@statement/@statements.3/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="224"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// UTF-8:   [1110 zzzz] [10yy yyyy] [10xx xxxx]</comments>
            <comments>// Unicode: [zzzz yyyy] [yyxx xxxx]</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="b1">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                          </arraySelectors>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </returnValue>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="b2">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                          </arraySelectors>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </returnValue>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.3/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.3/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.3/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.3/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="c">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ShiftExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
                            <shiftOperators xsi:type="operators:LeftShift"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="61440"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ShiftExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                            <shiftOperators xsi:type="operators:LeftShift"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="4032"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.3/@variable"/>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
                      </expression>
                    </children>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Char"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.3/@statement/@statements.6/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="240"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="224"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// UTF-8:   [1111 0uuu] [10uu zzzz] [10yy yyyy] [10xx xxxx]*</comments>
            <comments>// Unicode: [1101 10ww] [wwzz zzyy] (high surrogate)</comments>
            <comments>//          [1101 11yy] [yyxx xxxx] (low surrogate)</comments>
            <comments>//          * uuuuu = wwww + 1</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="b1">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                          </arraySelectors>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </returnValue>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="b2">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                          </arraySelectors>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </returnValue>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="b3">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.6/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AndExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                          </arraySelectors>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.6/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                <arraySelectors>
                                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                                </arraySelectors>
                              </child>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="expressions:CastExpression">
                                <typeReference xsi:type="types:Byte"/>
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                              </value>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                            </expression>
                          </statements>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </returnValue>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.6/@variable"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                            <arraySelectors>
                              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                            </arraySelectors>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:Byte"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.6/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </returnValue>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.6/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="192"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="uuuuu">
                  <typeReference xsi:type="types:Int">
                    <comments>// decode bytes into surrogate characters</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ShiftExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                            <shiftOperators xsi:type="operators:LeftShift"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="28"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ShiftExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                            <shiftOperators xsi:type="operators:RightShift"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="3"/>
                      </expression>
                    </children>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.9/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.9/@variable"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="16"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="wwww">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.9/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="zzzz">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="15"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="yyyyyy">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.3/@variable"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="xxxxxx">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.6/@variable"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="hs">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="55296"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ShiftExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.11/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                            <shiftOperators xsi:type="operators:LeftShift"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="960"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.12/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        <shiftOperators xsi:type="operators:LeftShift"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.13/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                        <shiftOperators xsi:type="operators:RightShift"/>
                      </expression>
                    </children>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="ls">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:InclusiveOrExpression">
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="56320"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ShiftExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.13/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                            <shiftOperators xsi:type="operators:LeftShift"/>
                          </expression>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="960"/>
                      </expression>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.14/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                    <comments>// set characters</comments>
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Char"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.15/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </position>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Char"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.4/@statement/@statements.16/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="248"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="240"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// error</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Byte"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.4/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="in">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.5/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// return number of characters converted</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.8"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="read(char[],"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
                    <children xsi:type="literals:CharacterLiteral" value="44"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
                    <children xsi:type="references:StringReference" value="): count="/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../org/apache/juli/logging/Log.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="skip">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// read(char[],int,int)</comments>
        <comments>/**&#xA;     * Skip characters.  This method will block until some characters are&#xA;     * available, an I/O error occurs, or the end of the stream is reached.&#xA;     *&#xA;     * @param  n  The number of characters to skip&#xA;     *&#xA;     * @return    The number of characters actually skipped&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="remaining">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ch">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
              <next xsi:type="references:IdentifierReference"/>
            </sizes>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:DoWhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="length">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </expressionIf>
                <expressionElse xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Int"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="count">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@statement/@statements.0/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@statement/@statements.1/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Break"/>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="skipped">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ready">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// skip(long):long</comments>
        <comments>/**&#xA;     * Tell whether this stream is ready to be read.&#xA;     *&#xA;     * @return True if the next read() is guaranteed not to block for input,&#xA;     * false otherwise.  Note that returning false does not guarantee that the&#xA;     * next read will block.&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="markSupported">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ready()</comments>
        <comments>/**&#xA;     * Tell whether this stream supports the mark() operation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="mark">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="readAheadLimit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// markSupported()</comments>
        <comments>/**&#xA;     * Mark the present position in the stream.  Subsequent calls to reset()&#xA;     * will attempt to reposition the stream to this point.  Not all&#xA;     * character-input streams support the mark() operation.&#xA;     *&#xA;     * @param  readAheadLimit  Limit on the number of characters that may be&#xA;     *                         read while still preserving the mark.  After&#xA;     *                         reading this many characters, attempting to&#xA;     *                         reset the stream may fail.&#xA;     *&#xA;     * @exception  IOException  If the stream does not support mark(),&#xA;     *                          or if some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:StringReference" value="jsp.error.xml.operationNotSupported"/>
              <arguments xsi:type="references:StringReference" value="mark()"/>
              <arguments xsi:type="references:StringReference" value="UTF-8"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reset the stream.  If the stream has been marked, then attempt to&#xA;     * reposition it at the mark.  If the stream has not been marked, then&#xA;     * attempt to reset it in some way appropriate to the particular stream,&#xA;     * for example by repositioning it to its starting point.  Not all&#xA;     * character-input streams support the reset() operation, and some support&#xA;     * reset() without supporting mark().&#xA;     *&#xA;     * @exception  IOException  If the stream has not been marked,&#xA;     *                          or if the mark has been invalidated,&#xA;     *                          or if the stream does not support reset(),&#xA;     *                          or if some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// reset()</comments>
        <comments>/**&#xA;     * Close the stream.  Once a stream has been closed, further read(),&#xA;     * ready(), mark(), or reset() invocations will throw an IOException.&#xA;     * Closing a previously-closed stream, however, has no effect.&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../io/InputStream.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="expectedByte">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="position">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="count">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/UTFDataFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// close()</comments>
        <comments>//</comments>
        <comments>// Private methods</comments>
        <comments>//</comments>
        <comments>/** Throws an exception for expected byte. */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/UTFDataFormatException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:StringReference" value="jsp.error.xml.expectedByte"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../lang/Integer.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../lang/Integer.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../lang/Integer.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../lang/Integer.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="invalidByte">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="position">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="count">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/UTFDataFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// expectedByte(int,int,int)</comments>
        <comments>/** Throws an exception for invalid byte. */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/UTFDataFormatException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:StringReference" value="jsp.error.xml.invalidByte"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../lang/Integer.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../lang/Integer.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../lang/Integer.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../lang/Integer.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="invalidSurrogate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uuuuu">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/UTFDataFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// invalidByte(int,int,int,int)</comments>
        <comments>/** Throws an exception for invalid surrogate bits. */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../io/UTFDataFormatException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:StringReference" value="jsp.error.xml.invalidHighSurrogate"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../../lang/Integer.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../../lang/Integer.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../../org/apache/jasper/compiler/Localizer.class.xmi#//@classifiers.0"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * @author Andy Clark, IBM&#xA; *&#xA; * @version $Id: UTF8Reader.java 467222 2006-10-24 03:17:11Z markt $&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../io/Reader.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
