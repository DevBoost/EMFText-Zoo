<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../../../java.ecore#/16" name="Catch.java">
  <comments>/*&#xA; * Licensed to the Apache Software Foundation (ASF) under one or more&#xA; * contributor license agreements.  See the NOTICE file distributed with&#xA; * this work for additional information regarding copyright ownership.&#xA; * The ASF licenses this file to You under the Apache License, Version 2.0&#xA; * (the &quot;License&quot;); you may not use this file except in compliance with&#xA; * the License.  You may obtain a copy of the License at&#xA; * &#xA; *      http://www.apache.org/licenses/LICENSE-2.0&#xA; * &#xA; * Unless required by applicable law or agreed to in writing, software&#xA; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; * See the License for the specific language governing permissions and&#xA; * limitations under the License.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>apache</namespaces>
  <namespaces>jasper</namespaces>
  <namespaces>tagplugins</namespaces>
  <namespaces>jstl</namespaces>
  <namespaces>core</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>jasper</namespaces>
    <namespaces>compiler</namespaces>
    <namespaces>tagplugin</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPlugin.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>apache</namespaces>
    <namespaces>jasper</namespaces>
    <namespaces>compiler</namespaces>
    <namespaces>tagplugin</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Catch">
    <members xsi:type="members:ClassMethod" name="doTag">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctxt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="hasVar">
          <typeReference xsi:type="types:Boolean">
            <comments>//flag for the existence of the var attribute</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.1"/>
              <arguments xsi:type="references:StringReference" value="var"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="exceptionName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>//temp name for exception and caught</comments>
              <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="caughtName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <comments>//main part to generate code</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="boolean "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.2/@variable"/>
              <children xsi:type="references:StringReference" value=" = false;"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:StringReference" value="try{"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.9"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:StringReference" value="}"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <comments>//do catch</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="catch(Throwable "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.1/@variable"/>
              <children xsi:type="references:StringReference" value="){"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>//if the var specified, the exception object should </comments>
        <comments>//be set to the attribute &quot;var&quot; defines in page scope </comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="strVar">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.7"/>
                  <arguments xsi:type="references:StringReference" value="var"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="    pageContext.setAttribute(&quot;"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.8/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:StringReference" value="&quot;, "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.1/@variable"/>
                  <children xsi:type="references:StringReference" value=", PageContext.PAGE_SCOPE);"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.0/@variable"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <comments>//whenever there's exception caught, </comments>
          <comments>//the flag caught should be set true;</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="    "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.2/@variable"/>
              <children xsi:type="references:StringReference" value=" = true;"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:StringReference" value="}"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <comments>//do finally</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:StringReference" value="finally{"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>//if var specified, the attribute it defines </comments>
        <comments>//in page scope should be removed</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="strVar">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.7"/>
                  <arguments xsi:type="references:StringReference" value="var"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="    if(!"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.2/@variable"/>
                  <children xsi:type="references:StringReference" value="){"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="        pageContext.removeAttribute(&quot;"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.12/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:StringReference" value="&quot;, PageContext.PAGE_SCOPE);"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="references:StringReference" value="    }"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.0/@variable"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPluginContext.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:StringReference" value="}"/>
          </next>
        </expression>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../../../org/apache/jasper/compiler/tagplugin/TagPlugin.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
