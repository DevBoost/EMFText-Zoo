<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Servlet.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Servlet">
    <members xsi:type="members:InterfaceMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="config">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called by the servlet container to indicate to a servlet that the &#xA;     * servlet is being placed into service.&#xA;     *&#xA;     * &lt;p>The servlet container calls the &lt;code>init&lt;/code>&#xA;     * method exactly once after instantiating the servlet.&#xA;     * The &lt;code>init&lt;/code> method must complete successfully&#xA;     * before the servlet can receive any requests.&#xA;     *&#xA;     * &lt;p>The servlet container cannot place the servlet into service&#xA;     * if the &lt;code>init&lt;/code> method&#xA;     * &lt;ol>&#xA;     * &lt;li>Throws a &lt;code>ServletException&lt;/code>&#xA;     * &lt;li>Does not return within a time period defined by the Web server&#xA;     * &lt;/ol>&#xA;     *&#xA;     *&#xA;     * @param config&#x9;&#x9;&#x9;a &lt;code>ServletConfig&lt;/code> object &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;containing the servlet's&#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;configuration and initialization parameters&#xA;     *&#xA;     * @exception ServletException &#x9;if an exception has occurred that&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;interferes with the servlet's normal&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;operation&#xA;     *&#xA;     * @see &#x9;&#x9;&#x9;&#x9;UnavailableException&#xA;     * @see &#x9;&#x9;&#x9;&#x9;#getServletConfig&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletConfig">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns a {@link ServletConfig} object, which contains&#xA;     * initialization and startup parameters for this servlet.&#xA;     * The &lt;code>ServletConfig&lt;/code> object returned is the one &#xA;     * passed to the &lt;code>init&lt;/code> method. &#xA;     *&#xA;     * &lt;p>Implementations of this interface are responsible for storing the &#xA;     * &lt;code>ServletConfig&lt;/code> object so that this &#xA;     * method can return it. The {@link GenericServlet}&#xA;     * class, which implements this interface, already does this.&#xA;     *&#xA;     * @return&#x9;&#x9;the &lt;code>ServletConfig&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;that initializes this servlet&#xA;     *&#xA;     * @see &#x9;&#x9;#init&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="service">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="res">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called by the servlet container to allow the servlet to respond to &#xA;     * a request.&#xA;     *&#xA;     * &lt;p>This method is only called after the servlet's &lt;code>init()&lt;/code>&#xA;     * method has completed successfully.&#xA;     * &#xA;     * &lt;p>  The status code of the response always should be set for a servlet &#xA;     * that throws or sends an error.&#xA;     *&#xA;     * &#xA;     * &lt;p>Servlets typically run inside multithreaded servlet containers&#xA;     * that can handle multiple requests concurrently. Developers must &#xA;     * be aware to synchronize access to any shared resources such as files,&#xA;     * network connections, and as well as the servlet's class and instance &#xA;     * variables. &#xA;     * More information on multithreaded programming in Java is available in &#xA;     * &lt;a href=&quot;http://java.sun.com/Series/Tutorial/java/threads/multithreaded.html&quot;>&#xA;     * the Java tutorial on multi-threaded programming&lt;/a>.&#xA;     *&#xA;     *&#xA;     * @param req &#x9;the &lt;code>ServletRequest&lt;/code> object that contains&#xA;     *&#x9;&#x9;&#x9;the client's request&#xA;     *&#xA;     * @param res &#x9;the &lt;code>ServletResponse&lt;/code> object that contains&#xA;     *&#x9;&#x9;&#x9;the servlet's response&#xA;     *&#xA;     * @exception ServletException &#x9;if an exception occurs that interferes&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;with the servlet's normal operation &#xA;     *&#xA;     * @exception IOException &#x9;&#x9;if an input or output exception occurs&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns information about the servlet, such&#xA;     * as author, version, and copyright.&#xA;     * &#xA;     * &lt;p>The string that this method returns should&#xA;     * be plain text and not markup of any kind (such as HTML, XML,&#xA;     * etc.).&#xA;     *&#xA;     * @return &#x9;&#x9;a &lt;code>String&lt;/code> containing servlet information&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="destroy">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Called by the servlet container to indicate to a servlet that the&#xA;     * servlet is being taken out of service.  This method is&#xA;     * only called once all threads within the servlet's&#xA;     * &lt;code>service&lt;/code> method have exited or after a timeout&#xA;     * period has passed. After the servlet container calls this &#xA;     * method, it will not call the &lt;code>service&lt;/code> method again&#xA;     * on this servlet.&#xA;     *&#xA;     * &lt;p>This method gives the servlet an opportunity &#xA;     * to clean up any resources that are being held (for example, memory,&#xA;     * file handles, threads) and make sure that any persistent state is&#xA;     * synchronized with the servlet's current state in memory.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines methods that all servlets must implement.&#xA; *&#xA; * &lt;p>A servlet is a small Java program that runs within a Web server.&#xA; * Servlets receive and respond to requests from Web clients,&#xA; * usually across HTTP, the HyperText Transfer Protocol. &#xA; *&#xA; * &lt;p>To implement this interface, you can write a generic servlet&#xA; * that extends&#xA; * &lt;code>javax.servlet.GenericServlet&lt;/code> or an HTTP servlet that&#xA; * extends &lt;code>javax.servlet.http.HttpServlet&lt;/code>.&#xA; *&#xA; * &lt;p>This interface defines methods to initialize a servlet,&#xA; * to service requests, and to remove a servlet from the server.&#xA; * These are known as life-cycle methods and are called in the&#xA; * following sequence:&#xA; * &lt;ol>&#xA; * &lt;li>The servlet is constructed, then initialized with the &lt;code>init&lt;/code> method.&#xA; * &lt;li>Any calls from clients to the &lt;code>service&lt;/code> method are handled.&#xA; * &lt;li>The servlet is taken out of service, then destroyed with the &#xA; * &lt;code>destroy&lt;/code> method, then garbage collected and finalized.&#xA; * &lt;/ol>&#xA; *&#xA; * &lt;p>In addition to the life-cycle methods, this interface&#xA; * provides the &lt;code>getServletConfig&lt;/code> method, which the servlet &#xA; * can use to get any startup information, and the &lt;code>getServletInfo&lt;/code>&#xA; * method, which allows the servlet to return basic information about itself,&#xA; * such as author, version, and copyright.&#xA; *&#xA; * @author &#x9;Various&#xA; * @version &#x9;$Version$&#xA; *&#xA; * @see &#x9;GenericServlet&#xA; * @see &#x9;javax.servlet.http.HttpServlet&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
