<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ServletRequest.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/BufferedReader.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/Locale.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ServletRequest">
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the value of the named attribute as an &lt;code>Object&lt;/code>,&#xA;     * or &lt;code>null&lt;/code> if no attribute of the given name exists. &#xA;     *&#xA;     * &lt;p> Attributes can be set two ways.  The servlet container may set&#xA;     * attributes to make available custom information about a request.&#xA;     * For example, for requests made using HTTPS, the attribute&#xA;     * &lt;code>javax.servlet.request.X509Certificate&lt;/code> can be used to&#xA;     * retrieve information on the certificate of the client.  Attributes&#xA;     * can also be set programatically using &#xA;     * {@link ServletRequest#setAttribute}.  This allows information to be&#xA;     * embedded into a request before a {@link RequestDispatcher} call.&#xA;     *&#xA;     * &lt;p>Attribute names should follow the same conventions as package&#xA;     * names. This specification reserves names matching &lt;code>java.*&lt;/code>,&#xA;     * &lt;code>javax.*&lt;/code>, and &lt;code>sun.*&lt;/code>. &#xA;     *&#xA;     * @param name&#x9;a &lt;code>String&lt;/code> specifying the name of &#xA;     *&#x9;&#x9;&#x9;the attribute&#xA;     *&#xA;     * @return&#x9;&#x9;an &lt;code>Object&lt;/code> containing the value &#xA;     *&#x9;&#x9;&#x9;of the attribute, or &lt;code>null&lt;/code> if&#xA;     *&#x9;&#x9;&#x9;the attribute does not exist&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;code>Enumeration&lt;/code> containing the&#xA;     * names of the attributes available to this request. &#xA;     * This method returns an empty &lt;code>Enumeration&lt;/code>&#xA;     * if the request has no attributes available to it.&#xA;     * &#xA;     *&#xA;     * @return&#x9;&#x9;an &lt;code>Enumeration&lt;/code> of strings &#xA;     *&#x9;&#x9;&#x9;containing the names &#xA;     * &#x9;&#x9;&#x9;of the request's attributes&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCharacterEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the character encoding used in the body of this&#xA;     * request. This method returns &lt;code>null&lt;/code> if the request&#xA;     * does not specify a character encoding&#xA;     * &#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the name of &#xA;     *&#x9;&#x9;&#x9;the character encoding, or &lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;&#x9;if the request does not specify a character encoding&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCharacterEncoding">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="env">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Overrides the name of the character encoding used in the body of this&#xA;     * request. This method must be called prior to reading request parameters&#xA;     * or reading input using getReader().&#xA;     * &#xA;     *&#xA;     * @param env&#x9;a &lt;code>String&lt;/code> containing the name of &#xA;     *&#x9;&#x9;&#x9;the character encoding.&#xA;     * @throws&#x9;&#x9;java.io.UnsupportedEncodingException if this is not a valid encoding&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the length, in bytes, of the request body &#xA;     * and made available by the input stream, or -1 if the&#xA;     * length is not known. For HTTP servlets, same as the value&#xA;     * of the CGI variable CONTENT_LENGTH.&#xA;     *&#xA;     * @return&#x9;&#x9;an integer containing the length of the &#xA;     * &#x9;&#x9;&#x9;request body or -1 if the length is not known&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the MIME type of the body of the request, or &#xA;     * &lt;code>null&lt;/code> if the type is not known. For HTTP servlets, &#xA;     * same as the value of the CGI variable CONTENT_TYPE.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the name &#xA;     *&#x9;&#x9;&#x9;of the MIME type of &#xA;     * &#x9;&#x9;&#x9;the request, or null if the type is not known&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletInputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the body of the request as binary data using&#xA;     * a {@link ServletInputStream}.  Either this method or &#xA;     * {@link #getReader} may be called to read the body, not both.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;a {@link ServletInputStream} object containing&#xA;     * &#x9;&#x9;&#x9;&#x9;the body of the request&#xA;     *&#xA;     * @exception IllegalStateException  if the {@link #getReader} method&#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9; has already been called for this request&#xA;     *&#xA;     * @exception IOException    &#x9;if an input or output exception occurred&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of a request parameter as a &lt;code>String&lt;/code>,&#xA;     * or &lt;code>null&lt;/code> if the parameter does not exist. Request parameters&#xA;     * are extra information sent with the request.  For HTTP servlets,&#xA;     * parameters are contained in the query string or posted form data.&#xA;     *&#xA;     * &lt;p>You should only use this method when you are sure the&#xA;     * parameter has only one value. If the parameter might have&#xA;     * more than one value, use {@link #getParameterValues}.&#xA;     *&#xA;     * &lt;p>If you use this method with a multivalued&#xA;     * parameter, the value returned is equal to the first value&#xA;     * in the array returned by &lt;code>getParameterValues&lt;/code>.&#xA;     *&#xA;     * &lt;p>If the parameter data was sent in the request body, such as occurs&#xA;     * with an HTTP POST request, then reading the body directly via {@link&#xA;     * #getInputStream} or {@link #getReader} can interfere&#xA;     * with the execution of this method.&#xA;     *&#xA;     * @param name &#x9;a &lt;code>String&lt;/code> specifying the &#xA;     *&#x9;&#x9;&#x9;name of the parameter&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> representing the &#xA;     *&#x9;&#x9;&#x9;single value of the parameter&#xA;     *&#xA;     * @see &#x9;&#x9;#getParameterValues&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns an &lt;code>Enumeration&lt;/code> of &lt;code>String&lt;/code>&#xA;     * objects containing the names of the parameters contained&#xA;     * in this request. If the request has &#xA;     * no parameters, the method returns an &#xA;     * empty &lt;code>Enumeration&lt;/code>. &#xA;     *&#xA;     * @return&#x9;&#x9;an &lt;code>Enumeration&lt;/code> of &lt;code>String&lt;/code>&#xA;     *&#x9;&#x9;&#x9;objects, each &lt;code>String&lt;/code> containing&#xA;     * &#x9;&#x9;&#x9;the name of a request parameter; or an &#xA;     *&#x9;&#x9;&#x9;empty &lt;code>Enumeration&lt;/code> if the&#xA;     *&#x9;&#x9;&#x9;request has no parameters&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterValues">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of &lt;code>String&lt;/code> objects containing &#xA;     * all of the values the given request parameter has, or &#xA;     * &lt;code>null&lt;/code> if the parameter does not exist.&#xA;     *&#xA;     * &lt;p>If the parameter has a single value, the array has a length&#xA;     * of 1.&#xA;     *&#xA;     * @param name&#x9;a &lt;code>String&lt;/code> containing the name of &#xA;     *&#x9;&#x9;&#x9;the parameter whose value is requested&#xA;     *&#xA;     * @return&#x9;&#x9;an array of &lt;code>String&lt;/code> objects &#xA;     *&#x9;&#x9;&#x9;containing the parameter's values&#xA;     *&#xA;     * @see&#x9;&#x9;#getParameter&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterMap">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Returns a java.util.Map of the parameters of this request.&#xA;     * Request parameters&#xA;     * are extra information sent with the request.  For HTTP servlets,&#xA;     * parameters are contained in the query string or posted form data.&#xA;     *&#xA;     * @return an immutable java.util.Map containing parameter names as &#xA;     * keys and parameter values as map values. The keys in the parameter&#xA;     * map are of type String. The values in the parameter map are of type&#xA;     * String array.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getProtocol">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name and version of the protocol the request uses&#xA;     * in the form &lt;i>protocol/majorVersion.minorVersion&lt;/i>, for &#xA;     * example, HTTP/1.1. For HTTP servlets, the value&#xA;     * returned is the same as the value of the CGI variable &#xA;     * &lt;code>SERVER_PROTOCOL&lt;/code>.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the protocol &#xA;     *&#x9;&#x9;&#x9;name and version number&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScheme">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the scheme used to make this request, &#xA;     * for example,&#xA;     * &lt;code>http&lt;/code>, &lt;code>https&lt;/code>, or &lt;code>ftp&lt;/code>.&#xA;     * Different schemes have different rules for constructing URLs,&#xA;     * as noted in RFC 1738.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the name &#xA;     *&#x9;&#x9;&#x9;of the scheme used to make this request&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServerName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the host name of the server to which the request was sent.&#xA;     * It is the value of the part before &quot;:&quot; in the &lt;code>Host&lt;/code>&#xA;     * header value, if any, or the resolved server name, or the server IP address.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the name &#xA;     *&#x9;&#x9;&#x9;of the server&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServerPort">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the port number to which the request was sent.&#xA;     * It is the value of the part after &quot;:&quot; in the &lt;code>Host&lt;/code>&#xA;     * header value, if any, or the server port where the client connection&#xA;     * was accepted on.&#xA;     *&#xA;     * @return&#x9;&#x9;an integer specifying the port number&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getReader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/BufferedReader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the body of the request as character data using&#xA;     * a &lt;code>BufferedReader&lt;/code>.  The reader translates the character&#xA;     * data according to the character encoding used on the body.&#xA;     * Either this method or {@link #getInputStream} may be called to read the&#xA;     * body, not both.&#xA;     * &#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&#x9;&#x9;a &lt;code>BufferedReader&lt;/code>&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;containing the body of the request&#x9;&#xA;     *&#xA;     * @exception UnsupportedEncodingException &#x9;if the character set encoding&#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;used is not supported and the &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;text cannot be decoded&#xA;     *&#xA;     * @exception IllegalStateException   &#x9;if {@link #getInputStream} method&#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;has been called on this request&#xA;     *&#xA;     * @exception IOException  &#x9;&#x9;&#x9;if an input or output exception occurred&#xA;     *&#xA;     * @see &#x9;&#x9;&#x9;&#x9;&#x9;#getInputStream&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemoteAddr">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Internet Protocol (IP) address of the client &#xA;     * or last proxy that sent the request.&#xA;     * For HTTP servlets, same as the value of the &#xA;     * CGI variable &lt;code>REMOTE_ADDR&lt;/code>.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the &#xA;     *&#x9;&#x9;&#x9;IP address of the client that sent the request&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemoteHost">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the fully qualified name of the client&#xA;     * or the last proxy that sent the request.&#xA;     * If the engine cannot or chooses not to resolve the hostname &#xA;     * (to improve performance), this method returns the dotted-string form of &#xA;     * the IP address. For HTTP servlets, same as the value of the CGI variable &#xA;     * &lt;code>REMOTE_HOST&lt;/code>.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the fully &#xA;     *&#x9;&#x9;&#x9;qualified name of the client&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Stores an attribute in this request.&#xA;     * Attributes are reset between requests.  This method is most&#xA;     * often used in conjunction with {@link RequestDispatcher}.&#xA;     *&#xA;     * &lt;p>Attribute names should follow the same conventions as&#xA;     * package names. Names beginning with &lt;code>java.*&lt;/code>,&#xA;     * &lt;code>javax.*&lt;/code>, and &lt;code>com.sun.*&lt;/code>, are&#xA;     * reserved for use by Sun Microsystems.&#xA;     *&lt;br> If the object passed in is null, the effect is the same as&#xA;     * calling {@link #removeAttribute}.&#xA;     * &lt;br> It is warned that when the request is dispatched from the&#xA;     * servlet resides in a different web application by&#xA;     * &lt;code>RequestDispatcher&lt;/code>, the object set by this method&#xA;     * may not be correctly retrieved in the caller servlet.&#xA;     *&#xA;     *&#xA;     * @param name&#x9;&#x9;&#x9;a &lt;code>String&lt;/code> specifying &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;the name of the attribute&#xA;     *&#xA;     * @param o&#x9;&#x9;&#x9;&#x9;the &lt;code>Object&lt;/code> to be stored&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Removes an attribute from this request.  This method is not&#xA;     * generally needed as attributes only persist as long as the request&#xA;     * is being handled.&#xA;     *&#xA;     * &lt;p>Attribute names should follow the same conventions as&#xA;     * package names. Names beginning with &lt;code>java.*&lt;/code>,&#xA;     * &lt;code>javax.*&lt;/code>, and &lt;code>com.sun.*&lt;/code>, are&#xA;     * reserved for use by Sun Microsystems.&#xA;     *&#xA;     *&#xA;     * @param name&#x9;&#x9;&#x9;a &lt;code>String&lt;/code> specifying &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;the name of the attribute to remove&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocale">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../util/Locale.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the preferred &lt;code>Locale&lt;/code> that the client will &#xA;     * accept content in, based on the Accept-Language header.&#xA;     * If the client request doesn't provide an Accept-Language header,&#xA;     * this method returns the default locale for the server.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;the preferred &lt;code>Locale&lt;/code> for the client&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocales">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns an &lt;code>Enumeration&lt;/code> of &lt;code>Locale&lt;/code> objects&#xA;     * indicating, in decreasing order starting with the preferred locale, the&#xA;     * locales that are acceptable to the client based on the Accept-Language&#xA;     * header.&#xA;     * If the client request doesn't provide an Accept-Language header,&#xA;     * this method returns an &lt;code>Enumeration&lt;/code> containing one &#xA;     * &lt;code>Locale&lt;/code>, the default locale for the server.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;an &lt;code>Enumeration&lt;/code> of preferred &#xA;     *                  &lt;code>Locale&lt;/code> objects for the client&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSecure">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns a boolean indicating whether this request was made using a&#xA;     * secure channel, such as HTTPS.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;a boolean indicating if the request was made using a&#xA;     *                  secure channel&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRequestDispatcher">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/RequestDispatcher.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns a {@link RequestDispatcher} object that acts as a wrapper for&#xA;     * the resource located at the given path.  &#xA;     * A &lt;code>RequestDispatcher&lt;/code> object can be used to forward&#xA;     * a request to the resource or to include the resource in a response.&#xA;     * The resource can be dynamic or static.&#xA;     *&#xA;     * &lt;p>The pathname specified may be relative, although it cannot extend&#xA;     * outside the current servlet context.  If the path begins with &#xA;     * a &quot;/&quot; it is interpreted as relative to the current context root.  &#xA;     * This method returns &lt;code>null&lt;/code> if the servlet container&#xA;     * cannot return a &lt;code>RequestDispatcher&lt;/code>.&#xA;     *&#xA;     * &lt;p>The difference between this method and {@link&#xA;     * ServletContext#getRequestDispatcher} is that this method can take a&#xA;     * relative path.&#xA;     *&#xA;     * @param path      a &lt;code>String&lt;/code> specifying the pathname&#xA;     *                  to the resource. If it is relative, it must be&#xA;     *                  relative against the current servlet.&#xA;     *&#xA;     * @return          a &lt;code>RequestDispatcher&lt;/code> object&#xA;     *                  that acts as a wrapper for the resource&#xA;     *                  at the specified path, or &lt;code>null&lt;/code>&#xA;     *                  if the servlet container cannot return a&#xA;     *                  &lt;code>RequestDispatcher&lt;/code>&#xA;     *&#xA;     * @see             RequestDispatcher&#xA;     * @see             ServletContext#getRequestDispatcher&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRealPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &#xA;     * @deprecated &#x9;As of Version 2.1 of the Java Servlet API,&#xA;     * &#x9;&#x9;&#x9;use {@link ServletContext#getRealPath} instead.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemotePort">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Internet Protocol (IP) source port of the client&#xA;     * or last proxy that sent the request.&#xA;     *&#xA;     * @return&#x9;an integer specifying the port number&#xA;     *&#xA;     * @since 2.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the host name of the Internet Protocol (IP) interface on&#xA;     * which the request was received.&#xA;     *&#xA;     * @return&#x9;a &lt;code>String&lt;/code> containing the host&#xA;     *&#x9;&#x9;name of the IP on which the request was received.&#xA;     *&#xA;     * @since 2.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalAddr">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Internet Protocol (IP) address of the interface on&#xA;     * which the request  was received.&#xA;     *&#xA;     * @return&#x9;a &lt;code>String&lt;/code> containing the&#xA;     *&#x9;&#x9;IP address on which the request was received. &#xA;     *&#xA;     * @since 2.4&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalPort">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Internet Protocol (IP) port number of the interface&#xA;     * on which the request was received.&#xA;     *&#xA;     * @return an integer specifying the port number&#xA;     *&#xA;     * @since 2.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines an object to provide client request information to a servlet.  The&#xA; * servlet container creates a &lt;code>ServletRequest&lt;/code> object and passes&#xA; * it as an argument to the servlet's &lt;code>service&lt;/code> method.&#xA; *&#xA; * &lt;p>A &lt;code>ServletRequest&lt;/code> object provides data including&#xA; * parameter name and values, attributes, and an input stream.&#xA; * Interfaces that extend &lt;code>ServletRequest&lt;/code> can provide&#xA; * additional protocol-specific data (for example, HTTP data is&#xA; * provided by {@link javax.servlet.http.HttpServletRequest}.&#xA; * &#xA; * @author &#x9;Various&#xA; * @version &#x9;$Version$&#xA; *&#xA; * @see &#x9;javax.servlet.http.HttpServletRequest&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
