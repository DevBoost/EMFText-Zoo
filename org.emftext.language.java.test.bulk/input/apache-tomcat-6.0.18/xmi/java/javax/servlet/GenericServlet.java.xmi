<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="GenericServlet.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="GenericServlet">
    <members xsi:type="members:Field" name="config">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Constructor" name="GenericServlet">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Does nothing. All of the servlet initialization&#xA;     * is done by one of the &lt;code>init&lt;/code> methods.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="destroy">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called by the servlet container to indicate to a servlet that the&#xA;     * servlet is being taken out of service.  See {@link Servlet#destroy}.&#xA;     *&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getInitParameter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>String&lt;/code> containing the value of the named&#xA;     * initialization parameter, or &lt;code>null&lt;/code> if the parameter does&#xA;     * not exist.  See {@link ServletConfig#getInitParameter}.&#xA;     *&#xA;     * &lt;p>This method is supplied for convenience. It gets the &#xA;     * value of the named parameter from the servlet's &#xA;     * &lt;code>ServletConfig&lt;/code> object.&#xA;     *&#xA;     * @param name &#x9;&#x9;a &lt;code>String&lt;/code> specifying the name &#xA;     *&#x9;&#x9;&#x9;&#x9;of the initialization parameter&#xA;     *&#xA;     * @return String &#x9;&#x9;a &lt;code>String&lt;/code> containing the value&#xA;     *&#x9;&#x9;&#x9;&#x9;of the initialization parameter&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInitParameterNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Returns the names of the servlet's initialization parameters &#xA;    * as an &lt;code>Enumeration&lt;/code> of &lt;code>String&lt;/code> objects,&#xA;    * or an empty &lt;code>Enumeration&lt;/code> if the servlet has no&#xA;    * initialization parameters.  See {@link&#xA;    * ServletConfig#getInitParameterNames}.&#xA;    *&#xA;    * &lt;p>This method is supplied for convenience. It gets the &#xA;    * parameter names from the servlet's &lt;code>ServletConfig&lt;/code> object. &#xA;    *&#xA;    *&#xA;    * @return Enumeration &#x9;an enumeration of &lt;code>String&lt;/code>&#xA;    *&#x9;&#x9;&#x9;&#x9;objects containing the names of &#xA;    *&#x9;&#x9;&#x9;&#x9;the servlet's initialization parameters&#xA;    *&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getServletConfig">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this servlet's {@link ServletConfig} object.&#xA;     *&#xA;     * @return ServletConfig &#x9;the &lt;code>ServletConfig&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;&#x9;that initialized this servlet&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getServletContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a reference to the {@link ServletContext} in which this servlet&#xA;     * is running.  See {@link ServletConfig#getServletContext}.&#xA;     *&#xA;     * &lt;p>This method is supplied for convenience. It gets the &#xA;     * context from the servlet's &lt;code>ServletConfig&lt;/code> object.&#xA;     *&#xA;     *&#xA;     * @return ServletContext &#x9;the &lt;code>ServletContext&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;&#x9;passed to this servlet by the &lt;code>init&lt;/code>&#xA;     *&#x9;&#x9;&#x9;&#x9;method&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0/@members.1"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getServletInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns information about the servlet, such as &#xA;     * author, version, and copyright. &#xA;     * By default, this method returns an empty string.  Override this method&#xA;     * to have it return a meaningful value.  See {@link&#xA;     * Servlet#getServletInfo}.&#xA;     *&#xA;     *&#xA;     * @return String &#x9;&#x9;information about this servlet, by default an&#xA;     * &#x9;&#x9;&#x9;&#x9;empty string&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:StringReference" value=""/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="config">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Called by the servlet container to indicate to a servlet that the&#xA;     * servlet is being placed into service.  See {@link Servlet#init}.&#xA;     *&#xA;     * &lt;p>This implementation stores the {@link ServletConfig}&#xA;     * object it receives from the servlet container for later use.&#xA;     * When overriding this form of the method, call &#xA;     * &lt;code>super.init(config)&lt;/code>.&#xA;     *&#xA;     * @param config &#x9;&#x9;&#x9;the &lt;code>ServletConfig&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;that contains configutation&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;information for this servlet&#xA;     *&#xA;     * @exception ServletException &#x9;if an exception occurs that&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;interrupts the servlet's normal&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;operation&#xA;     *&#xA;     * &#xA;     * @see &#x9;&#x9;&#x9;&#x9;UnavailableException&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
          <self xsi:type="literals:This"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * A convenience method which can be overridden so that there's no need&#xA;     * to call &lt;code>super.init(config)&lt;/code>.&#xA;     *&#xA;     * &lt;p>Instead of overriding {@link #init(ServletConfig)}, simply override&#xA;     * this method and it will be called by&#xA;     * &lt;code>GenericServlet.init(ServletConfig config)&lt;/code>.&#xA;     * The &lt;code>ServletConfig&lt;/code> object can still be retrieved via {@link&#xA;     * #getServletConfig}. &#xA;     *&#xA;     * @exception ServletException &#x9;if an exception occurs that&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;interrupts the servlet's&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;normal operation&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="log">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &#xA;     * Writes the specified message to a servlet log file, prepended by the&#xA;     * servlet's name.  See {@link ServletContext#log(String)}.&#xA;     *&#xA;     * @param msg &#x9;a &lt;code>String&lt;/code> specifying&#xA;     *&#x9;&#x9;&#x9;the message to be written to the log file&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../javax/servlet/ServletContext.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.13"/>
              <children xsi:type="references:StringReference" value=": "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="log">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="message">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Throwable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes an explanatory message and a stack trace&#xA;     * for a given &lt;code>Throwable&lt;/code> exception&#xA;     * to the servlet log file, prepended by the servlet's name.&#xA;     * See {@link ServletContext#log(String, Throwable)}.&#xA;     *&#xA;     *&#xA;     * @param message &#x9;&#x9;a &lt;code>String&lt;/code> that describes&#xA;     *&#x9;&#x9;&#x9;&#x9;the error or exception&#xA;     *&#xA;     * @param t&#x9;&#x9;&#x9;the &lt;code>java.lang.Throwable&lt;/code> error&#xA;     * &#x9;&#x9;&#x9;&#x9;or exception&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../javax/servlet/ServletContext.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.13"/>
              <children xsi:type="references:StringReference" value=": "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="service">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="res">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called by the servlet container to allow the servlet to respond to&#xA;     * a request.  See {@link Servlet#service}.&#xA;     * &#xA;     * &lt;p>This method is declared abstract so subclasses, such as &#xA;     * &lt;code>HttpServlet&lt;/code>, must override it.&#xA;     *&#xA;     *&#xA;     *&#xA;     * @param req &#x9;the &lt;code>ServletRequest&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;that contains the client's request&#xA;     *&#xA;     * @param res &#x9;the &lt;code>ServletResponse&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;that will contain the servlet's response&#xA;     *&#xA;     * @exception ServletException &#x9;if an exception occurs that&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;interferes with the servlet's&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;normal operation occurred&#xA;     *&#xA;     * @exception IOException &#x9;&#x9;if an input or output&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;exception occurs&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getServletName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of this servlet instance.&#xA;     * See {@link ServletConfig#getServletName}.&#xA;     *&#xA;     * @return          the name of this servlet instance&#xA;     *&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0/@members.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * Defines a generic, protocol-independent&#xA; * servlet. To write an HTTP servlet for use on the&#xA; * Web, extend {@link javax.servlet.http.HttpServlet} instead.&#xA; *&#xA; * &lt;p>&lt;code>GenericServlet&lt;/code> implements the &lt;code>Servlet&lt;/code>&#xA; * and &lt;code>ServletConfig&lt;/code> interfaces. &lt;code>GenericServlet&lt;/code>&#xA; * may be directly extended by a servlet, although it's more common to extend&#xA; * a protocol-specific subclass such as &lt;code>HttpServlet&lt;/code>.&#xA; *&#xA; * &lt;p>&lt;code>GenericServlet&lt;/code> makes writing servlets&#xA; * easier. It provides simple versions of the lifecycle methods &#xA; * &lt;code>init&lt;/code> and &lt;code>destroy&lt;/code> and of the methods &#xA; * in the &lt;code>ServletConfig&lt;/code> interface. &lt;code>GenericServlet&lt;/code>&#xA; * also implements the &lt;code>log&lt;/code> method, declared in the&#xA; * &lt;code>ServletContext&lt;/code> interface. &#xA; *&#xA; * &lt;p>To write a generic servlet, you need only&#xA; * override the abstract &lt;code>service&lt;/code> method. &#xA; *&#xA; *&#xA; * @author &#x9;Various&#xA; * @version &#x9;$Version$&#xA; *&#xA; *&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../javax/servlet/Servlet.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
