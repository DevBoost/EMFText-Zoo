<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ServletResponse.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/PrintWriter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/Locale.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ServletResponse">
    <members xsi:type="members:InterfaceMethod" name="getCharacterEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the character encoding (MIME charset)&#xA;     * used for the body sent in this response.&#xA;     * The character encoding may have been specified explicitly&#xA;     * using the {@link #setCharacterEncoding} or&#xA;     * {@link #setContentType} methods, or implicitly using the&#xA;     * {@link #setLocale} method. Explicit specifications take&#xA;     * precedence over implicit specifications. Calls made&#xA;     * to these methods after &lt;code>getWriter&lt;/code> has been&#xA;     * called or after the response has been committed have no&#xA;     * effect on the character encoding. If no character encoding&#xA;     * has been specified, &lt;code>ISO-8859-1&lt;/code> is returned.&#xA;     * &lt;p>See RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)&#xA;     * for more information about character encoding and MIME.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> specifying the&#xA;     *&#x9;&#x9;&#x9;name of the character encoding, for&#xA;     *&#x9;&#x9;&#x9;example, &lt;code>UTF-8&lt;/code>&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContentType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the content type used for the MIME body&#xA;     * sent in this response. The content type proper must&#xA;     * have been specified using {@link #setContentType}&#xA;     * before the response is committed. If no content type&#xA;     * has been specified, this method returns null.&#xA;     * If a content type has been specified and a&#xA;     * character encoding has been explicitly or implicitly&#xA;     * specified as described in {@link #getCharacterEncoding},&#xA;     * the charset parameter is included in the string returned.&#xA;     * If no character encoding has been specified, the&#xA;     * charset parameter is omitted.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> specifying the&#xA;     *&#x9;&#x9;&#x9;content type, for example,&#xA;     *&#x9;&#x9;&#x9;&lt;code>text/html; charset=UTF-8&lt;/code>,&#xA;     *&#x9;&#x9;&#x9;or null&#xA;     *&#xA;     * @since 2.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOutputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletOutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a {@link ServletOutputStream} suitable for writing binary &#xA;     * data in the response. The servlet container does not encode the&#xA;     * binary data.  &#xA;     &#xA;     * &lt;p> Calling flush() on the ServletOutputStream commits the response.&#xA;     &#xA;     * Either this method or {@link #getWriter} may &#xA;     * be called to write the body, not both.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&#x9;a {@link ServletOutputStream} for writing binary data&#x9;&#xA;     *&#xA;     * @exception IllegalStateException if the &lt;code>getWriter&lt;/code> method&#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;has been called on this response&#xA;     *&#xA;     * @exception IOException &#x9;&#x9;if an input or output exception occurred&#xA;     *&#xA;     * @see &#x9;&#x9;&#x9;&#x9;#getWriter&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWriter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/PrintWriter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>PrintWriter&lt;/code> object that&#xA;     * can send character text to the client.&#xA;     * The &lt;code>PrintWriter&lt;/code> uses the character&#xA;     * encoding returned by {@link #getCharacterEncoding}.&#xA;     * If the response's character encoding has not been&#xA;     * specified as described in &lt;code>getCharacterEncoding&lt;/code>&#xA;     * (i.e., the method just returns the default value &#xA;     * &lt;code>ISO-8859-1&lt;/code>), &lt;code>getWriter&lt;/code>&#xA;     * updates it to &lt;code>ISO-8859-1&lt;/code>.&#xA;     * &lt;p>Calling flush() on the &lt;code>PrintWriter&lt;/code>&#xA;     * commits the response.&#xA;     * &lt;p>Either this method or {@link #getOutputStream} may be called&#xA;     * to write the body, not both.&#xA;     *&#xA;     * &#xA;     * @return &#x9;&#x9;a &lt;code>PrintWriter&lt;/code> object that &#xA;     *&#x9;&#x9;&#x9;can return character data to the client &#xA;     *&#xA;     * @exception UnsupportedEncodingException&#xA;     *&#x9;&#x9;&#x9;if the character encoding returned&#xA;     *&#x9;&#x9;&#x9;by &lt;code>getCharacterEncoding&lt;/code> cannot be used&#xA;     *&#xA;     * @exception IllegalStateException&#xA;     *&#x9;&#x9;&#x9;if the &lt;code>getOutputStream&lt;/code>&#xA;     * &#x9;&#x9;&#x9;method has already been called for this &#xA;     *&#x9;&#x9;&#x9;response object&#xA;     *&#xA;     * @exception IOException&#xA;     *&#x9;&#x9;&#x9;if an input or output exception occurred&#xA;     *&#xA;     * @see &#x9;&#x9;#getOutputStream&#xA;     * @see &#x9;&#x9;#setCharacterEncoding&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCharacterEncoding">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="charset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the character encoding (MIME charset) of the response&#xA;     * being sent to the client, for example, to UTF-8.&#xA;     * If the character encoding has already been set by&#xA;     * {@link #setContentType} or {@link #setLocale},&#xA;     * this method overrides it.&#xA;     * Calling {@link #setContentType} with the &lt;code>String&lt;/code>&#xA;     * of &lt;code>text/html&lt;/code> and calling&#xA;     * this method with the &lt;code>String&lt;/code> of &lt;code>UTF-8&lt;/code>&#xA;     * is equivalent with calling&#xA;     * &lt;code>setContentType&lt;/code> with the &lt;code>String&lt;/code> of&#xA;     * &lt;code>text/html; charset=UTF-8&lt;/code>.&#xA;     * &lt;p>This method can be called repeatedly to change the character&#xA;     * encoding.&#xA;     * This method has no effect if it is called after&#xA;     * &lt;code>getWriter&lt;/code> has been&#xA;     * called or after the response has been committed.&#xA;     * &lt;p>Containers must communicate the character encoding used for&#xA;     * the servlet response's writer to the client if the protocol&#xA;     * provides a way for doing so. In the case of HTTP, the character&#xA;     * encoding is communicated as part of the &lt;code>Content-Type&lt;/code>&#xA;     * header for text media types. Note that the character encoding&#xA;     * cannot be communicated via HTTP headers if the servlet does not&#xA;     * specify a content type; however, it is still used to encode text&#xA;     * written via the servlet response's writer.&#xA;     *&#xA;     * @param charset &#x9;a String specifying only the character set&#xA;     * &#x9;&#x9;&#x9;defined by IANA Character Sets&#xA;     *&#x9;&#x9;&#x9;(http://www.iana.org/assignments/character-sets)&#xA;     *&#xA;     * @see&#x9;&#x9;#setContentType&#xA;     * &#x9;&#x9;&#x9;#setLocale&#xA;     *&#xA;     * @since 2.4&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setContentLength">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the length of the content body in the response&#xA;     * In HTTP servlets, this method sets the HTTP Content-Length header.&#xA;     *&#xA;     *&#xA;     * @param len &#x9;an integer specifying the length of the &#xA;     * &#x9;&#x9;&#x9;content being returned to the client; sets&#xA;     *&#x9;&#x9;&#x9;the Content-Length header&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setContentType">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the content type of the response being sent to&#xA;     * the client, if the response has not been committed yet.&#xA;     * The given content type may include a character encoding&#xA;     * specification, for example, &lt;code>text/html;charset=UTF-8&lt;/code>.&#xA;     * The response's character encoding is only set from the given&#xA;     * content type if this method is called before &lt;code>getWriter&lt;/code>&#xA;     * is called.&#xA;     * &lt;p>This method may be called repeatedly to change content type and&#xA;     * character encoding.&#xA;     * This method has no effect if called after the response&#xA;     * has been committed. It does not set the response's character&#xA;     * encoding if it is called after &lt;code>getWriter&lt;/code>&#xA;     * has been called or after the response has been committed.&#xA;     * &lt;p>Containers must communicate the content type and the character&#xA;     * encoding used for the servlet response's writer to the client if&#xA;     * the protocol provides a way for doing so. In the case of HTTP,&#xA;     * the &lt;code>Content-Type&lt;/code> header is used.&#xA;     *&#xA;     * @param type &#x9;a &lt;code>String&lt;/code> specifying the MIME &#xA;     *&#x9;&#x9;&#x9;type of the content&#xA;     *&#xA;     * @see &#x9;&#x9;#setLocale&#xA;     * @see &#x9;&#x9;#setCharacterEncoding&#xA;     * @see &#x9;&#x9;#getOutputStream&#xA;     * @see &#x9;&#x9;#getWriter&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBufferSize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the preferred buffer size for the body of the response.  &#xA;     * The servlet container will use a buffer at least as large as &#xA;     * the size requested.  The actual buffer size used can be found&#xA;     * using &lt;code>getBufferSize&lt;/code>.&#xA;     *&#xA;     * &lt;p>A larger buffer allows more content to be written before anything is&#xA;     * actually sent, thus providing the servlet with more time to set&#xA;     * appropriate status codes and headers.  A smaller buffer decreases &#xA;     * server memory load and allows the client to start receiving data more&#xA;     * quickly.&#xA;     *&#xA;     * &lt;p>This method must be called before any response body content is&#xA;     * written; if content has been written or the response object has&#xA;     * been committed, this method throws an &#xA;     * &lt;code>IllegalStateException&lt;/code>.&#xA;     *&#xA;     * @param size &#x9;the preferred buffer size&#xA;     *&#xA;     * @exception  IllegalStateException  &#x9;if this method is called after&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;content has been written&#xA;     *&#xA;     * @see &#x9;&#x9;#getBufferSize&#xA;     * @see &#x9;&#x9;#flushBuffer&#xA;     * @see &#x9;&#x9;#isCommitted&#xA;     * @see &#x9;&#x9;#reset&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBufferSize">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the actual buffer size used for the response.  If no buffering&#xA;     * is used, this method returns 0.&#xA;     *&#xA;     * @return&#x9; &#x9;the actual buffer size used&#xA;     *&#xA;     * @see &#x9;&#x9;#setBufferSize&#xA;     * @see &#x9;&#x9;#flushBuffer&#xA;     * @see &#x9;&#x9;#isCommitted&#xA;     * @see &#x9;&#x9;#reset&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="flushBuffer">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Forces any content in the buffer to be written to the client.  A call&#xA;     * to this method automatically commits the response, meaning the status &#xA;     * code and headers will be written.&#xA;     *&#xA;     * @see &#x9;&#x9;#setBufferSize&#xA;     * @see &#x9;&#x9;#getBufferSize&#xA;     * @see &#x9;&#x9;#isCommitted&#xA;     * @see &#x9;&#x9;#reset&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="resetBuffer">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Clears the content of the underlying buffer in the response without&#xA;     * clearing headers or status code. If the &#xA;     * response has been committed, this method throws an &#xA;     * &lt;code>IllegalStateException&lt;/code>.&#xA;     *&#xA;     * @see &#x9;&#x9;#setBufferSize&#xA;     * @see &#x9;&#x9;#getBufferSize&#xA;     * @see &#x9;&#x9;#isCommitted&#xA;     * @see &#x9;&#x9;#reset&#xA;     *&#xA;     * @since 2.3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCommitted">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a boolean indicating if the response has been&#xA;     * committed.  A committed response has already had its status &#xA;     * code and headers written.&#xA;     *&#xA;     * @return&#x9;&#x9;a boolean indicating if the response has been&#xA;     *  &#x9;&#x9;committed&#xA;     *&#xA;     * @see &#x9;&#x9;#setBufferSize&#xA;     * @see &#x9;&#x9;#getBufferSize&#xA;     * @see &#x9;&#x9;#flushBuffer&#xA;     * @see &#x9;&#x9;#reset&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Clears any data that exists in the buffer as well as the status code and&#xA;     * headers.  If the response has been committed, this method throws an &#xA;     * &lt;code>IllegalStateException&lt;/code>.&#xA;     *&#xA;     * @exception IllegalStateException  if the response has already been&#xA;     *                                   committed&#xA;     *&#xA;     * @see &#x9;&#x9;#setBufferSize&#xA;     * @see &#x9;&#x9;#getBufferSize&#xA;     * @see &#x9;&#x9;#flushBuffer&#xA;     * @see &#x9;&#x9;#isCommitted&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLocale">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../util/Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the locale of the response, if the response has not been&#xA;     * committed yet. It also sets the response's character encoding&#xA;     * appropriately for the locale, if the character encoding has not&#xA;     * been explicitly set using {@link #setContentType} or&#xA;     * {@link #setCharacterEncoding}, &lt;code>getWriter&lt;/code> hasn't&#xA;     * been called yet, and the response hasn't been committed yet.&#xA;     * If the deployment descriptor contains a &#xA;     * &lt;code>locale-encoding-mapping-list&lt;/code> element, and that&#xA;     * element provides a mapping for the given locale, that mapping&#xA;     * is used. Otherwise, the mapping from locale to character&#xA;     * encoding is container dependent.&#xA;     * &lt;p>This method may be called repeatedly to change locale and&#xA;     * character encoding. The method has no effect if called after the&#xA;     * response has been committed. It does not set the response's&#xA;     * character encoding if it is called after {@link #setContentType}&#xA;     * has been called with a charset specification, after&#xA;     * {@link #setCharacterEncoding} has been called, after&#xA;     * &lt;code>getWriter&lt;/code> has been called, or after the response&#xA;     * has been committed.&#xA;     * &lt;p>Containers must communicate the locale and the character encoding&#xA;     * used for the servlet response's writer to the client if the protocol&#xA;     * provides a way for doing so. In the case of HTTP, the locale is&#xA;     * communicated via the &lt;code>Content-Language&lt;/code> header,&#xA;     * the character encoding as part of the &lt;code>Content-Type&lt;/code>&#xA;     * header for text media types. Note that the character encoding&#xA;     * cannot be communicated via HTTP headers if the servlet does not&#xA;     * specify a content type; however, it is still used to encode text&#xA;     * written via the servlet response's writer.&#xA;     * &#xA;     * @param loc  the locale of the response&#xA;     *&#xA;     * @see &#x9;&#x9;#getLocale&#xA;     * @see &#x9;&#x9;#setContentType&#xA;     * @see &#x9;&#x9;#setCharacterEncoding&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocale">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../util/Locale.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the locale specified for this response&#xA;     * using the {@link #setLocale} method. Calls made to&#xA;     * &lt;code>setLocale&lt;/code> after the response is committed&#xA;     * have no effect. If no locale has been specified,&#xA;     * the container's default locale is returned.&#xA;     * &#xA;     * @see &#x9;&#x9;#setLocale&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines an object to assist a servlet in sending a response to the client.&#xA; * The servlet container creates a &lt;code>ServletResponse&lt;/code> object and&#xA; * passes it as an argument to the servlet's &lt;code>service&lt;/code> method.&#xA; *&#xA; * &lt;p>To send binary data in a MIME body response, use&#xA; * the {@link ServletOutputStream} returned by {@link #getOutputStream}.&#xA; * To send character data, use the &lt;code>PrintWriter&lt;/code> object &#xA; * returned by {@link #getWriter}. To mix binary and text data,&#xA; * for example, to create a multipart response, use a&#xA; * &lt;code>ServletOutputStream&lt;/code> and manage the character sections&#xA; * manually.&#xA; *&#xA; * &lt;p>The charset for the MIME body response can be specified&#xA; * explicitly using the {@link #setCharacterEncoding} and&#xA; * {@link #setContentType} methods, or implicitly&#xA; * using the {@link #setLocale} method.&#xA; * Explicit specifications take precedence over&#xA; * implicit specifications. If no charset is specified, ISO-8859-1 will be&#xA; * used. The &lt;code>setCharacterEncoding&lt;/code>,&#xA; * &lt;code>setContentType&lt;/code>, or &lt;code>setLocale&lt;/code> method must&#xA; * be called before &lt;code>getWriter&lt;/code> and before committing&#xA; * the response for the character encoding to be used.&#xA; * &#xA; * &lt;p>See the Internet RFCs such as &#xA; * &lt;a href=&quot;http://www.ietf.org/rfc/rfc2045.txt&quot;>&#xA; * RFC 2045&lt;/a> for more information on MIME. Protocols such as SMTP&#xA; * and HTTP define profiles of MIME, and those standards&#xA; * are still evolving.&#xA; *&#xA; * @author &#x9;Various&#xA; * @version &#x9;$Version$&#xA; *&#xA; * @see&#x9;&#x9;ServletOutputStream&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
