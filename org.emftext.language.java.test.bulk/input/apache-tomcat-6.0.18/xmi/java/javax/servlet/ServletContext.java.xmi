<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ServletContext.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ServletContext">
    <members xsi:type="members:InterfaceMethod" name="getContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uripath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>ServletContext&lt;/code> object that &#xA;     * corresponds to a specified URL on the server.&#xA;     *&#xA;     * &lt;p>This method allows servlets to gain&#xA;     * access to the context for various parts of the server, and as&#xA;     * needed obtain {@link RequestDispatcher} objects from the context.&#xA;     * The given path must be begin with &quot;/&quot;, is interpreted relative &#xA;     * to the server's document root and is matched against the context roots of&#xA;     * other web applications hosted on this container.&#xA;     * &#xA;     * &lt;p>In a security conscious environment, the servlet container may&#xA;     * return &lt;code>null&lt;/code> for a given URL.&#xA;     *       &#xA;     * @param uripath &#x9;a &lt;code>String&lt;/code> specifying the context path of&#xA;     *&#x9;&#x9;&#x9;another web application in the container.&#xA;     * @return&#x9;&#x9;the &lt;code>ServletContext&lt;/code> object that&#xA;     *&#x9;&#x9;&#x9;corresponds to the named URL, or null if either&#xA;&#x9;&#x9;&#x9;none exists or the container wishes to restrict &#xA;     * &#x9;&#x9;&#x9;this access.&#xA;     *&#xA;     * @see &#x9;&#x9;RequestDispatcher&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContextPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMajorVersion">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the major version of the Java Servlet API that this&#xA;     * servlet container supports. All implementations that comply&#xA;     * with Version 2.4 must have this method&#xA;     * return the integer 2.&#xA;     *&#xA;     * @return &#x9;&#x9;2&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinorVersion">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the minor version of the Servlet API that this&#xA;     * servlet container supports. All implementations that comply&#xA;     * with Version 2.4 must have this method&#xA;     * return the integer 4.&#xA;     *&#xA;     * @return &#x9;&#x9;4&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMimeType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the MIME type of the specified file, or &lt;code>null&lt;/code> if &#xA;     * the MIME type is not known. The MIME type is determined&#xA;     * by the configuration of the servlet container, and may be specified&#xA;     * in a web application deployment descriptor. Common MIME&#xA;     * types are &lt;code>&quot;text/html&quot;&lt;/code> and &lt;code>&quot;image/gif&quot;&lt;/code>.&#xA;     *&#xA;     *&#xA;     * @param   file    a &lt;code>String&lt;/code> specifying the name&#xA;     *&#x9;&#x9;&#x9;of a file&#xA;     *&#xA;     * @return &#x9;&#x9;a &lt;code>String&lt;/code> specifying the file's MIME type&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResourcePaths">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Returns a directory-like listing of all the paths to resources within the web application whose longest sub-path&#xA;    * matches the supplied path argument. Paths indicating subdirectory paths end with a '/'. The returned paths are all &#xA;    * relative to the root of the web application and have a leading '/'. For example, for a web application &#xA;    * containing&lt;br>&lt;br>&#xA;&#xA;    * /welcome.html&lt;br>&#xA;    * /catalog/index.html&lt;br>&#xA;    * /catalog/products.html&lt;br>&#xA;    * /catalog/offers/books.html&lt;br>&#xA;    * /catalog/offers/music.html&lt;br>&#xA;    * /customer/login.jsp&lt;br>&#xA;    * /WEB-INF/web.xml&lt;br>&#xA;    * /WEB-INF/classes/com.acme.OrderServlet.class,&lt;br>&lt;br>&#xA;    *&#xA;    * getResourcePaths(&quot;/&quot;) returns {&quot;/welcome.html&quot;, &quot;/catalog/&quot;, &quot;/customer/&quot;, &quot;/WEB-INF/&quot;}&lt;br>&#xA;    * getResourcePaths(&quot;/catalog/&quot;) returns {&quot;/catalog/index.html&quot;, &quot;/catalog/products.html&quot;, &quot;/catalog/offers/&quot;}.&lt;br>&#xA;&#x9;   &#xA;&#xA;&#xA;    *@param path&#x9;&#x9;the partial path used to match the resources,&#xA;    *&#x9;&#x9;&#x9;&#x9;which must start with a /&#xA;    *@return a Set containing the directory listing, or null if there are no resources in the web application whose path&#xA;&#x9;* begins with the supplied path.&#xA;&#xA;    * @since Servlet 2.3&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a URL to the resource that is mapped to a specified&#xA;     * path. The path must begin with a &quot;/&quot; and is interpreted&#xA;     * as relative to the current context root.&#xA;     *&#xA;     * &lt;p>This method allows the servlet container to make a resource &#xA;     * available to servlets from any source. Resources &#xA;     * can be located on a local or remote&#xA;     * file system, in a database, or in a &lt;code>.war&lt;/code> file. &#xA;     *&#xA;     * &lt;p>The servlet container must implement the URL handlers&#xA;     * and &lt;code>URLConnection&lt;/code> objects that are necessary&#xA;     * to access the resource.&#xA;     *&#xA;     * &lt;p>This method returns &lt;code>null&lt;/code>&#xA;     * if no resource is mapped to the pathname.&#xA;     *&#xA;     * &lt;p>Some containers may allow writing to the URL returned by&#xA;     * this method using the methods of the URL class.&#xA;     *&#xA;     * &lt;p>The resource content is returned directly, so be aware that &#xA;     * requesting a &lt;code>.jsp&lt;/code> page returns the JSP source code.&#xA;     * Use a &lt;code>RequestDispatcher&lt;/code> instead to include results of &#xA;     * an execution.&#xA;     *&#xA;     * &lt;p>This method has a different purpose than&#xA;     * &lt;code>java.lang.Class.getResource&lt;/code>,&#xA;     * which looks up resources based on a class loader. This&#xA;     * method does not use class loaders.&#xA;     * &#xA;     * @param path &#x9;&#x9;&#x9;&#x9;a &lt;code>String&lt;/code> specifying&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the path to the resource&#xA;     *&#xA;     * @return &#x9;&#x9;&#x9;&#x9;&#x9;the resource located at the named path,&#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or &lt;code>null&lt;/code> if there is no resource&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;at that path&#xA;     *&#xA;     * @exception MalformedURLException &#x9;if the pathname is not given in &#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the correct form&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResourceAsStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the resource located at the named path as&#xA;     * an &lt;code>InputStream&lt;/code> object.&#xA;     *&#xA;     * &lt;p>The data in the &lt;code>InputStream&lt;/code> can be &#xA;     * of any type or length. The path must be specified according&#xA;     * to the rules given in &lt;code>getResource&lt;/code>.&#xA;     * This method returns &lt;code>null&lt;/code> if no resource exists at&#xA;     * the specified path. &#xA;     * &#xA;     * &lt;p>Meta-information such as content length and content type&#xA;     * that is available via &lt;code>getResource&lt;/code>&#xA;     * method is lost when using this method.&#xA;     *&#xA;     * &lt;p>The servlet container must implement the URL handlers&#xA;     * and &lt;code>URLConnection&lt;/code> objects necessary to access&#xA;     * the resource.&#xA;     *&#xA;     * &lt;p>This method is different from &#xA;     * &lt;code>java.lang.Class.getResourceAsStream&lt;/code>,&#xA;     * which uses a class loader. This method allows servlet containers &#xA;     * to make a resource available&#xA;     * to a servlet from any location, without using a class loader.&#xA;     * &#xA;     *&#xA;     * @param path &#x9;a &lt;code>String&lt;/code> specifying the path&#xA;     *&#x9;&#x9;&#x9;to the resource&#xA;     *&#xA;     * @return &#x9;&#x9;the &lt;code>InputStream&lt;/code> returned to the &#xA;     *&#x9;&#x9;&#x9;servlet, or &lt;code>null&lt;/code> if no resource&#xA;     *&#x9;&#x9;&#x9;exists at the specified path &#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRequestDispatcher">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/RequestDispatcher.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &#xA;     * Returns a {@link RequestDispatcher} object that acts&#xA;     * as a wrapper for the resource located at the given path.&#xA;     * A &lt;code>RequestDispatcher&lt;/code> object can be used to forward &#xA;     * a request to the resource or to include the resource in a response.&#xA;     * The resource can be dynamic or static.&#xA;     *&#xA;     * &lt;p>The pathname must begin with a &quot;/&quot; and is interpreted as relative&#xA;     * to the current context root.  Use &lt;code>getContext&lt;/code> to obtain&#xA;     * a &lt;code>RequestDispatcher&lt;/code> for resources in foreign contexts.&#xA;     * This method returns &lt;code>null&lt;/code> if the &lt;code>ServletContext&lt;/code>&#xA;     * cannot return a &lt;code>RequestDispatcher&lt;/code>.&#xA;     *&#xA;     * @param path &#x9;a &lt;code>String&lt;/code> specifying the pathname&#xA;     *&#x9;&#x9;&#x9;to the resource&#xA;     *&#xA;     * @return &#x9;&#x9;a &lt;code>RequestDispatcher&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;that acts as a wrapper for the resource&#xA;     *&#x9;&#x9;&#x9;at the specified path, or &lt;code>null&lt;/code> if &#xA;     *&#x9;&#x9;&#x9;the &lt;code>ServletContext&lt;/code> cannot return&#xA;     *&#x9;&#x9;&#x9;a &lt;code>RequestDispatcher&lt;/code>&#xA;     *&#xA;     * @see &#x9;&#x9;RequestDispatcher&#xA;     * @see &#x9;&#x9;ServletContext#getContext&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNamedDispatcher">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/RequestDispatcher.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a {@link RequestDispatcher} object that acts&#xA;     * as a wrapper for the named servlet.&#xA;     *&#xA;     * &lt;p>Servlets (and JSP pages also) may be given names via server &#xA;     * administration or via a web application deployment descriptor.&#xA;     * A servlet instance can determine its name using &#xA;     * {@link ServletConfig#getServletName}.&#xA;     *&#xA;     * &lt;p>This method returns &lt;code>null&lt;/code> if the &#xA;     * &lt;code>ServletContext&lt;/code>&#xA;     * cannot return a &lt;code>RequestDispatcher&lt;/code> for any reason.&#xA;     *&#xA;     * @param name &#x9;a &lt;code>String&lt;/code> specifying the name&#xA;     *&#x9;&#x9;&#x9;of a servlet to wrap&#xA;     *&#xA;     * @return &#x9;&#x9;a &lt;code>RequestDispatcher&lt;/code> object&#xA;     *&#x9;&#x9;&#x9;that acts as a wrapper for the named servlet,&#xA;     *&#x9;&#x9;&#x9;or &lt;code>null&lt;/code> if the &lt;code>ServletContext&lt;/code>&#xA;     *&#x9;&#x9;&#x9;cannot return a &lt;code>RequestDispatcher&lt;/code>&#xA;     *&#xA;     * @see &#x9;&#x9;RequestDispatcher&#xA;     * @see &#x9;&#x9;ServletContext#getContext&#xA;     * @see &#x9;&#x9;ServletConfig#getServletName&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServlet">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/servlet/Servlet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * @deprecated&#x9;As of Java Servlet API 2.1, with no direct replacement.&#xA;     *&#xA;     * &lt;p>This method was originally defined to retrieve a servlet&#xA;     * from a &lt;code>ServletContext&lt;/code>. In this version, this method &#xA;     * always returns &lt;code>null&lt;/code> and remains only to preserve &#xA;     * binary compatibility. This method will be permanently removed &#xA;     * in a future version of the Java Servlet API.&#xA;     *&#xA;     * &lt;p>In lieu of this method, servlets can share information using the &#xA;     * &lt;code>ServletContext&lt;/code> class and can perform shared business logic&#xA;     * by invoking methods on common non-servlet classes.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServlets">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * @deprecated&#x9;As of Java Servlet API 2.0, with no replacement.&#xA;     *&#xA;     * &lt;p>This method was originally defined to return an &lt;code>Enumeration&lt;/code>&#xA;     * of all the servlets known to this servlet context. In this&#xA;     * version, this method always returns an empty enumeration and&#xA;     * remains only to preserve binary compatibility. This method&#xA;     * will be permanently removed in a future version of the Java&#xA;     * Servlet API.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @deprecated&#x9;As of Java Servlet API 2.1, with no replacement.&#xA;     *&#xA;     * &lt;p>This method was originally defined to return an &#xA;     * &lt;code>Enumeration&lt;/code>&#xA;     * of all the servlet names known to this context. In this version,&#xA;     * this method always returns an empty &lt;code>Enumeration&lt;/code> and &#xA;     * remains only to preserve binary compatibility. This method will &#xA;     * be permanently removed in a future version of the Java Servlet API.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="log">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Writes the specified message to a servlet log file, usually&#xA;     * an event log. The name and type of the servlet log file is &#xA;     * specific to the servlet container.&#xA;     *&#xA;     *&#xA;     * @param msg &#x9;a &lt;code>String&lt;/code> specifying the &#xA;     *&#x9;&#x9;&#x9;message to be written to the log file&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="log">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @deprecated&#x9;As of Java Servlet API 2.1, use&#xA;     * &#x9;&#x9;&#x9;{@link #log(String message, Throwable throwable)} &#xA;     *&#x9;&#x9;&#x9;instead.&#xA;     *&#xA;     * &lt;p>This method was originally defined to write an &#xA;     * exception's stack trace and an explanatory error message&#xA;     * to the servlet log file.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="log">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="message">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="throwable">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Throwable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes an explanatory message and a stack trace&#xA;     * for a given &lt;code>Throwable&lt;/code> exception&#xA;     * to the servlet log file. The name and type of the servlet log &#xA;     * file is specific to the servlet container, usually an event log.&#xA;     *&#xA;     *&#xA;     * @param message &#x9;&#x9;a &lt;code>String&lt;/code> that &#xA;     *&#x9;&#x9;&#x9;&#x9;describes the error or exception&#xA;     *&#xA;     * @param throwable &#x9;the &lt;code>Throwable&lt;/code> error &#xA;     *&#x9;&#x9;&#x9;&#x9;or exception&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRealPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>String&lt;/code> containing the real path &#xA;     * for a given virtual path. For example, the path &quot;/index.html&quot;&#xA;     * returns the absolute file path on the server's filesystem would be&#xA;     * served by a request for &quot;http://host/contextPath/index.html&quot;,&#xA;     * where contextPath is the context path of this ServletContext..&#xA;     *&#xA;     * &lt;p>The real path returned will be in a form&#xA;     * appropriate to the computer and operating system on&#xA;     * which the servlet container is running, including the&#xA;     * proper path separators. This method returns &lt;code>null&lt;/code>&#xA;     * if the servlet container cannot translate the virtual path&#xA;     * to a real path for any reason (such as when the content is&#xA;     * being made available from a &lt;code>.war&lt;/code> archive).&#xA;     *&#xA;     *&#xA;     * @param path &#x9;a &lt;code>String&lt;/code> specifying a virtual path&#xA;     *&#xA;     *&#xA;     * @return &#x9;&#x9;a &lt;code>String&lt;/code> specifying the real path,&#xA;     *                  or null if the translation cannot be performed&#xA;     *&#x9;&#x9;&#x9;&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServerInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name and version of the servlet container on which&#xA;     * the servlet is running. &#xA;     *&#xA;     * &lt;p>The form of the returned string is &#xA;     * &lt;i>servername&lt;/i>/&lt;i>versionnumber&lt;/i>.&#xA;     * For example, the JavaServer Web Development Kit may return the string&#xA;     * &lt;code>JavaServer Web Dev Kit/1.0&lt;/code>.&#xA;     *&#xA;     * &lt;p>The servlet container may return other optional information &#xA;     * after the primary string in parentheses, for example,&#xA;     * &lt;code>JavaServer Web Dev Kit/1.0 (JDK 1.1.6; Windows NT 4.0 x86)&lt;/code>.&#xA;     *&#xA;     *&#xA;     * @return &#x9;&#x9;a &lt;code>String&lt;/code> containing at least the &#xA;     *&#x9;&#x9;&#x9;servlet container name and version number&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInitParameter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>String&lt;/code> containing the value of the named&#xA;     * context-wide initialization parameter, or &lt;code>null&lt;/code> if the &#xA;     * parameter does not exist.&#xA;     *&#xA;     * &lt;p>This method can make available configuration information useful&#xA;     * to an entire &quot;web application&quot;.  For example, it can provide a &#xA;     * webmaster's email address or the name of a system that holds &#xA;     * critical data.&#xA;     *&#xA;     * @param&#x9;name&#x9;a &lt;code>String&lt;/code> containing the name of the&#xA;     *                  parameter whose value is requested&#xA;     * &#xA;     * @return &#x9;&#x9;a &lt;code>String&lt;/code> containing at least the &#xA;     *&#x9;&#x9;&#x9;servlet container name and version number&#xA;     *&#xA;     * @see ServletConfig#getInitParameter&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInitParameterNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the names of the context's initialization parameters as an&#xA;     * &lt;code>Enumeration&lt;/code> of &lt;code>String&lt;/code> objects, or an&#xA;     * empty &lt;code>Enumeration&lt;/code> if the context has no initialization&#xA;     * parameters.&#xA;     *&#xA;     * @return &#x9;&#x9;an &lt;code>Enumeration&lt;/code> of &lt;code>String&lt;/code> &#xA;     *                  objects containing the names of the context's&#xA;     *                  initialization parameters&#xA;     *&#xA;     * @see ServletConfig#getInitParameter&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the servlet container attribute with the given name, &#xA;     * or &lt;code>null&lt;/code> if there is no attribute by that name.&#xA;     * An attribute allows a servlet container to give the&#xA;     * servlet additional information not&#xA;     * already provided by this interface. See your&#xA;     * server documentation for information about its attributes.&#xA;     * A list of supported attributes can be retrieved using&#xA;     * &lt;code>getAttributeNames&lt;/code>.&#xA;     *&#xA;     * &lt;p>The attribute is returned as a &lt;code>java.lang.Object&lt;/code>&#xA;     * or some subclass.&#xA;     * Attribute names should follow the same convention as package&#xA;     * names. The Java Servlet API specification reserves names&#xA;     * matching &lt;code>java.*&lt;/code>, &lt;code>javax.*&lt;/code>,&#xA;     * and &lt;code>sun.*&lt;/code>.&#xA;     *&#xA;     *&#xA;     * @param name &#x9;a &lt;code>String&lt;/code> specifying the name &#xA;     *&#x9;&#x9;&#x9;of the attribute&#xA;     *&#xA;     * @return &#x9;&#x9;an &lt;code>Object&lt;/code> containing the value &#xA;     *&#x9;&#x9;&#x9;of the attribute, or &lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;&#x9;if no attribute exists matching the given&#xA;     *&#x9;&#x9;&#x9;name&#xA;     *&#xA;     * @see &#x9;&#x9;ServletContext#getAttributeNames&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;code>Enumeration&lt;/code> containing the &#xA;     * attribute names available&#xA;     * within this servlet context. Use the&#xA;     * {@link #getAttribute} method with an attribute name&#xA;     * to get the value of an attribute.&#xA;     *&#xA;     * @return &#x9;&#x9;an &lt;code>Enumeration&lt;/code> of attribute &#xA;     *&#x9;&#x9;&#x9;names&#xA;     *&#xA;     * @see&#x9;&#x9;#getAttribute&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Binds an object to a given attribute name in this servlet context. If&#xA;     * the name specified is already used for an attribute, this&#xA;     * method will replace the attribute with the new to the new attribute.&#xA;     * &lt;p>If listeners are configured on the &lt;code>ServletContext&lt;/code> the  &#xA;     * container notifies them accordingly.&#xA;     * &lt;p>&#xA;     * If a null value is passed, the effect is the same as calling &#xA;     * &lt;code>removeAttribute()&lt;/code>.&#xA;     * &#xA;     * &lt;p>Attribute names should follow the same convention as package&#xA;     * names. The Java Servlet API specification reserves names&#xA;     * matching &lt;code>java.*&lt;/code>, &lt;code>javax.*&lt;/code>, and&#xA;     * &lt;code>sun.*&lt;/code>.&#xA;     *&#xA;     *&#xA;     * @param name &#x9;a &lt;code>String&lt;/code> specifying the name &#xA;     *&#x9;&#x9;&#x9;of the attribute&#xA;     *&#xA;     * @param object &#x9;an &lt;code>Object&lt;/code> representing the&#xA;     *&#x9;&#x9;&#x9;attribute to be bound&#xA;     *&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the attribute with the given name from &#xA;     * the servlet context. After removal, subsequent calls to&#xA;     * {@link #getAttribute} to retrieve the attribute's value&#xA;     * will return &lt;code>null&lt;/code>.&#xA;&#xA;     * &lt;p>If listeners are configured on the &lt;code>ServletContext&lt;/code> the &#xA;     * container notifies them accordingly.&#xA;&#xA;     *&#xA;     *&#xA;     * @param name&#x9;a &lt;code>String&lt;/code> specifying the name &#xA;     * &#x9;&#x9;&#x9;of the attribute to be removed&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletContextName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of this web application corresponding to this ServletContext as specified in the deployment&#xA;     * descriptor for this web application by the display-name element.&#xA;     *&#xA;     *&#xA;     * @return&#x9;    The name of the web application or null if no name has been declared in the deployment descriptor.&#xA;     * @since Servlet 2.3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &#xA; * Defines a set of methods that a servlet uses to communicate with its&#xA; * servlet container, for example, to get the MIME type of a file, dispatch&#xA; * requests, or write to a log file.&#xA; *&#xA; * &lt;p>There is one context per &quot;web application&quot; per Java Virtual Machine.  (A&#xA; * &quot;web application&quot; is a collection of servlets and content installed under a&#xA; * specific subset of the server's URL namespace such as &lt;code>/catalog&lt;/code>&#xA; * and possibly installed via a &lt;code>.war&lt;/code> file.) &#xA; *&#xA; * &lt;p>In the case of a web&#xA; * application marked &quot;distributed&quot; in its deployment descriptor, there will&#xA; * be one context instance for each virtual machine.  In this situation, the &#xA; * context cannot be used as a location to share global information (because&#xA; * the information won't be truly global).  Use an external resource like &#xA; * a database instead.&#xA; *&#xA; * &lt;p>The &lt;code>ServletContext&lt;/code> object is contained within &#xA; * the {@link ServletConfig} object, which the Web server provides the&#xA; * servlet when the servlet is initialized.&#xA; *&#xA; * @author &#x9;Various&#xA; * @version &#x9;$Version$&#xA; *&#xA; * @see &#x9;Servlet#getServletConfig&#xA; * @see &#x9;ServletConfig#getServletContext&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
