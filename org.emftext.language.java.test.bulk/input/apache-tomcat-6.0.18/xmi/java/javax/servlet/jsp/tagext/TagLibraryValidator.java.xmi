<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="TagLibraryValidator.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>tagext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="TagLibraryValidator">
    <members xsi:type="members:Constructor" name="TagLibraryValidator">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sole constructor. (For invocation by subclass constructors, &#xA;     * typically implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setInitParameters">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="map">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../lang/Object.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../../../util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the init data in the TLD for this validator.&#xA;     * Parameter names are keys, and parameter values are the values.&#xA;     *&#xA;     * @param map A Map describing the init parameters&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInitParameters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the init parameters data as an immutable Map.&#xA;     * Parameter names are keys, and parameter values are the values.&#xA;     *&#xA;     * @return The init parameters as an immutable map.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="validate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/tagext/ValidationMessage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="prefix">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="page">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/tagext/PageData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Validate a JSP page.&#xA;     * This will get invoked once per unique tag library URI in the&#xA;     * XML view.  This method will return null if the page is valid; otherwise&#xA;     * the method should return an array of ValidationMessage objects.&#xA;     * An array of length zero is also interpreted as no errors.&#xA;     *&#xA;     * @param prefix the first prefix with which the tag library is &#xA;     *     associated, in the XML view.  Note that some tags may use &#xA;     *     a different prefix if the namespace is redefined.&#xA;     * @param uri the tag library's unique identifier&#xA;     * @param page the JspData page object&#xA;     * @return A null object, or zero length array if no errors, an array&#xA;     * of ValidationMessages otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="release">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Release any data kept by this instance for validation purposes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Field" name="initParameters">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../../lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Private data</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Abstract">
      <comments>/**&#xA; * Translation-time validator class for a JSP page. &#xA; * A validator operates on the XML view associated with the JSP page.&#xA; *&#xA; * &lt;p>&#xA; * The TLD file associates a TagLibraryValidator class and some init&#xA; * arguments with a tag library.&#xA; *&#xA; * &lt;p>&#xA; * The JSP container is reponsible for locating an appropriate&#xA; * instance of the appropriate subclass by&#xA; *&#xA; * &lt;ul>&#xA; * &lt;li> new a fresh instance, or reuse an available one&#xA; * &lt;li> invoke the setInitParams(Map) method on the instance&#xA; * &lt;/ul>&#xA; *&#xA; * once initialized, the validate(String, String, PageData) method will&#xA; * be invoked, where the first two arguments are the prefix&#xA; * and uri for this tag library in the XML View.  The prefix is intended&#xA; * to make it easier to produce an error message.  However, it is not&#xA; * always accurate.  In the case where a single URI is mapped to more &#xA; * than one prefix in the XML view, the prefix of the first URI is provided.&#xA; * Therefore, to provide high quality error messages in cases where the &#xA; * tag elements themselves are checked, the prefix parameter should be &#xA; * ignored and the actual prefix of the element should be used instead.  &#xA; * TagLibraryValidators should always use the uri to identify elements &#xA; * as beloning to the tag library, not the prefix.&#xA; *&#xA; * &lt;p>&#xA; * A TagLibraryValidator instance&#xA; * may create auxiliary objects internally to perform&#xA; * the validation (e.g. an XSchema validator) and may reuse it for all&#xA; * the pages in a given translation run.&#xA; *&#xA; * &lt;p>&#xA; * The JSP container is not guaranteed to serialize invocations of&#xA; * validate() method, and TagLibraryValidators should perform any&#xA; * synchronization they may require.&#xA; *&#xA; * &lt;p>&#xA; * As of JSP 2.0, a JSP container must provide a jsp:id attribute to&#xA; * provide higher quality validation errors.&#xA; * The container will track the JSP pages&#xA; * as passed to the container, and will assign to each element&#xA; * a unique &quot;id&quot;, which is passed as the value of the jsp:id&#xA; * attribute.  Each XML element in the XML view available will&#xA; * be extended with this attribute.  The TagLibraryValidator&#xA; * can then use the attribute in one or more ValidationMessage&#xA; * objects.  The container then, in turn, can use these&#xA; * values to provide more precise information on the location&#xA; * of an error.&#xA; *&#xA; * &lt;p>&#xA; * The actual prefix of the &lt;code>id&lt;/code> attribute may or may not be &#xA; * &lt;code>jsp&lt;/code> but it will always map to the namespace&#xA; * &lt;code>http://java.sun.com/JSP/Page&lt;/code>.  A TagLibraryValidator&#xA; * implementation must rely on the uri, not the prefix, of the &lt;code>id&lt;/code>&#xA; * attribute.&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
  </classifiers>
</containers:CompilationUnit>
