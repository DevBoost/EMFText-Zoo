<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="Tag.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>tagext</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Tag">
    <members xsi:type="members:Field" name="SKIP_BODY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Skip body evaluation.&#xA;     * Valid return value for doStartTag and doAfterBody.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="EVAL_BODY_INCLUDE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Evaluate body into existing out stream.&#xA;     * Valid return value for doStartTag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SKIP_PAGE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Skip the rest of the page.&#xA;     * Valid return value for doEndTag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="EVAL_PAGE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Continue evaluating the page.&#xA;     * Valid return value for doEndTag().&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPageContext">
      <typeReference xsi:type="types:Void">
        <comments>// Setters for Tag handler data</comments>
        <comments>/**&#xA;     * Set the current page context.&#xA;     * This method is invoked by the JSP page implementation object&#xA;     * prior to doStartTag().&#xA;     * &lt;p>&#xA;     * This value is *not* reset by doEndTag() and must be explicitly reset&#xA;     * by a page implementation if it changes between calls to doStartTag().&#xA;     *&#xA;     * @param pc The page context for this tag handler.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/PageContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setParent">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Set the parent (closest enclosing tag handler) of this tag handler.&#xA;     * Invoked by the JSP page implementation object prior to doStartTag().&#xA;     * &lt;p>&#xA;     * This value is *not* reset by doEndTag() and must be explicitly reset&#xA;     * by a page implementation.&#xA;     *&#xA;     * @param t The parent tag, or null.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Get the parent (closest enclosing tag handler) for this tag handler.&#xA;     *&#xA;     * &lt;p>&#xA;     * The getParent() method can be used to navigate the nested tag&#xA;     * handler structure at runtime for cooperation among custom actions;&#xA;     * for example, the findAncestorWithClass() method in TagSupport&#xA;     * provides a convenient way of doing this.&#xA;     *&#xA;     * &lt;p>&#xA;     * The current version of the specification only provides one formal&#xA;     * way of indicating the observable type of a tag handler: its&#xA;     * tag handler implementation class, described in the tag-class&#xA;     * subelement of the tag element.  This is extended in an&#xA;     * informal manner by allowing the tag library author to&#xA;     * indicate in the description subelement an observable type.&#xA;     * The type should be a subtype of the tag handler implementation&#xA;     * class or void.&#xA;     * This addititional constraint can be exploited by a&#xA;     * specialized container that knows about that specific tag library,&#xA;     * as in the case of the JSP standard tag library.&#xA;     *&#xA;     * @return the current parent, or null if none.&#xA;     * @see TagSupport#findAncestorWithClass&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doStartTag">
      <typeReference xsi:type="types:Int">
        <comments>// Actions for basic start/end processing.</comments>
        <comments>/**&#xA;     * Process the start tag for this instance.&#xA;     * This method is invoked by the JSP page implementation object.&#xA;     *&#xA;     * &lt;p>&#xA;     * The doStartTag method assumes that the properties pageContext and&#xA;     * parent have been set. It also assumes that any properties exposed as&#xA;     * attributes have been set too.  When this method is invoked, the body&#xA;     * has not yet been evaluated.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method returns Tag.EVAL_BODY_INCLUDE or&#xA;     * BodyTag.EVAL_BODY_BUFFERED to indicate&#xA;     * that the body of the action should be evaluated or SKIP_BODY to&#xA;     * indicate otherwise.&#xA;     *&#xA;     * &lt;p>&#xA;     * When a Tag returns EVAL_BODY_INCLUDE the result of evaluating&#xA;     * the body (if any) is included into the current &quot;out&quot; JspWriter as it&#xA;     * happens and then doEndTag() is invoked.&#xA;     *&#xA;     * &lt;p>&#xA;     * BodyTag.EVAL_BODY_BUFFERED is only valid  if the tag handler&#xA;     * implements BodyTag.&#xA;     *&#xA;     * &lt;p>&#xA;     * The JSP container will resynchronize the values of any AT_BEGIN and&#xA;     * NESTED variables (defined by the associated TagExtraInfo or TLD)&#xA;     * after the invocation of doStartTag(), except for a tag handler&#xA;     * implementing BodyTag whose doStartTag() method returns&#xA;     * BodyTag.EVAL_BODY_BUFFERED.&#xA;     *&#xA;     * @return EVAL_BODY_INCLUDE if the tag wants to process body, SKIP_BODY &#xA;     *     if it does not want to process it.&#xA;     * @throws JspException if an error occurred while processing this tag&#xA;     * @see BodyTag&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doEndTag">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Process the end tag for this instance.&#xA;     * This method is invoked by the JSP page implementation object&#xA;     * on all Tag handlers.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method will be called after returning from doStartTag. The&#xA;     * body of the action may or may not have been evaluated, depending on&#xA;     * the return value of doStartTag.&#xA;     *&#xA;     * &lt;p>&#xA;     * If this method returns EVAL_PAGE, the rest of the page continues&#xA;     * to be evaluated.  If this method returns SKIP_PAGE, the rest of&#xA;     * the page is not evaluated, the request is completed, and &#xA;     * the doEndTag() methods of enclosing tags are not invoked.  If this&#xA;     * request was forwarded or included from another page (or Servlet),&#xA;     * only the current page evaluation is stopped.&#xA;     *&#xA;     * &lt;p>&#xA;     * The JSP container will resynchronize the values of any AT_BEGIN and&#xA;     * AT_END variables (defined by the associated TagExtraInfo or TLD)&#xA;     * after the invocation of doEndTag().&#xA;     *&#xA;     * @return indication of whether to continue evaluating the JSP page.&#xA;     * @throws JspException if an error occurred while processing this tag&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="release">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called on a Tag handler to release state.&#xA;     * The page compiler guarantees that JSP page implementation&#xA;     * objects will invoke this method on all tag handlers,&#xA;     * but there may be multiple invocations on doStartTag and doEndTag in between.&#xA;     */</comments>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The interface of a classic tag handler that does not want to manipulate &#xA; * its body.  The Tag interface defines the basic protocol between a Tag &#xA; * handler and JSP page implementation class.  It defines the life cycle &#xA; * and the methods to be invoked at start and end tag.&#xA; *&#xA; * &lt;p>&lt;B>Properties&lt;/B>&lt;/p>&#xA; *&#xA; * &lt;p>The Tag interface specifies the setter and getter methods for the core&#xA; * pageContext and parent properties.&lt;/p>&#xA; *&#xA; * &lt;p>The JSP page implementation object invokes setPageContext and&#xA; * setParent, in that order, before invoking doStartTag() or doEndTag().&lt;/p>&#xA; *&#xA; * &lt;p>&lt;B>Methods&lt;/B>&lt;/p>&#xA; *&#xA; * &lt;p>There are two main actions: doStartTag and doEndTag.  Once all&#xA; * appropriate properties have been initialized, the doStartTag and&#xA; * doEndTag methods can be invoked on the tag handler.  Between these&#xA; * invocations, the tag handler is assumed to hold a state that must&#xA; * be preserved.  After the doEndTag invocation, the tag handler is&#xA; * available for further invocations (and it is expected to have&#xA; * retained its properties).&lt;/p>&#xA; *&#xA; * &lt;p>&lt;B>Lifecycle&lt;/B>&lt;/p>&#xA; *&#xA; * &lt;p>Lifecycle details are described by the transition diagram below,&#xA; * with the following comments:&#xA; * &lt;ul>&#xA; * &lt;li> [1] This transition is intended to be for releasing long-term data.&#xA; * no guarantees are assumed on whether any properties have been retained&#xA; * or not.&#xA; * &lt;li> [2] This transition happens if and only if the tag ends normally&#xA; * without raising an exception&#xA; * &lt;li> [3] Some setters may be called again before a tag handler is &#xA; * reused.  For instance, &lt;code>setParent()&lt;/code> is called if it's &#xA; * reused within the same page but at a different level, &#xA; * &lt;code>setPageContext()&lt;/code> is called if it's used in another page, &#xA; * and attribute setters are called if the values differ or are expressed &#xA; * as request-time attribute values.&#xA; * &lt;li> Check the TryCatchFinally interface for additional details related&#xA; * to exception handling and resource management.&#xA; * &lt;/ul>&lt;/p>&#xA; *&#xA; * &lt;IMG src=&quot;doc-files/TagProtocol.gif&quot;&#xA; *      alt=&quot;Lifecycle Details Transition Diagram for Tag&quot;/>&#xA; * &#xA; * &lt;p>Once all invocations on the tag handler&#xA; * are completed, the release method is invoked on it.  Once a release&#xA; * method is invoked &lt;em>all&lt;/em> properties, including parent and&#xA; * pageContext, are assumed to have been reset to an unspecified value.&#xA; * The page compiler guarantees that release() will be invoked on the Tag&#xA; * handler before the handler is released to the GC.&lt;/p>&#xA; *&#xA; * &lt;p>&lt;B>Empty and Non-Empty Action&lt;/B>&lt;/p>&#xA; * &lt;p>If the TagLibraryDescriptor file indicates that the action must&#xA; * always have an empty action, by an &amp;lt;body-content&amp;gt; entry of &quot;empty&quot;,&#xA; * then the doStartTag() method must return SKIP_BODY.&lt;/p>&#xA; *&#xA; * &lt;p>Otherwise, the doStartTag() method may return SKIP_BODY or&#xA; * EVAL_BODY_INCLUDE.&lt;/p>&#xA; *&#xA; * &lt;p>If SKIP_BODY is returned the body, if present, is not evaluated.&lt;/p>&#xA; * &#xA; * &lt;p>If EVAL_BODY_INCLUDE is returned, the body is evaluated and&#xA; * &quot;passed through&quot; to the current out.&lt;/p>&#xA;*/</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/tagext/JspTag.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
