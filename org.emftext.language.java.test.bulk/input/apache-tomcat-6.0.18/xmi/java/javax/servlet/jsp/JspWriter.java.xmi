<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="JspWriter.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="JspWriter">
    <members xsi:type="members:Field" name="NO_BUFFER">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constant indicating that the Writer is not buffering output.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_BUFFER">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constant indicating that the Writer is buffered and is using the&#xA;     * implementation default buffer size.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNBOUNDED_BUFFER">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constant indicating that the Writer is buffered and is unbounded; this&#xA;     * is used in BodyContent.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="JspWriter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bufferSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="autoFlush">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Protected constructor.&#xA;     *&#xA;     * @param bufferSize the size of the buffer to be used by the JspWriter&#xA;     * @param autoFlush whether the JspWriter should be autoflushing&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newLine">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Write a line separator.  The line separator string is defined by the&#xA;     * system property &lt;tt>line.separator&lt;/tt>, and is not necessarily a single&#xA;     * newline ('\n') character.&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a boolean value.  The string produced by &lt;code>{@link&#xA;     * java.lang.String#valueOf(boolean)}&lt;/code> is written to the&#xA;     * JspWriter's buffer or, if no buffer is used, directly to the &#xA;     * underlying writer.&#xA;     *&#xA;     * @param      b   The &lt;code>boolean&lt;/code> to be printed&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a character.  The character is written to the&#xA;     * JspWriter's buffer or, if no buffer is used, directly to the&#xA;     * underlying writer.&#xA;     *&#xA;     * @param      c   The &lt;code>char&lt;/code> to be printed&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print an integer.  The string produced by &lt;code>{@link&#xA;     * java.lang.String#valueOf(int)}&lt;/code> is written to the&#xA;     * JspWriter's buffer or, if no buffer is used, directly to the&#xA;     * underlying writer.&#xA;     *&#xA;     * @param      i   The &lt;code>int&lt;/code> to be printed&#xA;     * @see        java.lang.Integer#toString(int)&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a long integer.  The string produced by &lt;code>{@link&#xA;     * java.lang.String#valueOf(long)}&lt;/code> is written to the&#xA;     * JspWriter's buffer or, if no buffer is used, directly to the&#xA;     * underlying writer.&#xA;     *&#xA;     * @param      l   The &lt;code>long&lt;/code> to be printed&#xA;     * @see        java.lang.Long#toString(long)&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="f">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a floating-point number.  The string produced by &lt;code>{@link&#xA;     * java.lang.String#valueOf(float)}&lt;/code> is written to the&#xA;     * JspWriter's buffer or, if no buffer is used, directly to the&#xA;     * underlying writer.&#xA;     *&#xA;     * @param      f   The &lt;code>float&lt;/code> to be printed&#xA;     * @see        java.lang.Float#toString(float)&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="d">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a double-precision floating-point number.  The string produced by&#xA;     * &lt;code>{@link java.lang.String#valueOf(double)}&lt;/code> is written to&#xA;     * the JspWriter's buffer or, if no buffer is used, directly to the&#xA;     * underlying writer.&#xA;     *&#xA;     * @param      d   The &lt;code>double&lt;/code> to be printed&#xA;     * @see        java.lang.Double#toString(double)&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print an array of characters.  The characters are written to the&#xA;     * JspWriter's buffer or, if no buffer is used, directly to the&#xA;     * underlying writer.&#xA;     *&#xA;     * @param      s   The array of chars to be printed&#xA;     *&#xA;     * @throws  NullPointerException  If &lt;code>s&lt;/code> is &lt;code>null&lt;/code>&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a string.  If the argument is &lt;code>null&lt;/code> then the string&#xA;     * &lt;code>&quot;null&quot;&lt;/code> is printed.  Otherwise, the string's characters are&#xA;     * written to the JspWriter's buffer or, if no buffer is used, directly&#xA;     * to the underlying writer.&#xA;     *&#xA;     * @param      s   The &lt;code>String&lt;/code> to be printed&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print an object.  The string produced by the &lt;code>{@link&#xA;     * java.lang.String#valueOf(Object)}&lt;/code> method is written to the&#xA;     * JspWriter's buffer or, if no buffer is used, directly to the&#xA;     * underlying writer.&#xA;     *&#xA;     * @param      obj   The &lt;code>Object&lt;/code> to be printed&#xA;     * @see        java.lang.Object#toString()&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Terminate the current line by writing the line separator string.  The&#xA;     * line separator string is defined by the system property&#xA;     * &lt;code>line.separator&lt;/code>, and is not necessarily a single newline&#xA;     * character (&lt;code>'\n'&lt;/code>).&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a boolean value and then terminate the line.  This method behaves&#xA;     * as though it invokes &lt;code>{@link #print(boolean)}&lt;/code> and then&#xA;     * &lt;code>{@link #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the boolean to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a character and then terminate the line.  This method behaves as&#xA;     * though it invokes &lt;code>{@link #print(char)}&lt;/code> and then &lt;code>{@link&#xA;     * #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the char to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print an integer and then terminate the line.  This method behaves as&#xA;     * though it invokes &lt;code>{@link #print(int)}&lt;/code> and then &lt;code>{@link&#xA;     * #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the int to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a long integer and then terminate the line.  This method behaves&#xA;     * as though it invokes &lt;code>{@link #print(long)}&lt;/code> and then&#xA;     * &lt;code>{@link #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the long to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a floating-point number and then terminate the line.  This method&#xA;     * behaves as though it invokes &lt;code>{@link #print(float)}&lt;/code> and then&#xA;     * &lt;code>{@link #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the float to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a double-precision floating-point number and then terminate the&#xA;     * line.  This method behaves as though it invokes &lt;code>{@link&#xA;     * #print(double)}&lt;/code> and then &lt;code>{@link #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the double to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print an array of characters and then terminate the line.  This method&#xA;     * behaves as though it invokes &lt;code>print(char[])&lt;/code> and then&#xA;     * &lt;code>println()&lt;/code>.&#xA;     *&#xA;     * @param      x the char[] to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print a String and then terminate the line.  This method behaves as&#xA;     * though it invokes &lt;code>{@link #print(String)}&lt;/code> and then&#xA;     * &lt;code>{@link #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the String to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="println">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Print an Object and then terminate the line.  This method behaves as&#xA;     * though it invokes &lt;code>{@link #print(Object)}&lt;/code> and then&#xA;     * &lt;code>{@link #println()}&lt;/code>.&#xA;     *&#xA;     * @param      x the Object to write&#xA;     * @throws&#x9;   java.io.IOException If an error occured while writing&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clear">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Clear the contents of the buffer. If the buffer has been already&#xA;     * been flushed then the clear operation shall throw an IOException&#xA;     * to signal the fact that some data has already been irrevocably &#xA;     * written to the client response stream.&#xA;     *&#xA;     * @throws IOException&#x9;&#x9;If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clearBuffer">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Clears the current contents of the buffer. Unlike clear(), this&#xA;     * method will not throw an IOException if the buffer has already been&#xA;     * flushed. It merely clears the current content of the buffer and&#xA;     * returns.&#xA;     *&#xA;     * @throws IOException&#x9;&#x9;If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="flush">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Flush the stream.  If the stream has saved any characters from the&#xA;     * various write() methods in a buffer, write them immediately to their&#xA;     * intended destination.  Then, if that destination is another character or&#xA;     * byte stream, flush it.  Thus one flush() invocation will flush all the&#xA;     * buffers in a chain of Writers and OutputStreams.&#xA;     * &lt;p>&#xA;     * The method may be invoked indirectly if the buffer size is exceeded.&#xA;     * &lt;p>&#xA;     * Once a stream has been closed,&#xA;     * further write() or flush() invocations will cause an IOException to be&#xA;     * thrown.&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Close the stream, flushing it first.&#xA;     * &lt;p>&#xA;     * This method needs not be invoked explicitly for the initial JspWriter&#xA;     * as the code generated by the JSP container will automatically&#xA;     * include a call to close().&#xA;     * &lt;p>&#xA;     * Closing a previously-closed stream, unlike flush(), has no effect.&#xA;     *&#xA;     * @exception  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getBufferSize">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method returns the size of the buffer used by the JspWriter.&#xA;     *&#xA;     * @return the size of the buffer in bytes, or 0 is unbuffered.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemaining">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * This method returns the number of unused bytes in the buffer.&#xA;     *&#xA;     * @return the number of bytes unused in the buffer&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="isAutoFlush">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method indicates whether the JspWriter is autoFlushing.&#xA;     *&#xA;     * @return if this JspWriter is auto flushing or throwing IOExceptions &#xA;     *     on buffer overflow conditions&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="bufferSize">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/*&#xA;     * fields&#xA;     */</comments>
        <comments>/**&#xA;     * The size of the buffer used by the JspWriter.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="autoFlush">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Whether the JspWriter is autoflushing.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Abstract">
      <comments>/**&#xA; * &lt;p>&#xA; * The actions and template data in a JSP page is written using the&#xA; * JspWriter object that is referenced by the implicit variable out which&#xA; * is initialized automatically using methods in the PageContext object.&#xA; *&lt;p>&#xA; * This abstract class emulates some of the functionality found in the&#xA; * java.io.BufferedWriter and java.io.PrintWriter classes,&#xA; * however it differs in that it throws java.io.IOException from the print&#xA; * methods while PrintWriter does not.&#xA; * &lt;p>&lt;B>Buffering&lt;/B>&#xA; * &lt;p>&#xA; * The initial JspWriter object is associated with the PrintWriter object&#xA; * of the ServletResponse in a way that depends on whether the page is or&#xA; * is not buffered. If the page is not buffered, output written to this&#xA; * JspWriter object will be written through to the PrintWriter directly,&#xA; * which will be created if necessary by invoking the getWriter() method&#xA; * on the response object. But if the page is buffered, the PrintWriter&#xA; * object will not be created until the buffer is flushed and&#xA; * operations like setContentType() are legal. Since this flexibility&#xA; * simplifies programming substantially, buffering is the default for JSP&#xA; * pages.&#xA; * &lt;p>&#xA; * Buffering raises the issue of what to do when the buffer is&#xA; * exceeded. Two approaches can be taken:&#xA; * &lt;ul>&#xA; * &lt;li>&#xA; * Exceeding the buffer is not a fatal error; when the buffer is&#xA; * exceeded, just flush the output.&#xA; * &lt;li>&#xA; * Exceeding the buffer is a fatal error; when the buffer is exceeded,&#xA; * raise an exception.&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * Both approaches are valid, and thus both are supported in the JSP&#xA; * technology. The behavior of a page is controlled by the autoFlush&#xA; * attribute, which defaults to true. In general, JSP pages that need to&#xA; * be sure that correct and complete data has been sent to their client&#xA; * may want to set autoFlush to false, with a typical case being that&#xA; * where the client is an application itself. On the other hand, JSP&#xA; * pages that send data that is meaningful even when partially&#xA; * constructed may want to set autoFlush to true; such as when the&#xA; * data is sent for immediate display through a browser. Each application&#xA; * will need to consider their specific needs.&#xA; * &lt;p>&#xA; * An alternative considered was to make the buffer size unbounded; but,&#xA; * this had the disadvantage that runaway computations would consume an&#xA; * unbounded amount of resources.&#xA; * &lt;p>&#xA; * The &quot;out&quot; implicit variable of a JSP implementation class is of this type.&#xA; * If the page directive selects autoflush=&quot;true&quot; then all the I/O operations&#xA; * on this class shall automatically flush the contents of the buffer if an&#xA; * overflow condition would result if the current operation were performed&#xA; * without a flush. If autoflush=&quot;false&quot; then all the I/O operations on this&#xA; * class shall throw an IOException if performing the current operation would&#xA; * result in a buffer overflow condition.&#xA; *&#xA; * @see java.io.Writer&#xA; * @see java.io.BufferedWriter&#xA; * @see java.io.PrintWriter&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../io/Writer.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
