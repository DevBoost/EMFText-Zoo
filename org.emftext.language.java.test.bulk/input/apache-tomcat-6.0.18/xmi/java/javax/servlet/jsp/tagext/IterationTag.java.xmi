<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="IterationTag.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>tagext</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="IterationTag">
    <members xsi:type="members:Field" name="EVAL_BODY_AGAIN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Request the reevaluation of some body.&#xA;     * Returned from doAfterBody.&#xA;     *&#xA;     * For compatibility with JSP 1.1, the value is carefully selected&#xA;     * to be the same as the, now deprecated, BodyTag.EVAL_BODY_TAG,&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doAfterBody">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Process body (re)evaluation.  This method is invoked by the&#xA;     * JSP Page implementation object after every evaluation of&#xA;     * the body into the BodyEvaluation object. The method is&#xA;     * not invoked if there is no body evaluation.&#xA;     *&#xA;     * &lt;p>&#xA;     * If doAfterBody returns EVAL_BODY_AGAIN, a new evaluation of the&#xA;     * body will happen (followed by another invocation of doAfterBody).&#xA;     * If doAfterBody returns SKIP_BODY, no more body evaluations will occur,&#xA;     * and the doEndTag method will be invoked.&#xA;     *&#xA;     * &lt;p>&#xA;     * If this tag handler implements BodyTag and doAfterBody returns&#xA;     * SKIP_BODY, the value of out will be restored using the popBody &#xA;     * method in pageContext prior to invoking doEndTag.&#xA;     *&#xA;     * &lt;p>&#xA;     * The method re-invocations may be lead to different actions because&#xA;     * there might have been some changes to shared state, or because&#xA;     * of external computation.&#xA;     *&#xA;     * &lt;p>&#xA;     * The JSP container will resynchronize the values of any AT_BEGIN and&#xA;     * NESTED variables (defined by the associated TagExtraInfo or TLD) after&#xA;     * the invocation of doAfterBody().&#xA;     *&#xA;     * @return whether additional evaluations of the body are desired&#xA;     * @throws JspException if an error occurred while processing this tag&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The IterationTag interface extends Tag by defining one additional&#xA; * method that controls the reevaluation of its body.&#xA; *&#xA; * &lt;p> A tag handler that implements IterationTag is treated as one that&#xA; * implements Tag regarding  the doStartTag() and doEndTag() methods.&#xA; * IterationTag provides a new method: &lt;code>doAfterBody()&lt;/code>.&#xA; *&#xA; * &lt;p> The doAfterBody() method is invoked after every body evaluation&#xA; * to control whether the body will be reevaluated or not.  If doAfterBody()&#xA; * returns IterationTag.EVAL_BODY_AGAIN, then the body will be reevaluated.&#xA; * If doAfterBody() returns Tag.SKIP_BODY, then the body will be skipped&#xA; * and doEndTag() will be evaluated instead.&#xA; *&#xA; * &lt;p>&lt;B>Properties&lt;/B>&#xA; * There are no new properties in addition to those in Tag.&#xA; *&#xA; * &lt;p>&lt;B>Methods&lt;/B>&#xA; * There is one new methods: doAfterBody().&#xA; *&#xA; * &lt;p>&lt;B>Lifecycle&lt;/B>&#xA; *&#xA; * &lt;p> Lifecycle details are described by the transition diagram&#xA; * below.  Exceptions that are thrown during the computation of&#xA; * doStartTag(), BODY and doAfterBody() interrupt the execution&#xA; * sequence and are propagated up the stack, unless the tag handler&#xA; * implements the TryCatchFinally interface; see that interface for&#xA; * details.&#xA; *&#xA; * &lt;p>&#xA; * &lt;IMG src=&quot;doc-files/IterationTagProtocol.gif&quot;&#xA; *      alt=&quot;Lifecycle Details Transition Diagram for IterationTag&quot;/>&#xA; *&#xA; * &lt;p>&lt;B>Empty and Non-Empty Action&lt;/B>&#xA; * &lt;p> If the TagLibraryDescriptor file indicates that the action must&#xA; * always have an empty element body, by a &amp;lt;body-content&amp;gt; entry of &#xA; * &quot;empty&quot;, then the doStartTag() method must return SKIP_BODY.&#xA; *&#xA; * &lt;p>Note that which methods are invoked after the doStartTag() depends on&#xA; * both the return value and on if the custom action element is empty&#xA; * or not in the JSP page, not on how it's declared in the TLD.&#xA; *&#xA; * &lt;p>&#xA; * If SKIP_BODY is returned the body is not evaluated, and then doEndTag()&#xA; * is invoked.&#xA; *&#xA; * &lt;p>&#xA; * If EVAL_BODY_INCLUDE is returned, and the custom action element is not&#xA; * empty, the body is evaluated and &quot;passed through&quot; to the current out, &#xA; * then doAfterBody() is invoked and, after zero or more iterations, &#xA; * doEndTag() is invoked.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/tagext/Tag.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
