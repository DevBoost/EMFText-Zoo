<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="PageContext.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/Servlet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>http</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/http/HttpSession.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
    <namespaces>tagext</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/tagext/BodyContent.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="PageContext">
    <members xsi:type="members:Constructor" name="PageContext">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sole constructor. (For invocation by subclass constructors, &#xA;     * typically implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="PAGE_SCOPE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Page scope: (this is the default) the named reference remains available&#xA;     * in this PageContext until the return from the current Servlet.service()&#xA;     * invocation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="REQUEST_SCOPE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Request scope: the named reference remains available from the &#xA;     * ServletRequest associated with the Servlet until the current request &#xA;     * is completed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SESSION_SCOPE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Session scope (only valid if this page participates in a session):&#xA;     * the named reference remains available from the HttpSession (if any)&#xA;     * associated with the Servlet until the HttpSession is invalidated.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="APPLICATION_SCOPE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Application scope: named reference remains available in the &#xA;     * ServletContext until it is reclaimed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PAGE">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspPage"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store the Servlet in this PageContext's nametables.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PAGECONTEXT">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspPageContext"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store this PageContext in it's own name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="REQUEST">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspRequest"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store ServletRequest in PageContext name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RESPONSE">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspResponse"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store ServletResponse in PageContext name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CONFIG">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspConfig"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store ServletConfig in PageContext name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SESSION">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspSession"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store HttpSession in PageContext name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="OUT">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspOut"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store current JspWriter in PageContext name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="APPLICATION">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspApplication"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store ServletContext in PageContext name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="EXCEPTION">
      <initialValue xsi:type="references:StringReference" value="javax.servlet.jsp.jspException"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name used to store uncaught exception in ServletRequest attribute &#xA;     * list and PageContext name table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initialize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="servlet">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/Servlet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="request">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="response">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="errorPageURL">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="needsSession">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bufferSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="autoFlush">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/IllegalStateException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * &lt;p>&#xA;     * The initialize method is called to initialize an uninitialized PageContext&#xA;     * so that it may be used by a JSP Implementation class to service an&#xA;     * incoming request and response within it's _jspService() method.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method is typically called from JspFactory.getPageContext() in&#xA;     * order to initialize state.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method is required to create an initial JspWriter, and associate&#xA;     * the &quot;out&quot; name in page scope with this newly created object.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method should not be used by page  or tag library authors.&#xA;     *&#xA;     * @param servlet The Servlet that is associated with this PageContext&#xA;     * @param request The currently pending request for this Servlet&#xA;     * @param response The currently pending response for this Servlet&#xA;     * @param errorPageURL The value of the errorpage attribute from the page &#xA;     *     directive or null&#xA;     * @param needsSession The value of the session attribute from the &#xA;     *     page directive&#xA;     * @param bufferSize The value of the buffer attribute from the page &#xA;     *     directive&#xA;     * @param autoFlush The value of the autoflush attribute from the page &#xA;     *     directive&#xA;     *&#xA;     * @throws IOException during creation of JspWriter&#xA;     * @throws IllegalStateException if out not correctly initialized&#xA;     * @throws IllegalArgumentException If one of the given parameters&#xA;     *     is invalid&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="release">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * &lt;p>&#xA;     * This method shall &quot;reset&quot; the internal state of a PageContext, releasing&#xA;     * all internal references, and preparing the PageContext for potential&#xA;     * reuse by a later invocation of initialize(). This method is typically&#xA;     * called from JspFactory.releasePageContext().&#xA;     *&#xA;     * &lt;p>&#xA;     * Subclasses shall envelope this method.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method should not be used by page  or tag library authors.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSession">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/http/HttpSession.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The current value of the session object (an HttpSession).&#xA;     *&#xA;     * @return the HttpSession for this PageContext or null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The current value of the page object (In a Servlet environment, &#xA;     * this is an instance of javax.servlet.Servlet).&#xA;     *&#xA;     * @return the Page implementation class instance associated &#xA;     *     with this PageContext&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRequest">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The current value of the request object (a ServletRequest).&#xA;     *&#xA;     * @return The ServletRequest for this PageContext&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResponse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The current value of the response object (a ServletResponse).&#xA;     *&#xA;     * @return the ServletResponse for this PageContext&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getException">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The current value of the exception object (an Exception).&#xA;     *&#xA;     * @return any exception passed to this as an errorpage&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletConfig">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletConfig.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The ServletConfig instance.&#xA;     *&#xA;     * @return the ServletConfig for this PageContext&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The ServletContext instance.&#xA;     * &#xA;     * @return the ServletContext for this PageContext&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="forward">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="relativeUrlPath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * &lt;p>&#xA;     * This method is used to re-direct, or &quot;forward&quot; the current &#xA;     * ServletRequest and ServletResponse to another active component in &#xA;     * the application.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * If the &lt;I> relativeUrlPath &lt;/I> begins with a &quot;/&quot; then the URL specified&#xA;     * is calculated relative to the DOCROOT of the &lt;code> ServletContext &lt;/code>&#xA;     * for this JSP. If the path does not begin with a &quot;/&quot; then the URL &#xA;     * specified is calculated relative to the URL of the request that was&#xA;     * mapped to the calling JSP.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * It is only valid to call this method from a &lt;code> Thread &lt;/code>&#xA;     * executing within a &lt;code> _jspService(...) &lt;/code> method of a JSP.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * Once this method has been called successfully, it is illegal for the&#xA;     * calling &lt;code> Thread &lt;/code> to attempt to modify the &lt;code>&#xA;     * ServletResponse &lt;/code> object.  Any such attempt to do so, shall result&#xA;     * in undefined behavior. Typically, callers immediately return from &#xA;     * &lt;code> _jspService(...) &lt;/code> after calling this method.&#xA;     * &lt;/p>&#xA;     *&#xA;     * @param relativeUrlPath specifies the relative URL path to the target &#xA;     *     resource as described above&#xA;     *&#xA;     * @throws IllegalStateException if &lt;code> ServletResponse &lt;/code> is not &#xA;     *     in a state where a forward can be performed&#xA;     * @throws ServletException if the page that was forwarded to throws&#xA;     *     a ServletException&#xA;     * @throws IOException if an I/O error occurred while forwarding&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="include">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="relativeUrlPath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * &lt;p>&#xA;     * Causes the resource specified to be processed as part of the current&#xA;     * ServletRequest and ServletResponse being processed by the calling Thread.&#xA;     * The output of the target resources processing of the request is written&#xA;     * directly to the ServletResponse output stream.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * The current JspWriter &quot;out&quot; for this JSP is flushed as a side-effect&#xA;     * of this call, prior to processing the include.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * If the &lt;I> relativeUrlPath &lt;/I> begins with a &quot;/&quot; then the URL specified&#xA;     * is calculated relative to the DOCROOT of the &lt;code>ServletContext&lt;/code>&#xA;     * for this JSP. If the path does not begin with a &quot;/&quot; then the URL &#xA;     * specified is calculated relative to the URL of the request that was&#xA;     * mapped to the calling JSP.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * It is only valid to call this method from a &lt;code> Thread &lt;/code>&#xA;     * executing within a &lt;code> _jspService(...) &lt;/code> method of a JSP.&#xA;     * &lt;/p>&#xA;     *&#xA;     * @param relativeUrlPath specifies the relative URL path to the target &#xA;     *     resource to be included&#xA;     *&#xA;     * @throws ServletException if the page that was forwarded to throws&#xA;     *     a ServletException&#xA;     * @throws IOException if an I/O error occurred while forwarding&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="include">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="relativeUrlPath">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flush">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * &lt;p>&#xA;     * Causes the resource specified to be processed as part of the current&#xA;     * ServletRequest and ServletResponse being processed by the calling Thread.&#xA;     * The output of the target resources processing of the request is written&#xA;     * directly to the current JspWriter returned by a call to getOut().&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * If flush is true, The current JspWriter &quot;out&quot; for this JSP &#xA;     * is flushed as a side-effect of this call, prior to processing &#xA;     * the include.  Otherwise, the JspWriter &quot;out&quot; is not flushed.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * If the &lt;i>relativeUrlPath&lt;/i> begins with a &quot;/&quot; then the URL specified&#xA;     * is calculated relative to the DOCROOT of the &lt;code>ServletContext&lt;/code>&#xA;     * for this JSP. If the path does not begin with a &quot;/&quot; then the URL &#xA;     * specified is calculated relative to the URL of the request that was&#xA;     * mapped to the calling JSP.&#xA;     * &lt;/p>&#xA;     * &lt;p>&#xA;     * It is only valid to call this method from a &lt;code> Thread &lt;/code>&#xA;     * executing within a &lt;code> _jspService(...) &lt;/code> method of a JSP.&#xA;     * &lt;/p>&#xA;     *&#xA;     * @param relativeUrlPath specifies the relative URL path to the &#xA;     *     target resource to be included&#xA;     * @param flush True if the JspWriter is to be flushed before the include,&#xA;     *     or false if not.&#xA;     *&#xA;     * @throws ServletException if the page that was forwarded to throws&#xA;     *     a ServletException&#xA;     * @throws IOException if an I/O error occurred while forwarding&#xA;     * @since 2.0&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="handlePageException">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Exception.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * &lt;p>&#xA;     * This method is intended to process an unhandled 'page' level&#xA;     * exception by forwarding the exception to the specified&#xA;     * error page for this JSP.  If forwarding is not possible (for&#xA;     * example because the response has already been committed), an&#xA;     * implementation dependent mechanism should be used to invoke&#xA;     * the error page (e.g. &quot;including&quot; the error page instead).&#xA;     *&#xA;     * &lt;p>&#xA;     * If no error page is defined in the page, the exception should&#xA;     * be rethrown so that the standard servlet error handling&#xA;     * takes over.&#xA;     *&#xA;     * &lt;p>&#xA;     * A JSP implementation class shall typically clean up any local state&#xA;     * prior to invoking this and will return immediately thereafter. It is&#xA;     * illegal to generate any output to the client, or to modify any &#xA;     * ServletResponse state after invoking this call.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method is kept for backwards compatiblity reasons.  Newly&#xA;     * generated code should use PageContext.handlePageException(Throwable).&#xA;     *&#xA;     * @param e the exception to be handled&#xA;     *&#xA;     * @throws ServletException if an error occurs while invoking the error page&#xA;     * @throws IOException if an I/O error occurred while invoking the error&#xA;     *     page&#xA;     * @throws NullPointerException if the exception is null&#xA;     *&#xA;     * @see #handlePageException(Throwable)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="handlePageException">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Throwable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * &lt;p>&#xA;     * This method is intended to process an unhandled 'page' level&#xA;     * exception by forwarding the exception to the specified&#xA;     * error page for this JSP.  If forwarding is not possible (for&#xA;     * example because the response has already been committed), an&#xA;     * implementation dependent mechanism should be used to invoke&#xA;     * the error page (e.g. &quot;including&quot; the error page instead).&#xA;     *&#xA;     * &lt;p>&#xA;     * If no error page is defined in the page, the exception should&#xA;     * be rethrown so that the standard servlet error handling&#xA;     * takes over.&#xA;     *&#xA;     * &lt;p>&#xA;     * This method is intended to process an unhandled &quot;page&quot; level exception&#xA;     * by redirecting the exception to either the specified error page for this&#xA;     * JSP, or if none was specified, to perform some implementation dependent&#xA;     * action.&#xA;     *&#xA;     * &lt;p>&#xA;     * A JSP implementation class shall typically clean up any local state&#xA;     * prior to invoking this and will return immediately thereafter. It is&#xA;     * illegal to generate any output to the client, or to modify any &#xA;     * ServletResponse state after invoking this call.&#xA;     *&#xA;     * @param t the throwable to be handled&#xA;     *&#xA;     * @throws ServletException if an error occurs while invoking the error page&#xA;     * @throws IOException if an I/O error occurred while invoking the error&#xA;     *     page&#xA;     * @throws NullPointerException if the exception is null&#xA;     *&#xA;     * @see #handlePageException(Exception)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="pushBody">
      <comments>// XXX to implement</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/tagext/BodyContent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return a new BodyContent object, save the current &quot;out&quot; JspWriter,&#xA;     * and update the value of the &quot;out&quot; attribute in the page scope&#xA;     * attribute namespace of the PageContext.&#xA;     *&#xA;     * @return the new BodyContent&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getErrorData">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/ErrorData.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Provides convenient access to error information.&#xA;     *&#xA;     * @return an ErrorData instance containing information about the &#xA;     * error, as obtained from the request attributes, as per the &#xA;     * Servlet specification.  If this is not an error page (that is,&#xA;     * if the isErrorPage attribute of the page directive is not set&#xA;     * to &quot;true&quot;), the information is meaningless.&#xA;     *&#xA;     * @since 2.0&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/ErrorData.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/Throwable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:StringReference" value="javax.servlet.error.exception"/>
              </next>
            </child>
          </arguments>
          <arguments xsi:type="expressions:NestedExpression">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
            </next>
            <expression xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:StringReference" value="javax.servlet.error.status_code"/>
                </next>
              </child>
            </expression>
          </arguments>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:StringReference" value="javax.servlet.error.request_uri"/>
              </next>
            </child>
          </arguments>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:StringReference" value="javax.servlet.error.servlet_name"/>
              </next>
            </child>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Abstract">
      <comments>/**&#xA; * &lt;p>&#xA; * PageContext extends JspContext to provide useful context information for&#xA; * when JSP technology is used in a Servlet environment.&#xA; * &lt;p>&#xA; * A PageContext instance provides access to all the namespaces associated&#xA; * with a JSP page, provides access to several page attributes, as well as&#xA; * a layer above the implementation details.  Implicit objects are added&#xA; * to the pageContext automatically.&#xA; *&#xA; * &lt;p> The &lt;code> PageContext &lt;/code> class is an abstract class, designed to be&#xA; * extended to provide implementation dependent implementations thereof, by&#xA; * conformant JSP engine runtime environments. A PageContext instance is &#xA; * obtained by a JSP implementation class by calling the&#xA; * JspFactory.getPageContext() method, and is released by calling&#xA; * JspFactory.releasePageContext().&#xA; *&#xA; * &lt;p> An example of how PageContext, JspFactory, and other classes can be&#xA; * used  within a JSP Page Implementation object is given elsewhere.&#xA; *&#xA; * &lt;p>&#xA; * The PageContext provides a number of facilities to the page/component &#xA; * author and page implementor, including:&#xA; * &lt;ul>&#xA; * &lt;li>a single API to manage the various scoped namespaces&#xA; * &lt;li>a number of convenience API's to access various public objects&#xA; * &lt;li>a mechanism to obtain the JspWriter for output&#xA; * &lt;li>a mechanism to manage session usage by the page&#xA; * &lt;li>a mechanism to expose page directive attributes to the scripting &#xA; *     environment&#xA; * &lt;li>mechanisms to forward or include the current request to other active &#xA; *     components in the application&#xA; * &lt;li>a mechanism to handle errorpage exception processing&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>&lt;B>Methods Intended for Container Generated Code&lt;/B>&#xA; * &lt;p>Some methods are intended to be used by the code generated by the&#xA; * container, not by code written by JSP page authors, or JSP tag library &#xA; * authors.&#xA; * &lt;p>The methods supporting &lt;B>lifecycle&lt;/B> are &lt;code>initialize()&lt;/code>&#xA; * and &lt;code>release()&lt;/code>&#xA; *&#xA; * &lt;p>&#xA; * The following methods enable the &lt;B>management of nested&lt;/B> JspWriter &#xA; * streams to implement Tag Extensions: &lt;code>pushBody()&lt;/code>&#xA; *&#xA; * &lt;p>&lt;B>Methods Intended for JSP authors&lt;/B>&#xA; * &lt;p>&#xA; * The following methods provide &lt;B>convenient access&lt;/B> to implicit objects:&#xA; * &lt;code>getException()&lt;/code>,  &lt;code>getPage()&lt;/code>&#xA; * &lt;code>getRequest()&lt;/code>,  &lt;code>getResponse()&lt;/code>,&#xA; * &lt;code>getSession()&lt;/code>,  &lt;code>getServletConfig()&lt;/code>&#xA; * and &lt;code>getServletContext()&lt;/code>.&#xA; *&#xA; * &lt;p>&#xA; * The following methods provide support for &lt;B>forwarding, inclusion&#xA; * and error handling&lt;/B>:&#xA; * &lt;code>forward()&lt;/code>,  &lt;code>include()&lt;/code>,&#xA; * and  &lt;code>handlePageException()&lt;/code>.&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/JspContext.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
