<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="BodyTag.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>tagext</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="BodyTag">
    <members xsi:type="members:Field" name="EVAL_BODY_TAG">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Deprecated constant that has the same value as EVAL_BODY_BUFFERED&#xA;     * and EVAL_BODY_AGAIN.  This name has been marked as deprecated&#xA;     * to encourage the use of the two different terms, which are much&#xA;     * more descriptive.&#xA;     *&#xA;     * @deprecated&#x9;As of Java JSP API 1.2, use BodyTag.EVAL_BODY_BUFFERED&#xA;     * or IterationTag.EVAL_BODY_AGAIN.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="EVAL_BODY_BUFFERED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Request the creation of new buffer, a BodyContent on which to&#xA;     * evaluate the body of this tag.&#xA;     *&#xA;     * Returned from doStartTag when it implements BodyTag.&#xA;     * This is an illegal return value for doStartTag when the class&#xA;     * does not implement BodyTag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBodyContent">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Set the bodyContent property.&#xA;     * This method is invoked by the JSP page implementation object at&#xA;     * most once per action invocation.&#xA;     * This method will be invoked before doInitBody.&#xA;     * This method will not be invoked for empty tags or for non-empty&#xA;     * tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE.&#xA;     *&#xA;     * &lt;p>&#xA;     * When setBodyContent is invoked, the value of the implicit object out&#xA;     * has already been changed in the pageContext object.  The BodyContent&#xA;     * object passed will have not data on it but may have been reused&#xA;     * (and cleared) from some previous invocation.&#xA;     *&#xA;     * &lt;p>&#xA;     * The BodyContent object is available and with the appropriate content&#xA;     * until after the invocation of the doEndTag method, at which case it&#xA;     * may be reused.&#xA;     *&#xA;     * @param b the BodyContent&#xA;     * @see #doInitBody&#xA;     * @see #doAfterBody&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/tagext/BodyContent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="doInitBody">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Prepare for evaluation of the body.&#xA;     * This method is invoked by the JSP page implementation object&#xA;     * after setBodyContent and before the first time&#xA;     * the body is to be evaluated.&#xA;     * This method will not be invoked for empty tags or for non-empty&#xA;     * tags whose doStartTag() method returns SKIP_BODY or EVAL_BODY_INCLUDE.&#xA;     *&#xA;     * &lt;p>&#xA;     * The JSP container will resynchronize the values of any AT_BEGIN and&#xA;     * NESTED variables (defined by the associated TagExtraInfo or TLD) after&#xA;     * the invocation of doInitBody().&#xA;     *&#xA;     * @throws JspException if an error occurred while processing this tag&#xA;     * @see #doAfterBody&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The BodyTag interface extends IterationTag by defining additional&#xA; * methods that let a tag handler manipulate the content of evaluating its body.&#xA; *&#xA; * &lt;p>&#xA; * It is the responsibility of the tag handler to manipulate the body&#xA; * content.  For example the tag handler may take the body content,&#xA; * convert it into a String using the bodyContent.getString&#xA; * method and then use it.  Or the tag handler may take the body&#xA; * content and write it out into its enclosing JspWriter using&#xA; * the bodyContent.writeOut method.&#xA; *&#xA; * &lt;p> A tag handler that implements BodyTag is treated as one that&#xA; * implements IterationTag, except that the doStartTag method can&#xA; * return SKIP_BODY, EVAL_BODY_INCLUDE or EVAL_BODY_BUFFERED.&#xA; *&#xA; * &lt;p>&#xA; * If EVAL_BODY_INCLUDE is returned, then evaluation happens&#xA; * as in IterationTag.&#xA; *&#xA; * &lt;p>&#xA; * If EVAL_BODY_BUFFERED is returned, then a BodyContent object will be&#xA; * created (by code generated by the JSP compiler) to capture the body&#xA; * evaluation.&#xA; * The code generated by the JSP compiler obtains the BodyContent object by&#xA; * calling the pushBody method of the current pageContext, which&#xA; * additionally has the effect of saving the previous out value.&#xA; * The page compiler returns this object by calling the popBody&#xA; * method of the PageContext class;&#xA; * the call also restores the value of out.&#xA; *&#xA; * &lt;p>&#xA; * The interface provides one new property with a setter method and one&#xA; * new action method.&#xA; *&#xA; * &lt;p>&lt;B>Properties&lt;/B>&#xA; * &lt;p> There is a new property: bodyContent, to contain the BodyContent&#xA; * object, where the JSP Page implementation object will place the&#xA; * evaluation (and reevaluation, if appropriate) of the body.  The setter&#xA; * method (setBodyContent) will only be invoked if doStartTag() returns&#xA; * EVAL_BODY_BUFFERED and the corresponding action element does not have&#xA; * an empty body.&#xA; *&#xA; * &lt;p>&lt;B>Methods&lt;/B>&#xA; * &lt;p> In addition to the setter method for the bodyContent property, there&#xA; * is a new action method: doInitBody(), which is invoked right after&#xA; * setBodyContent() and before the body evaluation.  This method is only&#xA; * invoked if doStartTag() returns EVAL_BODY_BUFFERED.&#xA; *&#xA; * &lt;p>&lt;B>Lifecycle&lt;/B>&#xA; * &lt;p> Lifecycle details are described by the transition diagram below.&#xA; * Exceptions that are thrown during the computation of doStartTag(),&#xA; * setBodyContent(), doInitBody(), BODY, doAfterBody() interrupt the&#xA; * execution sequence and are propagated up the stack, unless the&#xA; * tag handler implements the TryCatchFinally interface; see that&#xA; * interface for details.&#xA; * &lt;p>&#xA; * &lt;IMG src=&quot;doc-files/BodyTagProtocol.gif&quot;&#xA; *      alt=&quot;Lifecycle Details Transition Diagram for BodyTag&quot;/>&#xA; *&#xA; * &lt;p>&lt;B>Empty and Non-Empty Action&lt;/B>&#xA; * &lt;p> If the TagLibraryDescriptor file indicates that the action must&#xA; * always have an empty element body, by an &amp;lt;body-content&amp;gt; entry &#xA; * of &quot;empty&quot;, then the doStartTag() method must return SKIP_BODY.&#xA; * Otherwise, the doStartTag() method may return SKIP_BODY,&#xA; * EVAL_BODY_INCLUDE, or EVAL_BODY_BUFFERED.&#xA; *&#xA; * &lt;p>Note that which methods are invoked after the doStartTag() depends on &#xA; * both the return value and on if the custom action element is empty&#xA; * or not in the JSP page, not how it's declared in the TLD.&#xA; *&#xA; * &lt;p>&#xA; * If SKIP_BODY is returned the body is not evaluated, and doEndTag() is&#xA; * invoked.&#xA; *&#xA; * &lt;p>&#xA; * If EVAL_BODY_INCLUDE is returned, and the custom action element is not&#xA; * empty, setBodyContent() is not invoked,&#xA; * doInitBody() is not invoked, the body is evaluated and&#xA; * &quot;passed through&quot; to the current out, doAfterBody() is invoked&#xA; * and then, after zero or more iterations, doEndTag() is invoked.&#xA; * If the custom action element is empty, only doStart() and &#xA; * doEndTag() are invoked.&#xA; *&#xA; * &lt;p>&#xA; * If EVAL_BODY_BUFFERED is returned, and the custom action element is not&#xA; * empty, setBodyContent() is invoked,&#xA; * doInitBody() is invoked, the body is evaluated, doAfterBody() is&#xA; * invoked, and then, after zero or more iterations, doEndTag() is invoked.&#xA; * If the custom action element is empty, only doStart() and doEndTag() &#xA; * are invoked.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/tagext/IterationTag.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
