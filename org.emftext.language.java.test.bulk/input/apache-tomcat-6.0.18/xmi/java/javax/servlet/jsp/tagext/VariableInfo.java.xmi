<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../../java.ecore#/5 http://www.emftext.org/java/literals ../../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="VariableInfo.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>tagext</namespaces>
  <classifiers xsi:type="classifiers:Class" name="VariableInfo">
    <members xsi:type="members:Field" name="NESTED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Scope information that scripting variable is visible only within the&#xA;     * start/end tags.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AT_BEGIN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Scope information that scripting variable is visible after start tag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AT_END">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Scope information that scripting variable is visible after end tag.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="VariableInfo">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="varName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="declare">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scope">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructor&#xA;     * These objects can be created (at translation time) by the TagExtraInfo&#xA;     * instances.&#xA;     *&#xA;     * @param varName The name of the scripting variable&#xA;     * @param className The type of this variable&#xA;     * @param declare If true, it is a new variable (in some languages this will&#xA;     *     require a declaration)&#xA;     * @param scope Indication on the lexical scope of the variable&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getVarName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Accessor methods</comments>
        <comments>/**&#xA;     * Returns the name of the scripting variable.&#xA;     *&#xA;     * @return the name of the scripting variable&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the type of this variable.&#xA;     *&#xA;     * @return the type of this variable&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDeclare">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether this is a new variable.&#xA;     * If so, in some languages this will require a declaration.&#xA;     *&#xA;     * @return whether this is a new variable.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getScope">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the lexical scope of the variable.&#xA;     * &#xA;     * @return the lexical scope of the variable, either AT_BEGIN, AT_END,&#xA;     *    or NESTED.&#xA;     * @see #AT_BEGIN&#xA;     * @see #AT_END&#xA;     * @see #NESTED&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="varName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// == private data</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="className">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="declare">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="scope">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Information on the scripting variables that are created/modified by&#xA; * a tag (at run-time). This information is provided by TagExtraInfo&#xA; * classes and it is used by the translation phase of JSP.&#xA; *&#xA; * &lt;p>&#xA; * Scripting variables generated by a custom action have an associated &#xA; * scope of either AT_BEGIN, NESTED, or AT_END.&#xA; *&#xA; * &lt;p>&#xA; * The class name (VariableInfo.getClassName) in the returned objects&#xA; * is used to determine the types of the scripting variables.&#xA; * Note that because scripting variables are assigned their values&#xA; * from scoped attributes which cannot be of primitive types,&#xA; * &amp;quot;boxed&amp;quot; types such as &lt;code>java.lang.Integer&lt;/code> must &#xA; * be used instead of primitives.&#xA; *&#xA; * &lt;p>&#xA; * The class name may be a Fully Qualified Class Name, or a short&#xA; * class name.&#xA; *&#xA; * &lt;p>&#xA; * If a Fully Qualified Class Name is provided, it should refer to a&#xA; * class that should be in the CLASSPATH for the Web Application (see&#xA; * Servlet 2.4 specification - essentially it is WEB-INF/lib and&#xA; * WEB-INF/classes). Failure to be so will lead to a translation-time&#xA; * error.&#xA; *&#xA; * &lt;p>&#xA; * If a short class name is given in the VariableInfo objects, then&#xA; * the class name must be that of a public class in the context of the&#xA; * import directives of the page where the custom action appears. &#xA; * The class must also be in the CLASSPATH for the Web Application &#xA; * (see Servlet 2.4 specification - essentially it is WEB-INF/lib and&#xA; * WEB-INF/classes). Failure to be so will lead to a translation-time&#xA; * error.&#xA; *&#xA; * &lt;p>&lt;B>Usage Comments&lt;/B>&#xA; * &lt;p>&#xA; * Frequently a fully qualified class name will refer to a class that&#xA; * is known to the tag library and thus, delivered in the same JAR&#xA; * file as the tag handlers. In most other remaining cases it will&#xA; * refer to a class that is in the platform on which the JSP processor&#xA; * is built (like J2EE). Using fully qualified class names in this&#xA; * manner makes the usage relatively resistant to configuration&#xA; * errors.&#xA; *&#xA; * &lt;p>&#xA; * A short name is usually generated by the tag library based on some&#xA; * attributes passed through from the custom action user (the author),&#xA; * and it is thus less robust: for instance a missing import directive&#xA; * in the referring JSP page will lead to an invalid short name class&#xA; * and a translation error.&#xA; *&#xA; * &lt;p>&lt;B>Synchronization Protocol&lt;/B>&#xA; *&#xA; * &lt;p>&#xA; * The result of the invocation on getVariableInfo is an array of&#xA; * VariableInfo objects.  Each such object describes a scripting&#xA; * variable by providing its name, its type, whether the variable is&#xA; * new or not, and what its scope is.  Scope is best described through&#xA; * a picture:&#xA; *&#xA; * &lt;p>&#xA; * &lt;IMG src=&quot;doc-files/VariableInfo-1.gif&quot;&#xA; *      alt=&quot;NESTED, AT_BEGIN and AT_END Variable Scopes&quot;/>&#xA; *&#xA; *&lt;p>&#xA; * The JSP 2.0 specification defines the interpretation of 3 values:&#xA; * &#xA; * &lt;ul>&#xA; * &lt;li> NESTED, if the scripting variable is available between&#xA; * the start tag and the end tag of the action that defines it.&#xA; * &lt;li>&#xA; * AT_BEGIN, if the scripting variable is available from the start tag&#xA; * of the action that defines it until the end of the scope.&#xA; * &lt;li> AT_END, if the scripting variable is available after the end tag&#xA; * of the action that defines it until the end of the scope.&#xA; * &lt;/ul>&#xA; *&#xA; * The scope value for a variable implies what methods may affect its&#xA; * value and thus where synchronization is needed as illustrated by&#xA; * the table below.  &lt;b>Note:&lt;/b> the synchronization of the variable(s)&#xA; * will occur &lt;em>after&lt;/em> the respective method has been called.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;table cellpadding=&quot;2&quot; cellspacing=&quot;2&quot; border=&quot;0&quot; width=&quot;55%&quot;&#xA; *        bgcolor=&quot;#999999&quot; summary=&quot;Variable Synchronization Points&quot;>&#xA; * &lt;tbody>&#xA; *   &lt;tr align=&quot;center&quot;>&#xA; *     &lt;td valign=&quot;top&quot; colspan=&quot;6&quot; bgcolor=&quot;#999999&quot;>&lt;u>&lt;b>Variable Synchronization&#xA; *     Points&lt;/b>&lt;/u>&lt;br>&#xA; *     &lt;/td>&#xA; *   &lt;/tr>&#xA; *   &lt;tr>&#xA; *     &lt;th valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot;>&amp;nbsp;&lt;/th>&#xA; *     &lt;th valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot; align=&quot;center&quot;>doStartTag()&lt;/th>&#xA; *     &lt;th valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot; align=&quot;center&quot;>doInitBody()&lt;/th>&#xA; *     &lt;th valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot; align=&quot;center&quot;>doAfterBody()&lt;/th>&#xA; *     &lt;th valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot; align=&quot;center&quot;>doEndTag()&lt;/th>&#xA; *     &lt;th valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot; align=&quot;center&quot;>doTag()&lt;/th>&#xA; *   &lt;/tr>&#xA; *   &lt;tr>&#xA; *     &lt;td valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot;>&lt;b>Tag&lt;br>&#xA; *     &lt;/b>&lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, NESTED&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, AT_END&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *   &lt;/tr>&#xA; *   &lt;tr>&#xA; *     &lt;td valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot;>&lt;b>IterationTag&lt;br>&#xA; *     &lt;/b>&lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, NESTED&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, NESTED&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, AT_END&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *   &lt;/tr>&#xA; *   &lt;tr>&#xA; *     &lt;td valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot;>&lt;b>BodyTag&lt;br>&#xA; *     &lt;/b>&lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, NESTED&lt;sup>1&lt;/sup>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, NESTED&lt;sup>1&lt;/sup>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, NESTED&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, AT_END&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *   &lt;/tr>&#xA; *   &lt;tr>&#xA; *     &lt;td valign=&quot;top&quot; bgcolor=&quot;#c0c0c0&quot;>&lt;b>SimpleTag&lt;br>&#xA; *     &lt;/b>&lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>&lt;br>&#xA; *     &lt;/td>&#xA; *     &lt;td valign=&quot;top&quot; align=&quot;center&quot; bgcolor=&quot;#ffffff&quot;>AT_BEGIN, AT_END&lt;br>&#xA; *     &lt;/td>&#xA; *   &lt;/tr>&#xA; * &lt;/tbody>&#xA; * &lt;/table>&#xA; * &lt;sup>1&lt;/sup> Called after &lt;code>doStartTag()&lt;/code> if &#xA; * &lt;code>EVAL_BODY_INCLUDE&lt;/code> is returned, or after &#xA; * &lt;code>doInitBody()&lt;/code> otherwise.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>&lt;B>Variable Information in the TLD&lt;/B>&#xA; * &lt;p>&#xA; * Scripting variable information can also be encoded directly for most cases&#xA; * into the Tag Library Descriptor using the &amp;lt;variable&amp;gt; subelement of the&#xA; * &amp;lt;tag&amp;gt; element.  See the JSP specification.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
