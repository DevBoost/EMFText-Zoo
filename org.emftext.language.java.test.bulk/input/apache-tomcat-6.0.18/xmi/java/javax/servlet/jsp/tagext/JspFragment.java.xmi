<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="JspFragment.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>tagext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../io/Writer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="JspFragment">
    <members xsi:type="members:InterfaceMethod" name="invoke">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../io/Writer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Executes the fragment and directs all output to the given Writer,&#xA;     * or the JspWriter returned by the getOut() method of the JspContext&#xA;     * associated with the fragment if out is null.&#xA;     *&#xA;     * @param out The Writer to output the fragment to, or null if &#xA;     *     output should be sent to JspContext.getOut().&#xA;     * @throws javax.servlet.jsp.JspException Thrown if an error occured&#xA;     *     while invoking this fragment.&#xA;     * @throws javax.servlet.jsp.SkipPageException Thrown if the page&#xA;     *     that (either directly or indirectly) invoked the tag handler that&#xA;     *     invoked this fragment is to cease evaluation.  The container&#xA;     *     must throw this exception if a Classic Tag Handler returned&#xA;     *     Tag.SKIP_PAGE or if a Simple Tag Handler threw SkipPageException.&#xA;     * @throws java.io.IOException If there was an error writing to the &#xA;     *     stream.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getJspContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the JspContext that is bound to this JspFragment.&#xA;     *&#xA;     * @return The JspContext used by this fragment at invocation time.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Encapsulates a portion of JSP code in an object that &#xA; * can be invoked as many times as needed.  JSP Fragments are defined &#xA; * using JSP syntax as the body of a tag for an invocation to a SimpleTag &#xA; * handler, or as the body of a &amp;lt;jsp:attribute&amp;gt; standard action&#xA; * specifying the value of an attribute that is declared as a fragment,&#xA; * or to be of type JspFragment in the TLD.&#xA; * &lt;p>&#xA; * The definition of the JSP fragment must only contain template &#xA; * text and JSP action elements.  In other words, it must not contain&#xA; * scriptlets or scriptlet expressions.  At translation time, the &#xA; * container generates an implementation of the JspFragment abstract class&#xA; * capable of executing the defined fragment.&#xA; * &lt;p>&#xA; * A tag handler can invoke the fragment zero or more times, or &#xA; * pass it along to other tags, before returning.  To communicate values&#xA; * to/from a JSP fragment, tag handlers store/retrieve values in &#xA; * the JspContext associated with the fragment.&#xA; * &lt;p>&#xA; * Note that tag library developers and page authors should not generate&#xA; * JspFragment implementations manually.&#xA; * &lt;p>&#xA; * &lt;i>Implementation Note&lt;/i>: It is not necessary to generate a &#xA; * separate class for each fragment.  One possible implementation is &#xA; * to generate a single helper class for each page that implements &#xA; * JspFragment. Upon construction, a discriminator can be passed to &#xA; * select which fragment that instance will execute.&#xA; *&#xA; * @since 2.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
