<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="JspContext.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>el</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/el/ELContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
    <namespaces>el</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/el/ExpressionEvaluator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
    <namespaces>el</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/jsp/el/VariableResolver.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="JspContext">
    <members xsi:type="members:Constructor" name="JspContext">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sole constructor. (For invocation by subclass constructors, &#xA;     * typically implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/** &#xA;     * Register the name and value specified with page scope semantics.&#xA;     * If the value passed in is &lt;code>null&lt;/code>, this has the same &#xA;     * effect as calling &#xA;     * &lt;code>removeAttribute( name, PageContext.PAGE_SCOPE )&lt;/code>.&#xA;     *&#xA;     * @param name the name of the attribute to set&#xA;     * @param value the value to associate with the name, or null if the&#xA;     *     attribute is to be removed from the page scope.&#xA;     * @throws NullPointerException if the name is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scope">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Register the name and value specified with appropriate &#xA;     * scope semantics.  If the value passed in is &lt;code>null&lt;/code>, &#xA;     * this has the same effect as calling&#xA;     * &lt;code>removeAttribute( name, scope )&lt;/code>.&#xA;     * &#xA;     * @param name the name of the attribute to set&#xA;     * @param value the object to associate with the name, or null if&#xA;     *     the attribute is to be removed from the specified scope.&#xA;     * @param scope the scope with which to associate the name/object&#xA;     * &#xA;     * @throws NullPointerException if the name is null&#xA;     * @throws IllegalArgumentException if the scope is invalid&#xA;     * @throws IllegalStateException if the scope is &#xA;     *     PageContext.SESSION_SCOPE but the page that was requested&#xA;     *     does not participate in a session or the session has been&#xA;     *     invalidated.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Returns the object associated with the name in the page scope or null&#xA;     * if not found.&#xA;     *&#xA;     * @param name the name of the attribute to get&#xA;     * @return the object associated with the name in the page scope &#xA;     *     or null if not found.&#xA;     * &#xA;     * @throws NullPointerException if the name is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scope">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Return the object associated with the name in the specified&#xA;     * scope or null if not found.&#xA;     *&#xA;     * @param name the name of the attribute to set&#xA;     * @param scope the scope with which to associate the name/object&#xA;     * @return the object associated with the name in the specified&#xA;     *     scope or null if not found.&#xA;     * &#xA;     * @throws NullPointerException if the name is null&#xA;     * @throws IllegalArgumentException if the scope is invalid &#xA;     * @throws IllegalStateException if the scope is &#xA;     *     PageContext.SESSION_SCOPE but the page that was requested&#xA;     *     does not participate in a session or the session has been&#xA;     *     invalidated.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="findAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Searches for the named attribute in page, request, session (if valid),&#xA;     * and application scope(s) in order and returns the value associated or&#xA;     * null.&#xA;     *&#xA;     * @param name the name of the attribute to search for&#xA;     * @return the value associated or null&#xA;     * @throws NullPointerException if the name is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Remove the object reference associated with the given name&#xA;     * from all scopes.  Does nothing if there is no such object.&#xA;     *&#xA;     * @param name The name of the object to remove.&#xA;     * @throws NullPointerException if the name is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scope">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Remove the object reference associated with the specified name&#xA;     * in the given scope.  Does nothing if there is no such object.&#xA;     *&#xA;     * @param name The name of the object to remove.&#xA;     * @param scope The scope where to look.&#xA;     * @throws IllegalArgumentException if the scope is invalid&#xA;     * @throws IllegalStateException if the scope is &#xA;     *     PageContext.SESSION_SCOPE but the page that was requested&#xA;     *     does not participate in a session or the session has been&#xA;     *     invalidated.&#xA;     * @throws NullPointerException if the name is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributesScope">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Get the scope where a given attribute is defined.&#xA;     *&#xA;     * @param name the name of the attribute to return the scope for&#xA;     * @return the scope of the object associated with the name specified or 0&#xA;     * @throws NullPointerException if the name is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNamesInScope">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scope">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Enumerate all the attributes in a given scope.&#xA;     *&#xA;     * @param scope the scope to enumerate all the attributes for&#xA;     * @return an enumeration of names (java.lang.String) of all the &#xA;     *     attributes the specified scope&#xA;     * @throws IllegalArgumentException if the scope is invalid&#xA;     * @throws IllegalStateException if the scope is &#xA;     *     PageContext.SESSION_SCOPE but the page that was requested&#xA;     *     does not participate in a session or the session has been&#xA;     *     invalidated.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOut">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/JspWriter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * The current value of the out object (a JspWriter).&#xA;     *&#xA;     * @return the current JspWriter stream being used for client response&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getExpressionEvaluator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/el/ExpressionEvaluator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Provides programmatic access to the ExpressionEvaluator.&#xA;     * The JSP Container must return a valid instance of an &#xA;     * ExpressionEvaluator that can parse EL expressions.&#xA;     *&#xA;     * @return A valid instance of an ExpressionEvaluator.&#xA;     * @since 2.0&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getELContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/el/ELContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVariableResolver">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/jsp/el/VariableResolver.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an instance of a VariableResolver that provides access to the&#xA;     * implicit objects specified in the JSP specification using this JspContext&#xA;     * as the context object.&#xA;     *&#xA;     * @return A valid instance of a VariableResolver.&#xA;     * @since 2.0&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="pushBody">
      <comments>// XXX to implement</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/JspWriter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="writer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../io/Writer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return a new JspWriter object that sends output to the&#xA;     * provided Writer.  Saves the current &quot;out&quot; JspWriter,&#xA;     * and updates the value of the &quot;out&quot; attribute in the&#xA;     * page scope attribute namespace of the JspContext.&#xA;     * &lt;p>The returned JspWriter must implement all methods and&#xA;     * behave as though it were unbuffered.  More specifically:&#xA;     * &lt;ul>&#xA;     *   &lt;li>clear() must throw an IOException&lt;/li>&#xA;     *   &lt;li>clearBuffer() does nothing&lt;/li>&#xA;     *   &lt;li>getBufferSize() always returns 0&lt;/li>&#xA;     *   &lt;li>getRemaining() always returns 0&lt;/li>&#xA;     * &lt;/ul>&#xA;     * &lt;/p>&#xA;     *&#xA;     * @param writer The Writer for the returned JspWriter to send&#xA;     *     output to.&#xA;     * @return a new JspWriter that writes to the given Writer.&#xA;     * @since 2.0&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="popBody">
      <comments>// XXX to implement</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/jsp/JspWriter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the previous JspWriter &quot;out&quot; saved by the matching&#xA;     * pushBody(), and update the value of the &quot;out&quot; attribute in&#xA;     * the page scope attribute namespace of the JspContext.&#xA;     *&#xA;     * @return the saved JspWriter.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&#xA; * &lt;code>JspContext&lt;/code> serves as the base class for the &#xA; * PageContext class and abstracts all information that is not specific&#xA; * to servlets.  This allows for Simple Tag Extensions to be used&#xA; * outside of the context of a request/response Servlet.&#xA; * &lt;p>&#xA; * The JspContext provides a number of facilities to the &#xA; * page/component author and page implementor, including:&#xA; * &lt;ul>&#xA; * &lt;li>a single API to manage the various scoped namespaces&#xA; * &lt;li>a mechanism to obtain the JspWriter for output&#xA; * &lt;li>a mechanism to expose page directive attributes to the &#xA; *     scripting environment&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>&lt;B>Methods Intended for Container Generated Code&lt;/B>&#xA; * &lt;p>&#xA; * The following methods enable the &lt;B>management of nested&lt;/B> JspWriter &#xA; * streams to implement Tag Extensions: &lt;code>pushBody()&lt;/code> and&#xA; * &lt;code>popBody()&lt;/code>&#xA; *&#xA; * &lt;p>&lt;B>Methods Intended for JSP authors&lt;/B>&#xA; * &lt;p>&#xA; * Some methods provide &lt;B>uniform access&lt;/B> to the diverse objects&#xA; * representing scopes.&#xA; * The implementation must use the underlying machinery&#xA; * corresponding to that scope, so information can be passed back and&#xA; * forth between the underlying environment (e.g. Servlets) and JSP pages.&#xA; * The methods are:&#xA; * &lt;code>setAttribute()&lt;/code>,  &lt;code>getAttribute()&lt;/code>,&#xA; * &lt;code>findAttribute()&lt;/code>,  &lt;code>removeAttribute()&lt;/code>,&#xA; * &lt;code>getAttributesScope()&lt;/code> and &#xA; * &lt;code>getAttributeNamesInScope()&lt;/code>.&#xA; * &#xA; * &lt;p>&#xA; * The following methods provide &lt;B>convenient access&lt;/B> to implicit objects:&#xA; * &lt;code>getOut()&lt;/code>&#xA; *&#xA; * &lt;p>&#xA; * The following methods provide &lt;B>programmatic access&lt;/b> to the &#xA; * Expression Language evaluator:&#xA; * &lt;code>getExpressionEvaluator()&lt;/code>, &lt;code>getVariableResolver()&lt;/code>&#xA; *&#xA; * @since 2.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
