<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="SimpleTag.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>tagext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <namespaces>jsp</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspContext.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="SimpleTag">
    <members xsi:type="members:InterfaceMethod" name="doTag">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <namespaces>javax</namespaces>
        <namespaces>servlet</namespaces>
        <namespaces>jsp</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Called by the container to invoke this tag.&#xA;     * The implementation of this method is provided by the tag library&#xA;     * developer, and handles all tag processing, body iteration, etc.&#xA;     *&#xA;     * &lt;p>&#xA;     * The JSP container will resynchronize any AT_BEGIN and AT_END&#xA;     * variables (defined by the associated tag file, TagExtraInfo, or TLD)&#xA;     * after the invocation of doTag().&#xA;     * &#xA;     * @throws javax.servlet.jsp.JspException If an error occurred &#xA;     *     while processing this tag.&#xA;     * @throws javax.servlet.jsp.SkipPageException If the page that&#xA;     *     (either directly or indirectly) invoked this tag is to&#xA;     *     cease evaluation.  A Simple Tag Handler generated from a &#xA;     *     tag file must throw this exception if an invoked Classic &#xA;     *     Tag Handler returned SKIP_PAGE or if an invoked Simple&#xA;     *     Tag Handler threw SkipPageException or if an invoked Jsp Fragment&#xA;     *     threw a SkipPageException.&#xA;     * @throws java.io.IOException If there was an error writing to the&#xA;     *     output stream.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setParent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/tagext/JspTag.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the parent of this tag, for collaboration purposes.&#xA;     * &lt;p>&#xA;     * The container invokes this method only if this tag invocation is &#xA;     * nested within another tag invocation.&#xA;     *&#xA;     * @param parent the tag that encloses this tag&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/tagext/JspTag.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the parent of this tag, for collaboration purposes.&#xA;     *&#xA;     * @return the parent of this tag&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setJspContext">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/JspContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called by the container to provide this tag handler with&#xA;     * the &lt;code>JspContext&lt;/code> for this invocation.&#xA;     * An implementation should save this value.&#xA;     * &#xA;     * @param pc the page context for this invocation&#xA;     * @see Tag#setPageContext&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setJspBody">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="jspBody">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/tagext/JspFragment.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Provides the body of this tag as a JspFragment object, able to be &#xA;     * invoked zero or more times by the tag handler. &#xA;     * &lt;p>&#xA;     * This method is invoked by the JSP page implementation &#xA;     * object prior to &lt;code>doTag()&lt;/code>.  If the action element is&#xA;     * empty in the page, this method is not called at all.&#xA;     * &#xA;     * @param jspBody The fragment encapsulating the body of this tag.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface for defining Simple Tag Handlers.&#xA; * &#xA; * &lt;p>Simple Tag Handlers differ from Classic Tag Handlers in that instead &#xA; * of supporting &lt;code>doStartTag()&lt;/code> and &lt;code>doEndTag()&lt;/code>, &#xA; * the &lt;code>SimpleTag&lt;/code> interface provides a simple &#xA; * &lt;code>doTag()&lt;/code> method, which is called once and only once for any &#xA; * given tag invocation.  All tag logic, iteration, body evaluations, etc. &#xA; * are to be performed in this single method.  Thus, simple tag handlers &#xA; * have the equivalent power of &lt;code>BodyTag&lt;/code>, but with a much &#xA; * simpler lifecycle and interface.&lt;/p>&#xA; *&#xA; * &lt;p>To support body content, the &lt;code>setJspBody()&lt;/code> &#xA; * method is provided.  The container invokes the &lt;code>setJspBody()&lt;/code> &#xA; * method with a &lt;code>JspFragment&lt;/code> object encapsulating the body of &#xA; * the tag.  The tag handler implementation can call &#xA; * &lt;code>invoke()&lt;/code> on that fragment to evaluate the body as&#xA; * many times as it needs.&lt;/p>&#xA; *&#xA; * &lt;p>A SimpleTag handler must have a public no-args constructor.  Most&#xA; * SimpleTag handlers should extend SimpleTagSupport.&lt;/p>&#xA; * &#xA; * &lt;p>&lt;b>Lifecycle&lt;/b>&lt;/p>&#xA; *&#xA; * &lt;p>The following is a non-normative, brief overview of the &#xA; * SimpleTag lifecycle.  Refer to the JSP Specification for details.&lt;/p>&#xA; *&#xA; * &lt;ol>&#xA; *   &lt;li>A new tag handler instance is created each time by the container &#xA; *       by calling the provided zero-args constructor.  Unlike classic&#xA; *       tag handlers, simple tag handlers are never cached and reused by&#xA; *       the JSP container.&lt;/li>&#xA; *   &lt;li>The &lt;code>setJspContext()&lt;/code> and &lt;code>setParent()&lt;/code> &#xA; *       methods are called by the container.  The &lt;code>setParent()&lt;/code>&#xA; *       method is only called if the element is nested within another tag &#xA; *       invocation.&lt;/li>&#xA; *   &lt;li>The setters for each attribute defined for this tag are called&#xA; *       by the container.&lt;/li>&#xA; *   &lt;li>If a body exists, the &lt;code>setJspBody()&lt;/code> method is called &#xA; *       by the container to set the body of this tag, as a &#xA; *       &lt;code>JspFragment&lt;/code>.  If the action element is empty in&#xA; *       the page, this method is not called at all.&lt;/li>&#xA; *   &lt;li>The &lt;code>doTag()&lt;/code> method is called by the container.  All&#xA; *       tag logic, iteration, body evaluations, etc. occur in this &#xA; *       method.&lt;/li>&#xA; *   &lt;li>The &lt;code>doTag()&lt;/code> method returns and all variables are&#xA; *       synchronized.&lt;/li>&#xA; * &lt;/ol>&#xA; * &#xA; * @see SimpleTagSupport&#xA; * @since 2.0&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/tagext/JspTag.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
