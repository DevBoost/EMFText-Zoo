<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../../java.ecore#/16" name="ExpressionEvaluator.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>jsp</namespaces>
  <namespaces>el</namespaces>
  <classifiers xsi:type="classifiers:Class" name="ExpressionEvaluator">
    <members xsi:type="members:InterfaceMethod" name="parseExpression">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/el/Expression.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expression">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expectedType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fMapper">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/el/FunctionMapper.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/el/ELException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Prepare an expression for later evaluation.  This method should perform&#xA;     * syntactic validation of the expression; if in doing so it detects &#xA;     * errors, it should raise an ELParseException.&#xA;     *&#xA;     * @param expression The expression to be evaluated.&#xA;     * @param expectedType The expected type of the result of the evaluation&#xA;     * @param fMapper A FunctionMapper to resolve functions found in &#xA;     *     the expression.  It can be null, in which case no functions &#xA;     *     are supported for this invocation.  The ExpressionEvaluator &#xA;     *     must not hold on to the FunctionMapper reference after &#xA;     *     returning from &lt;code>parseExpression()&lt;/code>.  The &#xA;     *     &lt;code>Expression&lt;/code> object returned must invoke the same &#xA;     *     functions regardless of whether the mappings in the &#xA;     *     provided &lt;code>FunctionMapper&lt;/code> instance change between &#xA;     *     calling &lt;code>ExpressionEvaluator.parseExpression()&lt;/code>&#xA;     *     and &lt;code>Expression.evaluate()&lt;/code>.&#xA;     * @return The Expression object encapsulating the arguments.&#xA;     *&#xA;     * @exception ELException Thrown if parsing errors were found.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="evaluate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expression">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expectedType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vResolver">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/el/VariableResolver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fMapper">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../../../javax/servlet/jsp/el/FunctionMapper.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../../javax/servlet/jsp/el/ELException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Evaluates an expression.  This method may perform some syntactic &#xA;     * validation and, if so, it should raise an ELParseException error if &#xA;     * it encounters syntactic errors.  EL evaluation errors should cause &#xA;     * an ELException to be raised.&#xA;     *&#xA;     * @param expression The expression to be evaluated.&#xA;     * @param expectedType The expected type of the result of the evaluation&#xA;     * @param vResolver A VariableResolver instance that can be used at &#xA;     *     runtime to resolve the name of implicit objects into Objects.&#xA;     * @param fMapper A FunctionMapper to resolve functions found in &#xA;     *     the expression.  It can be null, in which case no functions &#xA;     *     are supported for this invocation.  &#xA;     * @return The result of the expression evaluation.&#xA;     *&#xA;     * @exception ELException Thrown if the expression evaluation failed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>The abstract base class for an expression-language evaluator.&#xA; * Classes that implement an expression language expose their functionality&#xA; * via this abstract class.&lt;/p>&#xA; *&#xA; * &lt;p>An instance of the ExpressionEvaluator can be obtained via the &#xA; * JspContext / PageContext&lt;/p>&#xA; *&#xA; * &lt;p>The parseExpression() and evaluate() methods must be thread-safe.  &#xA; * That is, multiple threads may call these methods on the same &#xA; * ExpressionEvaluator object simultaneously.  Implementations should &#xA; * synchronize access if they depend on transient state.  Implementations &#xA; * should not, however, assume that only one object of each &#xA; * ExpressionEvaluator type will be instantiated; global caching should &#xA; * therefore be static.&lt;/p>&#xA; *&#xA; * &lt;p>Only a single EL expression, starting with '${' and ending with&#xA; * '}', can be parsed or evaluated at a time.  EL expressions &#xA; * cannot be mixed with static text.  For example, attempting to &#xA; * parse or evaluate &quot;&lt;code>abc${1+1}def${1+1}ghi&lt;/code>&quot; or even&#xA; * &quot;&lt;code>${1+1}${1+1}&lt;/code>&quot; will cause an &lt;code>ELException&lt;/code> to&#xA; * be thrown.&lt;/p>&#xA; *&#xA; * &lt;p>The following are examples of syntactically legal EL expressions:&#xA; *&#xA; * &lt;ul>&#xA; *   &lt;li>&lt;code>${person.lastName}&lt;/code>&lt;/li>&#xA; *   &lt;li>&lt;code>${8 * 8}&lt;/code>&lt;/li>&#xA; *   &lt;li>&lt;code>${my:reverse('hello')}&lt;/code>&lt;/li>&#xA; * &lt;/ul>&#xA; * &lt;/p>&#xA; *&#xA; * @since 2.0&#xA; * @deprecated&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
