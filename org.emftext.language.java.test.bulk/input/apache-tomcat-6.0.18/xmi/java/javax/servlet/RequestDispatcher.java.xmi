<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RequestDispatcher.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RequestDispatcher">
    <members xsi:type="members:InterfaceMethod" name="forward">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="request">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="response">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA; * Forwards a request from&#xA; * a servlet to another resource (servlet, JSP file, or&#xA; * HTML file) on the server. This method allows&#xA; * one servlet to do preliminary processing of&#xA; * a request and another resource to generate&#xA; * the response.&#xA; *&#xA; * &lt;p>For a &lt;code>RequestDispatcher&lt;/code> obtained via &#xA; * &lt;code>getRequestDispatcher()&lt;/code>, the &lt;code>ServletRequest&lt;/code> &#xA; * object has its path elements and parameters adjusted to match&#xA; * the path of the target resource.&#xA; *&#xA; * &lt;p>&lt;code>forward&lt;/code> should be called before the response has been &#xA; * committed to the client (before response body output has been flushed).  &#xA; * If the response already has been committed, this method throws&#xA; * an &lt;code>IllegalStateException&lt;/code>.&#xA; * Uncommitted output in the response buffer is automatically cleared &#xA; * before the forward.&#xA; *&#xA; * &lt;p>The request and response parameters must be either the same&#xA; * objects as were passed to the calling servlet's service method or be&#xA; * subclasses of the {@link ServletRequestWrapper} or {@link ServletResponseWrapper} classes&#xA; * that wrap them.&#xA; *&#xA; *&#xA; * @param request&#x9;&#x9;a {@link ServletRequest} object&#xA; *&#x9;&#x9;&#x9;&#x9;that represents the request the client&#xA; * &#x9;&#x9;&#x9;&#x9;makes of the servlet&#xA; *&#xA; * @param response&#x9;&#x9;a {@link ServletResponse} object&#xA; *&#x9;&#x9;&#x9;&#x9;that represents the response the servlet&#xA; *&#x9;&#x9;&#x9;&#x9;returns to the client&#xA; *&#xA; * @exception ServletException&#x9;if the target resource throws this exception&#xA; *&#xA; * @exception IOException&#x9;if the target resource throws this exception&#xA; *&#xA; * @exception IllegalStateException&#x9;if the response was already committed&#xA; *&#xA; */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="include">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="request">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="response">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/servlet/ServletException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Includes the content of a resource (servlet, JSP page,&#xA;     * HTML file) in the response. In essence, this method enables &#xA;     * programmatic server-side includes.&#xA;     *&#xA;     * &lt;p>The {@link ServletResponse} object has its path elements&#xA;     * and parameters remain unchanged from the caller's. The included&#xA;     * servlet cannot change the response status code or set headers;&#xA;     * any attempt to make a change is ignored.&#xA;     *&#xA;     * &lt;p>The request and response parameters must be either the same&#xA;     * objects as were passed to the calling servlet's service method or be&#xA;     * subclasses of the {@link ServletRequestWrapper} or {@link ServletResponseWrapper} classes&#xA;     * that wrap them.&#xA;     * &#xA;     *&#xA;     *&#xA;     * @param request &#x9;&#x9;&#x9;a {@link ServletRequest} object &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;that contains the client's request&#xA;     *&#xA;     * @param response &#x9;&#x9;&#x9;a {@link ServletResponse} object &#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;that contains the servlet's response&#xA;     *&#xA;     * @exception ServletException &#x9;if the included resource throws this exception&#xA;     *&#xA;     * @exception IOException &#x9;&#x9;if the included resource throws this exception&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Defines an object that receives requests from the client&#xA; * and sends them to any resource (such as a servlet, &#xA; * HTML file, or JSP file) on the server. The servlet&#xA; * container creates the &lt;code>RequestDispatcher&lt;/code> object,&#xA; * which is used as a wrapper around a server resource located&#xA; * at a particular path or given by a particular name.&#xA; *&#xA; * &lt;p>This interface is intended to wrap servlets,&#xA; * but a servlet container can create &lt;code>RequestDispatcher&lt;/code>&#xA; * objects to wrap any type of resource.&#xA; *&#xA; * @author &#x9;Various&#xA; * @version &#x9;$Version$&#xA; *&#xA; * @see &#x9;ServletContext#getRequestDispatcher(java.lang.String)&#xA; * @see &#x9;ServletContext#getNamedDispatcher(java.lang.String)&#xA; * @see &#x9;ServletRequest#getRequestDispatcher(java.lang.String)&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
