<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="HttpServletRequest.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>http</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="HttpServletRequest">
    <members xsi:type="members:Field" name="BASIC_AUTH">
      <initialValue xsi:type="references:StringReference" value="BASIC"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * String identifier for Basic authentication. Value &quot;BASIC&quot;&#xA;    */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FORM_AUTH">
      <initialValue xsi:type="references:StringReference" value="FORM"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * String identifier for Form authentication. Value &quot;FORM&quot;&#xA;    */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CLIENT_CERT_AUTH">
      <initialValue xsi:type="references:StringReference" value="CLIENT_CERT"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * String identifier for Client Certificate authentication. Value &quot;CLIENT_CERT&quot;&#xA;    */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DIGEST_AUTH">
      <initialValue xsi:type="references:StringReference" value="DIGEST"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * String identifier for Digest authentication. Value &quot;DIGEST&quot;&#xA;    */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAuthType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the authentication scheme used to protect&#xA;     * the servlet. All servlet containers support basic, form and client &#xA;     * certificate authentication, and may additionally support digest &#xA;     * authentication.&#xA;     * If the servlet is not authenticated &lt;code>null&lt;/code> is returned. &#xA;     *&#xA;     * &lt;p>Same as the value of the CGI variable AUTH_TYPE.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;one of the static members BASIC_AUTH, &#xA;     *&#x9;&#x9;&#x9;FORM_AUTH, CLIENT_CERT_AUTH, DIGEST_AUTH&#xA;     *&#x9;&#x9;&#x9;(suitable for == comparison) or&#xA;     *&#x9;&#x9;&#x9;the container-specific string indicating&#xA;     *&#x9;&#x9;&#x9;the authentication scheme, or&#xA;     *&#x9;&#x9;&#x9;&lt;code>null&lt;/code> if the request was &#xA;     *&#x9;&#x9;&#x9;not authenticated.     &#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCookies">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../javax/servlet/http/Cookie.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns an array containing all of the &lt;code>Cookie&lt;/code>&#xA;     * objects the client sent with this request.&#xA;     * This method returns &lt;code>null&lt;/code> if no cookies were sent.&#xA;     *&#xA;     * @return&#x9;&#x9;an array of all the &lt;code>Cookies&lt;/code>&#xA;     *&#x9;&#x9;&#x9;included with this request, or &lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;&#x9;if the request has no cookies&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDateHeader">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the value of the specified request header&#xA;     * as a &lt;code>long&lt;/code> value that represents a &#xA;     * &lt;code>Date&lt;/code> object. Use this method with&#xA;     * headers that contain dates, such as&#xA;     * &lt;code>If-Modified-Since&lt;/code>. &#xA;     *&#xA;     * &lt;p>The date is returned as&#xA;     * the number of milliseconds since January 1, 1970 GMT.&#xA;     * The header name is case insensitive.&#xA;     *&#xA;     * &lt;p>If the request did not have a header of the&#xA;     * specified name, this method returns -1. If the header&#xA;     * can't be converted to a date, the method throws&#xA;     * an &lt;code>IllegalArgumentException&lt;/code>.&#xA;     *&#xA;     * @param name&#x9;&#x9;a &lt;code>String&lt;/code> specifying the&#xA;     *&#x9;&#x9;&#x9;&#x9;name of the header&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;a &lt;code>long&lt;/code> value&#xA;     *&#x9;&#x9;&#x9;&#x9;representing the date specified&#xA;     *&#x9;&#x9;&#x9;&#x9;in the header expressed as&#xA;     *&#x9;&#x9;&#x9;&#x9;the number of milliseconds&#xA;     *&#x9;&#x9;&#x9;&#x9;since January 1, 1970 GMT,&#xA;     *&#x9;&#x9;&#x9;&#x9;or -1 if the named header&#xA;     *&#x9;&#x9;&#x9;&#x9;was not included with the&#xA;     *&#x9;&#x9;&#x9;&#x9;request&#xA;     *&#xA;     * @exception&#x9;IllegalArgumentException&#x9;If the header value&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;can't be converted&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;to a date&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHeader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the value of the specified request header&#xA;     * as a &lt;code>String&lt;/code>. If the request did not include a header&#xA;     * of the specified name, this method returns &lt;code>null&lt;/code>.&#xA;     * If there are multiple headers with the same name, this method&#xA;     * returns the first head in the request.&#xA;     * The header name is case insensitive. You can use&#xA;     * this method with any request header.&#xA;     *&#xA;     * @param name&#x9;&#x9;a &lt;code>String&lt;/code> specifying the&#xA;     *&#x9;&#x9;&#x9;&#x9;header name&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;a &lt;code>String&lt;/code> containing the&#xA;     *&#x9;&#x9;&#x9;&#x9;value of the requested&#xA;     *&#x9;&#x9;&#x9;&#x9;header, or &lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;&#x9;&#x9;if the request does not&#xA;     *&#x9;&#x9;&#x9;&#x9;have a header of that name&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHeaders">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns all the values of the specified request header&#xA;     * as an &lt;code>Enumeration&lt;/code> of &lt;code>String&lt;/code> objects.&#xA;     *&#xA;     * &lt;p>Some headers, such as &lt;code>Accept-Language&lt;/code> can be sent&#xA;     * by clients as several headers each with a different value rather than&#xA;     * sending the header as a comma separated list.&#xA;     *&#xA;     * &lt;p>If the request did not include any headers&#xA;     * of the specified name, this method returns an empty&#xA;     * &lt;code>Enumeration&lt;/code>.&#xA;     * The header name is case insensitive. You can use&#xA;     * this method with any request header.&#xA;     *&#xA;     * @param name&#x9;&#x9;a &lt;code>String&lt;/code> specifying the&#xA;     *&#x9;&#x9;&#x9;&#x9;header name&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an &lt;code>Enumeration&lt;/code> containing&#xA;     *                  &#x9;the values of the requested header. If&#xA;     *                  &#x9;the request does not have any headers of&#xA;     *                  &#x9;that name return an empty&#xA;     *                  &#x9;enumeration. If &#xA;     *                  &#x9;the container does not allow access to&#xA;     *                  &#x9;header information, return null&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHeaderNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns an enumeration of all the header names&#xA;     * this request contains. If the request has no&#xA;     * headers, this method returns an empty enumeration.&#xA;     *&#xA;     * &lt;p>Some servlet containers do not allow&#xA;     * servlets to access headers using this method, in&#xA;     * which case this method returns &lt;code>null&lt;/code>&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an enumeration of all the&#xA;     *&#x9;&#x9;&#x9;&#x9;header names sent with this&#xA;     *&#x9;&#x9;&#x9;&#x9;request; if the request has&#xA;     *&#x9;&#x9;&#x9;&#x9;no headers, an empty enumeration;&#xA;     *&#x9;&#x9;&#x9;&#x9;if the servlet container does not&#xA;     *&#x9;&#x9;&#x9;&#x9;allow servlets to use this method,&#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;&#x9;&#x9;&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIntHeader">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the value of the specified request header&#xA;     * as an &lt;code>int&lt;/code>. If the request does not have a header&#xA;     * of the specified name, this method returns -1. If the&#xA;     * header cannot be converted to an integer, this method&#xA;     * throws a &lt;code>NumberFormatException&lt;/code>.&#xA;     *&#xA;     * &lt;p>The header name is case insensitive.&#xA;     *&#xA;     * @param name&#x9;&#x9;a &lt;code>String&lt;/code> specifying the name&#xA;     *&#x9;&#x9;&#x9;&#x9;of a request header&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an integer expressing the value &#xA;     * &#x9;&#x9;&#x9;&#x9;of the request header or -1&#xA;     *&#x9;&#x9;&#x9;&#x9;if the request doesn't have a&#xA;     *&#x9;&#x9;&#x9;&#x9;header of this name&#xA;     *&#xA;     * @exception&#x9;NumberFormatException&#x9;&#x9;If the header value&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;can't be converted&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;to an &lt;code>int&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMethod">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the name of the HTTP method with which this &#xA;     * request was made, for example, GET, POST, or PUT.&#xA;     * Same as the value of the CGI variable REQUEST_METHOD.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;a &lt;code>String&lt;/code> &#xA;     *&#x9;&#x9;&#x9;&#x9;specifying the name&#xA;     *&#x9;&#x9;&#x9;&#x9;of the method with which&#xA;     *&#x9;&#x9;&#x9;&#x9;this request was made&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPathInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns any extra path information associated with&#xA;     * the URL the client sent when it made this request.&#xA;     * The extra path information follows the servlet path&#xA;     * but precedes the query string and will start with&#xA;     * a &quot;/&quot; character.&#xA;     *&#xA;     * &lt;p>This method returns &lt;code>null&lt;/code> if there&#xA;     * was no extra path information.&#xA;     *&#xA;     * &lt;p>Same as the value of the CGI variable PATH_INFO.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code>, decoded by the&#xA;     *&#x9;&#x9;&#x9;web container, specifying &#xA;     *&#x9;&#x9;&#x9;extra path information that comes&#xA;     *&#x9;&#x9;&#x9;after the servlet path but before&#xA;     *&#x9;&#x9;&#x9;the query string in the request URL;&#xA;     *&#x9;&#x9;&#x9;or &lt;code>null&lt;/code> if the URL does not have&#xA;     *&#x9;&#x9;&#x9;any extra path information&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPathTranslated">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns any extra path information after the servlet name&#xA;     * but before the query string, and translates it to a real&#xA;     * path. Same as the value of the CGI variable PATH_TRANSLATED.&#xA;     *&#xA;     * &lt;p>If the URL does not have any extra path information,&#xA;     * this method returns &lt;code>null&lt;/code> or the servlet container&#xA;     * cannot translate the virtual path to a real path for any reason&#xA;     * (such as when the web application is executed from an archive).&#xA;     *&#xA;     * The web container does not decode this string.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> specifying the&#xA;     *&#x9;&#x9;&#x9;real path, or &lt;code>null&lt;/code> if&#xA;     *&#x9;&#x9;&#x9;the URL does not have any extra path&#xA;     *&#x9;&#x9;&#x9;information&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getContextPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the portion of the request URI that indicates the context&#xA;     * of the request.  The context path always comes first in a request&#xA;     * URI.  The path starts with a &quot;/&quot; character but does not end with a &quot;/&quot;&#xA;     * character.  For servlets in the default (root) context, this method&#xA;     * returns &quot;&quot;. The container does not decode this string.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> specifying the&#xA;     *&#x9;&#x9;&#x9;portion of the request URI that indicates the context&#xA;     *&#x9;&#x9;&#x9;of the request&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getQueryString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the query string that is contained in the request&#xA;     * URL after the path. This method returns &lt;code>null&lt;/code>&#xA;     * if the URL does not have a query string. Same as the value&#xA;     * of the CGI variable QUERY_STRING. &#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing the query&#xA;     *&#x9;&#x9;&#x9;string or &lt;code>null&lt;/code> if the URL &#xA;     *&#x9;&#x9;&#x9;contains no query string. The value is not&#xA;     *&#x9;&#x9;&#x9;decoded by the container.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemoteUser">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the login of the user making this request, if the&#xA;     * user has been authenticated, or &lt;code>null&lt;/code> if the user &#xA;     * has not been authenticated.&#xA;     * Whether the user name is sent with each subsequent request&#xA;     * depends on the browser and type of authentication. Same as the &#xA;     * value of the CGI variable REMOTE_USER.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> specifying the login&#xA;     *&#x9;&#x9;&#x9;of the user making this request, or &lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;&#x9;if the user login is not known&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isUserInRole">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="role">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns a boolean indicating whether the authenticated user is included&#xA;     * in the specified logical &quot;role&quot;.  Roles and role membership can be&#xA;     * defined using deployment descriptors.  If the user has not been&#xA;     * authenticated, the method returns &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @param role&#x9;&#x9;a &lt;code>String&lt;/code> specifying the name&#xA;     *&#x9;&#x9;&#x9;&#x9;of the role&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>boolean&lt;/code> indicating whether&#xA;     *&#x9;&#x9;&#x9;the user making this request belongs to a given role;&#xA;     *&#x9;&#x9;&#x9;&lt;code>false&lt;/code> if the user has not been &#xA;     *&#x9;&#x9;&#x9;authenticated&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUserPrincipal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>security</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../security/Principal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns a &lt;code>java.security.Principal&lt;/code> object containing&#xA;     * the name of the current authenticated user. If the user has not been&#xA;     * authenticated, the method returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>java.security.Principal&lt;/code> containing&#xA;     *&#x9;&#x9;&#x9;the name of the user making this request;&#xA;     *&#x9;&#x9;&#x9;&lt;code>null&lt;/code> if the user has not been &#xA;     *&#x9;&#x9;&#x9;authenticated&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRequestedSessionId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the session ID specified by the client. This may&#xA;     * not be the same as the ID of the current valid session&#xA;     * for this request.&#xA;     * If the client did not specify a session ID, this method returns&#xA;     * &lt;code>null&lt;/code>.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> specifying the session&#xA;     *&#x9;&#x9;&#x9;ID, or &lt;code>null&lt;/code> if the request did&#xA;     *&#x9;&#x9;&#x9;not specify a session ID&#xA;     *&#xA;     * @see&#x9;&#x9;#isRequestedSessionIdValid&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRequestURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the part of this request's URL from the protocol&#xA;     * name up to the query string in the first line of the HTTP request.&#xA;     * The web container does not decode this String.&#xA;     * For example:&#xA;     *&#xA;     * &#xA;&#xA;     * &lt;table summary=&quot;Examples of Returned Values&quot;>&#xA;     * &lt;tr align=left>&lt;th>First line of HTTP request      &lt;/th>&#xA;     * &lt;th>     Returned Value&lt;/th>&#xA;     * &lt;tr>&lt;td>POST /some/path.html HTTP/1.1&lt;td>&lt;td>/some/path.html&#xA;     * &lt;tr>&lt;td>GET http://foo.bar/a.html HTTP/1.0&#xA;     * &lt;td>&lt;td>/a.html&#xA;     * &lt;tr>&lt;td>HEAD /xyz?a=b HTTP/1.1&lt;td>&lt;td>/xyz&#xA;     * &lt;/table>&#xA;     *&#xA;     * &lt;p>To reconstruct an URL with a scheme and host, use&#xA;     * {@link HttpUtils#getRequestURL}.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing&#xA;     *&#x9;&#x9;&#x9;the part of the URL from the &#xA;     *&#x9;&#x9;&#x9;protocol name up to the query string&#xA;     *&#xA;     * @see&#x9;&#x9;HttpUtils#getRequestURL&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRequestURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/StringBuffer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Reconstructs the URL the client used to make the request.&#xA;     * The returned URL contains a protocol, server name, port&#xA;     * number, and server path, but it does not include query&#xA;     * string parameters.&#xA;     *&#xA;     * &lt;p>Because this method returns a &lt;code>StringBuffer&lt;/code>,&#xA;     * not a string, you can modify the URL easily, for example,&#xA;     * to append query parameters.&#xA;     *&#xA;     * &lt;p>This method is useful for creating redirect messages&#xA;     * and for reporting errors.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>StringBuffer&lt;/code> object containing&#xA;     *&#x9;&#x9;&#x9;the reconstructed URL&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the part of this request's URL that calls&#xA;     * the servlet. This path starts with a &quot;/&quot; character&#xA;     * and includes either the servlet name or a path to&#xA;     * the servlet, but does not include any extra path&#xA;     * information or a query string. Same as the value of&#xA;     * the CGI variable SCRIPT_NAME.&#xA;     *&#xA;     * &lt;p>This method will return an empty string (&quot;&quot;) if the&#xA;     * servlet used to process this request was matched using&#xA;     * the &quot;/*&quot; pattern.&#xA;     *&#xA;     * @return&#x9;&#x9;a &lt;code>String&lt;/code> containing&#xA;     *&#x9;&#x9;&#x9;the name or path of the servlet being&#xA;     *&#x9;&#x9;&#x9;called, as specified in the request URL,&#xA;     *&#x9;&#x9;&#x9;decoded, or an empty string if the servlet&#xA;     *&#x9;&#x9;&#x9;used to process the request is matched&#xA;     *&#x9;&#x9;&#x9;using the &quot;/*&quot; pattern.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSession">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/http/HttpSession.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="create">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the current &lt;code>HttpSession&lt;/code>&#xA;     * associated with this request or, if there is no&#xA;     * current session and &lt;code>create&lt;/code> is true, returns &#xA;     * a new session.&#xA;     *&#xA;     * &lt;p>If &lt;code>create&lt;/code> is &lt;code>false&lt;/code>&#xA;     * and the request has no valid &lt;code>HttpSession&lt;/code>,&#xA;     * this method returns &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p>To make sure the session is properly maintained,&#xA;     * you must call this method before &#xA;     * the response is committed. If the container is using cookies&#xA;     * to maintain session integrity and is asked to create a new session&#xA;     * when the response is committed, an IllegalStateException is thrown.&#xA;     *&#xA;     *&#xA;     *&#xA;     *&#xA;     * @param create&#x9;&lt;code>true&lt;/code> to create&#xA;     *&#x9;&#x9;&#x9;a new session for this request if necessary; &#xA;     *&#x9;&#x9;&#x9;&lt;code>false&lt;/code> to return &lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;&#x9;if there's no current session&#xA;     *&#x9;&#x9;&#x9;&#xA;     *&#xA;     * @return &#x9;&#x9;the &lt;code>HttpSession&lt;/code> associated &#xA;     *&#x9;&#x9;&#x9;with this request or &lt;code>null&lt;/code> if&#xA;     * &#x9;&#x9;&#x9;&lt;code>create&lt;/code> is &lt;code>false&lt;/code>&#xA;     *&#x9;&#x9;&#x9;and the request has no valid session&#xA;     *&#xA;     * @see&#x9;#getSession()&#xA;     *&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSession">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/http/HttpSession.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the current session associated with this request,&#xA;     * or if the request does not have a session, creates one.&#xA;     * &#xA;     * @return&#x9;&#x9;the &lt;code>HttpSession&lt;/code> associated&#xA;     *&#x9;&#x9;&#x9;with this request&#xA;     *&#xA;     * @see&#x9;#getSession(boolean)&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRequestedSessionIdValid">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Checks whether the requested session ID is still valid.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&lt;code>true&lt;/code> if this&#xA;     *&#x9;&#x9;&#x9;&#x9;request has an id for a valid session&#xA;     *&#x9;&#x9;&#x9;&#x9;in the current session context;&#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>false&lt;/code> otherwise&#xA;     *&#xA;     * @see&#x9;&#x9;&#x9;#getRequestedSessionId&#xA;     * @see&#x9;&#x9;&#x9;#getSession&#xA;     * @see&#x9;&#x9;&#x9;HttpSessionContext&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRequestedSessionIdFromCookie">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Checks whether the requested session ID came in as a cookie.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&lt;code>true&lt;/code> if the session ID&#xA;     *&#x9;&#x9;&#x9;&#x9;came in as a&#xA;     *&#x9;&#x9;&#x9;&#x9;cookie; otherwise, &lt;code>false&lt;/code>&#xA;     *&#xA;     *&#xA;     * @see&#x9;&#x9;&#x9;#getSession&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRequestedSessionIdFromURL">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Checks whether the requested session ID came in as part of the &#xA;     * request URL.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&lt;code>true&lt;/code> if the session ID&#xA;     *&#x9;&#x9;&#x9;&#x9;came in as part of a URL; otherwise,&#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>false&lt;/code>&#xA;     *&#xA;     *&#xA;     * @see&#x9;&#x9;&#x9;#getSession&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRequestedSessionIdFromUrl">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * @deprecated&#x9;&#x9;As of Version 2.1 of the Java Servlet&#xA;     *&#x9;&#x9;&#x9;&#x9;API, use {@link #isRequestedSessionIdFromURL}&#xA;     *&#x9;&#x9;&#x9;&#x9;instead.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * Extends the {@link javax.servlet.ServletRequest} interface&#xA; * to provide request information for HTTP servlets. &#xA; *&#xA; * &lt;p>The servlet container creates an &lt;code>HttpServletRequest&lt;/code> &#xA; * object and passes it as an argument to the servlet's service&#xA; * methods (&lt;code>doGet&lt;/code>, &lt;code>doPost&lt;/code>, etc).&#xA; *&#xA; *&#xA; * @author &#x9;Various&#xA; * @version&#x9;$Version$&#xA; *&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletRequest.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
