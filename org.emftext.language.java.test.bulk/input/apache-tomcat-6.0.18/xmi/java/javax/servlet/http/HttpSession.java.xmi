<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="HttpSession.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>http</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletContext.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="HttpSession">
    <members xsi:type="members:InterfaceMethod" name="getCreationTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the time when this session was created, measured&#xA;     * in milliseconds since midnight January 1, 1970 GMT.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&#x9;a &lt;code>long&lt;/code> specifying&#xA;     * &#x9;&#x9;&#x9;&#x9;&#x9;when this session was created,&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;expressed in &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;milliseconds since 1/1/1970 GMT&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns a string containing the unique identifier assigned &#xA;     * to this session. The identifier is assigned &#xA;     * by the servlet container and is implementation dependent.&#xA;     * &#xA;     * @return&#x9;&#x9;&#x9;&#x9;a string specifying the identifier&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;assigned to this session&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLastAccessedTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the last time the client sent a request associated with&#xA;     * this session, as the number of milliseconds since midnight&#xA;     * January 1, 1970 GMT, and marked by the time the container received the request. &#xA;     *&#xA;     * &lt;p>Actions that your application takes, such as getting or setting&#xA;     * a value associated with the session, do not affect the access&#xA;     * time.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&#x9;a &lt;code>long&lt;/code>&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;representing the last time &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;the client sent a request associated&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;with this session, expressed in &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;milliseconds since 1/1/1970 GMT&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getServletContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Returns the ServletContext to which this session belongs.&#xA;    *    &#xA;    * @return The ServletContext object for the web application&#xA;    * @since 2.3&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMaxInactiveInterval">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="interval">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Specifies the time, in seconds, between client requests before the &#xA;     * servlet container will invalidate this session.  A negative time&#xA;     * indicates the session should never timeout.&#xA;     *&#xA;     * @param interval&#x9;&#x9;An integer specifying the number&#xA;     * &#x9;&#x9;&#x9;&#x9;of seconds &#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaxInactiveInterval">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Returns the maximum time interval, in seconds, that &#xA;    * the servlet container will keep this session open between &#xA;    * client accesses. After this interval, the servlet container&#xA;    * will invalidate the session.  The maximum time interval can be set&#xA;    * with the &lt;code>setMaxInactiveInterval&lt;/code> method.&#xA;    * A negative time indicates the session should never timeout.&#xA;    *  &#xA;    *&#xA;    * @return&#x9;&#x9;an integer specifying the number of&#xA;    *&#x9;&#x9;&#x9;seconds this session remains open&#xA;    *&#x9;&#x9;&#x9;between client requests&#xA;    *&#xA;    * @see&#x9;&#x9;#setMaxInactiveInterval&#xA;    *&#xA;    *&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSessionContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/http/HttpSessionContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    *&#xA;    * @deprecated &#x9;As of Version 2.1, this method is&#xA;    *&#x9;&#x9;&#x9;deprecated and has no replacement.&#xA;    *&#x9;&#x9;&#x9;It will be removed in a future&#xA;    *&#x9;&#x9;&#x9;version of the Java Servlet API.&#xA;    *&#xA;    */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns the object bound with the specified name in this session, or&#xA;     * &lt;code>null&lt;/code> if no object is bound under the name.&#xA;     *&#xA;     * @param name&#x9;&#x9;a string specifying the name of the object&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;the object with the specified name&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * @deprecated &#x9;As of Version 2.2, this method is&#xA;     * &#x9;&#x9;&#x9;replaced by {@link #getAttribute}.&#xA;     *&#xA;     * @param name&#x9;&#x9;a string specifying the name of the object&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;the object with the specified name&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns an &lt;code>Enumeration&lt;/code> of &lt;code>String&lt;/code> objects&#xA;     * containing the names of all the objects bound to this session. &#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an &lt;code>Enumeration&lt;/code> of &#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>String&lt;/code> objects specifying the&#xA;     *&#x9;&#x9;&#x9;&#x9;names of all the objects bound to&#xA;     *&#x9;&#x9;&#x9;&#x9;this session&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValueNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * @deprecated &#x9;As of Version 2.2, this method is&#xA;     * &#x9;&#x9;&#x9;replaced by {@link #getAttributeNames}&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;&#x9;an array of &lt;code>String&lt;/code>&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;objects specifying the&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;names of all the objects bound to&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;this session&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Binds an object to this session, using the name specified.&#xA;     * If an object of the same name is already bound to the session,&#xA;     * the object is replaced.&#xA;     *&#xA;     * &lt;p>After this method executes, and if the new object&#xA;     * implements &lt;code>HttpSessionBindingListener&lt;/code>,&#xA;     * the container calls &#xA;     * &lt;code>HttpSessionBindingListener.valueBound&lt;/code>. The container then   &#xA;     * notifies any &lt;code>HttpSessionAttributeListener&lt;/code>s in the web &#xA;     * application.&#xA;     &#xA;     * &lt;p>If an object was already bound to this session of this name&#xA;     * that implements &lt;code>HttpSessionBindingListener&lt;/code>, its &#xA;     * &lt;code>HttpSessionBindingListener.valueUnbound&lt;/code> method is called.&#xA;     *&#xA;     * &lt;p>If the value passed in is null, this has the same effect as calling &#xA;     * &lt;code>removeAttribute()&lt;code>.&#xA;     *&#xA;     *&#xA;     * @param name&#x9;&#x9;&#x9;the name to which the object is bound;&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;cannot be null&#xA;     *&#xA;     * @param value&#x9;&#x9;&#x9;the object to be bound&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="putValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * @deprecated &#x9;As of Version 2.2, this method is&#xA;     * &#x9;&#x9;&#x9;replaced by {@link #setAttribute}&#xA;     *&#xA;     * @param name&#x9;&#x9;&#x9;the name to which the object is bound;&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;cannot be null&#xA;     *&#xA;     * @param value&#x9;&#x9;&#x9;the object to be bound; cannot be null&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Removes the object bound with the specified name from&#xA;     * this session. If the session does not have an object&#xA;     * bound with the specified name, this method does nothing.&#xA;     *&#xA;     * &lt;p>After this method executes, and if the object&#xA;     * implements &lt;code>HttpSessionBindingListener&lt;/code>,&#xA;     * the container calls &#xA;     * &lt;code>HttpSessionBindingListener.valueUnbound&lt;/code>. The container&#xA;     * then notifies any &lt;code>HttpSessionAttributeListener&lt;/code>s in the web &#xA;     * application.&#xA;     * &#xA;     * &#xA;     *&#xA;     * @param name&#x9;&#x9;&#x9;&#x9;the name of the object to&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;remove from this session&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * @deprecated &#x9;As of Version 2.2, this method is&#xA;     * &#x9;&#x9;&#x9;replaced by {@link #removeAttribute}&#xA;     *&#xA;     * @param name&#x9;&#x9;&#x9;&#x9;the name of the object to&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;remove from this session&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;invalidated session&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invalidate">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Invalidates this session then unbinds any objects bound&#xA;     * to it. &#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;already invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isNew">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Returns &lt;code>true&lt;/code> if the client does not yet know about the&#xA;     * session or if the client chooses not to join the session.  For &#xA;     * example, if the server used only cookie-based sessions, and&#xA;     * the client had disabled the use of cookies, then a session would&#xA;     * be new on each request.&#xA;     *&#xA;     * @return &#x9;&#x9;&#x9;&#x9;&lt;code>true&lt;/code> if the &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;server has created a session, &#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;but the client has not yet joined&#xA;     *&#xA;     * @exception IllegalStateException&#x9;if this method is called on an&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;already invalidated session&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * Provides a way to identify a user across more than one page&#xA; * request or visit to a Web site and to store information about that user.&#xA; *&#xA; * &lt;p>The servlet container uses this interface to create a session&#xA; * between an HTTP client and an HTTP server. The session persists&#xA; * for a specified time period, across more than one connection or&#xA; * page request from the user. A session usually corresponds to one &#xA; * user, who may visit a site many times. The server can maintain a &#xA; * session in many ways such as using cookies or rewriting URLs.&#xA; *&#xA; * &lt;p>This interface allows servlets to &#xA; * &lt;ul>&#xA; * &lt;li>View and manipulate information about a session, such as&#xA; *     the session identifier, creation time, and last accessed time&#xA; * &lt;li>Bind objects to sessions, allowing user information to persist &#xA; *     across multiple user connections&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>When an application stores an object in or removes an object from a&#xA; * session, the session checks whether the object implements&#xA; * {@link HttpSessionBindingListener}. If it does, &#xA; * the servlet notifies the object that it has been bound to or unbound &#xA; * from the session. Notifications are sent after the binding methods complete. &#xA; * For session that are invalidated or expire, notifications are sent after&#xA; * the session has been invalidated or expired.&#xA; *&#xA; * &lt;p> When container migrates a session between VMs in a distributed container&#xA; * setting, all session attributes implementing the {@link HttpSessionActivationListener}&#xA; * interface are notified.&#xA; * &#xA; * &lt;p>A servlet should be able to handle cases in which&#xA; * the client does not choose to join a session, such as when cookies are&#xA; * intentionally turned off. Until the client joins the session,&#xA; * &lt;code>isNew&lt;/code> returns &lt;code>true&lt;/code>.  If the client chooses &#xA; * not to join&#xA; * the session, &lt;code>getSession&lt;/code> will return a different session&#xA; * on each request, and &lt;code>isNew&lt;/code> will always return&#xA; * &lt;code>true&lt;/code>.&#xA; *&#xA; * &lt;p>Session information is scoped only to the current web application&#xA; * (&lt;code>ServletContext&lt;/code>), so information stored in one context&#xA; * will not be directly visible in another.&#xA; *&#xA; * @author&#x9;Various&#xA; * @version&#x9;$Version$&#xA; *&#xA; *&#xA; * @see &#x9;HttpSessionBindingListener&#xA; * @see &#x9;HttpSessionContext&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
