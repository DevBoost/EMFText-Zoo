<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="HttpServletResponse.java">
  <comments>/*&#xA;* Licensed to the Apache Software Foundation (ASF) under one or more&#xA;* contributor license agreements.  See the NOTICE file distributed with&#xA;* this work for additional information regarding copyright ownership.&#xA;* The ASF licenses this file to You under the Apache License, Version 2.0&#xA;* (the &quot;License&quot;); you may not use this file except in compliance with&#xA;* the License.  You may obtain a copy of the License at&#xA;*&#xA;*     http://www.apache.org/licenses/LICENSE-2.0&#xA;*&#xA;* Unless required by applicable law or agreed to in writing, software&#xA;* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#xA;* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;* See the License for the specific language governing permissions and&#xA;* limitations under the License.&#xA;*/</comments>
  <namespaces>javax</namespaces>
  <namespaces>servlet</namespaces>
  <namespaces>http</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>servlet</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="HttpServletResponse">
    <members xsi:type="members:InterfaceMethod" name="addCookie">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cookie">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../javax/servlet/http/Cookie.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds the specified cookie to the response.  This method can be called&#xA;     * multiple times to set more than one cookie.&#xA;     *&#xA;     * @param cookie the Cookie to return to the client&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="containsHeader">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a boolean indicating whether the named response header &#xA;     * has already been set.&#xA;     * &#xA;     * @param&#x9;name&#x9;the header name&#xA;     * @return&#x9;&#x9;&lt;code>true&lt;/code> if the named response header &#xA;     *&#x9;&#x9;&#x9;has already been set; &#xA;     * &#x9;&#x9;&#x9;&lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="encodeURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Encodes the specified URL by including the session ID in it,&#xA;     * or, if encoding is not needed, returns the URL unchanged.&#xA;     * The implementation of this method includes the logic to&#xA;     * determine whether the session ID needs to be encoded in the URL.&#xA;     * For example, if the browser supports cookies, or session&#xA;     * tracking is turned off, URL encoding is unnecessary.&#xA;     * &#xA;     * &lt;p>For robust session tracking, all URLs emitted by a servlet &#xA;     * should be run through this&#xA;     * method.  Otherwise, URL rewriting cannot be used with browsers&#xA;     * which do not support cookies.&#xA;     *&#xA;     * @param&#x9;url&#x9;the url to be encoded.&#xA;     * @return&#x9;&#x9;the encoded URL if encoding is needed;&#xA;     * &#x9;&#x9;&#x9;the unchanged URL otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="encodeRedirectURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Encodes the specified URL for use in the&#xA;     * &lt;code>sendRedirect&lt;/code> method or, if encoding is not needed,&#xA;     * returns the URL unchanged.  The implementation of this method&#xA;     * includes the logic to determine whether the session ID&#xA;     * needs to be encoded in the URL.  Because the rules for making&#xA;     * this determination can differ from those used to decide whether to&#xA;     * encode a normal link, this method is separated from the&#xA;     * &lt;code>encodeURL&lt;/code> method.&#xA;     * &#xA;     * &lt;p>All URLs sent to the &lt;code>HttpServletResponse.sendRedirect&lt;/code>&#xA;     * method should be run through this method.  Otherwise, URL&#xA;     * rewriting cannot be used with browsers which do not support&#xA;     * cookies.&#xA;     *&#xA;     * @param&#x9;url&#x9;the url to be encoded.&#xA;     * @return&#x9;&#x9;the encoded URL if encoding is needed;&#xA;     * &#x9;&#x9;&#x9;the unchanged URL otherwise.&#xA;     *&#xA;     * @see #sendRedirect&#xA;     * @see #encodeUrl&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="encodeUrl">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @deprecated&#x9;As of version 2.1, use encodeURL(String url) instead&#xA;     *&#xA;     * @param&#x9;url&#x9;the url to be encoded.&#xA;     * @return&#x9;&#x9;the encoded URL if encoding is needed; &#xA;     * &#x9;&#x9;&#x9;the unchanged URL otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="encodeRedirectUrl">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @deprecated&#x9;As of version 2.1, use &#xA;     *&#x9;&#x9;&#x9;encodeRedirectURL(String url) instead&#xA;     *&#xA;     * @param&#x9;url&#x9;the url to be encoded.&#xA;     * @return&#x9;&#x9;the encoded URL if encoding is needed; &#xA;     * &#x9;&#x9;&#x9;the unchanged URL otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendError">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sc">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="msg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends an error response to the client using the specified&#xA;     * status.  The server defaults to creating the&#xA;     * response to look like an HTML-formatted server error page&#xA;     * containing the specified message, setting the content type&#xA;     * to &quot;text/html&quot;, leaving cookies and other headers unmodified.&#xA;     *&#xA;     * If an error-page declaration has been made for the web application&#xA;     * corresponding to the status code passed in, it will be served back in &#xA;     * preference to the suggested msg parameter. &#xA;     *&#xA;     * &lt;p>If the response has already been committed, this method throws &#xA;     * an IllegalStateException.&#xA;     * After using this method, the response should be considered&#xA;     * to be committed and should not be written to.&#xA;     *&#xA;     * @param&#x9;sc&#x9;the error status code&#xA;     * @param&#x9;msg&#x9;the descriptive message&#xA;     * @exception&#x9;IOException&#x9;If an input or output exception occurs&#xA;     * @exception&#x9;IllegalStateException&#x9;If the response was committed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendError">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sc">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends an error response to the client using the specified status&#xA;     * code and clearing the buffer. &#xA;     * &lt;p>If the response has already been committed, this method throws &#xA;     * an IllegalStateException.&#xA;     * After using this method, the response should be considered&#xA;     * to be committed and should not be written to.&#xA;     *&#xA;     * @param&#x9;sc&#x9;the error status code&#xA;     * @exception&#x9;IOException&#x9;If an input or output exception occurs&#xA;     * @exception&#x9;IllegalStateException&#x9;If the response was committed&#xA;     *&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;before this method call&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sendRedirect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="location">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sends a temporary redirect response to the client using the&#xA;     * specified redirect location URL.  This method can accept relative URLs;&#xA;     * the servlet container must convert the relative URL to an absolute URL&#xA;     * before sending the response to the client. If the location is relative &#xA;     * without a leading '/' the container interprets it as relative to&#xA;     * the current request URI. If the location is relative with a leading&#xA;     * '/' the container interprets it as relative to the servlet container root.&#xA;     *&#xA;     * &lt;p>If the response has already been committed, this method throws &#xA;     * an IllegalStateException.&#xA;     * After using this method, the response should be considered&#xA;     * to be committed and should not be written to.&#xA;     *&#xA;     * @param&#x9;&#x9;location&#x9;the redirect location URL&#xA;     * @exception&#x9;IOException&#x9;If an input or output exception occurs&#xA;     * @exception&#x9;IllegalStateException&#x9;If the response was committed or&#xA; if a partial URL is given and cannot be converted into a valid URL&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setDateHeader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="date">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &#xA;     * Sets a response header with the given name and&#xA;     * date-value.  The date is specified in terms of&#xA;     * milliseconds since the epoch.  If the header had already&#xA;     * been set, the new value overwrites the previous one.  The&#xA;     * &lt;code>containsHeader&lt;/code> method can be used to test for the&#xA;     * presence of a header before setting its value.&#xA;     * &#xA;     * @param&#x9;name&#x9;the name of the header to set&#xA;     * @param&#x9;date&#x9;the assigned date value&#xA;     * &#xA;     * @see #containsHeader&#xA;     * @see #addDateHeader&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addDateHeader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="date">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &#xA;     * Adds a response header with the given name and&#xA;     * date-value.  The date is specified in terms of&#xA;     * milliseconds since the epoch.  This method allows response headers &#xA;     * to have multiple values.&#xA;     * &#xA;     * @param&#x9;name&#x9;the name of the header to set&#xA;     * @param&#x9;date&#x9;the additional date value&#xA;     * &#xA;     * @see #setDateHeader&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setHeader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *&#xA;     * Sets a response header with the given name and value.&#xA;     * If the header had already been set, the new value overwrites the&#xA;     * previous one.  The &lt;code>containsHeader&lt;/code> method can be&#xA;     * used to test for the presence of a header before setting its&#xA;     * value.&#xA;     * &#xA;     * @param&#x9;name&#x9;the name of the header&#xA;     * @param&#x9;value&#x9;the header value  If it contains octet string,&#xA;     *&#x9;&#x9;it should be encoded according to RFC 2047&#xA;     *&#x9;&#x9;(http://www.ietf.org/rfc/rfc2047.txt)&#xA;     *&#xA;     * @see #containsHeader&#xA;     * @see #addHeader&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addHeader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a response header with the given name and value.&#xA;     * This method allows response headers to have multiple values.&#xA;     * &#xA;     * @param&#x9;name&#x9;the name of the header&#xA;     * @param&#x9;value&#x9;the additional header value   If it contains&#xA;     *&#x9;&#x9;octet string, it should be encoded&#xA;     *&#x9;&#x9;according to RFC 2047&#xA;     *&#x9;&#x9;(http://www.ietf.org/rfc/rfc2047.txt)&#xA;     *&#xA;     * @see #setHeader&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setIntHeader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets a response header with the given name and&#xA;     * integer value.  If the header had already been set, the new value&#xA;     * overwrites the previous one.  The &lt;code>containsHeader&lt;/code>&#xA;     * method can be used to test for the presence of a header before&#xA;     * setting its value.&#xA;     *&#xA;     * @param&#x9;name&#x9;the name of the header&#xA;     * @param&#x9;value&#x9;the assigned integer value&#xA;     *&#xA;     * @see #containsHeader&#xA;     * @see #addIntHeader&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addIntHeader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a response header with the given name and&#xA;     * integer value.  This method allows response headers to have multiple&#xA;     * values.&#xA;     *&#xA;     * @param&#x9;name&#x9;the name of the header&#xA;     * @param&#x9;value&#x9;the assigned integer value&#xA;     *&#xA;     * @see #setIntHeader&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setStatus">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sc">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the status code for this response.  This method is used to&#xA;     * set the return status code when there is no error (for example,&#xA;     * for the status codes SC_OK or SC_MOVED_TEMPORARILY).  If there&#xA;     * is an error, and the caller wishes to invoke an error-page defined&#xA;     * in the web application, the &lt;code>sendError&lt;/code> method should be used&#xA;     * instead.&#xA;     * &lt;p> The container clears the buffer and sets the Location header, preserving&#xA;     * cookies and other headers.&#xA;     *&#xA;     * @param&#x9;sc&#x9;the status code&#xA;     *&#xA;     * @see #sendError&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setStatus">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sc">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @deprecated As of version 2.1, due to ambiguous meaning of the &#xA;     * message parameter. To set a status code &#xA;     * use &lt;code>setStatus(int)&lt;/code>, to send an error with a description&#xA;     * use &lt;code>sendError(int, String)&lt;/code>.&#xA;     *&#xA;     * Sets the status code and message for this response.&#xA;     * &#xA;     * @param&#x9;sc&#x9;the status code&#xA;     * @param&#x9;sm&#x9;the status message&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="SC_CONTINUE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/*&#xA;     * Server status codes; see RFC 2068.&#xA;     */</comments>
        <comments>/**&#xA;     * Status code (100) indicating the client can continue.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_SWITCHING_PROTOCOLS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="101"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (101) indicating the server is switching protocols&#xA;     * according to Upgrade header.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_OK">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="200"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (200) indicating the request succeeded normally.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_CREATED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="201"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (201) indicating the request succeeded and created&#xA;     * a new resource on the server.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_ACCEPTED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="202"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (202) indicating that a request was accepted for&#xA;     * processing, but was not completed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_NON_AUTHORITATIVE_INFORMATION">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="203"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (203) indicating that the meta information presented&#xA;     * by the client did not originate from the server.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_NO_CONTENT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="204"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (204) indicating that the request succeeded but that&#xA;     * there was no new information to return.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_RESET_CONTENT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="205"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (205) indicating that the agent &lt;em>SHOULD&lt;/em> reset&#xA;     * the document view which caused the request to be sent.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_PARTIAL_CONTENT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="206"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (206) indicating that the server has fulfilled&#xA;     * the partial GET request for the resource.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_MULTIPLE_CHOICES">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="300"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (300) indicating that the requested resource&#xA;     * corresponds to any one of a set of representations, each with&#xA;     * its own specific location.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_MOVED_PERMANENTLY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="301"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (301) indicating that the resource has permanently&#xA;     * moved to a new location, and that future references should use a&#xA;     * new URI with their requests.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_MOVED_TEMPORARILY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="302"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (302) indicating that the resource has temporarily&#xA;     * moved to another location, but that future references should&#xA;     * still use the original URI to access the resource.&#xA;     *&#xA;     * This definition is being retained for backwards compatibility.&#xA;     * SC_FOUND is now the preferred definition.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_FOUND">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="302"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;    * Status code (302) indicating that the resource reside&#xA;    * temporarily under a different URI. Since the redirection might&#xA;    * be altered on occasion, the client should continue to use the&#xA;    * Request-URI for future requests.(HTTP/1.1) To represent the&#xA;    * status code (302), it is recommended to use this variable.&#xA;    */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_SEE_OTHER">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="303"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (303) indicating that the response to the request&#xA;     * can be found under a different URI.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_NOT_MODIFIED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="304"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (304) indicating that a conditional GET operation&#xA;     * found that the resource was available and not modified.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_USE_PROXY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="305"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (305) indicating that the requested resource&#xA;     * &lt;em>MUST&lt;/em> be accessed through the proxy given by the&#xA;     * &lt;code>&lt;em>Location&lt;/em>&lt;/code> field.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_TEMPORARY_REDIRECT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="307"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (307) indicating that the requested resource &#xA;     * resides temporarily under a different URI. The temporary URI&#xA;     * &lt;em>SHOULD&lt;/em> be given by the &lt;code>&lt;em>Location&lt;/em>&lt;/code> &#xA;     * field in the response.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_BAD_REQUEST">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="400"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (400) indicating the request sent by the client was&#xA;     * syntactically incorrect.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_UNAUTHORIZED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="401"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (401) indicating that the request requires HTTP&#xA;     * authentication.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_PAYMENT_REQUIRED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="402"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (402) reserved for future use.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_FORBIDDEN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="403"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (403) indicating the server understood the request&#xA;     * but refused to fulfill it.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_NOT_FOUND">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="404"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (404) indicating that the requested resource is not&#xA;     * available.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_METHOD_NOT_ALLOWED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="405"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (405) indicating that the method specified in the&#xA;     * &lt;code>&lt;em>Request-Line&lt;/em>&lt;/code> is not allowed for the resource&#xA;     * identified by the &lt;code>&lt;em>Request-URI&lt;/em>&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_NOT_ACCEPTABLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="406"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (406) indicating that the resource identified by the&#xA;     * request is only capable of generating response entities which have&#xA;     * content characteristics not acceptable according to the accept&#xA;     * headers sent in the request.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_PROXY_AUTHENTICATION_REQUIRED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="407"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (407) indicating that the client &lt;em>MUST&lt;/em> first&#xA;     * authenticate itself with the proxy.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_REQUEST_TIMEOUT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="408"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (408) indicating that the client did not produce a&#xA;     * request within the time that the server was prepared to wait.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_CONFLICT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="409"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (409) indicating that the request could not be&#xA;     * completed due to a conflict with the current state of the&#xA;     * resource.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_GONE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="410"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (410) indicating that the resource is no longer&#xA;     * available at the server and no forwarding address is known.&#xA;     * This condition &lt;em>SHOULD&lt;/em> be considered permanent.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_LENGTH_REQUIRED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="411"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (411) indicating that the request cannot be handled&#xA;     * without a defined &lt;code>&lt;em>Content-Length&lt;/em>&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_PRECONDITION_FAILED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="412"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (412) indicating that the precondition given in one&#xA;     * or more of the request-header fields evaluated to false when it&#xA;     * was tested on the server.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_REQUEST_ENTITY_TOO_LARGE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="413"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (413) indicating that the server is refusing to process&#xA;     * the request because the request entity is larger than the server is&#xA;     * willing or able to process.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_REQUEST_URI_TOO_LONG">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="414"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (414) indicating that the server is refusing to service&#xA;     * the request because the &lt;code>&lt;em>Request-URI&lt;/em>&lt;/code> is longer&#xA;     * than the server is willing to interpret.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_UNSUPPORTED_MEDIA_TYPE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="415"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (415) indicating that the server is refusing to service&#xA;     * the request because the entity of the request is in a format not&#xA;     * supported by the requested resource for the requested method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_REQUESTED_RANGE_NOT_SATISFIABLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="416"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (416) indicating that the server cannot serve the&#xA;     * requested byte range.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_EXPECTATION_FAILED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="417"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (417) indicating that the server could not meet the&#xA;     * expectation given in the Expect request header.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_INTERNAL_SERVER_ERROR">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="500"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (500) indicating an error inside the HTTP server&#xA;     * which prevented it from fulfilling the request.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_NOT_IMPLEMENTED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="501"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (501) indicating the HTTP server does not support&#xA;     * the functionality needed to fulfill the request.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_BAD_GATEWAY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="502"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (502) indicating that the HTTP server received an&#xA;     * invalid response from a server it consulted when acting as a&#xA;     * proxy or gateway.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_SERVICE_UNAVAILABLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="503"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (503) indicating that the HTTP server is&#xA;     * temporarily overloaded, and unable to handle the request.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_GATEWAY_TIMEOUT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="504"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (504) indicating that the server did not receive&#xA;     * a timely response from the upstream server while acting as&#xA;     * a gateway or proxy.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SC_HTTP_VERSION_NOT_SUPPORTED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="505"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Status code (505) indicating that the server does not support&#xA;     * or refuses to support the HTTP protocol version that was used&#xA;     * in the request message.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * Extends the {@link ServletResponse} interface to provide HTTP-specific&#xA; * functionality in sending a response.  For example, it has methods&#xA; * to access HTTP headers and cookies.&#xA; *&#xA; * &lt;p>The servlet container creates an &lt;code>HttpServletResponse&lt;/code> object&#xA; * and passes it as an argument to the servlet's service methods&#xA; * (&lt;code>doGet&lt;/code>, &lt;code>doPost&lt;/code>, etc).&#xA; *&#xA; * &#xA; * @author&#x9;Various&#xA; * @version&#x9;$Version$&#xA; *&#xA; * @see&#x9;&#x9;javax.servlet.ServletResponse&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../../javax/servlet/ServletResponse.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
