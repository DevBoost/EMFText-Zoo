<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Blob.java">
  <comments>/*&#xA; * @(#)Blob.java&#x9;1.28 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Blob">
    <members xsi:type="members:InterfaceMethod" name="length">
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;   * Returns the number of bytes in the &lt;code>BLOB&lt;/code> value&#xA;   * designated by this &lt;code>Blob&lt;/code> object.&#xA;   * @return length of the &lt;code>BLOB&lt;/code> in bytes&#xA;   * @exception SQLException if there is an error accessing the&#xA;   * length of the &lt;code>BLOB&lt;/code>&#xA;   * @since 1.2&#xA;   */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBytes">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;   * Retrieves all or part of the &lt;code>BLOB&lt;/code>&#xA;   * value that this &lt;code>Blob&lt;/code> object represents, as an array of&#xA;   * bytes.  This &lt;code>byte&lt;/code> array contains up to &lt;code>length&lt;/code> &#xA;   * consecutive bytes starting at position &lt;code>pos&lt;/code>.&#xA;   *&#xA;   * @param pos the ordinal position of the first byte in the &#xA;   *        &lt;code>BLOB&lt;/code> value to be extracted; the first byte is at&#xA;   *        position 1&#xA;   * @param length the number of consecutive bytes to be copied&#xA;   * @return a byte array containing up to &lt;code>length&lt;/code> &#xA;   *         consecutive bytes from the &lt;code>BLOB&lt;/code> value designated&#xA;   *         by this &lt;code>Blob&lt;/code> object, starting with the&#xA;   *         byte at position &lt;code>pos&lt;/code>&#xA;   * @exception SQLException if there is an error accessing the&#xA;   *            &lt;code>BLOB&lt;/code> value&#xA;   * @see #setBytes&#xA;   * @since 1.2&#xA;   */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBinaryStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;   * Retrieves the &lt;code>BLOB&lt;/code> value designated by this&#xA;   * &lt;code>Blob&lt;/code> instance as a stream.&#xA;   *&#xA;   * @return a stream containing the &lt;code>BLOB&lt;/code> data&#xA;   * @exception SQLException if there is an error accessing the&#xA;   *            &lt;code>BLOB&lt;/code> value&#xA;   * @see #setBinaryStream&#xA;   * @since 1.2&#xA;   */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="position">
      <typeReference xsi:type="types:Long">
        <comments>/** &#xA;   * Retrieves the byte position at which the specified byte array&#xA;   * &lt;code>pattern&lt;/code> begins within the &lt;code>BLOB&lt;/code>&#xA;   * value that this &lt;code>Blob&lt;/code> object represents.  The&#xA;   * search for &lt;code>pattern&lt;/code> begins at position&#xA;   * &lt;code>start&lt;/code>.  &#xA;   *&#xA;   * @param pattern the byte array for which to search&#xA;   * @param start the position at which to begin searching; the&#xA;   *        first position is 1&#xA;   * @return the position at which the pattern appears, else -1&#xA;   * @exception SQLException if there is an error accessing the &#xA;   * &lt;code>BLOB&lt;/code>&#xA;   * @since 1.2&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pattern">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="position">
      <typeReference xsi:type="types:Long">
        <comments>/** &#xA;   * Retrieves the byte position in the &lt;code>BLOB&lt;/code> value&#xA;   * designated by this &lt;code>Blob&lt;/code> object at which &#xA;   * &lt;code>pattern&lt;/code> begins.  The search begins at position&#xA;   * &lt;code>start&lt;/code>.&#xA;   *&#xA;   * @param pattern the &lt;code>Blob&lt;/code> object designating&#xA;   * the &lt;code>BLOB&lt;/code> value for which to search&#xA;   * @param start the position in the &lt;code>BLOB&lt;/code> value&#xA;   *        at which to begin searching; the first position is 1&#xA;   * @return the position at which the pattern begins, else -1&#xA;   * @exception SQLException if there is an error accessing the&#xA;   *            &lt;code>BLOB&lt;/code> value&#xA;   * @since 1.2&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pattern">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBytes">
      <typeReference xsi:type="types:Int">
        <comments>// -------------------------- JDBC 3.0 -----------------------------------</comments>
        <comments>/**&#xA;     * Writes the given array of bytes to the &lt;code>BLOB&lt;/code> value that&#xA;     * this &lt;code>Blob&lt;/code> object represents, starting at position &#xA;     * &lt;code>pos&lt;/code>, and returns the number of bytes written.&#xA;     *&#xA;     * @param pos the position in the &lt;code>BLOB&lt;/code> object at which&#xA;     *        to start writing&#xA;     * @param bytes the array of bytes to be written to the &lt;code>BLOB&lt;/code>&#xA;     *        value that this &lt;code>Blob&lt;/code> object represents&#xA;     * @return the number of bytes written&#xA;     * @exception SQLException if there is an error accessing the&#xA;     *            &lt;code>BLOB&lt;/code> value&#xA;     * @see #getBytes&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bytes">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBytes">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Writes all or part of the given &lt;code>byte&lt;/code> array to the&#xA;     * &lt;code>BLOB&lt;/code> value that this &lt;code>Blob&lt;/code> object represents&#xA;     * and returns the number of bytes written.&#xA;     * Writing starts at position &lt;code>pos&lt;/code> in the &lt;code>BLOB&lt;/code>&#xA;     * value; &lt;code>len&lt;/code> bytes from the given byte array are written.&#xA;     *&#xA;     * @param pos the position in the &lt;code>BLOB&lt;/code> object at which&#xA;     *        to start writing&#xA;     * @param bytes the array of bytes to be written to this &lt;code>BLOB&lt;/code>&#xA;     *        object&#xA;     * @param offset the offset into the array &lt;code>bytes&lt;/code> at which&#xA;     *        to start reading the bytes to be set&#xA;     * @param len the number of bytes to be written to the &lt;code>BLOB&lt;/code>&#xA;     *        value from the array of bytes &lt;code>bytes&lt;/code>&#xA;     * @return the number of bytes written&#xA;     * @exception SQLException if there is an error accessing the&#xA;     *            &lt;code>BLOB&lt;/code> value&#xA;     * @see #getBytes&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bytes">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBinaryStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves a stream that can be used to write to the &lt;code>BLOB&lt;/code> &#xA;     * value that this &lt;code>Blob&lt;/code> object represents.  The stream begins&#xA;     * at position &lt;code>pos&lt;/code>.&#xA;     *&#xA;     * @param pos the position in the &lt;code>BLOB&lt;/code> value at which&#xA;     *        to start writing&#xA;     * @return a &lt;code>java.io.OutputStream&lt;/code> object to which data can &#xA;     *         be written&#xA;     * @exception SQLException if there is an error accessing the&#xA;     *            &lt;code>BLOB&lt;/code> value&#xA;     * @see #getBinaryStream&#xA;     * @since 1.4&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="truncate">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Truncates the &lt;code>BLOB&lt;/code> value that this &lt;code>Blob&lt;/code>&#xA;     * object represents to be &lt;code>len&lt;/code> bytes in length.&#xA;     *&#xA;     * @param len the length, in bytes, to which the &lt;code>BLOB&lt;/code> value&#xA;     *        that this &lt;code>Blob&lt;/code> object represents should be truncated&#xA;     * @exception SQLException if there is an error accessing the&#xA;     *            &lt;code>BLOB&lt;/code> value&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The representation (mapping) in&#xA; * the Java&lt;sup>&lt;font size=-2>TM&lt;/font>&lt;/sup> programming&#xA; * language of an SQL &#xA; * &lt;code>BLOB&lt;/code> value.  An SQL &lt;code>BLOB&lt;/code> is a built-in type &#xA; * that stores a Binary Large Object as a column value in a row of &#xA; * a database table. By default drivers implement &lt;code>Blob&lt;/code> using&#xA; * an SQL &lt;code>locator(BLOB)&lt;/code>, which means that a&#xA; * &lt;code>Blob&lt;/code> object contains a logical pointer to the&#xA; * SQL &lt;code>BLOB&lt;/code> data rather than the data itself.&#xA; * A &lt;code>Blob&lt;/code> object is valid for the duration of the&#xA; * transaction in which is was created.&#xA; * &#xA; * &lt;P>Methods in the interfaces {@link ResultSet}, &#xA; * {@link CallableStatement}, and {@link PreparedStatement}, such as&#xA; * &lt;code>getBlob&lt;/code> and &lt;code>setBlob&lt;/code> allow a programmer to &#xA; * access an SQL &lt;code>BLOB&lt;/code> value.&#xA; * The &lt;code>Blob&lt;/code> interface provides methods for getting the&#xA; * length of an SQL &lt;code>BLOB&lt;/code> (Binary Large Object) value,&#xA; * for materializing a &lt;code>BLOB&lt;/code> value on the client, and for&#xA; * determining the position of a pattern of bytes within a &#xA; * &lt;code>BLOB&lt;/code> value. In addition, this interface has methods for updating&#xA; * a &lt;code>BLOB&lt;/code> value.&#xA; *&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
