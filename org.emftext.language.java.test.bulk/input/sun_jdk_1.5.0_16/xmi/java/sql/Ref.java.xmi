<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Ref.java">
  <comments>/*&#xA; * @(#)Ref.java&#x9;1.27 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Ref">
    <members xsi:type="members:InterfaceMethod" name="getBaseTypeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the fully-qualified SQL name of the SQL structured type that&#xA;     * this &lt;code>Ref&lt;/code> object references.&#xA;     * &#xA;     * @return the fully-qualified SQL name of the referenced SQL structured type &#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the referenced object and maps it to a Java type&#xA;     * using the given type map.&#xA;     *&#xA;     * @param map a &lt;code>java.util.Map&lt;/code> object that contains &#xA;     *        the mapping to use (the fully-qualified name of the SQL&#xA;     *        structured type being referenced and the class object for&#xA;     *        &lt;code>SQLData&lt;/code> implementation to which the SQL&#xA;     *        structured type will be mapped)&#xA;     * @return  a Java &lt;code>Object&lt;/code> that is the custom mapping for &#xA;     *          the SQL structured type to which this &lt;code>Ref&lt;/code>&#xA;     *          object refers&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     * @see #setObject&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="map">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                  <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the SQL structured type instance referenced by&#xA;     * this &lt;code>Ref&lt;/code> object.  If the connection's type map has an entry&#xA;     * for the structured type, the instance will be custom mapped to&#xA;     * the Java class indicated in the type map.  Otherwise, the&#xA;     * structured type instance will be mapped to a &lt;code>Struct&lt;/code> object.&#xA;     *&#xA;     * @return  a Java &lt;code>Object&lt;/code> that is the mapping for &#xA;     *          the SQL structured type to which this &lt;code>Ref&lt;/code>&#xA;     *          object refers&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     * @see #setObject&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setObject">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the structured type value that this &lt;code>Ref&lt;/code>&#xA;     * object references to the given instance of &lt;code>Object&lt;/code>.&#xA;     * The driver converts this to an SQL structured type when it&#xA;     * sends it to the database.&#xA;     *&#xA;     * @param value an &lt;code>Object&lt;/code> representing the SQL &#xA;     *        structured type instance that this&#xA;     *        &lt;code>Ref&lt;/code> object will reference&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     * @see #getObject()&#xA;     * @see #getObject(Map)&#xA;     * @see PreparedStatement#setObject(int, Object)&#xA;     * @see CallableStatement#setObject(String, Object)&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The mapping in the Java programming language of an SQL &lt;code>REF&lt;/code>&#xA; * value, which is a reference to an SQL structured type value in the database.&#xA; * &lt;P>&#xA; * SQL &lt;code>REF&lt;/code> values are stored in a table that contains&#xA; * instances of a referenceable SQL structured type, and each &lt;code>REF&lt;/code>&#xA; * value is a unique identifier for one instance in that table. &#xA; * An SQL &lt;code>REF&lt;/code> value may be used in place of the&#xA; * SQL structured type it references, either as a column value in a&#xA; * table or an attribute value in a structured type.&#xA; * &lt;P>&#xA; * Because an SQL &lt;code>REF&lt;/code> value is a logical pointer to an&#xA; * SQL structured type, a &lt;code>Ref&lt;/code> object is by default also a logical&#xA; * pointer. Thus, retrieving an SQL &lt;code>REF&lt;/code> value as&#xA; * a &lt;code>Ref&lt;/code> object does not materialize&#xA; * the attributes of the structured type on the client.&#xA; * &lt;P>&#xA; * A &lt;code>Ref&lt;/code> object can be stored in the database using the &#xA; * &lt;code>PreparedStatement.setRef&lt;/code> method.&#xA; * &#xA; * @see Struct&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
