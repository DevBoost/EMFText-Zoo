<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Clob.java">
  <comments>/*&#xA; * @(#)Clob.java&#x9;1.29 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Clob">
    <members xsi:type="members:InterfaceMethod" name="length">
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;   * Retrieves the number of characters &#xA;   * in the &lt;code>CLOB&lt;/code> value&#xA;   * designated by this &lt;code>Clob&lt;/code> object.&#xA;   *&#xA;   * @return length of the &lt;code>CLOB&lt;/code> in characters&#xA;   * @exception SQLException if there is an error accessing the&#xA;   *            length of the &lt;code>CLOB&lt;/code> value&#xA;   * @since 1.2&#xA;   */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSubString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;   * Retrieves a copy of the specified substring &#xA;   * in the &lt;code>CLOB&lt;/code> value&#xA;   * designated by this &lt;code>Clob&lt;/code> object.&#xA;   * The substring begins at position&#xA;   * &lt;code>pos&lt;/code> and has up to &lt;code>length&lt;/code> consecutive&#xA;   * characters.&#xA;   *&#xA;   * @param pos the first character of the substring to be extracted.&#xA;   *            The first character is at position 1.&#xA;   * @param length the number of consecutive characters to be copied&#xA;   * @return a &lt;code>String&lt;/code> that is the specified substring in&#xA;   *         the &lt;code>CLOB&lt;/code> value designated by this &lt;code>Clob&lt;/code> object&#xA;   * @exception SQLException if there is an error accessing the&#xA;   *            &lt;code>CLOB&lt;/code> value&#xA;   * @since 1.2&#xA;   */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;   * Retrieves the &lt;code>CLOB&lt;/code> value designated by this &lt;code>Clob&lt;/code>&#xA;   * object as a &lt;code>java.io.Reader&lt;/code> object (or as a stream of&#xA;   * characters).&#xA;   *&#xA;   * @return a &lt;code>java.io.Reader&lt;/code> object containing the &#xA;   *         &lt;code>CLOB&lt;/code> data&#xA;   * @exception SQLException if there is an error accessing the &#xA;   *            &lt;code>CLOB&lt;/code> value&#xA;   * @see #setCharacterStream&#xA;   * @since 1.2&#xA;   */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAsciiStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;   * Retrieves the &lt;code>CLOB&lt;/code> value designated by this &lt;code>Clob&lt;/code>&#xA;   * object as an ascii stream.&#xA;   *&#xA;   * @return a &lt;code>java.io.InputStream&lt;/code> object containing the &#xA;   *         &lt;code>CLOB&lt;/code> data&#xA;   * @exception SQLException if there is an error accessing the &#xA;   *            &lt;code>CLOB&lt;/code> value&#xA;   * @see #setAsciiStream&#xA;   * @since 1.2&#xA;   */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="position">
      <typeReference xsi:type="types:Long">
        <comments>/** &#xA;   * Retrieves the character position at which the specified substring &#xA;   * &lt;code>searchstr&lt;/code> appears in the SQL &lt;code>CLOB&lt;/code> value&#xA;   * represented by this &lt;code>Clob&lt;/code> object.  The search &#xA;   * begins at position &lt;code>start&lt;/code>.&#xA;   *&#xA;   * @param searchstr the substring for which to search &#xA;   * @param start the position at which to begin searching; the first position&#xA;   *              is 1&#xA;   * @return the position at which the substring appears or -1 if it is not&#xA;   *         present; the first position is 1&#xA;   * @exception SQLException if there is an error accessing the       &#xA;   *            &lt;code>CLOB&lt;/code> value&#xA;   * @since 1.2&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="searchstr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="position">
      <typeReference xsi:type="types:Long">
        <comments>/** &#xA;   * Retrieves the character position at which the specified  &#xA;   * &lt;code>Clob&lt;/code> object &lt;code>searchstr&lt;/code> appears in this &#xA;   * &lt;code>Clob&lt;/code> object.  The search begins at position &#xA;   * &lt;code>start&lt;/code>.&#xA;   *&#xA;   * @param searchstr the &lt;code>Clob&lt;/code> object for which to search&#xA;   * @param start the position at which to begin searching; the first&#xA;   *              position is 1&#xA;   * @return the position at which the &lt;code>Clob&lt;/code> object appears &#xA;   *              or -1 if it is not present; the first position is 1&#xA;   * @exception SQLException if there is an error accessing the &#xA;   *            &lt;code>CLOB&lt;/code> value&#xA;   * @since 1.2&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="searchstr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setString">
      <typeReference xsi:type="types:Int">
        <comments>//---------------------------- jdbc 3.0 -----------------------------------</comments>
        <comments>/**&#xA;     * Writes the given Java &lt;code>String&lt;/code> to the &lt;code>CLOB&lt;/code>&#xA;     * value that this &lt;code>Clob&lt;/code> object designates at the position &#xA;     * &lt;code>pos&lt;/code>.&#xA;     *&#xA;     * @param pos the position at which to start writing to the &lt;code>CLOB&lt;/code>&#xA;     *         value that this &lt;code>Clob&lt;/code> object represents&#xA;     * @param str the string to be written to the &lt;code>CLOB&lt;/code>&#xA;     *        value that this &lt;code>Clob&lt;/code> designates&#xA;     * @return the number of characters written&#xA;     * @exception SQLException if there is an error accessing the &#xA;     *            &lt;code>CLOB&lt;/code> value&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setString">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Writes &lt;code>len&lt;/code> characters of &lt;code>str&lt;/code>, starting &#xA;     * at character &lt;code>offset&lt;/code>, to the &lt;code>CLOB&lt;/code> value&#xA;     * that this &lt;code>Clob&lt;/code> represents.&#xA;     *&#xA;     * @param pos the position at which to start writing to this&#xA;     *        &lt;code>CLOB&lt;/code> object&#xA;     * @param str the string to be written to the &lt;code>CLOB&lt;/code> &#xA;     *        value that this &lt;code>Clob&lt;/code> object represents&#xA;     * @param offset the offset into &lt;code>str&lt;/code> to start reading&#xA;     *        the characters to be written&#xA;     * @param len the number of characters to be written&#xA;     * @return the number of characters written&#xA;     * @exception SQLException if there is an error accessing the &#xA;     *            &lt;code>CLOB&lt;/code> value&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAsciiStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves a stream to be used to write Ascii characters to the&#xA;     * &lt;code>CLOB&lt;/code> value that this &lt;code>Clob&lt;/code> object represents, &#xA;     * starting at position &lt;code>pos&lt;/code>.&#xA;     *&#xA;     * @param pos the position at which to start writing to this&#xA;     *        &lt;code>CLOB&lt;/code> object&#xA;     * @return the stream to which ASCII encoded characters can be written&#xA;     * @exception SQLException if there is an error accessing the &#xA;     *            &lt;code>CLOB&lt;/code> value&#xA;     * @see #getAsciiStream&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves a stream to be used to write a stream of Unicode characters &#xA;     * to the &lt;code>CLOB&lt;/code> value that this &lt;code>Clob&lt;/code> object&#xA;     * represents, at position &lt;code>pos&lt;/code>.&#xA;     *&#xA;     * @param  pos the position at which to start writing to the&#xA;     *        &lt;code>CLOB&lt;/code> value&#xA;     *&#xA;     * @return a stream to which Unicode encoded characters can be written&#xA;     * @exception SQLException if there is an error accessing the &#xA;     *            &lt;code>CLOB&lt;/code> value&#xA;     * @see #getCharacterStream&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/Writer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="truncate">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Truncates the &lt;code>CLOB&lt;/code> value that this &lt;code>Clob&lt;/code> &#xA;     * designates to have a length of &lt;code>len&lt;/code> &#xA;     * characters.&#xA;     * @param len the length, in bytes, to which the &lt;code>CLOB&lt;/code> value&#xA;     *        should be truncated&#xA;     * @exception SQLException if there is an error accessing the &#xA;     *            &lt;code>CLOB&lt;/code> value&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The mapping in the Java&lt;sup>&lt;font size=-2>TM&lt;/font>&lt;/sup> programming language &#xA; * for the SQL &lt;code>CLOB&lt;/code> type.&#xA; * An SQL &lt;code>CLOB&lt;/code> is a built-in type&#xA; * that stores a Character Large Object as a column value in a row of&#xA; * a database table.&#xA; * By default drivers implement a &lt;code>Clob&lt;/code> object using an SQL&#xA; * &lt;code>locator(CLOB)&lt;/code>, which means that a &lt;code>Clob&lt;/code> object &#xA; * contains a logical pointer to the SQL &lt;code>CLOB&lt;/code> data rather than&#xA; * the data itself. A &lt;code>Clob&lt;/code> object is valid for the duration&#xA; * of the transaction in which it was created.&#xA; * &lt;P>The &lt;code>Clob&lt;/code> interface provides methods for getting the&#xA; * length of an SQL &lt;code>CLOB&lt;/code> (Character Large Object) value,&#xA; * for materializing a &lt;code>CLOB&lt;/code> value on the client, and for&#xA; * searching for a substring or &lt;code>CLOB&lt;/code> object within a&#xA; * &lt;code>CLOB&lt;/code> value.&#xA; * Methods in the interfaces {@link ResultSet},&#xA; * {@link CallableStatement}, and {@link PreparedStatement}, such as&#xA; * &lt;code>getClob&lt;/code> and &lt;code>setClob&lt;/code> allow a programmer to&#xA; * access an SQL &lt;code>CLOB&lt;/code> value.  In addition, this interface&#xA; * has methods for updating a &lt;code>CLOB&lt;/code> value.&#xA; * &#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
