<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ParameterMetaData.java">
  <comments>/*&#xA; * @(#)ParameterMetaData.java&#x9;1.11 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ParameterMetaData">
    <members xsi:type="members:InterfaceMethod" name="getParameterCount">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the number of parameters in the &lt;code>PreparedStatement&lt;/code> &#xA;     * object for which this &lt;code>ParameterMetaData&lt;/code> object contains&#xA;     * information.&#xA;     *&#xA;     * @return the number of parameters&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isNullable">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves whether null values are allowed in the designated parameter.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return the nullability status of the given parameter; one of &#xA;     *        &lt;code>ParameterMetaData.parameterNoNulls&lt;/code>, &#xA;     *        &lt;code>ParameterMetaData.parameterNullable&lt;/code>, or &#xA;     *        &lt;code>ParameterMetaData.parameterNullableUnknown&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:Field" name="parameterNoNulls">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that a&#xA;     * parameter will not allow &lt;code>NULL&lt;/code> values.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="parameterNullable">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that a&#xA;     * parameter will allow &lt;code>NULL&lt;/code> values.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="parameterNullableUnknown">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the&#xA;     * nullability of a parameter is unknown.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSigned">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves whether values for the designated parameter can be signed numbers.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrecision">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the designated parameter's number of decimal digits.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return precision&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScale">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the designated parameter's number of digits to right of the decimal point.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return scale&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterType">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the designated parameter's SQL type.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return SQL type from &lt;code>java.sql.Types&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     * @see Types&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterTypeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the designated parameter's database-specific type name.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return type the name used by the database. If the parameter type is&#xA;     * a user-defined type, then a fully-qualified type name is returned.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the fully-qualified name of the Java class whose instances &#xA;     * should be passed to the method &lt;code>PreparedStatement.setObject&lt;/code>.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return the fully-qualified name of the class in the Java programming&#xA;     *         language that would be used by the method &#xA;     *         &lt;code>PreparedStatement.setObject&lt;/code> to set the value &#xA;     *         in the specified parameter. This is the class name used &#xA;     *         for custom mapping.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:Field" name="parameterModeUnknown">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the mode of the parameter is unknown.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="parameterModeIn">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the parameter's mode is IN.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="parameterModeInOut">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the parameter's mode is INOUT.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="parameterModeOut">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the parameter's mode is  OUT.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterMode">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the designated parameter's mode.&#xA;     *&#xA;     * @param param the first parameter is 1, the second is 2, ...&#xA;     * @return mode of the parameter; one of &#xA;     *        &lt;code>ParameterMetaData.parameterModeIn&lt;/code>,&#xA;     *        &lt;code>ParameterMetaData.parameterModeOut&lt;/code>, or&#xA;     *        &lt;code>ParameterMetaData.parameterModeInOut&lt;/code>&#xA;     *        &lt;code>ParameterMetaData.parameterModeUnknown&lt;/code>.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="param">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object that can be used to get information about the types &#xA; * and properties of the parameters in a &lt;code>PreparedStatement&lt;/code> object.&#xA; *&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
