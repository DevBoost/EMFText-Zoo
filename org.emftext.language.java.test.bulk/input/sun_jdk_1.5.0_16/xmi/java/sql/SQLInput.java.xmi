<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/types ../../java.ecore#/16" name="SQLInput.java">
  <comments>/*&#xA; * @(#)SQLInput.java&#x9;1.25 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SQLInput">
    <members xsi:type="members:InterfaceMethod" name="readString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>//================================================================</comments>
          <comments>// Methods for reading attributes from the stream of SQL data.</comments>
          <comments>// These methods correspond to the column-accessor methods of</comments>
          <comments>// java.sql.ResultSet.</comments>
          <comments>//================================================================</comments>
          <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>String&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readBoolean">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>boolean&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>false&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readByte">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>byte&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readShort">
      <typeReference xsi:type="types:Short">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>short&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readInt">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as an &lt;code>int&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readLong">
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>long&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readFloat">
      <typeReference xsi:type="types:Float">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>float&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readDouble">
      <typeReference xsi:type="types:Double">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>double&lt;/code> &#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readBigDecimal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>java.math.BigDecimal&lt;/code> &#xA;     * object in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>math</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readBytes">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as an array of bytes&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readDate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>java.sql.Date&lt;/code> object.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>java.sql.Time&lt;/code> object.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readTimestamp">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a &lt;code>java.sql.Timestamp&lt;/code> object.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a stream of Unicode characters.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readAsciiStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a stream of ASCII characters.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readBinaryStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Reads the next attribute in the stream and returns it as a stream of uninterpreted&#xA;     * bytes.&#xA;     *&#xA;     * @return the attribute; if the value is SQL &lt;code>NULL&lt;/code>, returns &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>//================================================================</comments>
          <comments>// Methods for reading items of SQL user-defined types from the stream.</comments>
          <comments>//================================================================</comments>
          <comments>/**&#xA;     * Reads the datum at the head of the stream and returns it as an&#xA;     * &lt;code>Object&lt;/code> in the Java programming language.  The&#xA;     * actual type of the object returned is determined by the default type&#xA;     * mapping, and any customizations present in this stream's type map.&#xA;     *&#xA;     * &lt;P>A type map is registered with the stream by the JDBC driver before the&#xA;     * stream is passed to the application.&#xA;     *&#xA;     * &lt;P>When the datum at the head of the stream is an SQL &lt;code>NULL&lt;/code>, &#xA;     * the method returns &lt;code>null&lt;/code>.  If the datum is an SQL structured or distinct&#xA;     * type, it determines the SQL type of the datum at the head of the stream. &#xA;     * If the stream's type map has an entry for that SQL type, the driver&#xA;     * constructs an object of the appropriate class and calls the method &#xA;     * &lt;code>SQLData.readSQL&lt;/code> on that object, which reads additional data from the &#xA;     * stream, using the protocol described for that method.&#xA;     *&#xA;     * @return the datum at the head of the stream as an &lt;code>Object&lt;/code> in the&#xA;     * Java programming language;&lt;code>null&lt;/code> if the datum is SQL &lt;code>NULL&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readRef">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Reads an SQL &lt;code>REF&lt;/code> value from the stream and returns it as a&#xA;     * &lt;code>Ref&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @return a &lt;code>Ref&lt;/code> object representing the SQL &lt;code>REF&lt;/code> value&#xA;     * at the head of the stream; &lt;code>null&lt;/code> if the value read is &#xA;     * SQL &lt;code>NULL&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Ref.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readBlob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Reads an SQL &lt;code>BLOB&lt;/code> value from the stream and returns it as a&#xA;     * &lt;code>Blob&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @return a &lt;code>Blob&lt;/code> object representing data of the SQL &lt;code>BLOB&lt;/code> value&#xA;     * at the head of the stream; &lt;code>null&lt;/code> if the value read is &#xA;     * SQL &lt;code>NULL&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Blob.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readClob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Reads an SQL &lt;code>CLOB&lt;/code> value from the stream and returns it as a&#xA;     * &lt;code>Clob&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @return a &lt;code>Clob&lt;/code> object representing data of the SQL &lt;code>CLOB&lt;/code> value&#xA;     * at the head of the stream; &lt;code>null&lt;/code> if the value read is &#xA;     * SQL &lt;code>NULL&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Clob.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readArray">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Reads an SQL &lt;code>ARRAY&lt;/code> value from the stream and returns it as an&#xA;     * &lt;code>Array&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @return an &lt;code>Array&lt;/code> object representing data of the SQL&#xA;     * &lt;code>ARRAY&lt;/code> value at the head of the stream; &lt;code>null&lt;/code>&#xA;     * if the value read is SQL &lt;code>NULL&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Array.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="wasNull">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves whether the last value read was SQL &lt;code>NULL&lt;/code>.&#xA;     * &#xA;     * @return &lt;code>true&lt;/code> if the most recently read SQL value was SQL&#xA;     * &lt;code>NULL&lt;/code>; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     * &#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>//---------------------------- JDBC 3.0 -------------------------</comments>
        <comments>/**&#xA;     * Reads an SQL &lt;code>DATALINK&lt;/code> value from the stream and returns it as a&#xA;     * &lt;code>java.net.URL&lt;/code> object in the Java programming language.&#xA;     * &#xA;     * @return a &lt;code>java.net.URL&lt;/code> object.&#xA;     * @exception SQLException if a database access error occurs,&#xA;     *            or if a URL is malformed&#xA;     * @since 1.4&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>net</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An input stream that contains a stream of values representing an &#xA; * instance of an SQL structured type or an SQL distinct type.&#xA; * This interface, used only for custom mapping, is used by the driver&#xA; * behind the scenes, and a programmer never directly invokes&#xA; * &lt;code>SQLInput&lt;/code> methods. The &lt;i>reader&lt;/i> methods &#xA; * (&lt;code>readLong&lt;/code>, &lt;code>readBytes&lt;/code>, and so on) &#xA; * provide a way to read the values in an &lt;code>SQLInput&lt;/code> object.&#xA; * The method &lt;code>wasNull&lt;/code> is used to determine whether the &#xA; * the last value read was SQL &lt;code>NULL&lt;/code>.&#xA; * &lt;P>When the method &lt;code>getObject&lt;/code> is called with an&#xA; * object of a class implementing the interface &lt;code>SQLData&lt;/code>,&#xA; * the JDBC driver calls the method &lt;code>SQLData.getSQLType&lt;/code>&#xA; * to determine the SQL type of the user-defined type (UDT)&#xA; * being custom mapped. The driver&#xA; * creates an instance of &lt;code>SQLInput&lt;/code>, populating it with the&#xA; * attributes of the UDT.  The driver then passes the input&#xA; * stream to the method &lt;code>SQLData.readSQL&lt;/code>, which in turn &#xA; * calls the &lt;code>SQLInput&lt;/code> reader methods &#xA; * in its implementation for reading the&#xA; * attributes from the input stream.&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
