<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="SQLPermission.java">
  <comments>/*&#xA; * @(#)SQLPermission.java&#x9;1.15 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SQLPermission">
    <members xsi:type="members:Constructor" name="SQLPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>SQLPermission&lt;/code> object with the specified name.&#xA;     * The name is the symbolic name of the &lt;code>SQLPermission&lt;/code>; currently,&#xA;     * the only name allowed is &quot;setLog&quot;.&#xA;     *&#xA;     * @param name the name of this &lt;code>SQLPermission&lt;/code> object, which must&#xA;&#x9; *             be &lt;code>setLog&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SQLPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="actions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>SQLPermission&lt;/code> object with the specified name.&#xA;     * The name is the symbolic name of the &lt;code>SQLPermission&lt;/code>; the&#xA;     * actions &lt;code>String&lt;/code> is currently unused and should be&#xA;&#x9; * &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @param name the name of this &lt;code>SQLPermission&lt;/code> object, which must&#xA;&#x9; *             be &lt;code>setLog&lt;/code>&#xA;     * @param actions should be &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="1439323187199563495"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Private serial version unique ID to ensure serialization&#xA;     * compatibility.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The permission for which the &lt;code>SecurityManager&lt;/code> will check&#xA; * when code that is running in an applet calls the &#xA; * &lt;code>DriverManager.setLogWriter&lt;/code> method or the&#xA; * &lt;code>DriverManager.setLogStream&lt;/code> (deprecated) method.&#xA; * If there is no &lt;code>SQLPermission&lt;/code> object, these methods&#xA; * throw a &lt;code>java.lang.SecurityException&lt;/code> as a runtime exception.&#xA; * &lt;P> &#xA; * A &lt;code>SQLPermission&lt;/code> object contains&#xA; * a name (also referred to as a &quot;target name&quot;) but no actions&#xA; * list; there is either a named permission or there is not.&#xA; * The target name is the name of the permission (see below). The&#xA; * naming convention follows the  hierarchical property naming convention.&#xA; * In addition, an asterisk&#xA; * may appear at the end of the name, following a &quot;.&quot;, or by itself, to&#xA; * signify a wildcard match. For example: &lt;code>loadLibrary.*&lt;/code>&#xA; * or &lt;code>*&lt;/code> is valid,&#xA; * but &lt;code>*loadLibrary&lt;/code> or &lt;code>a*b&lt;/code> is not valid.&#xA; * &lt;P>&#xA; * The following table lists all the possible &lt;code>SQLPermission&lt;/code> target names.&#xA; * Currently, the only name allowed is &lt;code>setLog&lt;/code>.&#xA; * The table gives a description of what the permission allows&#xA; * and a discussion of the risks of granting code the permission.&#xA; * &lt;P>&#xA; *&#xA; * &lt;table border=1 cellpadding=5 summary=&quot;permission target name, what the permission allows, and associated risks&quot;>&#xA; * &lt;tr>&#xA; * &lt;th>Permission Target Name&lt;/th>&#xA; * &lt;th>What the Permission Allows&lt;/th>&#xA; * &lt;th>Risks of Allowing this Permission&lt;/th>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setLog&lt;/td>&#xA; *   &lt;td>Setting of the logging stream&lt;/td>&#xA; *   &lt;td>This is a dangerous permission to grant.&#xA; * The contents of the log may contain usernames and passwords,&#xA; * SQL statements, and SQL data.&lt;/td>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;/table>&#xA; *&#xA; * The person running an applet decides what permissions to allow&#xA; * and will run the &lt;code>Policy Tool&lt;/code> to create an&#xA; * &lt;code>SQLPermission&lt;/code> in a policy file.  A programmer does&#xA; * not use a constructor directly to create an instance of &lt;code>SQLPermission&lt;/code>&#xA; * but rather uses a tool.&#xA; * @since 1.3&#xA; * @see java.security.BasicPermission&#xA; * @see java.security.Permission&#xA; * @see java.security.Permissions&#xA; * @see java.security.PermissionCollection&#xA; * @see java.lang.SecurityManager&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../security/BasicPermission.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
