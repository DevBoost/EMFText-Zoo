<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ResultSet.java">
  <comments>/*&#xA; * @(#)ResultSet.java&#x9;1.49 04/06/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Calendar.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ResultSet">
    <members xsi:type="members:InterfaceMethod" name="next">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Moves the cursor down one row from its current position.&#xA;     * A &lt;code>ResultSet&lt;/code> cursor is initially positioned&#xA;     * before the first row; the first call to the method&#xA;     * &lt;code>next&lt;/code> makes the first row the current row; the&#xA;     * second call makes the second row the current row, and so on. &#xA;     *&#xA;     * &lt;P>If an input stream is open for the current row, a call&#xA;     * to the method &lt;code>next&lt;/code> will&#xA;     * implicitly close it. A &lt;code>ResultSet&lt;/code> object's&#xA;     * warning chain is cleared when a new row is read.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the new current row is valid; &#xA;     * &lt;code>false&lt;/code> if there are no more rows &#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Releases this &lt;code>ResultSet&lt;/code> object's database and&#xA;     * JDBC resources immediately instead of waiting for&#xA;     * this to happen when it is automatically closed.&#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> A &lt;code>ResultSet&lt;/code> object&#xA;     * is automatically closed by the&#xA;     * &lt;code>Statement&lt;/code> object that generated it when&#xA;     * that &lt;code>Statement&lt;/code> object is closed,&#xA;     * re-executed, or is used to retrieve the next result from a&#xA;     * sequence of multiple results. A &lt;code>ResultSet&lt;/code> object&#xA;     * is also automatically closed when it is garbage collected.  &#xA;     *&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="wasNull">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Reports whether&#xA;     * the last column read had a value of SQL &lt;code>NULL&lt;/code>.&#xA;     * Note that you must first call one of the getter methods&#xA;     * on a column to try to read its value and then call&#xA;     * the method &lt;code>wasNull&lt;/code> to see if the value read was&#xA;     * SQL &lt;code>NULL&lt;/code>.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the last column value read was SQL&#xA;     *         &lt;code>NULL&lt;/code> and &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>//======================================================================</comments>
          <comments>// Methods for accessing results by column index</comments>
          <comments>//======================================================================</comments>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>String&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBoolean">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>boolean&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>false&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getByte">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>byte&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getShort">
      <typeReference xsi:type="types:Short">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>short&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInt">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * an &lt;code>int&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLong">
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>long&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFloat">
      <typeReference xsi:type="types:Float">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>float&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDouble">
      <typeReference xsi:type="types:Double">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>double&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBigDecimal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.sql.BigDecimal&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param scale the number of digits to the right of the decimal point&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @deprecated&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBytes">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>byte&lt;/code> array in the Java programming language.&#xA;     * The bytes represent the raw values returned by the driver.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.sql.Date&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.sql.Time&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTimestamp">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.sql.Timestamp&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAsciiStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a stream of ASCII characters. The value can then be read in chunks from the&#xA;     * stream. This method is particularly&#xA;     * suitable for retrieving large &lt;char>LONGVARCHAR&lt;/char> values.&#xA;     * The JDBC driver will&#xA;     * do any necessary conversion from the database format into ASCII.&#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> All the data in the returned stream must be&#xA;     * read prior to getting the value of any other column. The next&#xA;     * call to a getter method implicitly closes the stream.  Also, a&#xA;     * stream may return &lt;code>0&lt;/code> when the method&#xA;     * &lt;code>InputStream.available&lt;/code>&#xA;     * is called whether there is data available or not.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return a Java input stream that delivers the database column value&#xA;     * as a stream of one-byte ASCII characters;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnicodeStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * as a stream of two-byte Unicode characters. The first byte is&#xA;     * the high byte; the second byte is the low byte.&#xA;     *&#xA;     * The value can then be read in chunks from the&#xA;     * stream. This method is particularly&#xA;     * suitable for retrieving large &lt;code>LONGVARCHAR&lt;/code>values.  The &#xA;     * JDBC driver will do any necessary conversion from the database&#xA;     * format into Unicode.&#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> All the data in the returned stream must be&#xA;     * read prior to getting the value of any other column. The next&#xA;     * call to a getter method implicitly closes the stream.  &#xA;     * Also, a stream may return &lt;code>0&lt;/code> when the method &#xA;     * &lt;code>InputStream.available&lt;/code>&#xA;     * is called, whether there is data available or not.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return a Java input stream that delivers the database column value&#xA;     *         as a stream of two-byte Unicode characters;&#xA;     *         if the value is SQL &lt;code>NULL&lt;/code>, the value returned is &#xA;     *         &lt;code>null&lt;/code>&#xA;     *&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @deprecated use &lt;code>getCharacterStream&lt;/code> in place of &#xA;     *              &lt;code>getUnicodeStream&lt;/code>&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBinaryStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a binary stream of&#xA;     * uninterpreted bytes. The value can then be read in chunks from the&#xA;     * stream. This method is particularly&#xA;     * suitable for retrieving large &lt;code>LONGVARBINARY&lt;/code> values.&#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> All the data in the returned stream must be&#xA;     * read prior to getting the value of any other column. The next&#xA;     * call to a getter method implicitly closes the stream.  Also, a&#xA;     * stream may return &lt;code>0&lt;/code> when the method &#xA;     * &lt;code>InputStream.available&lt;/code>&#xA;     * is called whether there is data available or not.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return a Java input stream that delivers the database column value&#xA;     *         as a stream of uninterpreted bytes;&#xA;     *         if the value is SQL &lt;code>NULL&lt;/code>, the value returned is &#xA;     *         &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>//======================================================================</comments>
          <comments>// Methods for accessing results by column name</comments>
          <comments>//======================================================================</comments>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>String&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBoolean">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>boolean&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>false&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getByte">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>byte&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getShort">
      <typeReference xsi:type="types:Short">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>short&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInt">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * an &lt;code>int&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLong">
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>long&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFloat">
      <typeReference xsi:type="types:Float">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>float&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDouble">
      <typeReference xsi:type="types:Double">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>double&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>0&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBigDecimal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.math.BigDecimal&lt;/code> in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @param scale the number of digits to the right of the decimal point&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @deprecated&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBytes">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>byte&lt;/code> array in the Java programming language.&#xA;     * The bytes represent the raw values returned by the driver.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.sql.Date&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row  &#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.sql.Time&lt;/code> object in the Java programming language.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; &#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTimestamp">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as&#xA;     * a &lt;code>java.sql.Timestamp&lt;/code> object.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value; if the value is SQL &lt;code>NULL&lt;/code>, the&#xA;     * value returned is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAsciiStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a stream of&#xA;     * ASCII characters. The value can then be read in chunks from the&#xA;     * stream. This method is particularly&#xA;     * suitable for retrieving large &lt;code>LONGVARCHAR&lt;/code> values.&#xA;     * The JDBC driver will&#xA;     * do any necessary conversion from the database format into ASCII.&#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> All the data in the returned stream must be&#xA;     * read prior to getting the value of any other column. The next&#xA;     * call to a getter method implicitly closes the stream. Also, a&#xA;     * stream may return &lt;code>0&lt;/code> when the method &lt;code>available&lt;/code>&#xA;     * is called whether there is data available or not.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return a Java input stream that delivers the database column value&#xA;     * as a stream of one-byte ASCII characters.&#xA;     * If the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code>.&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnicodeStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a stream of two-byte&#xA;     * Unicode characters. The first byte is the high byte; the second&#xA;     * byte is the low byte.&#xA;     *&#xA;     * The value can then be read in chunks from the&#xA;     * stream. This method is particularly&#xA;     * suitable for retrieving large &lt;code>LONGVARCHAR&lt;/code> values.&#xA;     * The JDBC technology-enabled driver will&#xA;     * do any necessary conversion from the database format into Unicode.&#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> All the data in the returned stream must be&#xA;     * read prior to getting the value of any other column. The next&#xA;     * call to a getter method implicitly closes the stream.&#xA;     * Also, a stream may return &lt;code>0&lt;/code> when the method &#xA;     * &lt;code>InputStream.available&lt;/code> is called, whether there &#xA;     * is data available or not.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return a Java input stream that delivers the database column value&#xA;     *         as a stream of two-byte Unicode characters.  &#xA;     *         If the value is SQL &lt;code>NULL&lt;/code>, the value returned &#xA;     *         is &lt;code>null&lt;/code>.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @deprecated use &lt;code>getCharacterStream&lt;/code> instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBinaryStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a stream of uninterpreted&#xA;     * &lt;code>byte&lt;/code>s.&#xA;     * The value can then be read in chunks from the&#xA;     * stream. This method is particularly&#xA;     * suitable for retrieving large &lt;code>LONGVARBINARY&lt;/code>&#xA;     * values. &#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> All the data in the returned stream must be&#xA;     * read prior to getting the value of any other column. The next&#xA;     * call to a getter method implicitly closes the stream. Also, a&#xA;     * stream may return &lt;code>0&lt;/code> when the method &lt;code>available&lt;/code>&#xA;     * is called whether there is data available or not.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return a Java input stream that delivers the database column value&#xA;     * as a stream of uninterpreted bytes; &#xA;     * if the value is SQL &lt;code>NULL&lt;/code>, the result is &lt;code>null&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWarnings">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>//=====================================================================</comments>
          <comments>// Advanced features:</comments>
          <comments>//=====================================================================</comments>
          <comments>/**&#xA;     * Retrieves the first warning reported by calls on this &#xA;     * &lt;code>ResultSet&lt;/code> object.&#xA;     * Subsequent warnings on this &lt;code>ResultSet&lt;/code> object&#xA;     * will be chained to the &lt;code>SQLWarning&lt;/code> object that &#xA;     * this method returns.&#xA;     *&#xA;     * &lt;P>The warning chain is automatically cleared each time a new&#xA;     * row is read.  This method may not be called on a &lt;code>ResultSet&lt;/code>&#xA;     * object that has been closed; doing so will cause an &#xA;     * &lt;code>SQLException&lt;/code> to be thrown.&#xA;     * &lt;P>&#xA;     * &lt;B>Note:&lt;/B> This warning chain only covers warnings caused&#xA;     * by &lt;code>ResultSet&lt;/code> methods.  Any warning caused by&#xA;     * &lt;code>Statement&lt;/code> methods&#xA;     * (such as reading OUT parameters) will be chained on the&#xA;     * &lt;code>Statement&lt;/code> object. &#xA;     *&#xA;     * @return the first &lt;code>SQLWarning&lt;/code> object reported or &#xA;     *         &lt;code>null&lt;/code> if there are none&#xA;     * @exception SQLException if a database access error occurs or this method is &#xA;     *            called on a closed result set&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="SQLWarning.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clearWarnings">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Clears all warnings reported on this &lt;code>ResultSet&lt;/code> object.&#xA;     * After this method is called, the method &lt;code>getWarnings&lt;/code>&#xA;     * returns &lt;code>null&lt;/code> until a new warning is&#xA;     * reported for this &lt;code>ResultSet&lt;/code> object.  &#xA;     *&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCursorName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the name of the SQL cursor used by this &lt;code>ResultSet&lt;/code>&#xA;     * object.&#xA;     *&#xA;     * &lt;P>In SQL, a result table is retrieved through a cursor that is&#xA;     * named. The current row of a result set can be updated or deleted&#xA;     * using a positioned update/delete statement that references the&#xA;     * cursor name. To insure that the cursor has the proper isolation&#xA;     * level to support update, the cursor's &lt;code>SELECT&lt;/code> statement &#xA;     * should be of the form &lt;code>SELECT FOR UPDATE&lt;/code>. If &#xA;     * &lt;code>FOR UPDATE&lt;/code> is omitted, the positioned updates may fail.&#xA;     * &#xA;     * &lt;P>The JDBC API supports this SQL feature by providing the name of the&#xA;     * SQL cursor used by a &lt;code>ResultSet&lt;/code> object.&#xA;     * The current row of a &lt;code>ResultSet&lt;/code> object&#xA;     * is also the current row of this SQL cursor.&#xA;     *&#xA;     * &lt;P>&lt;B>Note:&lt;/B> If positioned update is not supported, a&#xA;     * &lt;code>SQLException&lt;/code> is thrown.&#xA;     *&#xA;     * @return the SQL name for this &lt;code>ResultSet&lt;/code> object's cursor&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMetaData">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the  number, types and properties of&#xA;     * this &lt;code>ResultSet&lt;/code> object's columns.&#xA;     *&#xA;     * @return the description of this &lt;code>ResultSet&lt;/code> object's columns&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="ResultSetMetaData.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * &lt;p>Gets the value of the designated column in the current row &#xA;     * of this &lt;code>ResultSet&lt;/code> object as &#xA;     * an &lt;code>Object&lt;/code> in the Java programming language.&#xA;     *&#xA;     * &lt;p>This method will return the value of the given column as a&#xA;     * Java object.  The type of the Java object will be the default&#xA;     * Java object type corresponding to the column's SQL type,&#xA;     * following the mapping for built-in types specified in the JDBC &#xA;     * specification. If the value is an SQL &lt;code>NULL&lt;/code>, &#xA;     * the driver returns a Java &lt;code>null&lt;/code>.&#xA;     *&#xA;     * &lt;p>This method may also be used to read database-specific&#xA;     * abstract data types.&#xA;     *&#xA;     * In the JDBC 2.0 API, the behavior of method&#xA;     * &lt;code>getObject&lt;/code> is extended to materialize  &#xA;     * data of SQL user-defined types.  When a column contains&#xA;     * a structured or distinct value, the behavior of this method is as &#xA;     * if it were a call to: &lt;code>getObject(columnIndex, &#xA;     * this.getStatement().getConnection().getTypeMap())&lt;/code>.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return a &lt;code>java.lang.Object&lt;/code> holding the column value  &#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * &lt;p>Gets the value of the designated column in the current row &#xA;     * of this &lt;code>ResultSet&lt;/code> object as &#xA;     * an &lt;code>Object&lt;/code> in the Java programming language.&#xA;     *&#xA;     * &lt;p>This method will return the value of the given column as a&#xA;     * Java object.  The type of the Java object will be the default&#xA;     * Java object type corresponding to the column's SQL type,&#xA;     * following the mapping for built-in types specified in the JDBC &#xA;     * specification. If the value is an SQL &lt;code>NULL&lt;/code>, &#xA;     * the driver returns a Java &lt;code>null&lt;/code>.&#xA;     * &lt;P>&#xA;     * This method may also be used to read database-specific&#xA;     * abstract data types.&#xA;     * &lt;P>&#xA;     * In the JDBC 2.0 API, the behavior of the method&#xA;     * &lt;code>getObject&lt;/code> is extended to materialize  &#xA;     * data of SQL user-defined types.  When a column contains&#xA;     * a structured or distinct value, the behavior of this method is as &#xA;     * if it were a call to: &lt;code>getObject(columnIndex, &#xA;     * this.getStatement().getConnection().getTypeMap())&lt;/code>.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @return a &lt;code>java.lang.Object&lt;/code> holding the column value  &#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="findColumn">
      <typeReference xsi:type="types:Int">
        <comments>//----------------------------------------------------------------</comments>
        <comments>/**&#xA;     * Maps the given &lt;code>ResultSet&lt;/code> column name to its&#xA;     * &lt;code>ResultSet&lt;/code> column index.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @return the column index of the given column name&#xA;     * @exception SQLException if the &lt;code>ResultSet&lt;/code> object&#xA;     * does not contain &lt;code>columnName&lt;/code> or a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>//--------------------------JDBC 2.0-----------------------------------</comments>
        <comments>//---------------------------------------------------------------------</comments>
        <comments>// Getters and Setters</comments>
        <comments>//---------------------------------------------------------------------</comments>
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row &#xA;     * of this &lt;code>ResultSet&lt;/code> object as a&#xA;     * &lt;code>java.io.Reader&lt;/code> object.&#xA;     * @return a &lt;code>java.io.Reader&lt;/code> object that contains the column&#xA;     * value; if the value is SQL &lt;code>NULL&lt;/code>, the value returned is&#xA;     * &lt;code>null&lt;/code> in the Java programming language.&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row &#xA;     * of this &lt;code>ResultSet&lt;/code> object as a&#xA;     * &lt;code>java.io.Reader&lt;/code> object.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @return a &lt;code>java.io.Reader&lt;/code> object that contains the column&#xA;     * value; if the value is SQL &lt;code>NULL&lt;/code>, the value returned is&#xA;     * &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBigDecimal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a&#xA;     * &lt;code>java.math.BigDecimal&lt;/code> with full precision.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @return the column value (full precision);&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>, the value returned is&#xA;     * &lt;code>null&lt;/code> in the Java programming language.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBigDecimal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a&#xA;     * &lt;code>java.math.BigDecimal&lt;/code> with full precision.&#xA;     *&#xA;     * @param columnName the column name&#xA;     * @return the column value (full precision);&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>, the value returned is&#xA;     * &lt;code>null&lt;/code> in the Java programming language.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     *&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isBeforeFirst">
      <typeReference xsi:type="types:Boolean">
        <comments>//---------------------------------------------------------------------</comments>
        <comments>// Traversal/Positioning</comments>
        <comments>//---------------------------------------------------------------------</comments>
        <comments>/**&#xA;     * Retrieves whether the cursor is before the first row in &#xA;     * this &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the cursor is before the first row;&#xA;     * &lt;code>false&lt;/code> if the cursor is at any other position or the&#xA;     * result set contains no rows&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAfterLast">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves whether the cursor is after the last row in &#xA;     * this &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the cursor is after the last row;&#xA;     * &lt;code>false&lt;/code> if the cursor is at any other position or the&#xA;     * result set contains no rows&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isFirst">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves whether the cursor is on the first row of&#xA;     * this &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the cursor is on the first row;&#xA;     * &lt;code>false&lt;/code> otherwise   &#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isLast">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves whether the cursor is on the last row of &#xA;     * this &lt;code>ResultSet&lt;/code> object.&#xA;     * Note: Calling the method &lt;code>isLast&lt;/code> may be expensive&#xA;     * because the JDBC driver&#xA;     * might need to fetch ahead one row in order to determine &#xA;     * whether the current row is the last row in the result set.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the cursor is on the last row;&#xA;     * &lt;code>false&lt;/code> otherwise   &#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="beforeFirst">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Moves the cursor to the front of&#xA;     * this &lt;code>ResultSet&lt;/code> object, just before the&#xA;     * first row. This method has no effect if the result set contains no rows.&#xA;     *&#xA;     * @exception SQLException if a database access error&#xA;     * occurs or the result set type is &lt;code>TYPE_FORWARD_ONLY&lt;/code>&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="afterLast">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Moves the cursor to the end of&#xA;     * this &lt;code>ResultSet&lt;/code> object, just after the&#xA;     * last row. This method has no effect if the result set contains no rows.&#xA;     * @exception SQLException if a database access error&#xA;     * occurs or the result set type is &lt;code>TYPE_FORWARD_ONLY&lt;/code>&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="first">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Moves the cursor to the first row in&#xA;     * this &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the cursor is on a valid row;&#xA;     * &lt;code>false&lt;/code> if there are no rows in the result set&#xA;     * @exception SQLException if a database access error&#xA;     * occurs or the result set type is &lt;code>TYPE_FORWARD_ONLY&lt;/code>&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="last">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Moves the cursor to the last row in&#xA;     * this &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the cursor is on a valid row;&#xA;     * &lt;code>false&lt;/code> if there are no rows in the result set&#xA;     * @exception SQLException if a database access error&#xA;     * occurs or the result set type is &lt;code>TYPE_FORWARD_ONLY&lt;/code>&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRow">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the current row number.  The first row is number 1, the&#xA;     * second number 2, and so on.  &#xA;     *&#xA;     * @return the current row number; &lt;code>0&lt;/code> if there is no current row&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="absolute">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Moves the cursor to the given row number in&#xA;     * this &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * &lt;p>If the row number is positive, the cursor moves to &#xA;     * the given row number with respect to the&#xA;     * beginning of the result set.  The first row is row 1, the second&#xA;     * is row 2, and so on. &#xA;     *&#xA;     * &lt;p>If the given row number is negative, the cursor moves to&#xA;     * an absolute row position with respect to&#xA;     * the end of the result set.  For example, calling the method&#xA;     * &lt;code>absolute(-1)&lt;/code> positions the &#xA;     * cursor on the last row; calling the method &lt;code>absolute(-2)&lt;/code>&#xA;     * moves the cursor to the next-to-last row, and so on.&#xA;     *&#xA;     * &lt;p>An attempt to position the cursor beyond the first/last row in&#xA;     * the result set leaves the cursor before the first row or after &#xA;     * the last row.&#xA;     *&#xA;     * &lt;p>&lt;B>Note:&lt;/B> Calling &lt;code>absolute(1)&lt;/code> is the same&#xA;     * as calling &lt;code>first()&lt;/code>. Calling &lt;code>absolute(-1)&lt;/code> &#xA;     * is the same as calling &lt;code>last()&lt;/code>.&#xA;     *&#xA;     * @param row the number of the row to which the cursor should move.&#xA;     *        A positive number indicates the row number counting from the&#xA;     *        beginning of the result set; a negative number indicates the&#xA;     *        row number counting from the end of the result set&#xA;     * @return &lt;code>true&lt;/code> if the cursor is on the result set;&#xA;     * &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error&#xA;     * occurs, or the result set type is &lt;code>TYPE_FORWARD_ONLY&lt;/code>&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="row">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="relative">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Moves the cursor a relative number of rows, either positive or negative.&#xA;     * Attempting to move beyond the first/last row in the&#xA;     * result set positions the cursor before/after the&#xA;     * the first/last row. Calling &lt;code>relative(0)&lt;/code> is valid, but does&#xA;     * not change the cursor position.&#xA;     *&#xA;     * &lt;p>Note: Calling the method &lt;code>relative(1)&lt;/code>&#xA;     * is identical to calling the method &lt;code>next()&lt;/code> and &#xA;     * calling the method &lt;code>relative(-1)&lt;/code> is identical&#xA;     * to calling the method &lt;code>previous()&lt;/code>.&#xA;     *&#xA;     * @param rows an &lt;code>int&lt;/code> specifying the number of rows to&#xA;     *        move from the current row; a positive number moves the cursor&#xA;     *        forward; a negative number moves the cursor backward&#xA;     * @return &lt;code>true&lt;/code> if the cursor is on a row;&#xA;     *         &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs, &#xA;     *            there is no current row, or the result set type is &#xA;     *            &lt;code>TYPE_FORWARD_ONLY&lt;/code>&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rows">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="previous">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Moves the cursor to the previous row in this&#xA;     * &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the cursor is on a valid row; &#xA;     * &lt;code>false&lt;/code> if it is off the result set&#xA;     * @exception SQLException if a database access error&#xA;     * occurs or the result set type is &lt;code>TYPE_FORWARD_ONLY&lt;/code>&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:Field" name="FETCH_FORWARD">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1000"/>
      <typeReference xsi:type="types:Int">
        <comments>//---------------------------------------------------------------------</comments>
        <comments>// Properties</comments>
        <comments>//---------------------------------------------------------------------</comments>
        <comments>/**&#xA;     * The constant indicating that the rows in a result set will be &#xA;     * processed in a forward direction; first-to-last.&#xA;     * This constant is used by the method &lt;code>setFetchDirection&lt;/code>&#xA;     * as a hint to the driver, which the driver may ignore.&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="FETCH_REVERSE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1001"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the rows in a result set will be &#xA;     * processed in a reverse direction; last-to-first.&#xA;     * This constant is used by the method &lt;code>setFetchDirection&lt;/code>&#xA;     * as a hint to the driver, which the driver may ignore.&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="FETCH_UNKNOWN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1002"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the order in which rows in a &#xA;     * result set will be processed is unknown.&#xA;     * This constant is used by the method &lt;code>setFetchDirection&lt;/code>&#xA;     * as a hint to the driver, which the driver may ignore.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFetchDirection">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Gives a hint as to the direction in which the rows in this&#xA;     * &lt;code>ResultSet&lt;/code> object will be processed. &#xA;     * The initial value is determined by the &#xA;     * &lt;code>Statement&lt;/code> object&#xA;     * that produced this &lt;code>ResultSet&lt;/code> object.&#xA;     * The fetch direction may be changed at any time.&#xA;     *&#xA;     * @param direction an &lt;code>int&lt;/code> specifying the suggested&#xA;     *        fetch direction; one of &lt;code>ResultSet.FETCH_FORWARD&lt;/code>, &#xA;     *        &lt;code>ResultSet.FETCH_REVERSE&lt;/code>, or&#xA;     *        &lt;code>ResultSet.FETCH_UNKNOWN&lt;/code>&#xA;     * @exception SQLException if a database access error occurs or&#xA;     * the result set type is &lt;code>TYPE_FORWARD_ONLY&lt;/code> and the fetch&#xA;     * direction is not &lt;code>FETCH_FORWARD&lt;/code>&#xA;     * @since 1.2&#xA;     * @see Statement#setFetchDirection&#xA;     * @see #getFetchDirection&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="direction">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFetchDirection">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the fetch direction for this &#xA;     * &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return the current fetch direction for this &lt;code>ResultSet&lt;/code> object &#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     * @see #setFetchDirection&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFetchSize">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Gives the JDBC driver a hint as to the number of rows that should &#xA;     * be fetched from the database when more rows are needed for this &#xA;     * &lt;code>ResultSet&lt;/code> object.&#xA;     * If the fetch size specified is zero, the JDBC driver &#xA;     * ignores the value and is free to make its own best guess as to what&#xA;     * the fetch size should be.  The default value is set by the &#xA;     * &lt;code>Statement&lt;/code> object&#xA;     * that created the result set.  The fetch size may be changed at any time.&#xA;     *&#xA;     * @param rows the number of rows to fetch&#xA;     * @exception SQLException if a database access error occurs or the&#xA;     * condition &lt;code>0 &lt;= rows &lt;= Statement.getMaxRows()&lt;/code> is not satisfied&#xA;     * @since 1.2&#xA;     * @see #getFetchSize&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rows">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFetchSize">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the fetch size for this &#xA;     * &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return the current fetch size for this &lt;code>ResultSet&lt;/code> object&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     * @see #setFetchSize&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:Field" name="TYPE_FORWARD_ONLY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1003"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating the type for a &lt;code>ResultSet&lt;/code> object&#xA;     * whose cursor may move only forward.&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="TYPE_SCROLL_INSENSITIVE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1004"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating the type for a &lt;code>ResultSet&lt;/code> object&#xA;     * that is scrollable but generally not sensitive to changes made by others.&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="TYPE_SCROLL_SENSITIVE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1005"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating the type for a &lt;code>ResultSet&lt;/code> object&#xA;     * that is scrollable and generally sensitive to changes made by others.&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getType">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the type of this &lt;code>ResultSet&lt;/code> object.  &#xA;     * The type is determined by the &lt;code>Statement&lt;/code> object&#xA;     * that created the result set.&#xA;     *&#xA;     * @return &lt;code>ResultSet.TYPE_FORWARD_ONLY&lt;/code>,&#xA;     *         &lt;code>ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code>,&#xA;     *         or &lt;code>ResultSet.TYPE_SCROLL_SENSITIVE&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:Field" name="CONCUR_READ_ONLY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1007"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating the concurrency mode for a&#xA;     * &lt;code>ResultSet&lt;/code> object that may NOT be updated.&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="CONCUR_UPDATABLE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1008"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating the concurrency mode for a&#xA;     * &lt;code>ResultSet&lt;/code> object that may be updated.&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getConcurrency">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the concurrency mode of this &lt;code>ResultSet&lt;/code> object.&#xA;     * The concurrency used is determined by the &#xA;     * &lt;code>Statement&lt;/code> object that created the result set.&#xA;     *&#xA;     * @return the concurrency type, either&#xA;     *         &lt;code>ResultSet.CONCUR_READ_ONLY&lt;/code>&#xA;     *         or &lt;code>ResultSet.CONCUR_UPDATABLE&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="rowUpdated">
      <typeReference xsi:type="types:Boolean">
        <comments>//---------------------------------------------------------------------</comments>
        <comments>// Updates</comments>
        <comments>//---------------------------------------------------------------------</comments>
        <comments>/**&#xA;     * Retrieves whether the current row has been updated.  The value returned &#xA;     * depends on whether or not the result set can detect updates.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if both (1) the row has been visibly updated&#xA;     *         by the owner or another and (2) updates are detected&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @see DatabaseMetaData#updatesAreDetected&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="rowInserted">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves whether the current row has had an insertion.&#xA;     * The value returned depends on whether or not this&#xA;     * &lt;code>ResultSet&lt;/code> object can detect visible inserts.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if a row has had an insertion&#xA;     * and insertions are detected; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     * &#xA;     * @see DatabaseMetaData#insertsAreDetected&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="rowDeleted">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Retrieves whether a row has been deleted.  A deleted row may leave&#xA;     * a visible &quot;hole&quot; in a result set.  This method can be used to&#xA;     * detect holes in a result set.  The value returned depends on whether &#xA;     * or not this &lt;code>ResultSet&lt;/code> object can detect deletions.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if a row was deleted and deletions are detected;&#xA;     * &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     * &#xA;     * @see DatabaseMetaData#deletesAreDetected&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateNull">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Gives a nullable column a null value.&#xA;     * &#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code>&#xA;     * or &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBoolean">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>boolean&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateByte">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>byte&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateShort">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>short&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateInt">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with an &lt;code>int&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateLong">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>long&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateFloat">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>float&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateDouble">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>double&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBigDecimal">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.math.BigDecimal&lt;/code> &#xA;     * value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateString">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>String&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBytes">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>byte&lt;/code> array value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateDate">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Date&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateTime">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Time&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateTimestamp">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Timestamp&lt;/code>&#xA;     * value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateAsciiStream">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with an ascii stream value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @param length the length of the stream&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBinaryStream">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with a binary stream value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value     &#xA;     * @param length the length of the stream&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateCharacterStream">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a character stream value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @param length the length of the stream&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateObject">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with an &lt;code>Object&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @param scale for &lt;code>java.sql.Types.DECIMA&lt;/code>&#xA;     *  or &lt;code>java.sql.Types.NUMERIC&lt;/code> types,&#xA;     *  this is the number of digits after the decimal point.  For all other&#xA;     *  types this value will be ignored.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateObject">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with an &lt;code>Object&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateNull">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>null&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBoolean">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>boolean&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateByte">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>byte&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateShort">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>short&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateInt">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with an &lt;code>int&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateLong">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>long&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateFloat">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>float&#x9;&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateDouble">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>double&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBigDecimal">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.BigDecimal&lt;/code>&#xA;     * value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateString">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>String&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBytes">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a byte array value.&#xA;     *&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> &#xA;     * or &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateDate">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Date&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateTime">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Time&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateTimestamp">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Timestamp&lt;/code>&#xA;     * value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateAsciiStream">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with an ascii stream value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @param length the length of the stream&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBinaryStream">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with a binary stream value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @param length the length of the stream&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateCharacterStream">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a character stream value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param reader the &lt;code>java.io.Reader&lt;/code> object containing&#xA;     *        the new column value&#xA;     * @param length the length of the stream&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateObject">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with an &lt;code>Object&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @param scale for &lt;code>java.sql.Types.DECIMAL&lt;/code>&#xA;     *  or &lt;code>java.sql.Types.NUMERIC&lt;/code> types,&#xA;     *  this is the number of digits after the decimal point.  For all other&#xA;     *  types this value will be ignored.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateObject">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with an &lt;code>Object&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insertRow">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Inserts the contents of the insert row into this &#xA;     * &lt;code>ResultSet&lt;/code> object and into the database.  &#xA;     * The cursor must be on the insert row when this method is called.&#xA;     *&#xA;     * @exception SQLException if a database access error occurs,&#xA;     * if this method is called when the cursor is not on the insert row,&#xA;     * or if not all of non-nullable columns in&#xA;     * the insert row have been given a value&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateRow">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the underlying database with the new contents of the&#xA;     * current row of this &lt;code>ResultSet&lt;/code> object.&#xA;     * This method cannot be called when the cursor is on the insert row.&#xA;     *&#xA;     * @exception SQLException if a database access error occurs or&#xA;     * if this method is called when the cursor is on the insert row&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="deleteRow">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Deletes the current row from this &lt;code>ResultSet&lt;/code> object &#xA;     * and from the underlying database.  This method cannot be called when&#xA;     * the cursor is on the insert row.&#xA;     *&#xA;     * @exception SQLException if a database access error occurs&#xA;     * or if this method is called when the cursor is on the insert row&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="refreshRow">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Refreshes the current row with its most recent value in &#xA;     * the database.  This method cannot be called when&#xA;     * the cursor is on the insert row.&#xA;     *&#xA;     * &lt;P>The &lt;code>refreshRow&lt;/code> method provides a way for an &#xA;     * application to &#xA;     * explicitly tell the JDBC driver to refetch a row(s) from the&#xA;     * database.  An application may want to call &lt;code>refreshRow&lt;/code> when &#xA;     * caching or prefetching is being done by the JDBC driver to&#xA;     * fetch the latest value of a row from the database.  The JDBC driver &#xA;     * may actually refresh multiple rows at once if the fetch size is &#xA;     * greater than one.&#xA;     * &#xA;     * &lt;P> All values are refetched subject to the transaction isolation &#xA;     * level and cursor sensitivity.  If &lt;code>refreshRow&lt;/code> is called after&#xA;     * calling an updater method, but before calling&#xA;     * the method &lt;code>updateRow&lt;/code>, then the&#xA;     * updates made to the row are lost.  Calling the method&#xA;     * &lt;code>refreshRow&lt;/code> frequently will likely slow performance.&#xA;     *&#xA;     * @exception SQLException if a database access error&#xA;     * occurs or if this method is called when the cursor is on the insert row&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="cancelRowUpdates">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Cancels the updates made to the current row in this&#xA;     * &lt;code>ResultSet&lt;/code> object.&#xA;     * This method may be called after calling an&#xA;     * updater method(s) and before calling&#xA;     * the method &lt;code>updateRow&lt;/code> to roll back &#xA;     * the updates made to a row.  If no updates have been made or &#xA;     * &lt;code>updateRow&lt;/code> has already been called, this method has no &#xA;     * effect.&#xA;     *&#xA;     * @exception SQLException if a database access error&#xA;     *            occurs or if this method is called when the cursor is &#xA;     *            on the insert row&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="moveToInsertRow">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Moves the cursor to the insert row.  The current cursor position is &#xA;     * remembered while the cursor is positioned on the insert row.&#xA;     *&#xA;     * The insert row is a special row associated with an updatable&#xA;     * result set.  It is essentially a buffer where a new row may&#xA;     * be constructed by calling the updater methods prior to &#xA;     * inserting the row into the result set.  &#xA;     *&#xA;     * Only the updater, getter,&#xA;     * and &lt;code>insertRow&lt;/code> methods may be &#xA;     * called when the cursor is on the insert row.  All of the columns in &#xA;     * a result set must be given a value each time this method is&#xA;     * called before calling &lt;code>insertRow&lt;/code>.  &#xA;     * An updater method must be called before a&#xA;     * getter method can be called on a column value.&#xA;     *&#xA;     * @exception SQLException if a database access error occurs&#xA;     * or the result set is not updatable&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="moveToCurrentRow">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Moves the cursor to the remembered cursor position, usually the&#xA;     * current row.  This method has no effect if the cursor is not on &#xA;     * the insert row. &#xA;     *&#xA;     * @exception SQLException if a database access error occurs&#xA;     * or the result set is not updatable&#xA;     * @since 1.2&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStatement">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the &lt;code>Statement&lt;/code> object that produced this &#xA;     * &lt;code>ResultSet&lt;/code> object.&#xA;     * If the result set was generated some other way, such as by a&#xA;     * &lt;code>DatabaseMetaData&lt;/code> method, this method returns &#xA;     * &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return the &lt;code>Statment&lt;/code> object that produced &#xA;     * this &lt;code>ResultSet&lt;/code> object or &lt;code>null&lt;/code>&#xA;     * if the result set was produced some other way&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Statement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as an &lt;code>Object&lt;/code>&#xA;     * in the Java programming language.&#xA;     * If the value is an SQL &lt;code>NULL&lt;/code>, &#xA;     * the driver returns a Java &lt;code>null&lt;/code>.&#xA;     * This method uses the given &lt;code>Map&lt;/code> object&#xA;     * for the custom mapping of the&#xA;     * SQL structured or distinct type that is being retrieved.&#xA;     *&#xA;     * @param i the first column is 1, the second is 2, ...&#xA;     * @param map a &lt;code>java.util.Map&lt;/code> object that contains the mapping &#xA;     * from SQL type names to classes in the Java programming language&#xA;     * @return an &lt;code>Object&lt;/code> in the Java programming language&#xA;     * representing the SQL value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="map">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                  <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRef">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>Ref&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param i the first column is 1, the second is 2, ...&#xA;     * @return a &lt;code>Ref&lt;/code> object representing an SQL &lt;code>REF&lt;/code> &#xA;     *         value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Ref.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBlob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>Blob&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param i the first column is 1, the second is 2, ...&#xA;     * @return a &lt;code>Blob&lt;/code> object representing the SQL &#xA;     *         &lt;code>BLOB&lt;/code> value in the specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Blob.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>Clob&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param i the first column is 1, the second is 2, ...&#xA;     * @return a &lt;code>Clob&lt;/code> object representing the SQL &#xA;     *         &lt;code>CLOB&lt;/code> value in the specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Clob.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getArray">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as an &lt;code>Array&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param i the first column is 1, the second is 2, ...&#xA;     * @return an &lt;code>Array&lt;/code> object representing the SQL &#xA;     *         &lt;code>ARRAY&lt;/code> value in the specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Array.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getObject">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as an &lt;code>Object&lt;/code>&#xA;     * in the Java programming language.&#xA;     * If the value is an SQL &lt;code>NULL&lt;/code>, &#xA;     * the driver returns a Java &lt;code>null&lt;/code>.&#xA;     * This method uses the specified &lt;code>Map&lt;/code> object for&#xA;     * custom mapping if appropriate.&#xA;     *&#xA;     * @param colName the name of the column from which to retrieve the value&#xA;     * @param map a &lt;code>java.util.Map&lt;/code> object that contains the mapping &#xA;     * from SQL type names to classes in the Java programming language&#xA;     * @return an &lt;code>Object&lt;/code> representing the SQL value in the &#xA;     *         specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="colName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="map">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                  <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRef">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>Ref&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param colName the column name&#xA;     * @return a &lt;code>Ref&lt;/code> object representing the SQL &lt;code>REF&lt;/code> &#xA;     *         value in the specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Ref.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="colName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBlob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>Blob&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param colName the name of the column from which to retrieve the value&#xA;     * @return a &lt;code>Blob&lt;/code> object representing the SQL &lt;code>BLOB&lt;/code> &#xA;     *         value in the specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Blob.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="colName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>Clob&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param colName the name of the column from which to retrieve the value&#xA;     * @return a &lt;code>Clob&lt;/code> object representing the SQL &lt;code>CLOB&lt;/code>&#xA;     * value in the specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Clob.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="colName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getArray">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as an &lt;code>Array&lt;/code> object&#xA;     * in the Java programming language.&#xA;     *&#xA;     * @param colName the name of the column from which to retrieve the value&#xA;     * @return an &lt;code>Array&lt;/code> object representing the SQL &lt;code>ARRAY&lt;/code> value in&#xA;     *         the specified column&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Array.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="colName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.sql.Date&lt;/code> object&#xA;     * in the Java programming language.&#xA;     * This method uses the given calendar to construct an appropriate millisecond&#xA;     * value for the date if the underlying database does not store&#xA;     * timezone information.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object&#xA;     * to use in constructing the date&#xA;     * @return the column value as a &lt;code>java.sql.Date&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.sql.Date&lt;/code> object&#xA;     * in the Java programming language.&#xA;     * This method uses the given calendar to construct an appropriate millisecond&#xA;     * value for the date if the underlying database does not store&#xA;     * timezone information.&#xA;     *&#xA;     * @param columnName the SQL name of the column from which to retrieve the value&#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object&#xA;     * to use in constructing the date&#xA;     * @return the column value as a &lt;code>java.sql.Date&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.sql.Time&lt;/code> object&#xA;     * in the Java programming language.&#xA;     * This method uses the given calendar to construct an appropriate millisecond&#xA;     * value for the time if the underlying database does not store&#xA;     * timezone information.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object&#xA;     * to use in constructing the time&#xA;     * @return the column value as a &lt;code>java.sql.Time&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTime">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.sql.Time&lt;/code> object&#xA;     * in the Java programming language.&#xA;     * This method uses the given calendar to construct an appropriate millisecond&#xA;     * value for the time if the underlying database does not store&#xA;     * timezone information.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object&#xA;     * to use in constructing the time&#xA;     * @return the column value as a &lt;code>java.sql.Time&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTimestamp">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.sql.Timestamp&lt;/code> object&#xA;     * in the Java programming language.&#xA;     * This method uses the given calendar to construct an appropriate millisecond&#xA;     * value for the timestamp if the underlying database does not store&#xA;     * timezone information.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object&#xA;     * to use in constructing the timestamp&#xA;     * @return the column value as a &lt;code>java.sql.Timestamp&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTimestamp">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.sql.Timestamp&lt;/code> object&#xA;     * in the Java programming language.&#xA;     * This method uses the given calendar to construct an appropriate millisecond&#xA;     * value for the timestamp if the underlying database does not store&#xA;     * timezone information.&#xA;     *&#xA;     * @param columnName the SQL name of the column&#xA;     * @param cal the &lt;code>java.util.Calendar&lt;/code> object&#xA;     * to use in constructing the date&#xA;     * @return the column value as a &lt;code>java.sql.Timestamp&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>sql</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Calendar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:Field" name="HOLD_CURSORS_OVER_COMMIT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int">
        <comments>//-------------------------- JDBC 3.0 ----------------------------------------</comments>
        <comments>/**&#xA;     * The constant indicating that &lt;code>ResultSet&lt;/code> objects should not&#xA;     * be closed when the method &lt;code>Connection.commit&lt;/code> is called.&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="CLOSE_CURSORS_AT_COMMIT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that &lt;code>ResultSet&lt;/code> objects should be&#xA;     * closed when the method &lt;code>Connection.commit&lt;/code> is called.&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.net.URL&lt;/code>&#xA;     * object in the Java programming language.&#xA;     * &#xA;     * @param columnIndex the index of the column 1 is the first, 2 is the second,...&#xA;     * @return the column value as a &lt;code>java.net.URL&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs,&#xA;     *            or if a URL is malformed&#xA;     * @since 1.4&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>net</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getURL">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Retrieves the value of the designated column in the current row&#xA;     * of this &lt;code>ResultSet&lt;/code> object as a &lt;code>java.net.URL&lt;/code>&#xA;     * object in the Java programming language.&#xA;     * &#xA;     * @param columnName the SQL name of the column&#xA;     * @return the column value as a &lt;code>java.net.URL&lt;/code> object;&#xA;     * if the value is SQL &lt;code>NULL&lt;/code>,&#xA;     * the value returned is &lt;code>null&lt;/code> in the Java programming language&#xA;     * @exception SQLException if a database access error occurs&#xA;     *            or if a URL is malformed&#xA;     * @since 1.4&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>net</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateRef">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Ref&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Ref.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateRef">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with a &lt;code>java.sql.Ref&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Ref.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBlob">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Blob&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Blob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateBlob">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with a &lt;code>java.sql.Blob&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Blob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateClob">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Clob&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Clob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateClob">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with a &lt;code>java.sql.Clob&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Clob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateArray">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Updates the designated column with a &lt;code>java.sql.Array&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnIndex the first column is 1, the second is 2, ...&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Array.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="updateArray">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Updates the designated column with a &lt;code>java.sql.Array&lt;/code> value.&#xA;     * The updater methods are used to update column values in the&#xA;     * current row or the insert row.  The updater methods do not &#xA;     * update the underlying database; instead the &lt;code>updateRow&lt;/code> or&#xA;     * &lt;code>insertRow&lt;/code> methods are called to update the database.&#xA;     *&#xA;     * @param columnName the name of the column&#xA;     * @param x the new column value&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="columnName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Array.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A table of data representing a database result set, which&#xA; * is usually generated by executing a statement that queries the database. &#xA; * &#xA; * &lt;P>A &lt;code>ResultSet&lt;/code> object  maintains a cursor pointing&#xA; * to its current row of data.  Initially the cursor is positioned &#xA; * before the first row. The &lt;code>next&lt;/code> method moves the &#xA; * cursor to the next row, and because it returns &lt;code>false&lt;/code>&#xA; * when there are no more rows in the &lt;code>ResultSet&lt;/code> object,&#xA; * it can be used in a &lt;code>while&lt;/code> loop to iterate through &#xA; * the result set.&#xA; * &lt;P>&#xA; * A default &lt;code>ResultSet&lt;/code> object is not updatable and&#xA; * has a cursor that moves forward only.  Thus, you can&#xA; * iterate through it only once and only from the first row to the&#xA; * last row. It is possible to&#xA; * produce &lt;code>ResultSet&lt;/code> objects that are scrollable and/or&#xA; * updatable.  The following code fragment, in which &lt;code>con&lt;/code>&#xA; * is a valid &lt;code>Connection&lt;/code> object, illustrates how to make &#xA; * a result set that is scrollable and insensitive to updates by others, and &#xA; * that is updatable. See &lt;code>ResultSet&lt;/code> fields for other&#xA; * options.&#xA; * &lt;PRE>&#xA; *&#xA; *       Statement stmt = con.createStatement(&#xA; *                                      ResultSet.TYPE_SCROLL_INSENSITIVE,&#xA; *                                      ResultSet.CONCUR_UPDATABLE);&#xA; *       ResultSet rs = stmt.executeQuery(&quot;SELECT a, b FROM TABLE2&quot;);&#xA; *       // rs will be scrollable, will not show changes made by others,&#xA; *       // and will be updatable&#xA; *&#xA; * &lt;/PRE>&#xA; * The &lt;code>ResultSet&lt;/code> interface provides &#xA; * &lt;i>getter&lt;/i> methods (&lt;code>getBoolean&lt;/code>, &lt;code>getLong&lt;/code>, and so on)&#xA; * for retrieving column values from the current row.&#xA; * Values can be retrieved using either the index number of the&#xA; * column or the name of the column.  In general, using the &#xA; * column index will be more efficient.  Columns are numbered from 1.&#xA; * For maximum portability, result set columns within each row should be&#xA; * read in left-to-right order, and each column should be read only once.&#xA; *&#xA; * &lt;P>For the getter methods, a JDBC driver attempts&#xA; * to convert the underlying data to the Java type specified in the&#xA; * getter method and returns a suitable Java value.  The JDBC specification &#xA; * has a table showing the allowable mappings from SQL types to Java types&#xA; * that can be used by the &lt;code>ResultSet&lt;/code> getter methods.&#xA; * &lt;P>&#xA; * &lt;P>Column names used as input to getter methods are case&#xA; * insensitive.  When a getter method is called  with&#xA; * a column name and several columns have the same name, &#xA; * the value of the first matching column will be returned. &#xA; * The column name option is&#xA; * designed to be used when column names are used in the SQL&#xA; * query that generated the result set.&#xA; * For columns that are NOT explicitly named in the query, it&#xA; * is best to use column numbers. If column names are used, there is&#xA; * no way for the programmer to guarantee that they actually refer to&#xA; * the intended columns.&#xA; * &lt;P>&#xA; * A set of updater methods were added to this interface&#xA; * in the JDBC 2.0 API (JDK 1.2).&#xA; * The comments regarding parameters&#xA; * to the getter methods also apply to parameters to the&#xA; * updater methods.&#xA; *&lt;P>&#xA; * The updater methods may be used in two ways:&#xA; * &lt;ol>&#xA; * &lt;LI>to update a column value in the current row.  In a scrollable&#xA; *     &lt;code>ResultSet&lt;/code> object, the cursor can be moved backwards&#xA; *     and forwards, to an absolute position, or to a position&#xA; *     relative to the current row.&#xA; *     The following code fragment updates the &lt;code>NAME&lt;/code> column&#xA; *     in the fifth row of the &lt;code>ResultSet&lt;/code> object&#xA; *     &lt;code>rs&lt;/code> and then uses the method &lt;code>updateRow&lt;/code>&#xA; *     to update the data source table from which &lt;code>rs&lt;/code> was derived.&#xA; * &lt;PRE>&#xA; *&#xA; *       rs.absolute(5); // moves the cursor to the fifth row of rs&#xA; *       rs.updateString(&quot;NAME&quot;, &quot;AINSWORTH&quot;); // updates the &#xA; *          // &lt;code>NAME&lt;/code> column of row 5 to be &lt;code>AINSWORTH&lt;/code>&#xA; *       rs.updateRow(); // updates the row in the data source&#xA; *&#xA; * &lt;/PRE>&#xA; * &lt;LI>to insert column values into the insert row.  An updatable&#xA; *     &lt;code>ResultSet&lt;/code> object has a special row associated with&#xA; *     it that serves as a staging area for building a row to be inserted.&#xA; *     The following code fragment moves the cursor to the insert row, builds&#xA; *     a three-column row, and inserts it into &lt;code>rs&lt;/code> and into&#xA; *     the data source table using the method &lt;code>insertRow&lt;/code>.&#xA; * &lt;PRE>&#xA; *&#xA; *       rs.moveToInsertRow(); // moves cursor to the insert row&#xA; *       rs.updateString(1, &quot;AINSWORTH&quot;); // updates the &#xA; *          // first column of the insert row to be &lt;code>AINSWORTH&lt;/code>&#xA; *       rs.updateInt(2,35); // updates the second column to be &lt;code>35&lt;/code>&#xA; *       rs.updateBoolean(3, true); // updates the third column to &lt;code>true&lt;/code>&#xA; *       rs.insertRow();&#xA; *       rs.moveToCurrentRow();&#xA; *&#xA; * &lt;/PRE>&#xA; * &lt;/ol>&#xA; * &lt;P>A &lt;code>ResultSet&lt;/code> object is automatically closed when the&#xA; * &lt;code>Statement&lt;/code> object that&#xA; * generated it is closed, re-executed, or used&#xA; * to retrieve the next result from a sequence of multiple results.&#xA; * &#xA; * &lt;P>The number, types and properties of a &lt;code>ResultSet&lt;/code>&#xA; * object's columns are provided by the &lt;code>ResulSetMetaData&lt;/code>&#xA; * object returned by the &lt;code>ResultSet.getMetaData&lt;/code> method.&#xA; *&#xA; * @see Statement#executeQuery &#xA; * @see Statement#getResultSet &#xA; * @see ResultSetMetaData &#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
