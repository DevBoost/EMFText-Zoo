<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="BatchUpdateException.java">
  <comments>/*&#xA; * @(#)BatchUpdateException.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Class" name="BatchUpdateException">
    <members xsi:type="members:Constructor" name="BatchUpdateException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.2"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reason">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="SQLState">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vendorCode">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="updateCounts">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Constructs a fully-specified &lt;code>BatchUpdateException&lt;/code> object,&#xA;   * initializing it with the given values.&#xA;   * @param reason a description of the error &#xA;   * @param SQLState an X/OPEN code identifying the error&#xA;   * @param vendorCode an exception code used by a particular&#xA;   * database vendor&#xA;   * @param updateCounts an array of &lt;code>int&lt;/code>, with each element&#xA;   * indicating the update count for a SQL command that executed &#xA;   * successfully before the exception was thrown&#xA;   * @since 1.2&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="BatchUpdateException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reason">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="SQLState">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="updateCounts">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Constructs a &lt;code>BatchUpdateException&lt;/code> initialized with &#xA;   * the given arguments (&lt;code>reason&lt;/code>,&#xA;   * &lt;code>SQLState&lt;/code>, and &lt;code>updateCounts&lt;/code>) and 0 for the vendor&#xA;   * code.&#xA;   * @param reason a description of the exception &#xA;   * @param SQLState an X/OPEN code identifying the exception &#xA;   * @param updateCounts an array of &lt;code>int&lt;/code>, with each element  &#xA;   * indicating the update count for a SQL command that executed&#xA;   * successfully before the exception was thrown  &#xA;   * @since 1.2&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="BatchUpdateException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reason">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="updateCounts">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Constructs a &lt;code>BatchUpdateException&lt;/code> initialized with&#xA;   * &lt;code>reason&lt;/code>, &lt;code>updateCounts&lt;/code> and &lt;code>null&lt;/code>&#xA;   * for the SQLState and 0 for the vendorCode.&#xA;   * @param reason a description of the exception &#xA;   * @param updateCounts an array of &lt;code>int&lt;/code>, with each element&#xA;   * indicating the update count for a SQL command that executed&#xA;   * successfully before the exception was thrown&#xA;   * @since 1.2&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="BatchUpdateException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="updateCounts">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Constructs a &lt;code>BatchUpdateException&lt;/code> initialized to &#xA;   * &lt;code>null&lt;/code> for the reason and SQLState and 0 for the&#xA;   * vendor code.&#xA;   * @param updateCounts an array of &lt;code>int&lt;/code>, with each element&#xA;   * indicating the update count for a SQL command that executed&#xA;   * successfully before the exception was thrown&#xA;   * @since 1.2&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="BatchUpdateException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Constructs a &lt;code>BatchUpdateException&lt;/code> object &#xA;   * with the reason, SQLState, and update count initialized to&#xA;   * &lt;code>null&lt;/code> and the vendor code initialized to 0.&#xA;   * @since 1.2&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getUpdateCounts">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Retrieves the update count for each update statement in the batch&#xA;   * update that executed successfully before this exception occurred.&#xA;   * A driver that implements batch updates may or may not continue to&#xA;   * process the remaining commands in a batch when one of the commands&#xA;   * fails to execute properly. If the driver continues processing commands,&#xA;   * the array returned by this method will have as many elements as&#xA;   * there are commands in the batch; otherwise, it will contain an&#xA;   * update count for each command that executed successfully before&#xA;   * the &lt;code>BatchUpdateException&lt;/code> was thrown.&#xA;   *&lt;P>&#xA;   * The possible return values for this method were modified for&#xA;   * the Java 2 SDK, Standard Edition, version 1.3.  This was done to&#xA;   * accommodate the new option of continuing to process commands&#xA;   * in a batch update after a &lt;code>BatchUpdateException&lt;/code> object&#xA;   * has been thrown.&#xA;   *&#xA;   * @return an array of &lt;code>int&lt;/code> containing the update counts&#xA;   * for the updates that were executed successfully before this error&#xA;   * occurred.  Or, if the driver continues to process commands after an&#xA;   * error, one of the following for every command in the batch:&#xA;   * &lt;OL>&#xA;   * &lt;LI>an update count&#xA;   *  &lt;LI>&lt;code>Statement.SUCCESS_NO_INFO&lt;/code> to indicate that the command&#xA;   *     executed successfully but the number of rows affected is unknown&#xA;   *  &lt;LI>&lt;code>Statement.EXECUTE_FAILED&lt;/code> to indicate that the command &#xA;   *     failed to execute successfully&#xA;   * &lt;/OL>&#xA;   * @since 1.3&#xA;   */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="updateCounts">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;   * The array that describes the outcome of a batch execution.&#xA;   * @serial&#xA;   * @since 1.2&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An exception thrown when an error&#xA; * occurs during a batch update operation.  In addition to the&#xA; * information provided by {@link SQLException}, a &#xA; * &lt;code>BatchUpdateException&lt;/code> provides the update&#xA; * counts for all commands that were executed successfully during the&#xA; * batch update, that is, all commands that were executed before the error &#xA; * occurred.  The order of elements in an array of update counts&#xA; * corresponds to the order in which commands were added to the batch.&#xA; * &lt;P>&#xA; * After a command in a batch update fails to execute properly&#xA; * and a &lt;code>BatchUpdateException&lt;/code> is thrown, the driver&#xA; * may or may not continue to process the remaining commands in&#xA; * the batch.  If the driver continues processing after a failure,&#xA; * the array returned by the method &#xA; * &lt;code>BatchUpdateException.getUpdateCounts&lt;/code> will have &#xA; * an element for every command in the batch rather than only&#xA; * elements for the commands that executed successfully before &#xA; * the error.  In the case where the driver continues processing&#xA; * commands, the array element for any command&#xA; * that failed is &lt;code>Statement.EXECUTE_FAILED&lt;/code>.&#xA; * &lt;P>&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
