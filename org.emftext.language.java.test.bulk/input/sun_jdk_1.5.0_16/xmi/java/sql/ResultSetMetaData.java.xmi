<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ResultSetMetaData.java">
  <comments>/*&#xA; * @(#)ResultSetMetaData.java&#x9;1.27 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ResultSetMetaData">
    <members xsi:type="members:InterfaceMethod" name="getColumnCount">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the number of columns in this &lt;code>ResultSet&lt;/code> object.&#xA;     *&#xA;     * @return the number of columns&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAutoIncrement">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether the designated column is automatically numbered, thus read-only.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCaseSensitive">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether a column's case matters.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSearchable">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether the designated column can be used in a where clause.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCurrency">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether the designated column is a cash value.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isNullable">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Indicates the nullability of values in the designated column.&#x9;&#x9;&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return the nullability status of the given column; one of &lt;code>columnNoNulls&lt;/code>,&#xA;     *          &lt;code>columnNullable&lt;/code> or &lt;code>columnNullableUnknown&lt;/code>&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:Field" name="columnNoNulls">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that a&#xA;     * column does not allow &lt;code>NULL&lt;/code> values.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="columnNullable">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that a&#xA;     * column allows &lt;code>NULL&lt;/code> values.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="columnNullableUnknown">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The constant indicating that the&#xA;     * nullability of a column's values is unknown.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSigned">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether values in the designated column are signed numbers.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnDisplaySize">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Indicates the designated column's normal maximum width in characters.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return the normal maximum number of characters allowed as the width&#xA;     *          of the designated column&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnLabel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the designated column's suggested title for use in printouts and&#xA;     * displays.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return the suggested column title&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the designated column's name.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return column name&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSchemaName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Get the designated column's table's schema.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return schema name or &quot;&quot; if not applicable&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrecision">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Get the designated column's number of decimal digits.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return precision&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScale">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the designated column's number of digits to right of the decimal point.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return scale&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTableName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the designated column's table name. &#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return table name or &quot;&quot; if not applicable&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCatalogName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the designated column's table's catalog name.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return the name of the catalog for the table in which the given column&#xA;     *          appears or &quot;&quot; if not applicable&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnType">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Retrieves the designated column's SQL type.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return SQL type from java.sql.Types&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @see Types&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnTypeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the designated column's database-specific type name.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return type name used by the database. If the column type is&#xA;     * a user-defined type, then a fully-qualified type name is returned.&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isReadOnly">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether the designated column is definitely not writable.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isWritable">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether it is possible for a write on the designated column to succeed.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isDefinitelyWritable">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether a write on the designated column will definitely succeed.&#x9;&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return &lt;code>true&lt;/code> if so; &lt;code>false&lt;/code> otherwise&#xA;     * @exception SQLException if a database access error occurs&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColumnClassName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>//--------------------------JDBC 2.0-----------------------------------</comments>
          <comments>/**&#xA;     * &lt;p>Returns the fully-qualified name of the Java class whose instances &#xA;     * are manufactured if the method &lt;code>ResultSet.getObject&lt;/code>&#xA;     * is called to retrieve a value &#xA;     * from the column.  &lt;code>ResultSet.getObject&lt;/code> may return a subclass of the&#xA;     * class returned by this method.&#xA;     *&#xA;     * @param column the first column is 1, the second is 2, ...&#xA;     * @return the fully-qualified name of the class in the Java programming&#xA;     *         language that would be used by the method &#xA;     * &lt;code>ResultSet.getObject&lt;/code> to retrieve the value in the specified&#xA;     * column. This is the class name used for custom mapping.&#xA;     * @exception SQLException if a database access error occurs&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="column">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object that can be used to get information about the types &#xA; * and properties of the columns in a &lt;code>ResultSet&lt;/code> object.&#xA; * The following code fragment creates the &lt;code>ResultSet&lt;/code> object rs,&#xA; * creates the &lt;code>ResultSetMetaData&lt;/code> object rsmd, and uses rsmd&#xA; * to find out how many columns rs has and whether the first column in rs&#xA; * can be used in a &lt;code>WHERE&lt;/code> clause.&#xA; * &lt;PRE>&#xA; *&#xA; *     ResultSet rs = stmt.executeQuery(&quot;SELECT a, b, c FROM TABLE2&quot;);&#xA; *     ResultSetMetaData rsmd = rs.getMetaData();&#xA; *     int numberOfColumns = rsmd.getColumnCount();&#xA; *     boolean b = rsmd.isSearchable(1);&#xA; *&#xA; * &lt;/PRE>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
