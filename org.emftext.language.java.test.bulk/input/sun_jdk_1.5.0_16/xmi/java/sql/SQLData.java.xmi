<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="SQLData.java">
  <comments>/*&#xA; * @(#)SQLData.java&#x9;1.20 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SQLData">
    <members xsi:type="members:InterfaceMethod" name="getSQLTypeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;  * Returns the fully-qualified &#xA;  * name of the SQL user-defined type that this object represents.&#xA;  * This method is called by the JDBC driver to get the name of the&#xA;  * UDT instance that is being mapped to this instance of &#xA;  * &lt;code>SQLData&lt;/code>.&#xA;  *&#xA;  * @return the type name that was passed to the method &lt;code>readSql&lt;/code>&#xA;  *            when this object was constructed and populated&#xA;  * @exception SQLException if there is a database access error&#xA;  * @since 1.2&#xA;  */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readSQL">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;  * Populates this object with data read from the database.&#xA;  * The implementation of the method must follow this protocol:&#xA;  * &lt;UL> &#xA;  * &lt;LI>It must read each of the attributes or elements of the SQL&#xA;  * type  from the given input stream.  This is done &#xA;  * by calling a method of the input stream to read each&#xA;  * item, in the order that they appear in the SQL definition&#xA;  * of the type.  &#xA;  * &lt;LI>The method &lt;code>readSQL&lt;/code> then&#xA;  * assigns the data to appropriate fields or &#xA;  * elements (of this or other objects).&#xA;  * Specifically, it must call the appropriate &lt;i>reader&lt;/i> method &#xA;  * (&lt;code>SQLInput.readString&lt;/code>, &lt;code>SQLInput.readBigDecimal&lt;/code>,&#xA;  * and so on) method(s) to do the following:&#xA;  * for a distinct type, read its single data element;&#xA;  * for a structured type, read a value for each attribute of the SQL type.&#xA;  * &lt;/UL>  &#xA;  * The JDBC driver initializes the input stream with a type map&#xA;  * before calling this method, which is used by the appropriate&#xA;  * &lt;code>SQLInput&lt;/code> reader method on the stream.&#xA;  *&#xA;  * @param stream the &lt;code>SQLInput&lt;/code> object from which to read the data for&#xA;  * the value that is being custom mapped&#xA;  * @param typeName the SQL type name of the value on the data stream&#xA;  * @exception SQLException if there is a database access error&#xA;  * @see SQLInput&#xA;  */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SQLInput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="typeName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeSQL">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;  * Writes this object to the given SQL data stream, converting it back to&#xA;  * its SQL value in the data source.&#xA;  * The implementation of the method must follow this protocol:&lt;BR>&#xA;  * It must write each of the attributes of the SQL type&#xA;  * to the given output stream.  This is done by calling a &#xA;  * method of the output stream to write each item, in the order that &#xA;  * they appear in the SQL definition of the type.&#xA;  * Specifically, it must call the appropriate &lt;code>SQLOutput&lt;/code> writer&#xA;  * method(s) (&lt;code>writeInt&lt;/code>, &lt;code>writeString&lt;/code>, and so on)&#xA;  * to do the following: for a Distinct Type, write its single data element;&#xA;  * for a Structured Type, write a value for each attribute of the SQL type.&#xA;  *&#xA;  * @param stream the &lt;code>SQLOutput&lt;/code> object to which to write the data for&#xA;  * the value that was custom mapped&#xA;  * @exception SQLException if there is a database access error&#xA;  * @see SQLOutput&#xA;  * @since 1.2&#xA;  */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SQLOutput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The interface used for the custom mapping of an SQL user-defined type (UDT) to&#xA; * a class in the Java programming language. The class object for a class&#xA; * implementing the &lt;code>SQLData&lt;/code> interface will be entered in the&#xA; * appropriate &lt;code>Connection&lt;/code> object's type map along with the SQL&#xA; * name of the UDT for which it is a custom mapping.&#xA; * &lt;P>&#xA; * Typically, a &lt;code>SQLData&lt;/code> implementation&#xA; * will define a field for each attribute of an SQL structured type or a&#xA; * single field for an SQL &lt;code>DISTINCT&lt;/code> type. When the UDT is&#xA; * retrieved from a data source with the &lt;code>ResultSet.getObject&lt;/code>&#xA; * method, it will be mapped as an instance of this class.  A programmer&#xA; * can operate on this class instance just as on any other object in the&#xA; * Java programming language and then store any changes made to it by&#xA; * calling the &lt;code>PreparedStatement.setObject&lt;/code> method,&#xA; * which will map it back to the SQL type.&#xA; * &lt;p>&#xA; * It is expected that the implementation of the class for a custom&#xA; * mapping will be done by a tool.  In a typical implementation, the&#xA; * programmer would simply supply the name of the SQL UDT, the name of&#xA; * the class to which it is being mapped, and the names of the fields to&#xA; * which each of the attributes of the UDT is to be mapped.  The tool will use&#xA; * this information to implement the &lt;code>SQLData.readSQL&lt;/code> and&#xA; * &lt;code>SQLData.writeSQL&lt;/code> methods.  The &lt;code>readSQL&lt;/code> method&#xA; * calls the appropriate &lt;code>SQLInput&lt;/code> methods to read&#xA; * each attribute from an &lt;code>SQLInput&lt;/code> object, and the&#xA; * &lt;code>writeSQL&lt;/code> method calls &lt;code>SQLOutput&lt;/code> methods&#xA; * to write each attribute back to the data source via an&#xA; * &lt;code>SQLOutput&lt;/code> object.&#xA; * &lt;P>&#xA; * An application programmer will not normally call &lt;code>SQLData&lt;/code> methods&#xA; * directly, and the &lt;code>SQLInput&lt;/code> and &lt;code>SQLOutput&lt;/code> methods&#xA; * are called internally by &lt;code>SQLData&lt;/code> methods, not by application code.&#xA; * &#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
