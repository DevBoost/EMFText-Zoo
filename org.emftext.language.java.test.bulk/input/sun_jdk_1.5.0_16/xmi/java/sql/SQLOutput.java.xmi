<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="SQLOutput.java">
  <comments>/*&#xA; * @(#)SQLOutput.java&#x9;1.20 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>sql</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SQLOutput">
    <members xsi:type="members:InterfaceMethod" name="writeString">
      <typeReference xsi:type="types:Void">
        <comments>//================================================================</comments>
        <comments>// Methods for writing attributes to the stream of SQL data.</comments>
        <comments>// These methods correspond to the column-accessor methods of</comments>
        <comments>// java.sql.ResultSet.</comments>
        <comments>//================================================================</comments>
        <comments>/**&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeBoolean">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a Java boolean.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeByte">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a Java byte.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeShort">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a Java short.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeInt">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a Java int.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeLong">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a Java long.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeFloat">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a Java float.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeDouble">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a Java double.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeBigDecimal">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a java.math.BigDecimal object.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>math</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeBytes">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as an array of bytes.&#xA;   * Writes the next attribute to the stream as a &lt;code>String&lt;/code>&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeDate">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a java.sql.Date object.&#xA;   * Writes the next attribute to the stream as a &lt;code>java.sql.Date&lt;/code> object&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeTime">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a java.sql.Time object.&#xA;   * Writes the next attribute to the stream as a &lt;code>java.sql.Date&lt;/code> object&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Time.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeTimestamp">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a java.sql.Timestamp object.&#xA;   * Writes the next attribute to the stream as a &lt;code>java.sql.Date&lt;/code> object&#xA;   * in the Java programming language.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>sql</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Timestamp.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeCharacterStream">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a stream of Unicode characters.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeAsciiStream">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a stream of ASCII characters.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeBinaryStream">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes the next attribute to the stream as a stream of uninterpreted&#xA;   * bytes.&#xA;   *&#xA;   * @param x the value to pass to the database&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeObject">
      <typeReference xsi:type="types:Void">
        <comments>//================================================================</comments>
        <comments>// Methods for writing items of SQL user-defined types to the stream.</comments>
        <comments>// These methods pass objects to the database as values of SQL</comments>
        <comments>// Structured Types, Distinct Types, Constructed Types, and Locator</comments>
        <comments>// Types.  They decompose the Java object(s) and write leaf data</comments>
        <comments>// items using the methods above.</comments>
        <comments>//================================================================</comments>
        <comments>/**&#xA;   * Writes to the stream the data contained in the given &#xA;   * &lt;code>SQLData&lt;/code> object.&#xA;   * When the &lt;code>SQLData&lt;/code> object is &lt;code>null&lt;/code>, this&#xA;   * method writes an SQL &lt;code>NULL&lt;/code> to the stream.  &#xA;   * Otherwise, it calls the &lt;code>SQLData.writeSQL&lt;/code>&#xA;   * method of the given object, which &#xA;   * writes the object's attributes to the stream.&#xA;   * The implementation of the method &lt;code>SQLData.writeSQ&lt;/code>&#xA;   * calls the appropriate &lt;code>SQLOutput&lt;/code> writer method(s)&#xA;   * for writing each of the object's attributes in order.&#xA;   * The attributes must be read from an &lt;code>SQLInput&lt;/code>&#xA;   * input stream and written to an &lt;code>SQLOutput&lt;/code>&#xA;   * output stream in the same order in which they were&#xA;   * listed in the SQL definition of the user-defined type.&#xA;   * &#xA;   * @param x the object representing data of an SQL structured or&#xA;   * distinct type&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="SQLData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeRef">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes an SQL &lt;code>REF&lt;/code> value to the stream.&#xA;   *&#xA;   * @param x a &lt;code>Ref&lt;/code> object representing data of an SQL&#xA;   * &lt;code>REF&lt;/code> value&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Ref.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeBlob">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes an SQL &lt;code>BLOB&lt;/code> value to the stream.&#xA;   *&#xA;   * @param x a &lt;code>Blob&lt;/code> object representing data of an SQL&#xA;   * &lt;code>BLOB&lt;/code> value&#xA;   *&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Blob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeClob">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes an SQL &lt;code>CLOB&lt;/code> value to the stream.&#xA;   *&#xA;   * @param x a &lt;code>Clob&lt;/code> object representing data of an SQL&#xA;   * &lt;code>CLOB&lt;/code> value&#xA;   *&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Clob.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeStruct">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes an SQL structured type value to the stream.&#xA;   *&#xA;   * @param x a &lt;code>Struct&lt;/code> object representing data of an SQL&#xA;   * structured type &#xA;   *&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Struct.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeArray">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;   * Writes an SQL &lt;code>ARRAY&lt;/code> value to the stream.&#xA;   *&#xA;   * @param x an &lt;code>Array&lt;/code> object representing data of an SQL&#xA;   * &lt;code>ARRAY&lt;/code> type&#xA;   *&#xA;   * @exception SQLException if a database access error occurs&#xA;   */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Array.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeURL">
      <typeReference xsi:type="types:Void">
        <comments>//--------------------------- JDBC 3.0 ------------------------</comments>
        <comments>/** &#xA;      * Writes a SQL &lt;code>DATALINK&lt;/code> value to the stream.&#xA;      *&#xA;      * @param x a &lt;code>java.net.URL&lt;/code> object representing the data&#xA;      * of SQL DATALINK type&#xA;      *&#xA;      * @exception SQLException if a database access error occurs&#xA;      * @since 1.4&#xA;      */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>net</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SQLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The output stream for writing the attributes of a user-defined&#xA; * type back to the database.  This interface, used &#xA; * only for custom mapping, is used by the driver, and its&#xA; * methods are never directly invoked by a programmer.&#xA; * &lt;p>When an object of a class implementing the interface&#xA; * &lt;code>SQLData&lt;/code> is passed as an argument to an SQL statement, the&#xA; * JDBC driver calls the method &lt;code>SQLData.getSQLType&lt;/code> to&#xA; * determine the  kind of SQL&#xA; * datum being passed to the database.&#xA; * The driver then creates an instance of &lt;code>SQLOutput&lt;/code> and&#xA; * passes it to the method &lt;code>SQLData.writeSQL&lt;/code>.&#xA; * The method &lt;code>writeSQL&lt;/code> in turn calls the&#xA; * appropriate &lt;code>SQLOutput&lt;/code> &lt;i>writer&lt;/i> methods &#xA; * &lt;code>writeBoolean&lt;/code>, &lt;code>writeCharacterStream&lt;/code>, and so on)&#xA; * to write data from the &lt;code>SQLData&lt;/code> object to&#xA; * the &lt;code>SQLOutput&lt;/code> output stream as the &#xA; * representation of an SQL user-defined type.&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
