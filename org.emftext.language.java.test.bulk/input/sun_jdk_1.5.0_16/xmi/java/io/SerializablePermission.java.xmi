<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="SerializablePermission.java">
  <comments>/*&#xA; * @(#)SerializablePermission.java&#x9;1.19 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>io</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/StringTokenizer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SerializablePermission">
    <members xsi:type="members:Field" name="actions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SerializablePermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new SerializablePermission with the specified name.&#xA;     * The name is the symbolic name of the SerializablePermission, such as&#xA;     * &quot;enableSubstitution&quot;, etc.&#xA;     *&#xA;     * @param name the name of the SerializablePermission.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="SerializablePermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="actions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new SerializablePermission object with the specified name.&#xA;     * The name is the symbolic name of the SerializablePermission, and the&#xA;     * actions String is currently unused and should be null.&#xA;     *&#xA;     * @param name the name of the SerializablePermission.&#xA;     * @param actions currently unused and must be set to null&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class is for Serializable permissions. A SerializablePermission&#xA; * contains a name (also referred to as a &quot;target name&quot;) but&#xA; * no actions list; you either have the named permission&#xA; * or you don't.&#xA; *&#xA; * &lt;P>&#xA; * The target name is the name of the Serializable permission (see below).&#xA; *&#xA; * &lt;P>&#xA; * The following table lists all the possible SerializablePermission target names,&#xA; * and for each provides a description of what the permission allows&#xA; * and a discussion of the risks of granting code the permission.&#xA; * &lt;P>&#xA; *&#xA; * &lt;table border=1 cellpadding=5 summary=&quot;Permission target name, what the permission allows, and associated risks&quot;>&#xA; * &lt;tr>&#xA; * &lt;th>Permission Target Name&lt;/th>&#xA; * &lt;th>What the Permission Allows&lt;/th>&#xA; * &lt;th>Risks of Allowing this Permission&lt;/th>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>enableSubclassImplementation&lt;/td>&#xA; *   &lt;td>Subclass implementation of ObjectOutputStream or ObjectInputStream&#xA; * to override the default serialization or deserialization, respectively,&#xA; * of objects&lt;/td>&#xA; *   &lt;td>Code can use this to serialize or&#xA; * deserialize classes in a purposefully malfeasant manner. For example,&#xA; * during serialization, malicious code can use this to&#xA; * purposefully store confidential private field data in a way easily accessible&#xA; * to attackers. Or, during deserialization it could, for example, deserialize&#xA; * a class with all its private fields zeroed out.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>enableSubstitution&lt;/td>&#xA; *   &lt;td>Substitution of one object for another during&#xA; * serialization or deserialization&lt;/td>&#xA; *   &lt;td>This is dangerous because malicious code&#xA; * can replace the actual object with one which has incorrect or&#xA; * malignant data.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * @see java.security.BasicPermission&#xA; * @see java.security.Permission&#xA; * @see java.security.Permissions&#xA; * @see java.security.PermissionCollection&#xA; * @see java.lang.SecurityManager&#xA; *&#xA; * @version 1.19, 01/12/04&#xA; *&#xA; * @author Joe Fialli&#xA; * @since 1.2&#xA; */</comments>
      <comments>/* code was borrowed originally from java.lang.RuntimePermission. */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../security/BasicPermission.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
