<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="FilterInputStream.java">
  <comments>/*&#xA; * @(#)FilterInputStream.java&#x9;1.28 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>io</namespaces>
  <classifiers xsi:type="classifiers:Class" name="FilterInputStream">
    <members xsi:type="members:Field" name="in">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The input stream to be filtered. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:Constructor" name="FilterInputStream">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates a &lt;code>FilterInputStream&lt;/code>&#xA;     * by assigning the  argument &lt;code>in&lt;/code>&#xA;     * to the field &lt;code>this.in&lt;/code> so as&#xA;     * to remember it for later use.&#xA;     *&#xA;     * @param   in   the underlying input stream, or &lt;code>null&lt;/code> if &#xA;     *          this instance is to be created without an underlying stream.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads the next byte of data from this input stream. The value &#xA;     * byte is returned as an &lt;code>int&lt;/code> in the range &#xA;     * &lt;code>0&lt;/code> to &lt;code>255&lt;/code>. If no byte is available &#xA;     * because the end of the stream has been reached, the value &#xA;     * &lt;code>-1&lt;/code> is returned. This method blocks until input data &#xA;     * is available, the end of the stream is detected, or an exception &#xA;     * is thrown. &#xA;     * &lt;p>&#xA;     * This method&#xA;     * simply performs &lt;code>in.read()&lt;/code> and returns the result.&#xA;     *&#xA;     * @return     the next byte of data, or &lt;code>-1&lt;/code> if the end of the&#xA;     *             stream is reached.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterInputStream#in&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.3"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads up to &lt;code>byte.length&lt;/code> bytes of data from this &#xA;     * input stream into an array of bytes. This method blocks until some &#xA;     * input is available. &#xA;     * &lt;p>&#xA;     * This method simply performs the call&#xA;     * &lt;code>read(b, 0, b.length)&lt;/code> and returns&#xA;     * the  result. It is important that it does&#xA;     * &lt;i>not&lt;/i> do &lt;code>in.read(b)&lt;/code> instead;&#xA;     * certain subclasses of  &lt;code>FilterInputStream&lt;/code>&#xA;     * depend on the implementation strategy actually&#xA;     * used.&#xA;     *&#xA;     * @param      b   the buffer into which the data is read.&#xA;     * @return     the total number of bytes read into the buffer, or&#xA;     *             &lt;code>-1&lt;/code> if there is no more data because the end of&#xA;     *             the stream has been reached.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterInputStream#read(byte[], int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads up to &lt;code>len&lt;/code> bytes of data from this input stream &#xA;     * into an array of bytes. This method blocks until some input is &#xA;     * available. &#xA;     * &lt;p>&#xA;     * This method simply performs &lt;code>in.read(b, off, len)&lt;/code> &#xA;     * and returns the result.&#xA;     *&#xA;     * @param      b     the buffer into which the data is read.&#xA;     * @param      off   the start offset of the data.&#xA;     * @param      len   the maximum number of bytes read.&#xA;     * @return     the total number of bytes read into the buffer, or&#xA;     *             &lt;code>-1&lt;/code> if there is no more data because the end of&#xA;     *             the stream has been reached.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterInputStream#in&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="skip">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Skips over and discards &lt;code>n&lt;/code> bytes of data from the &#xA;     * input stream. The &lt;code>skip&lt;/code> method may, for a variety of &#xA;     * reasons, end up skipping over some smaller number of bytes, &#xA;     * possibly &lt;code>0&lt;/code>. The actual number of bytes skipped is &#xA;     * returned. &#xA;     * &lt;p>&#xA;     * This method&#xA;     * simply performs &lt;code>in.skip(n)&lt;/code>.&#xA;     *&#xA;     * @param      n   the number of bytes to be skipped.&#xA;     * @return     the actual number of bytes skipped.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="available">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of bytes that can be read from this input &#xA;     * stream without blocking. &#xA;     * &lt;p>&#xA;     * This method&#xA;     * simply performs &lt;code>in.available()&lt;/code> and&#xA;     * returns the result.&#xA;     *&#xA;     * @return     the number of bytes that can be read from the input stream&#xA;     *             without blocking.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterInputStream#in&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.7"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Closes this input stream and releases any system resources &#xA;     * associated with the stream. &#xA;     * This&#xA;     * method simply performs &lt;code>in.close()&lt;/code>.&#xA;     *&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterInputStream#in&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="mark">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="readlimit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Marks the current position in this input stream. A subsequent &#xA;     * call to the &lt;code>reset&lt;/code> method repositions this stream at &#xA;     * the last marked position so that subsequent reads re-read the same bytes.&#xA;     * &lt;p>&#xA;     * The &lt;code>readlimit&lt;/code> argument tells this input stream to &#xA;     * allow that many bytes to be read before the mark position gets &#xA;     * invalidated. &#xA;     * &lt;p>&#xA;     * This method simply performs &lt;code>in.mark(readlimit)&lt;/code>.&#xA;     *&#xA;     * @param   readlimit   the maximum limit of bytes that can be read before&#xA;     *                      the mark position becomes invalid.&#xA;     * @see     java.io.FilterInputStream#in&#xA;     * @see     java.io.FilterInputStream#reset()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.9"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Repositions this stream to the position at the time the &#xA;     * &lt;code>mark&lt;/code> method was last called on this input stream. &#xA;     * &lt;p>&#xA;     * This method&#xA;     * simply performs &lt;code>in.reset()&lt;/code>.&#xA;     * &lt;p>&#xA;     * Stream marks are intended to be used in&#xA;     * situations where you need to read ahead a little to see what's in&#xA;     * the stream. Often this is most easily done by invoking some&#xA;     * general parser. If the stream is of the type handled by the&#xA;     * parse, it just chugs along happily. If the stream is not of&#xA;     * that type, the parser should toss an exception when it fails.&#xA;     * If this happens within readlimit bytes, it allows the outer&#xA;     * code to reset the stream and try another parser.&#xA;     *&#xA;     * @exception  IOException  if the stream has not been marked or if the&#xA;     *               mark has been invalidated.&#xA;     * @see        java.io.FilterInputStream#in&#xA;     * @see        java.io.FilterInputStream#mark(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.10"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="markSupported">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if this input stream supports the &lt;code>mark&lt;/code> &#xA;     * and &lt;code>reset&lt;/code> methods. &#xA;     * This method&#xA;     * simply performs &lt;code>in.markSupported()&lt;/code>.&#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if this stream type supports the&#xA;     *          &lt;code>mark&lt;/code> and &lt;code>reset&lt;/code> method;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     * @see     java.io.FilterInputStream#in&#xA;     * @see     java.io.InputStream#mark(int)&#xA;     * @see     java.io.InputStream#reset()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="InputStream.class.xmi#//@classifiers.0/@members.11"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>FilterInputStream&lt;/code> contains&#xA; * some other input stream, which it uses as&#xA; * its  basic source of data, possibly transforming&#xA; * the data along the way or providing  additional&#xA; * functionality. The class &lt;code>FilterInputStream&lt;/code>&#xA; * itself simply overrides all  methods of&#xA; * &lt;code>InputStream&lt;/code> with versions that&#xA; * pass all requests to the contained  input&#xA; * stream. Subclasses of &lt;code>FilterInputStream&lt;/code>&#xA; * may further override some of  these methods&#xA; * and may also provide additional methods&#xA; * and fields.&#xA; *&#xA; * @author  Jonathan Payne&#xA; * @version 1.28, 12/19/03&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="InputStream.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
