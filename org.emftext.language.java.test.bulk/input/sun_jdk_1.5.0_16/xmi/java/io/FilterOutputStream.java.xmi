<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="FilterOutputStream.java">
  <comments>/*&#xA; * @(#)FilterOutputStream.java&#x9;1.31 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>io</namespaces>
  <classifiers xsi:type="classifiers:Class" name="FilterOutputStream">
    <members xsi:type="members:Field" name="out">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The underlying output stream to be filtered. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="FilterOutputStream">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an output stream filter built on top of the specified &#xA;     * underlying output stream. &#xA;     *&#xA;     * @param   out   the underlying output stream to be assigned to &#xA;     *                the field &lt;tt>this.out&lt;/tt> for later use, or &#xA;     *                &lt;code>null&lt;/code> if this instance is to be &#xA;     *                created without an underlying stream.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="write">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes the specified &lt;code>byte&lt;/code> to this output stream. &#xA;     * &lt;p>&#xA;     * The &lt;code>write&lt;/code> method of &lt;code>FilterOutputStream&lt;/code> &#xA;     * calls the &lt;code>write&lt;/code> method of its underlying output stream, &#xA;     * that is, it performs &lt;tt>out.write(b)&lt;/tt>.&#xA;     * &lt;p>&#xA;     * Implements the abstract &lt;tt>write&lt;/tt> method of &lt;tt>OutputStream&lt;/tt>. &#xA;     *&#xA;     * @param      b   the &lt;code>byte&lt;/code>.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="OutputStream.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes &lt;code>b.length&lt;/code> bytes to this output stream. &#xA;     * &lt;p>&#xA;     * The &lt;code>write&lt;/code> method of &lt;code>FilterOutputStream&lt;/code> &#xA;     * calls its &lt;code>write&lt;/code> method of three arguments with the &#xA;     * arguments &lt;code>b&lt;/code>, &lt;code>0&lt;/code>, and &#xA;     * &lt;code>b.length&lt;/code>. &#xA;     * &lt;p>&#xA;     * Note that this method does not call the one-argument &#xA;     * &lt;code>write&lt;/code> method of its underlying stream with the single &#xA;     * argument &lt;code>b&lt;/code>. &#xA;     *&#xA;     * @param      b   the data to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterOutputStream#write(byte[], int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="write">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes &lt;code>len&lt;/code> bytes from the specified &#xA;     * &lt;code>byte&lt;/code> array starting at offset &lt;code>off&lt;/code> to &#xA;     * this output stream. &#xA;     * &lt;p>&#xA;     * The &lt;code>write&lt;/code> method of &lt;code>FilterOutputStream&lt;/code> &#xA;     * calls the &lt;code>write&lt;/code> method of one argument on each &#xA;     * &lt;code>byte&lt;/code> to output. &#xA;     * &lt;p>&#xA;     * Note that this method does not call the &lt;code>write&lt;/code> method &#xA;     * of its underlying input stream with the same arguments. Subclasses &#xA;     * of &lt;code>FilterOutputStream&lt;/code> should provide a more efficient &#xA;     * implementation of this method. &#xA;     *&#xA;     * @param      b     the data.&#xA;     * @param      off   the start offset in the data.&#xA;     * @param      len   the number of bytes to write.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterOutputStream#write(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InclusiveOrExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </expression>
                  </children>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </expression>
              </children>
            </expression>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.2">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@init"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="flush">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Flushes this output stream and forces any buffered output bytes &#xA;     * to be written out to the stream. &#xA;     * &lt;p>&#xA;     * The &lt;code>flush&lt;/code> method of &lt;code>FilterOutputStream&lt;/code> &#xA;     * calls the &lt;code>flush&lt;/code> method of its underlying output stream. &#xA;     *&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterOutputStream#out&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="OutputStream.class.xmi#//@classifiers.0/@members.4"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Closes this output stream and releases any system resources &#xA;     * associated with the stream. &#xA;     * &lt;p>&#xA;     * The &lt;code>close&lt;/code> method of &lt;code>FilterOutputStream&lt;/code> &#xA;     * calls its &lt;code>flush&lt;/code> method, and then calls the &#xA;     * &lt;code>close&lt;/code> method of its underlying output stream. &#xA;     *&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @see        java.io.FilterOutputStream#flush()&#xA;     * @see        java.io.FilterOutputStream#out&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5"/>
        </statements>
        <catcheBlocks>
          <parameter name="ignored">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="OutputStream.class.xmi#//@classifiers.0/@members.5"/>
          </next>
        </expression>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class is the superclass of all classes that filter output &#xA; * streams. These streams sit on top of an already existing output &#xA; * stream (the &lt;i>underlying&lt;/i> output stream) which it uses as its &#xA; * basic sink of data, but possibly transforming the data along the &#xA; * way or providing additional functionality. &#xA; * &lt;p>&#xA; * The class &lt;code>FilterOutputStream&lt;/code> itself simply overrides &#xA; * all methods of &lt;code>OutputStream&lt;/code> with versions that pass &#xA; * all requests to the underlying output stream. Subclasses of &#xA; * &lt;code>FilterOutputStream&lt;/code> may further override some of these &#xA; * methods as well as provide additional methods and fields. &#xA; *&#xA; * @author  Jonathan Payne&#xA; * @version 1.31, 12/19/03&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="OutputStream.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
