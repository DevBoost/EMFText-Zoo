<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="FileNotFoundException.java">
  <comments>/*&#xA; * @(#)FileNotFoundException.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>io</namespaces>
  <classifiers xsi:type="classifiers:Class" name="FileNotFoundException">
    <members xsi:type="members:Constructor" name="FileNotFoundException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>FileNotFoundException&lt;/code> with&#xA;     * &lt;code>null&lt;/code> as its error detail message.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="FileNotFoundException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;code>FileNotFoundException&lt;/code> with the&#xA;     * specified detail message. The string &lt;code>s&lt;/code> can be&#xA;     * retrieved later by the&#xA;     * &lt;code>{@link java.lang.Throwable#getMessage}&lt;/code>&#xA;     * method of class &lt;code>java.lang.Throwable&lt;/code>.&#xA;     *&#xA;     * @param   s   the detail message.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="FileNotFoundException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:StringReference" value=""/>
                <expressionElse xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value=" ("/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
                  <children xsi:type="references:StringReference" value=")"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </expressionElse>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="path">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reason">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Constructs a &lt;code>FileNotFoundException&lt;/code> with a detail message&#xA;     * consisting of the given pathname string followed by the given reason&#xA;     * string.  If the &lt;code>reason&lt;/code> argument is &lt;code>null&lt;/code> then&#xA;     * it will be omitted.  This private constructor is invoked only by native&#xA;     * I/O methods.&#xA;     *&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Signals that an attempt to open the file denoted by a specified pathname&#xA; * has failed.&#xA; *&#xA; * &lt;p> This exception will be thrown by the {@link FileInputStream}, {@link&#xA; * FileOutputStream}, and {@link RandomAccessFile} constructors when a file&#xA; * with the specified pathname does not exist.  It will also be thrown by these&#xA; * constructors if the file does exist but for some reason is inaccessible, for&#xA; * example when an attempt is made to open a read-only file for writing.&#xA; *&#xA; * @author  unascribed&#xA; * @version 1.23, 12/19/03&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
