<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="DataOutput.java">
  <comments>/*&#xA; * @(#)DataOutput.java&#x9;1.21 04/05/13&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>io</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DataOutput">
    <members xsi:type="members:InterfaceMethod" name="write">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes to the output stream the eight&#xA;     * low-order bits of the argument &lt;code>b&lt;/code>.&#xA;     * The 24 high-order  bits of &lt;code>b&lt;/code>&#xA;     * are ignored.&#xA;     *&#xA;     * @param      b   the byte to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes to the output stream all the bytes in array &lt;code>b&lt;/code>.&#xA;     * If &lt;code>b&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * a &lt;code>NullPointerException&lt;/code> is thrown.&#xA;     * If &lt;code>b.length&lt;/code> is zero, then&#xA;     * no bytes are written. Otherwise, the byte&#xA;     * &lt;code>b[0]&lt;/code> is written first, then&#xA;     * &lt;code>b[1]&lt;/code>, and so on; the last byte&#xA;     * written is &lt;code>b[b.length-1]&lt;/code>.&#xA;     *&#xA;     * @param      b   the data.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes &lt;code>len&lt;/code> bytes from array&#xA;     * &lt;code>b&lt;/code>, in order,  to&#xA;     * the output stream.  If &lt;code>b&lt;/code>&#xA;     * is &lt;code>null&lt;/code>, a &lt;code>NullPointerException&lt;/code>&#xA;     * is thrown.  If &lt;code>off&lt;/code> is negative,&#xA;     * or &lt;code>len&lt;/code> is negative, or &lt;code>off+len&lt;/code>&#xA;     * is greater than the length of the array&#xA;     * &lt;code>b&lt;/code>, then an &lt;code>IndexOutOfBoundsException&lt;/code>&#xA;     * is thrown.  If &lt;code>len&lt;/code> is zero,&#xA;     * then no bytes are written. Otherwise, the&#xA;     * byte &lt;code>b[off]&lt;/code> is written first,&#xA;     * then &lt;code>b[off+1]&lt;/code>, and so on; the&#xA;     * last byte written is &lt;code>b[off+len-1]&lt;/code>.&#xA;     *&#xA;     * @param      b     the data.&#xA;     * @param      off   the start offset in the data.&#xA;     * @param      len   the number of bytes to write.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeBoolean">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes a &lt;code>boolean&lt;/code> value to this output stream.&#xA;     * If the argument &lt;code>v&lt;/code>&#xA;     * is &lt;code>true&lt;/code>, the value &lt;code>(byte)1&lt;/code>&#xA;     * is written; if &lt;code>v&lt;/code> is &lt;code>false&lt;/code>,&#xA;     * the  value &lt;code>(byte)0&lt;/code> is written.&#xA;     * The byte written by this method may&#xA;     * be read by the &lt;code>readBoolean&lt;/code>&#xA;     * method of interface &lt;code>DataInput&lt;/code>,&#xA;     * which will then return a &lt;code>boolean&lt;/code>&#xA;     * equal to &lt;code>v&lt;/code>.&#xA;     *&#xA;     * @param      v   the boolean to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeByte">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes to the output stream the eight low-&#xA;     * order bits of the argument &lt;code>v&lt;/code>.&#xA;     * The 24 high-order bits of &lt;code>v&lt;/code>&#xA;     * are ignored. (This means  that &lt;code>writeByte&lt;/code>&#xA;     * does exactly the same thing as &lt;code>write&lt;/code>&#xA;     * for an integer argument.) The byte written&#xA;     * by this method may be read by the &lt;code>readByte&lt;/code>&#xA;     * method of interface &lt;code>DataInput&lt;/code>,&#xA;     * which will then return a &lt;code>byte&lt;/code>&#xA;     * equal to &lt;code>(byte)v&lt;/code>.&#xA;     *&#xA;     * @param      v   the byte value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeShort">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes two bytes to the output&#xA;     * stream to represent the value of the argument.&#xA;     * The byte values to be written, in the  order&#xA;     * shown, are: &lt;p>&#xA;     * &lt;pre>&lt;code>&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 8))&#xA;     * (byte)(0xff &amp;amp; v)&#xA;     * &lt;/code> &lt;/pre> &lt;p>&#xA;     * The bytes written by this method may be&#xA;     * read by the &lt;code>readShort&lt;/code> method&#xA;     * of interface &lt;code>DataInput&lt;/code> , which&#xA;     * will then return a &lt;code>short&lt;/code> equal&#xA;     * to &lt;code>(short)v&lt;/code>.&#xA;     *&#xA;     * @param      v   the &lt;code>short&lt;/code> value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeChar">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes a &lt;code>char&lt;/code> value, which&#xA;     * is comprised of two bytes, to the&#xA;     * output stream.&#xA;     * The byte values to be written, in the  order&#xA;     * shown, are:&#xA;     * &lt;p>&lt;pre>&lt;code>&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 8))&#xA;     * (byte)(0xff &amp;amp; v)&#xA;     * &lt;/code>&lt;/pre>&lt;p>&#xA;     * The bytes written by this method may be&#xA;     * read by the &lt;code>readChar&lt;/code> method&#xA;     * of interface &lt;code>DataInput&lt;/code> , which&#xA;     * will then return a &lt;code>char&lt;/code> equal&#xA;     * to &lt;code>(char)v&lt;/code>.&#xA;     *&#xA;     * @param      v   the &lt;code>char&lt;/code> value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeInt">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes an &lt;code>int&lt;/code> value, which is&#xA;     * comprised of four bytes, to the output stream.&#xA;     * The byte values to be written, in the  order&#xA;     * shown, are:&#xA;     * &lt;p>&lt;pre>&lt;code>&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 24))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 16))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; &amp;#32; &amp;#32;8))&#xA;     * (byte)(0xff &amp;amp; v)&#xA;     * &lt;/code>&lt;/pre>&lt;p>&#xA;     * The bytes written by this method may be read&#xA;     * by the &lt;code>readInt&lt;/code> method of interface&#xA;     * &lt;code>DataInput&lt;/code> , which will then&#xA;     * return an &lt;code>int&lt;/code> equal to &lt;code>v&lt;/code>.&#xA;     *&#xA;     * @param      v   the &lt;code>int&lt;/code> value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeLong">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes a &lt;code>long&lt;/code> value, which is&#xA;     * comprised of eight bytes, to the output stream.&#xA;     * The byte values to be written, in the  order&#xA;     * shown, are:&#xA;     * &lt;p>&lt;pre>&lt;code>&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 56))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 48))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 40))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 32))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 24))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt; 16))&#xA;     * (byte)(0xff &amp;amp; (v &amp;gt;&amp;gt;  8))&#xA;     * (byte)(0xff &amp;amp; v)&#xA;     * &lt;/code>&lt;/pre>&lt;p>&#xA;     * The bytes written by this method may be&#xA;     * read by the &lt;code>readLong&lt;/code> method&#xA;     * of interface &lt;code>DataInput&lt;/code> , which&#xA;     * will then return a &lt;code>long&lt;/code> equal&#xA;     * to &lt;code>v&lt;/code>.&#xA;     *&#xA;     * @param      v   the &lt;code>long&lt;/code> value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeFloat">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes a &lt;code>float&lt;/code> value,&#xA;     * which is comprised of four bytes, to the output stream.&#xA;     * It does this as if it first converts this&#xA;     * &lt;code>float&lt;/code> value to an &lt;code>int&lt;/code>&#xA;     * in exactly the manner of the &lt;code>Float.floatToIntBits&lt;/code>&#xA;     * method  and then writes the &lt;code>int&lt;/code>&#xA;     * value in exactly the manner of the  &lt;code>writeInt&lt;/code>&#xA;     * method.  The bytes written by this method&#xA;     * may be read by the &lt;code>readFloat&lt;/code>&#xA;     * method of interface &lt;code>DataInput&lt;/code>,&#xA;     * which will then return a &lt;code>float&lt;/code>&#xA;     * equal to &lt;code>v&lt;/code>.&#xA;     *&#xA;     * @param      v   the &lt;code>float&lt;/code> value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeDouble">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes a &lt;code>double&lt;/code> value,&#xA;     * which is comprised of eight bytes, to the output stream.&#xA;     * It does this as if it first converts this&#xA;     * &lt;code>double&lt;/code> value to a &lt;code>long&lt;/code>&#xA;     * in exactly the manner of the &lt;code>Double.doubleToLongBits&lt;/code>&#xA;     * method  and then writes the &lt;code>long&lt;/code>&#xA;     * value in exactly the manner of the  &lt;code>writeLong&lt;/code>&#xA;     * method. The bytes written by this method&#xA;     * may be read by the &lt;code>readDouble&lt;/code>&#xA;     * method of interface &lt;code>DataInput&lt;/code>,&#xA;     * which will then return a &lt;code>double&lt;/code>&#xA;     * equal to &lt;code>v&lt;/code>.&#xA;     *&#xA;     * @param      v   the &lt;code>double&lt;/code> value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeBytes">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes a string to the output stream.&#xA;     * For every character in the string&#xA;     * &lt;code>s&lt;/code>,  taken in order, one byte&#xA;     * is written to the output stream.  If&#xA;     * &lt;code>s&lt;/code> is &lt;code>null&lt;/code>, a &lt;code>NullPointerException&lt;/code>&#xA;     * is thrown.&lt;p>  If &lt;code>s.length&lt;/code>&#xA;     * is zero, then no bytes are written. Otherwise,&#xA;     * the character &lt;code>s[0]&lt;/code> is written&#xA;     * first, then &lt;code>s[1]&lt;/code>, and so on;&#xA;     * the last character written is &lt;code>s[s.length-1]&lt;/code>.&#xA;     * For each character, one byte is written,&#xA;     * the low-order byte, in exactly the manner&#xA;     * of the &lt;code>writeByte&lt;/code> method . The&#xA;     * high-order eight bits of each character&#xA;     * in the string are ignored.&#xA;     *&#xA;     * @param      s   the string of bytes to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeChars">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes every character in the string &lt;code>s&lt;/code>,&#xA;     * to the output stream, in order,&#xA;     * two bytes per character. If &lt;code>s&lt;/code>&#xA;     * is &lt;code>null&lt;/code>, a &lt;code>NullPointerException&lt;/code>&#xA;     * is thrown.  If &lt;code>s.length&lt;/code>&#xA;     * is zero, then no characters are written.&#xA;     * Otherwise, the character &lt;code>s[0]&lt;/code>&#xA;     * is written first, then &lt;code>s[1]&lt;/code>,&#xA;     * and so on; the last character written is&#xA;     * &lt;code>s[s.length-1]&lt;/code>. For each character,&#xA;     * two bytes are actually written, high-order&#xA;     * byte first, in exactly the manner of the&#xA;     * &lt;code>writeChar&lt;/code> method.&#xA;     *&#xA;     * @param      s   the string value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="writeUTF">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Writes two bytes of length information&#xA;     * to the output stream, followed&#xA;     * by the&#xA;     * &lt;a href=&quot;DataInput.html#modified-utf-8&quot;>modified UTF-8&lt;/a>&#xA;     * representation&#xA;     * of  every character in the string &lt;code>s&lt;/code>.&#xA;     * If &lt;code>s&lt;/code> is &lt;code>null&lt;/code>,&#xA;     * a &lt;code>NullPointerException&lt;/code> is thrown.&#xA;     * Each character in the string &lt;code>s&lt;/code>&#xA;     * is converted to a group of one, two, or&#xA;     * three bytes, depending on the value of the&#xA;     * character.&lt;p>&#xA;     * If a character &lt;code>c&lt;/code>&#xA;     * is in the range &lt;code>&amp;#92;u0001&lt;/code> through&#xA;     * &lt;code>&amp;#92;u007f&lt;/code>, it is represented&#xA;     * by one byte:&lt;p>&#xA;     * &lt;pre>(byte)c &lt;/pre>  &lt;p>&#xA;     * If a character &lt;code>c&lt;/code> is &lt;code>&amp;#92;u0000&lt;/code>&#xA;     * or is in the range &lt;code>&amp;#92;u0080&lt;/code>&#xA;     * through &lt;code>&amp;#92;u07ff&lt;/code>, then it is&#xA;     * represented by two bytes, to be written&#xA;     * in the order shown:&lt;p> &lt;pre>&lt;code>&#xA;     * (byte)(0xc0 | (0x1f &amp;amp; (c &amp;gt;&amp;gt; 6)))&#xA;     * (byte)(0x80 | (0x3f &amp;amp; c))&#xA;     *  &lt;/code>&lt;/pre>  &lt;p> If a character&#xA;     * &lt;code>c&lt;/code> is in the range &lt;code>&amp;#92;u0800&lt;/code>&#xA;     * through &lt;code>uffff&lt;/code>, then it is&#xA;     * represented by three bytes, to be written&#xA;     * in the order shown:&lt;p> &lt;pre>&lt;code>&#xA;     * (byte)(0xe0 | (0x0f &amp;amp; (c &amp;gt;&amp;gt; 12)))&#xA;     * (byte)(0x80 | (0x3f &amp;amp; (c &amp;gt;&amp;gt;  6)))&#xA;     * (byte)(0x80 | (0x3f &amp;amp; c))&#xA;     *  &lt;/code>&lt;/pre>  &lt;p> First,&#xA;     * the total number of bytes needed to represent&#xA;     * all the characters of &lt;code>s&lt;/code> is&#xA;     * calculated. If this number is larger than&#xA;     * &lt;code>65535&lt;/code>, then a &lt;code>UTFDataFormatException&lt;/code>&#xA;     * is thrown. Otherwise, this length is written&#xA;     * to the output stream in exactly the manner&#xA;     * of the &lt;code>writeShort&lt;/code> method;&#xA;     * after this, the one-, two-, or three-byte&#xA;     * representation of each character in the&#xA;     * string &lt;code>s&lt;/code> is written.&lt;p>  The&#xA;     * bytes written by this method may be read&#xA;     * by the &lt;code>readUTF&lt;/code> method of interface&#xA;     * &lt;code>DataInput&lt;/code> , which will then&#xA;     * return a &lt;code>String&lt;/code> equal to &lt;code>s&lt;/code>.&#xA;     *&#xA;     * @param      str   the string value to be written.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>DataOutput&lt;/code> interface provides&#xA; * for converting data from any of the Java&#xA; * primitive types to a series of bytes and&#xA; * writing these bytes to a binary stream.&#xA; * There is  also a facility for converting&#xA; * a &lt;code>String&lt;/code> into&#xA; * &lt;a href=&quot;DataInput.html#modified-utf-8&quot;>modified UTF-8&lt;/a>&#xA; * format and writing the resulting series&#xA; * of bytes.&#xA; * &lt;p>&#xA; * For all the methods in this interface that&#xA; * write bytes, it is generally true that if&#xA; * a byte cannot be written for any reason,&#xA; * an &lt;code>IOException&lt;/code> is thrown.&#xA; *&#xA; * @author  Frank Yellin&#xA; * @version 1.21, 05/13/04&#xA; * @see     java.io.DataInput&#xA; * @see     java.io.DataOutputStream&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
