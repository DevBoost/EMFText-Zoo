<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Externalizable.java">
  <comments>/*&#xA; * @(#)Externalizable.java&#x9;1.19 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>io</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="ObjectOutput.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="ObjectInput.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Externalizable">
    <members xsi:type="members:InterfaceMethod" name="writeExternal">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * The object implements the writeExternal method to save its contents&#xA;     * by calling the methods of DataOutput for its primitive values or&#xA;     * calling the writeObject method of ObjectOutput for objects, strings,&#xA;     * and arrays.&#xA;     *&#xA;     * @serialData Overriding methods should use this tag to describe&#xA;     *             the data layout of this Externalizable object.&#xA;     *             List the sequence of element types and, if possible,&#xA;     *             relate the element to a public/protected field and/or&#xA;     *             method of this Externalizable class.&#xA;     *&#xA;     * @param out the stream to write the object to&#xA;     * @exception IOException Includes any I/O exceptions that may occur&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ObjectOutput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="readExternal">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * The object implements the readExternal method to restore its&#xA;     * contents by calling the methods of DataInput for primitive&#xA;     * types and readObject for objects, strings and arrays.  The&#xA;     * readExternal method must read the values in the same sequence&#xA;     * and with the same types as were written by writeExternal.&#xA;     *&#xA;     * @param in the stream to read data from in order to restore the object&#xA;     * @exception IOException if I/O errors occur&#xA;     * @exception ClassNotFoundException If the class for an object being&#xA;     *              restored cannot be found.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ObjectInput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Only the identity of the class of an Externalizable instance is&#xA; * written in the serialization stream and it is the responsibility&#xA; * of the class to save and restore the contents of its instances.&#xA; *&#xA; * The writeExternal and readExternal methods of the Externalizable&#xA; * interface are implemented by a class to give the class complete&#xA; * control over the format and contents of the stream for an object&#xA; * and its supertypes. These methods must explicitly&#xA; * coordinate with the supertype to save its state. These methods supersede&#xA; * customized implementations of writeObject and readObject methods.&lt;br>&#xA; *&#xA; * Object Serialization uses the Serializable and Externalizable&#xA; * interfaces.  Object persistence mechanisms can use them as well.  Each&#xA; * object to be stored is tested for the Externalizable interface. If&#xA; * the object supports Externalizable, the writeExternal method is called. If the&#xA; * object does not support Externalizable and does implement&#xA; * Serializable, the object is saved using&#xA; * ObjectOutputStream. &lt;br> When an Externalizable object is&#xA; * reconstructed, an instance is created using the public no-arg&#xA; * constructor, then the readExternal method called.  Serializable&#xA; * objects are restored by reading them from an ObjectInputStream.&lt;br>&#xA; *&#xA; * An Externalizable instance can designate a substitution object via&#xA; * the writeReplace and readResolve methods documented in the Serializable&#xA; * interface.&lt;br>&#xA; *&#xA; * @author  unascribed&#xA; * @version 1.19, 01/12/04&#xA; * @see java.io.ObjectOutputStream&#xA; * @see java.io.ObjectInputStream&#xA; * @see java.io.ObjectOutput&#xA; * @see java.io.ObjectInput&#xA; * @see java.io.Serializable&#xA; * @since   JDK1.1&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
