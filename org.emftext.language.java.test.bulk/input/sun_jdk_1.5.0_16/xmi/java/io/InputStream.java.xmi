<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="InputStream.java">
  <comments>/*&#xA; * @(#)InputStream.java&#x9;1.45 04/02/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>io</namespaces>
  <classifiers xsi:type="classifiers:Class" name="InputStream">
    <members xsi:type="members:Field" name="SKIP_BUFFER_SIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2048"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// SKIP_BUFFER_SIZE is used to determine the size of skipBuffer</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="skipBuffer">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// skipBuffer is initialized in skip(long), if needed.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads the next byte of data from the input stream. The value byte is&#xA;     * returned as an &lt;code>int&lt;/code> in the range &lt;code>0&lt;/code> to&#xA;     * &lt;code>255&lt;/code>. If no byte is available because the end of the stream&#xA;     * has been reached, the value &lt;code>-1&lt;/code> is returned. This method&#xA;     * blocks until input data is available, the end of the stream is detected,&#xA;     * or an exception is thrown.&#xA;     *&#xA;     * &lt;p> A subclass must provide an implementation of this method.&#xA;     *&#xA;     * @return     the next byte of data, or &lt;code>-1&lt;/code> if the end of the&#xA;     *             stream is reached.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads some number of bytes from the input stream and stores them into&#xA;     * the buffer array &lt;code>b&lt;/code>. The number of bytes actually read is&#xA;     * returned as an integer.  This method blocks until input data is&#xA;     * available, end of file is detected, or an exception is thrown.&#xA;     *&#xA;     * &lt;p> If &lt;code>b&lt;/code> is &lt;code>null&lt;/code>, a&#xA;     * &lt;code>NullPointerException&lt;/code> is thrown.  If the length of&#xA;     * &lt;code>b&lt;/code> is zero, then no bytes are read and &lt;code>0&lt;/code> is&#xA;     * returned; otherwise, there is an attempt to read at least one byte. If&#xA;     * no byte is available because the stream is at end of file, the value&#xA;     * &lt;code>-1&lt;/code> is returned; otherwise, at least one byte is read and&#xA;     * stored into &lt;code>b&lt;/code>.&#xA;     *&#xA;     * &lt;p> The first byte read is stored into element &lt;code>b[0]&lt;/code>, the&#xA;     * next one into &lt;code>b[1]&lt;/code>, and so on. The number of bytes read is,&#xA;     * at most, equal to the length of &lt;code>b&lt;/code>. Let &lt;i>k&lt;/i> be the&#xA;     * number of bytes actually read; these bytes will be stored in elements&#xA;     * &lt;code>b[0]&lt;/code> through &lt;code>b[&lt;/code>&lt;i>k&lt;/i>&lt;code>-1]&lt;/code>,&#xA;     * leaving elements &lt;code>b[&lt;/code>&lt;i>k&lt;/i>&lt;code>]&lt;/code> through&#xA;     * &lt;code>b[b.length-1]&lt;/code> unaffected.&#xA;     *&#xA;     * &lt;p> If the first byte cannot be read for any reason other than end of&#xA;     * file, then an &lt;code>IOException&lt;/code> is thrown. In particular, an&#xA;     * &lt;code>IOException&lt;/code> is thrown if the input stream has been closed.&#xA;     *&#xA;     * &lt;p> The &lt;code>read(b)&lt;/code> method for class &lt;code>InputStream&lt;/code>&#xA;     * has the same effect as: &lt;pre>&lt;code> read(b, 0, b.length) &lt;/code>&lt;/pre>&#xA;     *&#xA;     * @param      b   the buffer into which the data is read.&#xA;     * @return     the total number of bytes read into the buffer, or&#xA;     *             &lt;code>-1&lt;/code> is there is no more data because the end of&#xA;     *             the stream has been reached.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @exception  NullPointerException  if &lt;code>b&lt;/code> is &lt;code>null&lt;/code>.&#xA;     * @see        java.io.InputStream#read(byte[], int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads up to &lt;code>len&lt;/code> bytes of data from the input stream into&#xA;     * an array of bytes.  An attempt is made to read as many as&#xA;     * &lt;code>len&lt;/code> bytes, but a smaller number may be read.&#xA;     * The number of bytes actually read is returned as an integer.&#xA;     *&#xA;     * &lt;p> This method blocks until input data is available, end of file is&#xA;     * detected, or an exception is thrown.&#xA;     *&#xA;     * &lt;p> If &lt;code>b&lt;/code> is &lt;code>null&lt;/code>, a&#xA;     * &lt;code>NullPointerException&lt;/code> is thrown.&#xA;     *&#xA;     * &lt;p> If &lt;code>off&lt;/code> is negative, or &lt;code>len&lt;/code> is negative, or&#xA;     * &lt;code>off+len&lt;/code> is greater than the length of the array&#xA;     * &lt;code>b&lt;/code>, then an &lt;code>IndexOutOfBoundsException&lt;/code> is&#xA;     * thrown.&#xA;     *&#xA;     * &lt;p> If &lt;code>len&lt;/code> is zero, then no bytes are read and&#xA;     * &lt;code>0&lt;/code> is returned; otherwise, there is an attempt to read at&#xA;     * least one byte. If no byte is available because the stream is at end of&#xA;     * file, the value &lt;code>-1&lt;/code> is returned; otherwise, at least one&#xA;     * byte is read and stored into &lt;code>b&lt;/code>.&#xA;     *&#xA;     * &lt;p> The first byte read is stored into element &lt;code>b[off]&lt;/code>, the&#xA;     * next one into &lt;code>b[off+1]&lt;/code>, and so on. The number of bytes read&#xA;     * is, at most, equal to &lt;code>len&lt;/code>. Let &lt;i>k&lt;/i> be the number of&#xA;     * bytes actually read; these bytes will be stored in elements&#xA;     * &lt;code>b[off]&lt;/code> through &lt;code>b[off+&lt;/code>&lt;i>k&lt;/i>&lt;code>-1]&lt;/code>,&#xA;     * leaving elements &lt;code>b[off+&lt;/code>&lt;i>k&lt;/i>&lt;code>]&lt;/code> through&#xA;     * &lt;code>b[off+len-1]&lt;/code> unaffected.&#xA;     *&#xA;     * &lt;p> In every case, elements &lt;code>b[0]&lt;/code> through&#xA;     * &lt;code>b[off]&lt;/code> and elements &lt;code>b[off+len]&lt;/code> through&#xA;     * &lt;code>b[b.length-1]&lt;/code> are unaffected.&#xA;     *&#xA;     * &lt;p> If the first byte cannot be read for any reason other than end of&#xA;     * file, then an &lt;code>IOException&lt;/code> is thrown. In particular, an&#xA;     * &lt;code>IOException&lt;/code> is thrown if the input stream has been closed.&#xA;     *&#xA;     * &lt;p> The &lt;code>read(b,&lt;/code> &lt;code>off,&lt;/code> &lt;code>len)&lt;/code> method&#xA;     * for class &lt;code>InputStream&lt;/code> simply calls the method&#xA;     * &lt;code>read()&lt;/code> repeatedly. If the first such call results in an&#xA;     * &lt;code>IOException&lt;/code>, that exception is returned from the call to&#xA;     * the &lt;code>read(b,&lt;/code> &lt;code>off,&lt;/code> &lt;code>len)&lt;/code> method.  If&#xA;     * any subsequent call to &lt;code>read()&lt;/code> results in a&#xA;     * &lt;code>IOException&lt;/code>, the exception is caught and treated as if it&#xA;     * were end of file; the bytes read up to that point are stored into&#xA;     * &lt;code>b&lt;/code> and the number of bytes read before the exception&#xA;     * occurred is returned.  Subclasses are encouraged to provide a more&#xA;     * efficient implementation of this method.&#xA;     *&#xA;     * @param      b     the buffer into which the data is read.&#xA;     * @param      off   the start offset in array &lt;code>b&lt;/code>&#xA;     *                   at which the data is written.&#xA;     * @param      len   the maximum number of bytes to read.&#xA;     * @return     the total number of bytes read into the buffer, or&#xA;     *             &lt;code>-1&lt;/code> if there is no more data because the end of&#xA;     *             the stream has been reached.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     * @exception  NullPointerException  if &lt;code>b&lt;/code> is &lt;code>null&lt;/code>.&#xA;     * @see        java.io.InputStream#read()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </expression>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="c">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.2"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Byte"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.2"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                      <arraySelectors>
                        <position xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </position>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:Byte"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <catcheBlocks>
          <parameter name="ee">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="skip">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Skips over and discards &lt;code>n&lt;/code> bytes of data from this input&#xA;     * stream. The &lt;code>skip&lt;/code> method may, for a variety of reasons, end&#xA;     * up skipping over some smaller number of bytes, possibly &lt;code>0&lt;/code>.&#xA;     * This may result from any of a number of conditions; reaching end of file&#xA;     * before &lt;code>n&lt;/code> bytes have been skipped is only one possibility.&#xA;     * The actual number of bytes skipped is returned.  If &lt;code>n&lt;/code> is&#xA;     * negative, no bytes are skipped.&#xA;     *&#xA;     * &lt;p> The &lt;code>skip&lt;/code> method of &lt;code>InputStream&lt;/code> creates a&#xA;     * byte array and then repeatedly reads into it until &lt;code>n&lt;/code> bytes&#xA;     * have been read or the end of the stream has been reached. Subclasses are&#xA;     * encouraged to provide a more efficient implementation of this method.&#xA;     *&#xA;     * @param      n   the number of bytes to be skipped.&#xA;     * @return     the actual number of bytes skipped.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="remaining">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="nr">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Byte"/>
              <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="localSkipBuffer">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.4">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.3/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Int"/>
                  <child xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
                  </child>
                </arguments>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Break"/>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentMinus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
          <additiveOperators xsi:type="operators:Subtraction"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="available">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of bytes that can be read (or skipped over) from&#xA;     * this input stream without blocking by the next caller of a method for&#xA;     * this input stream.  The next caller might be the same thread or&#xA;     * another thread.&#xA;     *&#xA;     * &lt;p> The &lt;code>available&lt;/code> method for class &lt;code>InputStream&lt;/code>&#xA;     * always returns &lt;code>0&lt;/code>.&#xA;     *&#xA;     * &lt;p> This method should be overridden by subclasses.&#xA;     *&#xA;     * @return     the number of bytes that can be read from this input stream&#xA;     *             without blocking.&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Closes this input stream and releases any system resources associated&#xA;     * with the stream.&#xA;     *&#xA;     * &lt;p> The &lt;code>close&lt;/code> method of &lt;code>InputStream&lt;/code> does&#xA;     * nothing.&#xA;     *&#xA;     * @exception  IOException  if an I/O error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="mark">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="readlimit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Marks the current position in this input stream. A subsequent call to&#xA;     * the &lt;code>reset&lt;/code> method repositions this stream at the last marked&#xA;     * position so that subsequent reads re-read the same bytes.&#xA;     *&#xA;     * &lt;p> The &lt;code>readlimit&lt;/code> arguments tells this input stream to&#xA;     * allow that many bytes to be read before the mark position gets&#xA;     * invalidated.&#xA;     *&#xA;     * &lt;p> The general contract of &lt;code>mark&lt;/code> is that, if the method&#xA;     * &lt;code>markSupported&lt;/code> returns &lt;code>true&lt;/code>, the stream somehow&#xA;     * remembers all the bytes read after the call to &lt;code>mark&lt;/code> and&#xA;     * stands ready to supply those same bytes again if and whenever the method&#xA;     * &lt;code>reset&lt;/code> is called.  However, the stream is not required to&#xA;     * remember any data at all if more than &lt;code>readlimit&lt;/code> bytes are&#xA;     * read from the stream before &lt;code>reset&lt;/code> is called.&#xA;     *&#xA;     * &lt;p> The &lt;code>mark&lt;/code> method of &lt;code>InputStream&lt;/code> does&#xA;     * nothing.&#xA;     *&#xA;     * @param   readlimit   the maximum limit of bytes that can be read before&#xA;     *                      the mark position becomes invalid.&#xA;     * @see     java.io.InputStream#reset()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Repositions this stream to the position at the time the&#xA;     * &lt;code>mark&lt;/code> method was last called on this input stream.&#xA;     *&#xA;     * &lt;p> The general contract of &lt;code>reset&lt;/code> is:&#xA;     *&#xA;     * &lt;p>&lt;ul>&#xA;     *&#xA;     * &lt;li> If the method &lt;code>markSupported&lt;/code> returns&#xA;     * &lt;code>true&lt;/code>, then:&#xA;     *&#xA;     *     &lt;ul>&lt;li> If the method &lt;code>mark&lt;/code> has not been called since&#xA;     *     the stream was created, or the number of bytes read from the stream&#xA;     *     since &lt;code>mark&lt;/code> was last called is larger than the argument&#xA;     *     to &lt;code>mark&lt;/code> at that last call, then an&#xA;     *     &lt;code>IOException&lt;/code> might be thrown.&#xA;     *&#xA;     *     &lt;li> If such an &lt;code>IOException&lt;/code> is not thrown, then the&#xA;     *     stream is reset to a state such that all the bytes read since the&#xA;     *     most recent call to &lt;code>mark&lt;/code> (or since the start of the&#xA;     *     file, if &lt;code>mark&lt;/code> has not been called) will be resupplied&#xA;     *     to subsequent callers of the &lt;code>read&lt;/code> method, followed by&#xA;     *     any bytes that otherwise would have been the next input data as of&#xA;     *     the time of the call to &lt;code>reset&lt;/code>. &lt;/ul>&#xA;     *&#xA;     * &lt;li> If the method &lt;code>markSupported&lt;/code> returns&#xA;     * &lt;code>false&lt;/code>, then:&#xA;     *&#xA;     *     &lt;ul>&lt;li> The call to &lt;code>reset&lt;/code> may throw an&#xA;     *     &lt;code>IOException&lt;/code>.&#xA;     *&#xA;     *     &lt;li> If an &lt;code>IOException&lt;/code> is not thrown, then the stream&#xA;     *     is reset to a fixed state that depends on the particular type of the&#xA;     *     input stream and how it was created. The bytes that will be supplied&#xA;     *     to subsequent callers of the &lt;code>read&lt;/code> method depend on the&#xA;     *     particular type of the input stream. &lt;/ul>&lt;/ul>&#xA;     *&#xA;     * &lt;p>The method &lt;code>reset&lt;/code> for class &lt;code>InputStream&lt;/code>&#xA;     * does nothing except throw an &lt;code>IOException&lt;/code>.&#xA;     *&#xA;     * @exception  IOException  if this stream has not been marked or if the&#xA;     *               mark has been invalidated.&#xA;     * @see     java.io.InputStream#mark(int)&#xA;     * @see     java.io.IOException&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="IOException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="mark/reset not supported"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="markSupported">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if this input stream supports the &lt;code>mark&lt;/code> and&#xA;     * &lt;code>reset&lt;/code> methods. Whether or not &lt;code>mark&lt;/code> and&#xA;     * &lt;code>reset&lt;/code> are supported is an invariant property of a&#xA;     * particular input stream instance. The &lt;code>markSupported&lt;/code> method&#xA;     * of &lt;code>InputStream&lt;/code> returns &lt;code>false&lt;/code>.&#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if this stream instance supports the mark&#xA;     *          and reset methods; &lt;code>false&lt;/code> otherwise.&#xA;     * @see     java.io.InputStream#mark(int)&#xA;     * @see     java.io.InputStream#reset()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This abstract class is the superclass of all classes representing&#xA; * an input stream of bytes.&#xA; *&#xA; * &lt;p> Applications that need to define a subclass of &lt;code>InputStream&lt;/code>&#xA; * must always provide a method that returns the next byte of input.&#xA; *&#xA; * @author  Arthur van Hoff&#xA; * @version 1.45, 02/19/04&#xA; * @see     java.io.BufferedInputStream&#xA; * @see     java.io.ByteArrayInputStream&#xA; * @see     java.io.DataInputStream&#xA; * @see     java.io.FilterInputStream&#xA; * @see     java.io.InputStream#read()&#xA; * @see     java.io.OutputStream&#xA; * @see     java.io.PushbackInputStream&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Closeable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
