<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ServerSocketChannel.java">
  <comments>/*&#xA; * @(#)ServerSocketChannel.java&#x9;1.24 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/ServerSocket.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/SocketAddress.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
    <namespaces>spi</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ServerSocketChannel">
    <members xsi:type="members:Constructor" name="ServerSocketChannel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="provider">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="spi/SelectorProvider.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Initializes a new instance of this class.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="open">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a server-socket channel.&#xA;     *&#xA;     * &lt;p> The new channel is created by invoking the {@link&#xA;     * java.nio.channels.spi.SelectorProvider#openServerSocketChannel&#xA;     * openServerSocketChannel} method of the system-wide default {@link&#xA;     * java.nio.channels.spi.SelectorProvider} object.&#xA;     *&#xA;     * &lt;p> The new channel's socket is initially unbound; it must be bound to a&#xA;     * specific address via one of its socket's {@link&#xA;     * java.net.ServerSocket#bind(SocketAddress) bind} methods before&#xA;     * connections can be accepted.  &lt;/p>&#xA;     *&#xA;     * @return  A new socket channel&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="spi/SelectorProvider.class.xmi#//@classifiers.0/@members.9"/>
            </next>
            <target xsi:type="members:ClassMethod" href="spi/SelectorProvider.class.xmi#//@classifiers.0/@members.5"/>
          </next>
          <target xsi:type="classifiers:Class" href="spi/SelectorProvider.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="validOps">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an operation set identifying this channel's supported&#xA;     * operations.&#xA;     *&#xA;     * &lt;p> Server-socket channels only support the accepting of new&#xA;     * connections, so this method returns {@link SelectionKey#OP_ACCEPT}.&#xA;     * &lt;/p>&#xA;     *&#xA;     * @return  The valid-operation set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="SelectionKey.class.xmi#//@classifiers.0/@members.3"/>
          </next>
          <target xsi:type="classifiers:Class" href="SelectionKey.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="socket">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/ServerSocket.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// -- ServerSocket-specific operations --</comments>
        <comments>/**&#xA;     * Retrieves a server socket associated with this channel.&#xA;     *&#xA;     * &lt;p> The returned object will not declare any public methods that are not&#xA;     * declared in the {@link java.net.ServerSocket} class.  &lt;/p>&#xA;     *&#xA;     * @return  A server socket associated with this channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="accept">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SocketChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Accepts a connection made to this channel's socket.&#xA;     *&#xA;     * &lt;p> If this channel is in non-blocking mode then this method will&#xA;     * immediately return &lt;tt>null&lt;/tt> if there are no pending connections.&#xA;     * Otherwise it will block indefinitely until a new connection is available&#xA;     * or an I/O error occurs.&#xA;     *&#xA;     * &lt;p> The socket channel returned by this method, if any, will be in&#xA;     * blocking mode regardless of the blocking mode of this channel.&#xA;     *&#xA;     * &lt;p> This method performs exactly the same security checks as the {@link&#xA;     * java.net.ServerSocket#accept accept} method of the {@link&#xA;     * java.net.ServerSocket} class.  That is, if a security manager has been&#xA;     * installed then for each new connection this method verifies that the&#xA;     * address and port number of the connection's remote endpoint are&#xA;     * permitted by the security manager's {@link&#xA;     * java.lang.SecurityManager#checkAccept checkAccept} method.  &lt;/p>&#xA;     *&#xA;     * @return  The socket channel for the new connection,&#xA;     *          or &lt;tt>null&lt;/tt> if this channel is in non-blocking mode&#xA;     *          and no connection is available to be accepted&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  AsynchronousCloseException&#xA;     *          If another thread closes this channel&#xA;     *          while the accept operation is in progress&#xA;     *&#xA;     * @throws  ClosedByInterruptException&#xA;     *          If another thread interrupts the current thread&#xA;     *          while the accept operation is in progress, thereby&#xA;     *          closing the channel and setting the current thread's&#xA;     *          interrupt status&#xA;     *&#xA;     * @throws  NotYetBoundException&#xA;     *          If this channel's socket has not yet been bound&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager has been installed&#xA;     *          and it does not permit access to the remote endpoint&#xA;     *          of the new connection&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A selectable channel for stream-oriented listening sockets.&#xA; *&#xA; * &lt;p> Server-socket channels are not a complete abstraction of listening&#xA; * network sockets.  Binding and the manipulation of socket options must be&#xA; * done through an associated {@link java.net.ServerSocket} object obtained by&#xA; * invoking the {@link #socket() socket} method.  It is not possible to create&#xA; * a channel for an arbitrary, pre-existing server socket, nor is it possible&#xA; * to specify the {@link java.net.SocketImpl} object to be used by a server&#xA; * socket associated with a server-socket channel.&#xA; *&#xA; * &lt;p> A server-socket channel is created by invoking the {@link #open() open}&#xA; * method of this class.  A newly-created server-socket channel is open but not&#xA; * yet bound.  An attempt to invoke the {@link #accept() accept} method of an&#xA; * unbound server-socket channel will cause a {@link NotYetBoundException} to&#xA; * be thrown.  A server-socket channel can be bound by invoking one of the&#xA; * {@link java.net.ServerSocket#bind(java.net.SocketAddress,int) bind} methods&#xA; * of an associated server socket.&#xA; *&#xA; * &lt;p> Server-socket channels are safe for use by multiple concurrent threads.&#xA; * &lt;/p>&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.24, 03/12/19&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="spi/AbstractSelectableChannel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
