<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ScatteringByteChannel.java">
  <comments>/*&#xA; * @(#)ScatteringByteChannel.java&#x9;1.13 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ScatteringByteChannel">
    <members xsi:type="members:InterfaceMethod" name="read">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dsts">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads a sequence of bytes from this channel into a subsequence of the&#xA;     * given buffers.&#xA;     *&#xA;     * &lt;p> An invocation of this method attempts to read up to &lt;i>r&lt;/i> bytes&#xA;     * from this channel, where &lt;i>r&lt;/i> is the total number of bytes remaining&#xA;     * the specified subsequence of the given buffer array, that is,&#xA;     *&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * dsts[offset].remaining()&#xA;     *     + dsts[offset+1].remaining()&#xA;     *     + ... + dsts[offset+length-1].remaining()&lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * at the moment that this method is invoked.&#xA;     *&#xA;     * &lt;p> Suppose that a byte sequence of length &lt;i>n&lt;/i> is read, where&#xA;     * &lt;tt>0&lt;/tt>&amp;nbsp;&lt;tt>&amp;lt;=&lt;/tt>&amp;nbsp;&lt;i>n&lt;/i>&amp;nbsp;&lt;tt>&amp;lt;=&lt;/tt>&amp;nbsp;&lt;i>r&lt;/i>.&#xA;     * Up to the first &lt;tt>dsts[offset].remaining()&lt;/tt> bytes of this sequence&#xA;     * are transferred into buffer &lt;tt>dsts[offset]&lt;/tt>, up to the next&#xA;     * &lt;tt>dsts[offset+1].remaining()&lt;/tt> bytes are transferred into buffer&#xA;     * &lt;tt>dsts[offset+1]&lt;/tt>, and so forth, until the entire byte sequence&#xA;     * is transferred into the given buffers.  As many bytes as possible are&#xA;     * transferred into each buffer, hence the final position of each updated&#xA;     * buffer, except the last updated buffer, is guaranteed to be equal to&#xA;     * that buffer's limit.&#xA;     *&#xA;     * &lt;p> This method may be invoked at any time.  If another thread has&#xA;     * already initiated a read operation upon this channel, however, then an&#xA;     * invocation of this method will block until the first operation is&#xA;     * complete. &lt;/p>&#xA;     *&#xA;     * @param  dsts&#xA;     *         The buffers into which bytes are to be transferred&#xA;     *&#xA;     * @param  offset&#xA;     *         The offset within the buffer array of the first buffer into&#xA;     *         which bytes are to be transferred; must be non-negative and no&#xA;     *         larger than &lt;tt>dsts.length&lt;/tt>&#xA;     *&#xA;     * @param  length&#xA;     *         The maximum number of buffers to be accessed; must be&#xA;     *         non-negative and no larger than&#xA;     *         &lt;tt>dsts.length&lt;/tt>&amp;nbsp;-&amp;nbsp;&lt;tt>offset&lt;/tt>&#xA;     *&#xA;     * @return The number of bytes read, possibly zero,&#xA;     *         or &lt;tt>-1&lt;/tt> if the channel has reached end-of-stream&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          If the preconditions on the &lt;tt>offset&lt;/tt> and &lt;tt>length&lt;/tt>&#xA;     *          parameters do not hold&#xA;     *&#xA;     * @throws  NonReadableChannelException&#xA;     *          If this channel was not opened for reading&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  AsynchronousCloseException&#xA;     *          If another thread closes this channel&#xA;     *          while the read operation is in progress&#xA;     *&#xA;     * @throws  ClosedByInterruptException&#xA;     *          If another thread interrupts the current thread&#xA;     *          while the read operation is in progress, thereby&#xA;     *          closing the channel and setting the current thread's&#xA;     *          interrupt status&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dsts">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reads a sequence of bytes from this channel into the given buffers.&#xA;     *&#xA;     * &lt;p> An invocation of this method of the form &lt;tt>c.read(dsts)&lt;/tt>&#xA;     * behaves in exactly the same manner as the invocation&#xA;     *&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * c.read(dsts, 0, srcs.length);&lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param  dsts&#xA;     *         The buffers into which bytes are to be transferred&#xA;     *&#xA;     * @return The number of bytes read, possibly zero,&#xA;     *         or &lt;tt>-1&lt;/tt> if the channel has reached end-of-stream&#xA;     *&#xA;     * @throws  NonReadableChannelException&#xA;     *          If this channel was not opened for reading&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  AsynchronousCloseException&#xA;     *          If another thread closes this channel&#xA;     *          while the read operation is in progress&#xA;     *&#xA;     * @throws  ClosedByInterruptException&#xA;     *          If another thread interrupts the current thread&#xA;     *          while the read operation is in progress, thereby&#xA;     *          closing the channel and setting the current thread's&#xA;     *          interrupt status&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A channel that can read bytes into a sequence of buffers.&#xA; *&#xA; * &lt;p> A &lt;i>scattering&lt;/i> read operation reads, in a single invocation, a&#xA; * sequence of bytes into one or more of a given sequence of buffers.&#xA; * Scattering reads are often useful when implementing network protocols or&#xA; * file formats that, for example, group data into segments consisting of one&#xA; * or more fixed-length headers followed by a variable-length body.  Similar&#xA; * &lt;i>gathering&lt;/i> write operations are defined in the {@link&#xA; * GatheringByteChannel} interface.  &lt;/p>&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.13, 03/12/19&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ReadableByteChannel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
