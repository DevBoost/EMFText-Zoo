<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SelectableChannel.java">
  <comments>/*&#xA; * @(#)SelectableChannel.java&#x9;1.34 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
    <namespaces>spi</namespaces>
    <classifier xsi:type="classifiers:Class" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
    <namespaces>spi</namespaces>
    <classifier xsi:type="classifiers:Class" href="spi/SelectorProvider.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SelectableChannel">
    <members xsi:type="members:Constructor" name="SelectableChannel">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Initializes a new instance of this class.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="provider">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="spi/SelectorProvider.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the provider that created this channel.&#xA;     *&#xA;     * @return  The provider that created this channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="validOps">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;a href=&quot;SelectionKey.html#opsets&quot;>operation set&lt;/a>&#xA;     * identifying this channel's supported operations.  The bits that are set&#xA;     * in this integer value denote exactly the operations that are valid for&#xA;     * this channel.  This method always returns the same value for a given&#xA;     * concrete channel class. &lt;/p>&#xA;     *&#xA;     * @return  The valid-operation set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isRegistered">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Internal state:</comments>
        <comments>//   keySet, may be empty but is never null, typ. a tiny array</comments>
        <comments>//   boolean isRegistered, protected by key set</comments>
        <comments>//   regLock, lock object to prevent duplicate registrations</comments>
        <comments>//   boolean isBlocking, protected by regLock</comments>
        <comments>/**&#xA;     * Tells whether or not this channel is currently registered with any&#xA;     * selectors.  A newly-created channel is not registered.&#xA;     *&#xA;     * &lt;p> Due to the inherent delay between key cancellation and channel&#xA;     * deregistration, a channel may remain registered for some time after all&#xA;     * of its keys have been cancelled.  A channel may also remain registered&#xA;     * for some time after it is closed.  &lt;/p>&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if, and only if, this channel is registered&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="keyFor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SelectionKey.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Selector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// sync(keySet) { return isRegistered; }</comments>
        <comments>/**&#xA;     * Retrieves the key representing the channel's registration with the given&#xA;     * selector.  &lt;/p>&#xA;     *&#xA;     * @return  The key returned when this channel was last registered with the&#xA;     *          given selector, or &lt;tt>null&lt;/tt> if this channel is not&#xA;     *          currently registered with that selector&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="register">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SelectionKey.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Selector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ops">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="att">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ClosedChannelException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// sync(keySet) { return findKey(sel); }</comments>
        <comments>/**&#xA;     * Registers this channel with the given selector, returning a selection&#xA;     * key.&#xA;     *&#xA;     * &lt;p> If this channel is currently registered with the given selector then&#xA;     * the selection key representing that registration is returned.  The key's&#xA;     * interest set will have been changed to &lt;tt>ops&lt;/tt>, as if by invoking&#xA;     * the {@link SelectionKey#interestOps(int) interestOps(int)} method.  If&#xA;     * the &lt;tt>att&lt;/tt> argument is not &lt;tt>null&lt;/tt> then the key's attachment&#xA;     * will have been set to that value.  A {@link CancelledKeyException} will&#xA;     * be thrown if the key has already been cancelled.&#xA;     *&#xA;     * &lt;p> Otherwise this channel has not yet been registered with the given&#xA;     * selector, so it is registered and the resulting new key is returned.&#xA;     * The key's initial interest set will be &lt;tt>ops&lt;/tt> and its attachment&#xA;     * will be &lt;tt>att&lt;/tt>.&#xA;     *&#xA;     * &lt;p> This method may be invoked at any time.  If this method is invoked&#xA;     * while another invocation of this method or of the {@link&#xA;     * #configureBlocking(boolean) configureBlocking} method is in progress&#xA;     * then it will first block until the other operation is complete.  This&#xA;     * method will then synchronize on the selector's key set and therefore may&#xA;     * block if invoked concurrently with another registration or selection&#xA;     * operation involving the same selector. &lt;/p>&#xA;     *&#xA;     * &lt;p> If this channel is closed while this operation is in progress then&#xA;     * the key returned by this method will have been cancelled and will&#xA;     * therefore be invalid. &lt;/p>&#xA;     *&#xA;     * @param  sel&#xA;     *         The selector with which this channel is to be registered&#xA;     *&#xA;     * @param  ops&#xA;     *         The interest set for the resulting key&#xA;     *&#xA;     * @param  att&#xA;     *         The attachment for the resulting key; may be &lt;tt>null&lt;/tt>&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  IllegalBlockingModeException&#xA;     *          If this channel is in blocking mode&#xA;     *&#xA;     * @throws  IllegalSelectorException&#xA;     *          If this channel was not created by the same provider&#xA;     *          as the given selector&#xA;     *&#xA;     * @throws  CancelledKeyException&#xA;     *          If this channel is currently registered with the given selector&#xA;     *          but the corresponding key has already been cancelled&#xA;     *&#xA;     * @throws  IllegalArgumentException&#xA;     *          If a bit in the &lt;tt>ops&lt;/tt> set does not correspond to an&#xA;     *          operation that is supported by this channel, that is, if&#xA;     *          &lt;tt>set &amp; ~validOps() != 0&lt;/tt>&#xA;     *&#xA;     * @return  A key representing the registration of this channel with&#xA;     *          the given selector&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="register">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SelectionKey.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Selector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ops">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ClosedChannelException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// sync(regLock) {</comments>
        <comments>//   sync(keySet) { look for selector }</comments>
        <comments>//   if (channel found) { set interest ops -- may block in selector;</comments>
        <comments>//                        return key; }</comments>
        <comments>//   create new key -- may block somewhere in selector;</comments>
        <comments>//   sync(keySet) { add key; }</comments>
        <comments>//   attach(attachment);</comments>
        <comments>//   return key;</comments>
        <comments>// }</comments>
        <comments>/**&#xA;     * Registers this channel with the given selector, returning a selection&#xA;     * key.&#xA;     *&#xA;     * &lt;p> An invocation of this convenience method of the form&#xA;     *&#xA;     * &lt;blockquote>&lt;tt>sc.register(sel, ops)&lt;/tt>&lt;/blockquote>&#xA;     *&#xA;     * behaves in exactly the same way as the invocation&#xA;     *&#xA;     * &lt;blockquote>&lt;tt>sc.{@link&#xA;     * #register(java.nio.channels.Selector,int,java.lang.Object)&#xA;     * register}(sel, ops, null)&lt;/tt>&lt;/blockquote>&#xA;     * &#xA;     * @param  sel&#xA;     *         The selector with which this channel is to be registered&#xA;     *&#xA;     * @param  ops&#xA;     *         The interest set for the resulting key&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  IllegalBlockingModeException&#xA;     *          If this channel is in blocking mode&#xA;     *&#xA;     * @throws  IllegalSelectorException&#xA;     *          If this channel was not created by the same provider&#xA;     *          as the given selector&#xA;     *&#xA;     * @throws  CancelledKeyException&#xA;     *          If this channel is currently registered with the given selector&#xA;     *          but the corresponding key has already been cancelled&#xA;     *&#xA;     * @throws  IllegalArgumentException&#xA;     *          If a bit in &lt;tt>ops&lt;/tt> does not correspond to an operation&#xA;     *          that is supported by this channel, that is, if &lt;tt>set &amp;&#xA;     *          ~validOps() != 0&lt;/tt>&#xA;     *&#xA;     * @return  A key representing the registration of this channel with&#xA;     *          the given selector&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="configureBlocking">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="block">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adjusts this channel's blocking mode.&#xA;     *&#xA;     * &lt;p> If this channel is registered with one or more selectors then an&#xA;     * attempt to place it into blocking mode will cause an {@link&#xA;     * IllegalBlockingModeException} to be thrown.&#xA;     *&#xA;     * &lt;p> This method may be invoked at any time.  The new blocking mode will&#xA;     * only affect I/O operations that are initiated after this method returns.&#xA;     * For some implementations this may require blocking until all pending I/O&#xA;     * operations are complete.&#xA;     *&#xA;     * &lt;p> If this method is invoked while another invocation of this method or&#xA;     * of the {@link #register(Selector, int) register} method is in progress&#xA;     * then it will first block until the other operation is complete. &lt;/p>&#xA;     *&#xA;     * @param  block  If &lt;tt>true&lt;/tt> then this channel will be placed in&#xA;     *                blocking mode; if &lt;tt>false&lt;/tt> then it will be placed&#xA;     *                non-blocking mode&#xA;     *&#xA;     * @return  This selectable channel&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  IllegalBlockingModeException&#xA;     *          If &lt;tt>block&lt;/tt> is &lt;tt>true&lt;/tt> and this channel is&#xA;     *          registered with one or more selectors&#xA;     *&#xA;     * @throws IOException&#xA;     *         If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isBlocking">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// sync(regLock) {</comments>
        <comments>//   sync(keySet) { throw IBME if block &amp;&amp; isRegistered; }</comments>
        <comments>//   change mode;</comments>
        <comments>// }</comments>
        <comments>/**&#xA;     * Tells whether or not every I/O operation on this channel will block&#xA;     * until it completes.  A newly-created channel is always in blocking mode.&#xA;     *&#xA;     * &lt;p> If this channel is closed then the value returned by this method is&#xA;     * not specified. &lt;/p>&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if, and only if, this channel is in blocking mode&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="blockingLock">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the object upon which the {@link #configureBlocking&#xA;     * configureBlocking} and {@link #register register} methods synchronize.&#xA;     * This is often useful in the implementation of adaptors that require a&#xA;     * specific blocking mode to be maintained for a short period of time.&#xA;     * &lt;/p>&#xA;     *&#xA;     * @return  The blocking-mode lock object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A channel that can be multiplexed via a {@link Selector}.&#xA; *&#xA; * &lt;p> In order to be used with a selector, an instance of this class must&#xA; * first be &lt;i>registered&lt;/i> via the {@link #register(Selector,int,Object)&#xA; * register} method.  This method returns a new {@link SelectionKey} object&#xA; * that represents the channel's registration with the selector.&#xA; *&#xA; * &lt;p> Once registered with a selector, a channel remains registered until it&#xA; * is &lt;i>deregistered&lt;/i>.  This involves deallocating whatever resources were&#xA; * allocated to the channel by the selector.&#xA; *&#xA; * &lt;p> A channel cannot be deregistered directly; instead, the key representing&#xA; * its registration must be &lt;i>cancelled&lt;/i>.  Cancelling a key requests that&#xA; * the channel be deregistered during the selector's next selection operation.&#xA; * A key may be cancelled explicitly by invoking its {@link&#xA; * SelectionKey#cancel() cancel} method.  All of a channel's keys are cancelled&#xA; * implicitly when the channel is closed, whether by invoking its {@link&#xA; * Channel#close close} method or by interrupting a thread blocked in an I/O&#xA; * operation upon the channel.&#xA; *&#xA; * &lt;p> If the selector itself is closed then the channel will be deregistered,&#xA; * and the key representing its registration will be invalidated, without&#xA; * further delay.&#xA; *&#xA; * &lt;p> A channel may be registered at most once with any particular selector.&#xA; *&#xA; * &lt;p> Whether or not a channel is registered with one or more selectors may be&#xA; * determined by invoking the {@link #isRegistered isRegistered} method.&#xA; *&#xA; * &lt;p> Selectable channels are safe for use by multiple concurrent&#xA; * threads. &lt;/p>&#xA; *&#xA; *&#xA; * &lt;a name=&quot;bm&quot;>&#xA; * &lt;h4>Blocking mode&lt;/h4>&#xA; *&#xA; * A selectable channel is either in &lt;i>blocking&lt;/i> mode or in&#xA; * &lt;i>non-blocking&lt;/i> mode.  In blocking mode, every I/O operation invoked&#xA; * upon the channel will block until it completes.  In non-blocking mode an I/O&#xA; * operation will never block and may transfer fewer bytes than were requested&#xA; * or possibly no bytes at all.  The blocking mode of a selectable channel may&#xA; * be determined by invoking its {@link #isBlocking isBlocking} method.&#xA; *&#xA; * &lt;p> Newly-created selectable channels are always in blocking mode.&#xA; * Non-blocking mode is most useful in conjunction with selector-based&#xA; * multiplexing.  A channel must be placed into non-blocking mode before being&#xA; * registered with a selector, and may not be returned to blocking mode until&#xA; * it has been deregistered.&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.34, 03/12/19&#xA; * @since 1.4&#xA; *&#xA; * @see SelectionKey&#xA; * @see Selector&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Channel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
