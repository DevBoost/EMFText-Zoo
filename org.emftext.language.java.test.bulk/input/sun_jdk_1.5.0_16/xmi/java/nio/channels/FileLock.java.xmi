<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="FileLock.java">
  <comments>/*&#xA; * @(#)FileLock.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="FileLock">
    <members xsi:type="members:Field" name="channel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="FileChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="position">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="size">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="shared">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="FileLock">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Negative position"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Negative size"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Negative position + size"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="channel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="FileChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="position">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shared">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Initializes a new instance of this class.  &lt;/p>&#xA;     *&#xA;     * @param  channel&#xA;     *         The file channel upon whose file this lock is held&#xA;     *&#xA;     * @param  position&#xA;     *         The position within the file at which the locked region starts;&#xA;     *         must be non-negative&#xA;     *&#xA;     * @param  size&#xA;     *         The size of the locked region; must be non-negative, and the sum&#xA;     *         &lt;tt>position&lt;/tt>&amp;nbsp;+&amp;nbsp;&lt;tt>size&lt;/tt> must be non-negative&#xA;     *&#xA;     * @param  shared&#xA;     *         &lt;tt>true&lt;/tt> if this lock is shared,&#xA;     *         &lt;tt>false&lt;/tt> if it is exclusive&#xA;     *&#xA;     * @throws IllegalArgumentException&#xA;     *         If the preconditions on the parameters do not hold&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="channel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="FileChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the file channel upon whose file this lock is held.  &lt;/p>&#xA;     *&#xA;     * @return  The file channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="position">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the position within the file of the first byte of the locked&#xA;     * region.&#xA;     *&#xA;     * &lt;p> A locked region need not be contained within, or even overlap, the&#xA;     * actual underlying file, so the value returned by this method may exceed&#xA;     * the file's current size.  &lt;/p>&#xA;     *&#xA;     * @return  The position&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="size">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the size of the locked region in bytes.&#xA;     *&#xA;     * &lt;p> A locked region need not be contained within, or even overlap, the&#xA;     * actual underlying file, so the value returned by this method may exceed&#xA;     * the file's current size.  &lt;/p>&#xA;     *&#xA;     * @return  The size of the locked region&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isShared">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells whether this lock is shared.  &lt;/p>&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if lock is shared,&#xA;     *         &lt;tt>false&lt;/tt> if it is exclusive&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="overlaps">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="position">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells whether or not this lock overlaps the given lock range.  &lt;/p>&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if, and only if, this lock and the given lock&#xA;     *          range overlap by at least one byte&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </children>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// That is below this</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <self xsi:type="literals:This"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// This is below that</comments>
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isValid">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells whether or not this lock is valid.&#xA;     *&#xA;     * &lt;p> A lock object remains valid until it is released or the associated&#xA;     * file channel is closed, whichever comes first.  &lt;/p>&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if, and only if, this lock is valid&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="release">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Releases this lock.&#xA;     *&#xA;     * &lt;p> If this lock object is valid then invoking this method releases the&#xA;     * lock and renders the object invalid.  If this lock object is invalid&#xA;     * then invoking this method has no effect.  &lt;/p>&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If the channel that was used to acquire this lock&#xA;     *          is no longer open&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string describing the range, type, and validity of this lock.&#xA;     *&#xA;     * @return  A descriptive string&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.44"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:StringReference" value="["/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="references:StringReference" value=":"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:StringReference" value=" "/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                <expressionIf xsi:type="references:StringReference" value="shared"/>
                <expressionElse xsi:type="references:StringReference" value="exclusive"/>
              </expression>
            </children>
            <children xsi:type="references:StringReference" value=" "/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                <expressionIf xsi:type="references:StringReference" value="valid"/>
                <expressionElse xsi:type="references:StringReference" value="invalid"/>
              </expression>
            </children>
            <children xsi:type="references:StringReference" value="]"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A token representing a lock on a region of a file.&#xA; *&#xA; * &lt;p> A file-lock object is created each time a lock is acquired on a file via&#xA; * one of the {@link FileChannel#lock(long,long,boolean) lock} or {@link&#xA; * FileChannel#tryLock(long,long,boolean) tryLock} methods of the {@link&#xA; * FileChannel} class.&#xA; *&#xA; * &lt;p> A file-lock object is initially valid.  It remains valid until the lock&#xA; * is released by invoking the {@link #release release} method, by closing the&#xA; * channel that was used to acquire it, or by the termination of the Java&#xA; * virtual machine, whichever comes first.  The validity of a lock may be&#xA; * tested by invoking its {@link #isValid isValid} method.&#xA; *&#xA; * &lt;p> A file lock is either &lt;i>exclusive&lt;/i> or &lt;i>shared&lt;/i>.  A shared lock&#xA; * prevents other concurrently-running programs from acquiring an overlapping&#xA; * exclusive lock, but does allow them to acquire overlapping shared locks.  An&#xA; * exclusive lock prevents other programs from acquiring an overlapping lock of&#xA; * either type.  Once it is released, a lock has no further effect on the locks&#xA; * that may be acquired by other programs.&#xA; *&#xA; * &lt;p> Whether a lock is exclusive or shared may be determined by invoking its&#xA; * {@link #isShared isShared} method.  Some platforms do not support shared&#xA; * locks, in which case a request for a shared lock is automatically converted&#xA; * into a request for an exclusive lock.&#xA; *&#xA; * &lt;p> The locks held on a particular file by a single Java virtual machine do&#xA; * not overlap.  The {@link #overlaps overlaps} method may be used to test&#xA; * whether a candidate lock range overlaps an existing lock.&#xA; *&#xA; * &lt;p> A file-lock object records the file channel upon whose file the lock is&#xA; * held, the type and validity of the lock, and the position and size of the&#xA; * locked region.  Only the validity of a lock is subject to change over time;&#xA; * all other aspects of a lock's state are immutable.&#xA; *&#xA; * &lt;p> File locks are held on behalf of the entire Java virtual machine.&#xA; * They are not suitable for controlling access to a file by multiple&#xA; * threads within the same virtual machine.&#xA; *&#xA; * &lt;p> File-lock objects are safe for use by multiple concurrent threads.&#xA; *&#xA; *&#xA; * &lt;a name=&quot;pdep&quot;>&#xA; * &lt;h4> Platform dependencies &lt;/h4>&#xA; *&#xA; * &lt;p> This file-locking API is intended to map directly to the native locking&#xA; * facility of the underlying operating system.  Thus the locks held on a file&#xA; * should be visible to all programs that have access to the file, regardless&#xA; * of the language in which those programs are written.&#xA; *&#xA; * &lt;p> Whether or not a lock actually prevents another program from accessing&#xA; * the content of the locked region is system-dependent and therefore&#xA; * unspecified.  The native file-locking facilities of some systems are merely&#xA; * &lt;i>advisory&lt;/i>, meaning that programs must cooperatively observe a known&#xA; * locking protocol in order to guarantee data integrity.  On other systems&#xA; * native file locks are &lt;i>mandatory&lt;/i>, meaning that if one program locks a&#xA; * region of a file then other programs are actually prevented from accessing&#xA; * that region in a way that would violate the lock.  On yet other systems,&#xA; * whether native file locks are advisory or mandatory is configurable on a&#xA; * per-file basis.  To ensure consistent and correct behavior across platforms,&#xA; * it is strongly recommended that the locks provided by this API be used as if&#xA; * they were advisory locks.&#xA; *&#xA; * &lt;p> On some systems, acquiring a mandatory lock on a region of a file&#xA; * prevents that region from being {@link java.nio.channels.FileChannel#map&#xA; * &lt;/code>mapped into memory&lt;code>}, and vice versa.  Programs that combine&#xA; * locking and mapping should be prepared for this combination to fail.&#xA; *&#xA; * &lt;p> On some systems, closing a channel releases all locks held by the Java&#xA; * virtual machine on the underlying file regardless of whether the locks were&#xA; * acquired via that channel or via another channel open on the same file.  It&#xA; * is strongly recommended that, within a program, a unique channel be used to&#xA; * acquire all locks on any given file.&#xA; *&#xA; * &lt;p> Some network filesystems permit file locking to be used with&#xA; * memory-mapped files only when the locked regions are page-aligned and a&#xA; * whole multiple of the underlying hardware's page size.  Some network&#xA; * filesystems do not implement file locks on regions that extend past a&#xA; * certain position, often 2&lt;sup>30&lt;/sup> or 2&lt;sup>31&lt;/sup>.  In general, great&#xA; * care should be taken when locking files that reside on network filesystems.&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.8, 03/12/19&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
