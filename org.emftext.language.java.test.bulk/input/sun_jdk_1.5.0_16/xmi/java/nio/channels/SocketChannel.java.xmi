<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SocketChannel.java">
  <comments>/*&#xA; * @(#)SocketChannel.java&#x9;1.33 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/Socket.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/SocketAddress.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
    <namespaces>spi</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SocketChannel">
    <members xsi:type="members:Constructor" name="SocketChannel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="provider">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="spi/SelectorProvider.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Initializes a new instance of this class.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="open">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a socket channel.&#xA;     *&#xA;     * &lt;p> The new channel is created by invoking the {@link&#xA;     * java.nio.channels.spi.SelectorProvider#openSocketChannel&#xA;     * openSocketChannel} method of the system-wide default {@link&#xA;     * java.nio.channels.spi.SelectorProvider} object.  &lt;/p>&#xA;     *&#xA;     * @return  A new socket channel&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="spi/SelectorProvider.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="members:ClassMethod" href="spi/SelectorProvider.class.xmi#//@classifiers.0/@members.5"/>
          </next>
          <target xsi:type="classifiers:Class" href="spi/SelectorProvider.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="open">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="remote">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../net/SocketAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a socket channel and connects it to a remote address.&#xA;     *&#xA;     * &lt;p> This convenience method works as if by invoking the {@link #open()}&#xA;     * method, invoking the {@link #connect(SocketAddress) connect} method upon&#xA;     * the resulting socket channel, passing it &lt;tt>remote&lt;/tt>, and then&#xA;     * returning that channel.  &lt;/p>&#xA;     *&#xA;     * @param  remote&#xA;     *         The remote address to which the new channel is to be connected&#xA;     *&#xA;     * @throws  AsynchronousCloseException&#xA;     *          If another thread closes this channel&#xA;     *          while the connect operation is in progress&#xA;     *&#xA;     * @throws  ClosedByInterruptException&#xA;     *          If another thread interrupts the current thread&#xA;     *          while the connect operation is in progress, thereby&#xA;     *          closing the channel and setting the current thread's&#xA;     *          interrupt status&#xA;     *&#xA;     * @throws  UnresolvedAddressException&#xA;     *          If the given remote address is not fully resolved&#xA;     *&#xA;     * @throws  UnsupportedAddressTypeException&#xA;     *          If the type of the given remote address is not supported&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager has been installed&#xA;     *          and it does not permit access to the given remote endpoint&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sc">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="validOps">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an operation set identifying this channel's supported&#xA;     * operations.&#xA;     *&#xA;     * &lt;p> Socket channels support connecting, reading, and writing, so this&#xA;     * method returns &lt;tt>(&lt;/tt>{@link SelectionKey#OP_CONNECT}&#xA;     * &lt;tt>|&lt;/tt>&amp;nbsp;{@link SelectionKey#OP_READ} &lt;tt>|&lt;/tt>&amp;nbsp;{@link&#xA;     * SelectionKey#OP_WRITE}&lt;tt>)&lt;/tt>.  &lt;/p>&#xA;     *&#xA;     * @return  The valid-operation set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="SelectionKey.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="SelectionKey.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="SelectionKey.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="SelectionKey.class.xmi#//@classifiers.0"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="SelectionKey.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="classifiers:Class" href="SelectionKey.class.xmi#//@classifiers.0"/>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="socket">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/Socket.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// -- Socket-specific operations --</comments>
        <comments>/**&#xA;     * Retrieves a socket associated with this channel.&#xA;     *&#xA;     * &lt;p> The returned object will not declare any public methods that are not&#xA;     * declared in the {@link java.net.Socket} class.  &lt;/p>&#xA;     *&#xA;     * @return  A socket associated with this channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isConnected">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells whether or not this channel's network socket is connected.  &lt;/p>&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if, and only if, this channel's network socket&#xA;     *          is connected&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isConnectionPending">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells whether or not a connection operation is in progress on this&#xA;     * channel.  &lt;/p>&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if, and only if, a connection operation has been&#xA;     *          initiated on this channel but not yet completed by invoking the&#xA;     *          {@link #finishConnect finishConnect} method&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="connect">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="remote">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../net/SocketAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Connects this channel's socket.&#xA;     *&#xA;     * &lt;p> If this channel is in non-blocking mode then an invocation of this&#xA;     * method initiates a non-blocking connection operation.  If the connection&#xA;     * is established immediately, as can happen with a local connection, then&#xA;     * this method returns &lt;tt>true&lt;/tt>.  Otherwise this method returns&#xA;     * &lt;tt>false&lt;/tt> and the connection operation must later be completed by&#xA;     * invoking the {@link #finishConnect finishConnect} method.&#xA;     *&#xA;     * &lt;p> If this channel is in blocking mode then an invocation of this&#xA;     * method will block until the connection is established or an I/O error&#xA;     * occurs.&#xA;     *&#xA;     * &lt;p> This method performs exactly the same security checks as the {@link&#xA;     * java.net.Socket} class.  That is, if a security manager has been&#xA;     * installed then this method verifies that its {@link&#xA;     * java.lang.SecurityManager#checkConnect checkConnect} method permits&#xA;     * connecting to the address and port number of the given remote endpoint.&#xA;     *&#xA;     * &lt;p> This method may be invoked at any time.  If a read or write&#xA;     * operation upon this channel is invoked while an invocation of this&#xA;     * method is in progress then that operation will first block until this&#xA;     * invocation is complete.  If a connection attempt is initiated but fails,&#xA;     * that is, if an invocation of this method throws a checked exception,&#xA;     * then the channel will be closed.  &lt;/p>&#xA;     *&#xA;     * @param  remote&#xA;     *         The remote address to which this channel is to be connected&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if a connection was established,&#xA;     *          &lt;tt>false&lt;/tt> if this channel is in non-blocking mode&#xA;     *          and the connection operation is in progress&#xA;     *&#xA;     * @throws  AlreadyConnectedException&#xA;     *          If this channel is already connected&#xA;     *&#xA;     * @throws  ConnectionPendingException&#xA;     *          If a non-blocking connection operation is already in progress&#xA;     *          on this channel&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  AsynchronousCloseException&#xA;     *          If another thread closes this channel&#xA;     *          while the connect operation is in progress&#xA;     *&#xA;     * @throws  ClosedByInterruptException&#xA;     *          If another thread interrupts the current thread&#xA;     *          while the connect operation is in progress, thereby&#xA;     *          closing the channel and setting the current thread's&#xA;     *          interrupt status&#xA;     *&#xA;     * @throws  UnresolvedAddressException&#xA;     *          If the given remote address is not fully resolved&#xA;     *&#xA;     * @throws  UnsupportedAddressTypeException&#xA;     *          If the type of the given remote address is not supported&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager has been installed&#xA;     *          and it does not permit access to the given remote endpoint&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="finishConnect">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Finishes the process of connecting a socket channel.&#xA;     *&#xA;     * &lt;p> A non-blocking connection operation is initiated by placing a socket&#xA;     * channel in non-blocking mode and then invoking its {@link #connect&#xA;     * connect} method.  Once the connection is established, or the attempt has&#xA;     * failed, the socket channel will become connectable and this method may&#xA;     * be invoked to complete the connection sequence.  If the connection&#xA;     * operation failed then invoking this method will cause an appropriate&#xA;     * {@link java.io.IOException} to be thrown.&#xA;     *&#xA;     * &lt;p> If this channel is already connected then this method will not block&#xA;     * and will immediately return &lt;tt>true&lt;/tt>.  If this channel is in&#xA;     * non-blocking mode then this method will return &lt;tt>false&lt;/tt> if the&#xA;     * connection process is not yet complete.  If this channel is in blocking&#xA;     * mode then this method will block until the connection either completes&#xA;     * or fails, and will always either return &lt;tt>true&lt;/tt> or throw a checked&#xA;     * exception describing the failure.&#xA;     *&#xA;     * &lt;p> This method may be invoked at any time.  If a read or write&#xA;     * operation upon this channel is invoked while an invocation of this&#xA;     * method is in progress then that operation will first block until this&#xA;     * invocation is complete.  If a connection attempt fails, that is, if an&#xA;     * invocation of this method throws a checked exception, then the channel&#xA;     * will be closed.  &lt;/p>&#xA;     *&#xA;     * @return  &lt;tt>true&lt;/tt> if, and only if, this channel's socket is now&#xA;     *          connected&#xA;     *&#xA;     * @throws  NoConnectionPendingException&#xA;     *          If this channel is not connected and a connection operation&#xA;     *          has not been initiated&#xA;     *&#xA;     * @throws  ClosedChannelException&#xA;     *          If this channel is closed&#xA;     *&#xA;     * @throws  AsynchronousCloseException&#xA;     *          If another thread closes this channel&#xA;     *          while the connect operation is in progress&#xA;     *&#xA;     * @throws  ClosedByInterruptException&#xA;     *          If another thread interrupts the current thread&#xA;     *          while the connect operation is in progress, thereby&#xA;     *          closing the channel and setting the current thread's&#xA;     *          interrupt status&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If some other I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dst">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// -- ByteChannel operations --</comments>
        <comments>/**&#xA;     * @throws  NotYetConnectedException&#xA;     *          If this channel is not yet connected&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dsts">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @throws  NotYetConnectedException&#xA;     *          If this channel is not yet connected&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="read">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dsts">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @throws  NotYetConnectedException&#xA;     *          If this channel is not yet connected&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @throws  NotYetConnectedException&#xA;     *          If this channel is not yet connected&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="srcs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @throws  NotYetConnectedException&#xA;     *          If this channel is not yet connected&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="write">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="srcs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * @throws  NotYetConnectedException&#xA;     *          If this channel is not yet connected&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
            <next xsi:type="references:IdentifierReference"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A selectable channel for stream-oriented connecting sockets.&#xA; * &#xA; * &lt;p> Socket channels are not a complete abstraction of connecting network&#xA; * sockets.  Binding, shutdown, and the manipulation of socket options must be&#xA; * done through an associated {@link java.net.Socket} object obtained by&#xA; * invoking the {@link #socket() socket} method.  It is not possible to create&#xA; * a channel for an arbitrary, pre-existing socket, nor is it possible to&#xA; * specify the {@link java.net.SocketImpl} object to be used by a socket&#xA; * associated with a socket channel.&#xA; *&#xA; * &lt;p> A socket channel is created by invoking one of the {@link #open open}&#xA; * methods of this class.  A newly-created socket channel is open but not yet&#xA; * connected.  An attempt to invoke an I/O operation upon an unconnected&#xA; * channel will cause a {@link NotYetConnectedException} to be thrown.  A&#xA; * socket channel can be connected by invoking its {@link #connect connect}&#xA; * method; once connected, a socket channel remains connected until it is&#xA; * closed.  Whether or not a socket channel is connected may be determined by&#xA; * invoking its {@link #isConnected isConnected} method.&#xA; *&#xA; * &lt;p> Socket channels support &lt;i>non-blocking connection:&lt;/i>&amp;nbsp;A socket&#xA; * channel may be created and the process of establishing the link to the&#xA; * remote socket may be initiated via the {@link #connect connect} method for&#xA; * later completion by the {@link #finishConnect finishConnect} method.&#xA; * Whether or not a connection operation is in progress may be determined by&#xA; * invoking the {@link #isConnectionPending isConnectionPending} method.&#xA; *&#xA; * &lt;p> The input and output sides of a socket channel may independently be&#xA; * &lt;i>shut down&lt;/i> without actually closing the channel.  Shutting down the&#xA; * input side of a channel by invoking the {@link java.net.Socket#shutdownInput&#xA; * shutdownInput} method of an associated socket object will cause further&#xA; * reads on the channel to return &lt;tt>-1&lt;/tt>, the end-of-stream indication.&#xA; * Shutting down the output side of the channel by invoking the {@link&#xA; * java.net.Socket#shutdownOutput shutdownOutput} method of an associated&#xA; * socket object will cause further writes on the channel to throw a {@link&#xA; * ClosedChannelException}.&#xA; *&#xA; * &lt;p> Socket channels support &lt;i>asynchronous shutdown,&lt;/i> which is similar&#xA; * to the asynchronous close operation specified in the {@link Channel} class.&#xA; * If the input side of a socket is shut down by one thread while another&#xA; * thread is blocked in a read operation on the socket's channel, then the read&#xA; * operation in the blocked thread will complete without reading any bytes and&#xA; * will return &lt;tt>-1&lt;/tt>.  If the output side of a socket is shut down by one&#xA; * thread while another thread is blocked in a write operation on the socket's&#xA; * channel, then the blocked thread will receive an {@link&#xA; * AsynchronousCloseException}.&#xA; *&#xA; * &lt;p> Socket channels are safe for use by multiple concurrent threads.  They&#xA; * support concurrent reading and writing, though at most one thread may be&#xA; * reading and at most one thread may be writing at any given time.  The {@link&#xA; * #connect connect} and {@link #finishConnect finishConnect} methods are&#xA; * mutually synchronized against each other, and an attempt to initiate a read&#xA; * or write operation while an invocation of one of these methods is in&#xA; * progress will block until that invocation is complete.  &lt;/p>&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.33, 03/12/19&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ByteChannel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ScatteringByteChannel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="GatheringByteChannel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="spi/AbstractSelectableChannel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
