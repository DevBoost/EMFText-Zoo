<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Channels.java">
  <comments>/*&#xA; * @(#)Channels.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/FileInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/OutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/Reader.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/Writer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../BufferOverflowException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../BufferUnderflowException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../charset/Charset.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../charset/CharsetDecoder.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../charset/CharsetEncoder.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../charset/CoderResult.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../charset/UnsupportedCharsetException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
    <namespaces>spi</namespaces>
    <classifier xsi:type="classifiers:Class" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>ch</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/nio/ch/ChannelInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>cs</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/nio/cs/StreamDecoder.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>cs</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/nio/cs/StreamEncoder.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Channels">
    <members xsi:type="members:Constructor" name="Channels">
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:ClassMethod" name="write">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="WritableByteChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// No instantiation</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sc">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SelectableChannel.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="SelectableChannel.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:SynchronizedBlock">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="IllegalBlockingModeException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </throwable>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="SelectableChannel.class.xmi#//@classifiers.0/@members.8"/>
                  </next>
                </child>
              </condition>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="WritableByteChannel.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
                </next>
              </returnValue>
            </statements>
            <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.0/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SelectableChannel.class.xmi#//@classifiers.0/@members.9"/>
              </next>
            </lockProvider>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SelectableChannel.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="WritableByteChannel.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
              </next>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newInputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ReadableByteChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// -- Byte streams from channels --</comments>
        <comments>/**&#xA;     * Constructs a stream that reads bytes from the given channel.&#xA;     *&#xA;     * &lt;p> The &lt;tt>read&lt;/tt> methods of the resulting stream will throw an&#xA;     * {@link IllegalBlockingModeException} if invoked while the underlying&#xA;     * channel is in non-blocking mode.  The stream will not be buffered, and&#xA;     * it will not support the {@link InputStream#mark mark} or {@link&#xA;     * InputStream#reset reset} methods.  The stream will be safe for access by&#xA;     * multiple concurrent threads.  Closing the stream will in turn cause the&#xA;     * channel to be closed.  &lt;/p>&#xA;     *&#xA;     * @param  ch&#xA;     *         The channel from which bytes will be read&#xA;     *&#xA;     * @return  A new input stream&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>sun</namespaces>
            <namespaces>nio</namespaces>
            <namespaces>ch</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../sun/nio/ch/ChannelInputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newOutputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="WritableByteChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a stream that writes bytes to the given channel.&#xA;     *&#xA;     * &lt;p> The &lt;tt>write&lt;/tt> methods of the resulting stream will throw an&#xA;     * {@link IllegalBlockingModeException} if invoked while the underlying&#xA;     * channel is in non-blocking mode.  The stream will not be buffered.  The&#xA;     * stream will be safe for access by multiple concurrent threads.  Closing&#xA;     * the stream will in turn cause the channel to be closed.  &lt;/p>&#xA;     *&#xA;     * @param  ch&#xA;     *         The channel to which bytes will be written&#xA;     *&#xA;     * @return  A new output stream&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../io/OutputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <anonymousClass>
            <members xsi:type="members:Field" name="bb">
              <initialValue xsi:type="literals:NullLiteral"/>
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <annotationsAndModifiers xsi:type="modifiers:Private"/>
            </members>
            <members xsi:type="members:Field" name="bs">
              <initialValue xsi:type="literals:NullLiteral"/>
              <typeReference xsi:type="types:Byte"/>
              <arrayDimensionsBefore/>
              <annotationsAndModifiers xsi:type="modifiers:Private"/>
            </members>
            <members xsi:type="members:Field" name="b1">
              <initialValue xsi:type="literals:NullLiteral"/>
              <typeReference xsi:type="types:Byte"/>
              <arrayDimensionsBefore/>
              <annotationsAndModifiers xsi:type="modifiers:Private">
                <comments>// Invoker's previous array</comments>
              </annotationsAndModifiers>
            </members>
            <members xsi:type="members:ClassMethod" name="write">
              <typeReference xsi:type="types:Void"/>
              <parameters xsi:type="parameters:OrdinaryParameter" name="b">
                <typeReference xsi:type="types:Int"/>
              </parameters>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.2"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:Byte"/>
                      <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.2"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.2">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Byte"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.3/@parameters.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:SelfReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../io/OutputStream.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.2"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </expression>
              </statements>
            </members>
            <members xsi:type="members:ClassMethod" name="write">
              <typeReference xsi:type="types:Void"/>
              <parameters xsi:type="parameters:OrdinaryParameter" name="bs">
                <typeReference xsi:type="types:Byte"/>
                <arrayDimensionsBefore/>
              </parameters>
              <parameters xsi:type="parameters:OrdinaryParameter" name="off">
                <typeReference xsi:type="types:Int"/>
              </parameters>
              <parameters xsi:type="parameters:OrdinaryParameter" name="len">
                <typeReference xsi:type="types:Int"/>
              </parameters>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.1"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.1"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.0">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.2"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.1"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.2"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </expression>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.0">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.1"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.2"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </expression>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Return"/>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.2"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </condition>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="bb">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:SelfReference">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.1"/>
                            <self xsi:type="literals:This"/>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.0"/>
                        </expression>
                      </child>
                      <expressionIf xsi:type="references:SelfReference">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.0"/>
                        <self xsi:type="literals:This"/>
                      </expressionIf>
                      <expressionElse xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../ByteBuffer.class.xmi#//@classifiers.0/@members.10"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
                      </expressionElse>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.10"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.1"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.2"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@statements.1/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.6"/>
                          </next>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.1"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:SelfReference">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.0"/>
                    <self xsi:type="literals:This"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@statements.1/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:SelfReference">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.1"/>
                    <self xsi:type="literals:This"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@parameters.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@returnValue/@anonymousClass/@members.4/@statements.1/@variable"/>
                  </next>
                </expression>
              </statements>
            </members>
            <members xsi:type="members:ClassMethod" name="close">
              <typeReference xsi:type="types:Void"/>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Channel.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </expression>
              </statements>
            </members>
          </anonymousClass>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newChannel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ReadableByteChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// -- Channels from streams --</comments>
        <comments>/**&#xA;     * Constructs a channel that reads bytes from the given stream.&#xA;     *&#xA;     * &lt;p> The resulting channel will not be buffered; it will simply redirect&#xA;     * its I/O operations to the given stream.  Closing the channel will in&#xA;     * turn cause the stream to be closed.  &lt;/p>&#xA;     *&#xA;     * @param  in&#xA;     *         The stream from which bytes are to be read&#xA;     *&#xA;     * @return  A new readable byte channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="inClass">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.31"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../io/FileInputStream.class.xmi#//@classifiers.0/@members.14"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../io/FileInputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                </expression>
              </returnValue>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="java.io.FileInputStream"/>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../io/FileInputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.5"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="ReadableByteChannelImpl">
      <comments>// Not really interruptible</comments>
      <members xsi:type="members:Field" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="TRANSFER_SIZE">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8192"/>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="buf">
        <initialValue xsi:type="arrays:ArrayInstantiationBySize">
          <typeReference xsi:type="types:Byte"/>
          <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </initialValue>
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="open">
        <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="readLock">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="ReadableByteChannelImpl">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="in">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="read">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="dst">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="len">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.16"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="totalRead">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="bytesRead">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:SynchronizedBlock">
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="bytesToRead">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                      <arguments xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.1/@variable"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </expression>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:Byte"/>
                      <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.3/@statements.0/@statement/@statements.0/@variable"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.3/@statements.0/@statement/@statements.0/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Break"/>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.1/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../io/InputStream.class.xmi#//@classifiers.0/@members.7"/>
                          </next>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <relationOperators xsi:type="operators:GreaterThan"/>
                      </expression>
                    </child>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:TryBlock">
                <comments>// block at most once</comments>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0/@members.8"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.2/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../io/InputStream.class.xmi#//@classifiers.0/@members.5"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.3/@statements.0/@statement/@statements.0/@variable"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <finallyBlock>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0/@members.9"/>
                      <arguments xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.2/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <relationOperators xsi:type="operators:GreaterThan"/>
                      </arguments>
                    </expression>
                  </statements>
                </finallyBlock>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Break"/>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.2/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.2/@variable"/>
                  </expression>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../ByteBuffer.class.xmi#//@classifiers.0/@members.21"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.2/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.1/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </returnValue>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.2/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.1/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.1/@variable"/>
          </statements>
          <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.4"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="implCloseChannel">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../io/InputStream.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.3"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ReadableByteChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="members:ClassMethod" name="newChannel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="WritableByteChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a channel that writes bytes to the given stream.&#xA;     *&#xA;     * &lt;p> The resulting channel will not be buffered; it will simply redirect&#xA;     * its I/O operations to the given stream.  Closing the channel will in&#xA;     * turn cause the stream to be closed.  &lt;/p>&#xA;     *&#xA;     * @param  out&#xA;     *         The stream to which bytes are to be written&#xA;     *&#xA;     * @return  A new writable byte channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="outClass">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.31"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../io/FileOutputStream.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
                </expression>
              </returnValue>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="java.io.FileOutputStream"/>
              </next>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../io/FileOutputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.7"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="WritableByteChannelImpl">
      <comments>// Not really interruptible</comments>
      <members xsi:type="members:Field" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="TRANSFER_SIZE">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8192"/>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="buf">
        <initialValue xsi:type="arrays:ArrayInstantiationBySize">
          <typeReference xsi:type="types:Byte"/>
          <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </initialValue>
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="open">
        <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="writeLock">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="WritableByteChannelImpl">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.5/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="out">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../io/OutputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="write">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="src">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="len">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.16"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="totalWritten">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:SynchronizedBlock">
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="bytesToWrite">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                      <arguments xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.1/@variable"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </expression>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.2"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:Byte"/>
                      <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.2">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../ByteBuffer.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.2"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0/@members.8"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../io/OutputStream.class.xmi#//@classifiers.0/@members.3"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                    </next>
                  </expression>
                </statements>
                <finallyBlock>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0/@members.9"/>
                      <arguments xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <relationOperators xsi:type="operators:GreaterThan"/>
                      </arguments>
                    </expression>
                  </statements>
                </finallyBlock>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.1/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.0/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.6/@statements.1/@variable"/>
          </statements>
          <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.4"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="implCloseChannel">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Protected"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../io/OutputStream.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@members.3"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="WritableByteChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="spi/AbstractInterruptibleChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="members:ClassMethod" name="newReader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ReadableByteChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dec">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../charset/CharsetDecoder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minBufferCap">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// -- Character streams from channels --</comments>
        <comments>/**&#xA;     * Constructs a reader that decodes bytes from the given channel using the&#xA;     * given decoder.&#xA;     *&#xA;     * &lt;p> The resulting stream will contain an internal input buffer of at&#xA;     * least &lt;tt>minBufferCap&lt;/tt> bytes.  The stream's &lt;tt>read&lt;/tt> methods&#xA;     * will, as needed, fill the buffer by reading bytes from the underlying&#xA;     * channel; if the channel is in non-blocking mode when bytes are to be&#xA;     * read then an {@link IllegalBlockingModeException} will be thrown.  The&#xA;     * resulting stream will not otherwise be buffered, and it will not support&#xA;     * the {@link Reader#mark mark} or {@link Reader#reset reset} methods.&#xA;     * Closing the stream will in turn cause the channel to be closed.  &lt;/p>&#xA;     *&#xA;     * @param  ch&#xA;     *         The channel from which bytes will be read&#xA;     *&#xA;     * @param  dec&#xA;     *         The charset decoder to be used&#xA;     *&#xA;     * @param  minBufferCap&#xA;     *         The minimum capacity of the internal byte buffer,&#xA;     *         or &lt;tt>-1&lt;/tt> if an implementation-dependent&#xA;     *         default capacity is to be used&#xA;     *&#xA;     * @return  A new reader&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../charset/CharsetDecoder.class.xmi#//@classifiers.0/@members.30"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../sun/nio/cs/StreamDecoder.class.xmi#//@classifiers.0/@members.17"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../sun/nio/cs/StreamDecoder.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newReader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ReadableByteChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a reader that decodes bytes from the given channel according&#xA;     * to the named charset.&#xA;     *&#xA;     * &lt;p> An invocation of this method of the form&#xA;     *&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Channels.newReader(ch, csname)&lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * behaves in exactly the same way as the expression&#xA;     *&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Channels.newReader(ch,&#xA;     *                    Charset.forName(csName)&#xA;     *                        .newDecoder(),&#xA;     *                    -1);&lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param  ch&#xA;     *         The channel from which bytes will be read&#xA;     *&#xA;     * @param  csName&#xA;     *         The name of the charset to be used&#xA;     *&#xA;     * @return  A new reader&#xA;     *&#xA;     * @throws  UnsupportedCharsetException&#xA;     *          If no support for the named charset is available&#xA;     *          in this instance of the Java virtual machine&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../charset/Charset.class.xmi#//@classifiers.0/@members.33"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../charset/Charset.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../charset/Charset.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newWriter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/Writer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="WritableByteChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="enc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../charset/CharsetEncoder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minBufferCap">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a writer that encodes characters using the given encoder and&#xA;     * writes the resulting bytes to the given channel.&#xA;     *&#xA;     * &lt;p> The resulting stream will contain an internal output buffer of at&#xA;     * least &lt;tt>minBufferCap&lt;/tt> bytes.  The stream's &lt;tt>write&lt;/tt> methods&#xA;     * will, as needed, flush the buffer by writing bytes to the underlying&#xA;     * channel; if the channel is in non-blocking mode when bytes are to be&#xA;     * written then an {@link IllegalBlockingModeException} will be thrown.&#xA;     * The resulting stream will not otherwise be buffered.  Closing the stream&#xA;     * will in turn cause the channel to be closed.  &lt;/p>&#xA;     *&#xA;     * @param  ch&#xA;     *         The channel to which bytes will be written&#xA;     *&#xA;     * @param  enc&#xA;     *         The charset encoder to be used&#xA;     *&#xA;     * @param  minBufferCap&#xA;     *         The minimum capacity of the internal byte buffer,&#xA;     *         or &lt;tt>-1&lt;/tt> if an implementation-dependent&#xA;     *         default capacity is to be used&#xA;     *&#xA;     * @return  A new writer&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../charset/CharsetEncoder.class.xmi#//@classifiers.0/@members.32"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../sun/nio/cs/StreamEncoder.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../sun/nio/cs/StreamEncoder.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newWriter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/Writer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="WritableByteChannel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a writer that encodes characters according to the named&#xA;     * charset and writes the resulting bytes to the given channel.&#xA;     *&#xA;     * &lt;p> An invocation of this method of the form&#xA;     *&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Channels.newWriter(ch, csname)&lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * behaves in exactly the same way as the expression&#xA;     *&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Channels.newWriter(ch,&#xA;     *                    Charset.forName(csName)&#xA;     *                        .newEncoder(),&#xA;     *                    -1);&lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param  ch&#xA;     *         The channel to which bytes will be written&#xA;     *&#xA;     * @param  csName&#xA;     *         The name of the charset to be used&#xA;     *&#xA;     * @return  A new writer&#xA;     *&#xA;     * @throws  UnsupportedCharsetException&#xA;     *          If no support for the named charset is available&#xA;     *          in this instance of the Java virtual machine&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../charset/Charset.class.xmi#//@classifiers.0/@members.34"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../charset/Charset.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../charset/Charset.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Utility methods for channels and streams.&#xA; *&#xA; * &lt;p> This class defines static methods that support the interoperation of the&#xA; * stream classes of the &lt;tt>{@link java.io}&lt;/tt> package with the channel&#xA; * classes of this package.  &lt;/p>&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author Mike McCloskey&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.23, 03/12/19&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
  </classifiers>
</containers:CompilationUnit>
