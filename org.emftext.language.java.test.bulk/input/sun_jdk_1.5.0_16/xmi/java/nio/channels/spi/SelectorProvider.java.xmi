<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="SelectorProvider.java">
  <comments>/*&#xA; * @(#)SelectorProvider.java&#x9;1.26 04/06/15&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../io/FileDescriptor.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../net/ServerSocket.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../net/Socket.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../security/AccessController.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../sun/misc/Service.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../sun/misc/ServiceConfigurationError.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>action</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../sun/security/action/GetPropertyAction.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SelectorProvider">
    <members xsi:type="members:Field" name="lock">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="provider">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="SelectorProvider">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../lang/RuntimePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="selectorProvider"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Initializes a new instance of this class.  &lt;/p>&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager has been installed and it denies&#xA;     *          {@link RuntimePermission}&lt;tt>(&quot;selectorProvider&quot;)&lt;/tt>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="loadProviderFromProperty">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cn">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.25"/>
              <arguments xsi:type="references:StringReference" value="java.nio.channels.spi.SelectorProvider"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="c">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../lang/Class.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                </next>
              </child>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../sun/misc/ServiceConfigurationError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@catcheBlocks.0/@parameter"/>
            </throwable>
          </statements>
          <parameter name="x">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../sun/misc/ServiceConfigurationError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@catcheBlocks.1/@parameter"/>
            </throwable>
          </statements>
          <parameter name="x">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../sun/misc/ServiceConfigurationError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@catcheBlocks.2/@parameter"/>
            </throwable>
          </statements>
          <parameter name="x">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/InstantiationException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../../sun/misc/ServiceConfigurationError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.2/@catcheBlocks.3/@parameter"/>
            </throwable>
          </statements>
          <parameter name="x">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/SecurityException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadProviderAsService">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../util/Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Service.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                <next xsi:type="references:ReflectiveClassReference"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../../sun/misc/Service.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../../util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </child>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../../../util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </child>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Continue">
                    <comments>// Ignore the security exception, try the next provider</comments>
                  </statements>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../lang/SecurityException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@statement/@statements.0/@catcheBlocks.0/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Throwable.class.xmi#//@classifiers.0/@members.11"/>
                    </next>
                  </child>
                </condition>
              </statements>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
              </statements>
              <parameter name="sce">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../../sun/misc/ServiceConfigurationError.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="provider">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the system-wide default selector provider for this invocation of&#xA;     * the Java virtual machine.&#xA;     *&#xA;     * &lt;p> The first invocation of this method locates the default provider&#xA;     * object as follows: &lt;/p>&#xA;     *&#xA;     * &lt;ol>&#xA;     *&#xA;     *   &lt;li>&lt;p> If the system property&#xA;     *   &lt;tt>java.nio.channels.spi.SelectorProvider&lt;/tt> is defined then it is&#xA;     *   taken to be the fully-qualified name of a concrete provider class.&#xA;     *   The class is loaded and instantiated; if this process fails then an&#xA;     *   unspecified error is thrown.  &lt;/p>&lt;/li>&#xA;     *&#xA;     *   &lt;li>&lt;p> If a provider class has been installed in a jar file that is&#xA;     *   visible to the system class loader, and that jar file contains a&#xA;     *   provider-configuration file named&#xA;     *   &lt;tt>java.nio.channels.spi.SelectorProvider&lt;/tt> in the resource&#xA;     *   directory &lt;tt>META-INF/services&lt;/tt>, then the first class name&#xA;     *   specified in that file is taken.  The class is loaded and&#xA;     *   instantiated; if this process fails then an unspecified error is&#xA;     *   thrown.  &lt;/p>&lt;/li>&#xA;     *&#xA;     *   &lt;li>&lt;p> Finally, if no provider has been specified by any of the above&#xA;     *   means then the system-default provider class is instantiated and the&#xA;     *   result is returned.  &lt;/p>&lt;/li>&#xA;     *&#xA;     * &lt;/ol>&#xA;     *&#xA;     * &lt;p> Subsequent invocations of this method return the provider that was&#xA;     * returned by the first invocation.  &lt;/p>&#xA;     *&#xA;     * @return  The system-wide default selector provider&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Return">
                          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                        </statement>
                        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Return">
                          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                        </statement>
                        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <next xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../../../sun/nio/ch/DefaultSelectorProvider.class.xmi#//@classifiers.0/@members.1"/>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="../../../../sun/nio/ch/DefaultSelectorProvider.class.xmi#//@classifiers.0"/>
                                </next>
                              </next>
                            </next>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../security/AccessController.class.xmi#//@classifiers.0"/>
            </child>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="openDatagramChannel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DatagramChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a datagram channel.  &lt;/p>&#xA;     *&#xA;     * @return  The new channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="openPipe">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Pipe.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a pipe.  &lt;/p>&#xA;     *&#xA;     * @return  The new pipe&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="openSelector">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="AbstractSelector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a selector.  &lt;/p>&#xA;     *&#xA;     * @return  The new selector&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="openServerSocketChannel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../ServerSocketChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a server-socket channel.  &lt;/p>&#xA;     *&#xA;     * @return  The new channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="openSocketChannel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SocketChannel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Opens a socket channel. &lt;/p>&#xA;     *&#xA;     * @return  The new channel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="inheritedChannel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Channel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the channel inherited from the entity that created this&#xA;     * Java virtual machine.&#xA;     *&#xA;     * &lt;p> On many operating systems a process, such as a Java virtual&#xA;     * machine, can be started in a manner that allows the process to&#xA;     * inherit a channel from the entity that created the process. The&#xA;     * manner in which this is done is system dependent, as are the&#xA;     * possible entities to which the channel may be connected. For example,&#xA;     * on UNIX systems, the Internet services daemon (&lt;i>inetd&lt;/i>) is used to &#xA;     * start programs to service requests when a request arrives on an &#xA;     * associated network port. In this example, the process that is started, &#xA;     * inherits a channel representing a network socket. &#xA;     *&#xA;     * &lt;p> In cases where the inherited channel represents a network socket&#xA;     * then the {@link java.nio.channels.Channel Channel} type returned &#xA;     * by this method is determined as follows:&#xA;     *     &#xA;     * &lt;ul>&#xA;     *&#xA;     *  &lt;li>&lt;p> If the inherited channel represents a stream-oriented connected&#xA;     *  socket then a {@link java.nio.channels.SocketChannel SocketChannel} is&#xA;     *  returned. The socket channel is, at least initially, in blocking&#xA;     *  mode, bound to a socket address, and connected to a peer.&#xA;     *  &lt;/p>&lt;/li>&#xA;     *&#xA;     *  &lt;li>&lt;p> If the inherited channel represents a stream-oriented listening&#xA;     *  socket then a {@link java.nio.channels.ServerSocketChannel &#xA;     *  ServerSocketChannel} is returned. The server-socket channel is, at &#xA;     *  least initially, in blocking mode, and bound to a socket address.&#xA;     *  &lt;/p>&lt;/li>     &#xA;     *&#xA;     *  &lt;li>&lt;p> If the inherited channel is a datagram-oriented socket &#xA;     *  then a {@link java.nio.channels.DatagramChannel DatagramChannel} is    &#xA;     *  returned. The datagram channel is, at least initially, in blocking&#xA;     *  mode, and bound to a socket address. &#xA;     *  &lt;/p>&lt;/li>&#xA;     * &#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p> In addition to the network-oriented channels described, this method&#xA;     * may return other kinds of channels in the future.&#xA;     *&#xA;     * &lt;p> The first invocation of this method creates the channel that is &#xA;     * returned. Subsequent invocations of this method return the same &#xA;     * channel. &lt;/p>&#xA;     *&#xA;     * @return  The inherited channel, if any, otherwise &lt;tt>null&lt;/tt>.&#xA;     * &#xA;     * @throws  IOException&#xA;     *&#x9;&#x9;If an I/O error occurs&#xA;     *&#xA;     * @throws&#x9;SecurityException&#xA;     *&#x9; &#x9;If a security manager has been installed and it denies&#xA;     *&#x9;&#x9;{@link RuntimePermission}&lt;tt>(&quot;inheritedChannel&quot;)&lt;/tt>&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Service-provider class for selectors and selectable channels.&#xA; *&#xA; * &lt;p> A selector provider is a concrete subclass of this class that has a&#xA; * zero-argument constructor and implements the abstract methods specified&#xA; * below.  A given invocation of the Java virtual machine maintains a single&#xA; * system-wide default provider instance, which is returned by the {@link&#xA; * #provider provider} method.  The first invocation of that method will locate&#xA; * the default provider as specified below.&#xA; *&#xA; * &lt;p> The system-wide default provider is used by the static &lt;tt>open&lt;/tt>&#xA; * methods of the {@link java.nio.channels.DatagramChannel#open&#xA; * DatagramChannel}, {@link java.nio.channels.Pipe#open Pipe}, {@link&#xA; * java.nio.channels.Selector#open Selector}, {@link&#xA; * java.nio.channels.ServerSocketChannel#open ServerSocketChannel}, and {@link&#xA; * java.nio.channels.SocketChannel#open SocketChannel} classes.  It is also&#xA; * used by the {@link java.lang.System#inheritedChannel System.inheritedChannel()}&#xA; * method. A program may make use of a provider other than the default provider&#xA; * by instantiating that provider and then directly invoking the &lt;tt>open&lt;/tt>&#xA; * methods defined in this class.&#xA; *&#xA; * &lt;p> All of the methods in this class are safe for use by multiple concurrent&#xA; * threads.  &lt;/p>&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.26, 04/06/15&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
