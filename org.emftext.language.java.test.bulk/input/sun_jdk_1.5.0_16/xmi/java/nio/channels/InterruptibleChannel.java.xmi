<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="InterruptibleChannel.java">
  <comments>/*&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/*&#xA; * @(#)InterruptibleChannel.java&#x9;1.5 03/12/19&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>channels</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="InterruptibleChannel">
    <members xsi:type="members:InterfaceMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Closes this channel.&#xA;     *&#xA;     * &lt;p> Any thread currently blocked in an I/O operation upon this channel&#xA;     * will receive an {@link AsynchronousCloseException}.&#xA;     *&#xA;     * &lt;p> This method otherwise behaves exactly as specified by the {@link&#xA;     * Channel#close Channel} interface.  &lt;/p>&#xA;     *&#xA;     * @throws  IOException  If an I/O error occurs&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A channel that can be asynchronously closed and interrupted.&#xA; *&#xA; * &lt;p> A channel that implements this interface is &lt;i>asynchronously&#xA; * closeable:&lt;/i> If a thread is blocked in an I/O operation on an&#xA; * interruptible channel then another thread may invoke the channel's {@link&#xA; * #close close} method.  This will cause the blocked thread to receive an&#xA; * {@link AsynchronousCloseException}.&#xA; *&#xA; * &lt;p> A channel that implements this interface is also &lt;i>interruptible:&lt;/i>&#xA; * If a thread is blocked in an I/O operation on an interruptible channel then&#xA; * another thread may invoke the blocked thread's {@link Thread#interrupt()&#xA; * interrupt} method.  This will cause the channel to be closed, the blocked&#xA; * thread to receive a {@link ClosedByInterruptException}, and the blocked&#xA; * thread's interrupt status to be set.&#xA; *&#xA; * &lt;p> If a thread's interrupt status is already set and it invokes a blocking&#xA; * I/O operation upon a channel then the channel will be closed and the thread&#xA; * will immediately receive a {@link ClosedByInterruptException}; its interrupt&#xA; * status will remain set.&#xA; *&#xA; * &lt;p> A channel supports asynchronous closing and interruption if, and only&#xA; * if, it implements this interface.  This can be tested at runtime, if&#xA; * necessary, via the &lt;tt>instanceof&lt;/tt> operator.&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.5, 03/12/19&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Channel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
