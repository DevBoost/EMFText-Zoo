<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="CharsetProvider.java">
  <comments>/*&#xA; * @(#)CharsetProvider.java&#x9;1.15 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>charset</namespaces>
  <namespaces>spi</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Charset.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="CharsetProvider">
    <members xsi:type="members:Constructor" name="CharsetProvider">
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../lang/RuntimePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="charsetProvider"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Initializes a new charset provider. &lt;/p>&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager has been installed and it denies&#xA;     *          {@link RuntimePermission}&lt;tt>(&quot;charsetProvider&quot;)&lt;/tt>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="charsets">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Charset.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../../util/Iterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an iterator that iterates over the charsets supported by this&#xA;     * provider.  This method is used in the implementation of the {@link&#xA;     * java.nio.charset.Charset#availableCharsets Charset.availableCharsets}&#xA;     * method. &lt;/p>&#xA;     *&#xA;     * @return  The new iterator&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="charsetForName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Charset.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="charsetName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves a charset for the given charset name. &lt;/p>&#xA;     *&#xA;     * @param  charsetName&#xA;     *         The name of the requested charset; may be either&#xA;     *         a canonical name or an alias&#xA;     *&#xA;     * @return  A charset object for the named charset,&#xA;     *          or &lt;tt>null&lt;/tt> if the named charset&#xA;     *          is not supported by this provider&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Charset service-provider class.&#xA; *&#xA; * &lt;p> A charset provider is a concrete subclass of this class that has a&#xA; * zero-argument constructor and some number of associated charset&#xA; * implementation classes.  Charset providers may be installed in an instance&#xA; * of the Java platform as extensions, that is, jar files placed into any of&#xA; * the usual extension directories.  Providers may also be made available by&#xA; * adding them to the applet or application class path or by some other&#xA; * platform-specific means.  Charset providers are looked up via the current&#xA; * thread's {@link java.lang.Thread#getContextClassLoader() &lt;/code>context&#xA; * class loader&lt;code>}.&#xA; *&#xA; * &lt;p> A charset provider identifies itself with a provider-configuration file&#xA; * named &lt;tt>java.nio.charset.spi.CharsetProvider&lt;/tt> in the resource&#xA; * directory &lt;tt>META-INF/services&lt;/tt>.  The file should contain a list of&#xA; * fully-qualified concrete charset-provider class names, one per line.  A line&#xA; * is terminated by any one of a line feed (&lt;tt>'\n'&lt;/tt>), a carriage return&#xA; * (&lt;tt>'\r'&lt;/tt>), or a carriage return followed immediately by a line feed.&#xA; * Space and tab characters surrounding each name, as well as blank lines, are&#xA; * ignored.  The comment character is &lt;tt>'#'&lt;/tt> (&lt;tt>'&amp;#92;u0023'&lt;/tt>); on&#xA; * each line all characters following the first comment character are ignored.&#xA; * The file must be encoded in UTF-8.&#xA; *&#xA; * &lt;p> If a particular concrete charset provider class is named in more than&#xA; * one configuration file, or is named in the same configuration file more than&#xA; * once, then the duplicates will be ignored.  The configuration file naming a&#xA; * particular provider need not be in the same jar file or other distribution&#xA; * unit as the provider itself.  The provider must be accessible from the same&#xA; * class loader that was initially queried to locate the configuration file;&#xA; * this is not necessarily the class loader that loaded the file. &lt;/p>&#xA; *&#xA; *&#xA; * @author Mark Reinhold&#xA; * @author JSR-51 Expert Group&#xA; * @version 1.15, 04/05/05&#xA; * @since 1.4&#xA; *&#xA; * @see java.nio.charset.Charset&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
