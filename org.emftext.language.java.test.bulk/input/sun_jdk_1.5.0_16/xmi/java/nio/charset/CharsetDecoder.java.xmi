<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="CharsetDecoder.java">
  <comments>/*&#xD;&#xA; * @(#)Charset-X-Coder.java&#x9;1.42 05/03/03&#xD;&#xA; *&#xD;&#xA; * Copyright 2005 Sun Microsystems, Inc. All rights reserved.&#xD;&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xD;&#xA; */</comments>
  <comments>// -- This file was mechanically generated: Do not edit! -- //</comments>
  <namespaces>java</namespaces>
  <namespaces>nio</namespaces>
  <namespaces>charset</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Buffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../BufferOverflowException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <classifier xsi:type="classifiers:Class" href="../BufferUnderflowException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>ref</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../lang/ref/WeakReference.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="CoderMalfunctionError.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="CharsetDecoder">
    <members xsi:type="members:Field" name="charset">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Charset.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="averageCharsPerByte">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="maxCharsPerByte">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="replacement">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="malformedInputAction">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="CodingErrorAction.class.xmi#//@classifiers.0/@members.3"/>
        </next>
        <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="unmappableCharacterAction">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="CodingErrorAction.class.xmi#//@classifiers.0/@members.3"/>
        </next>
        <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="ST_RESET">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Internal states</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ST_CODING">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ST_END">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ST_FLUSHED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="state">
      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="stateNames">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="references:StringReference" value="RESET"/>
          <initialValues xsi:type="references:StringReference" value="CODING"/>
          <initialValues xsi:type="references:StringReference" value="CODING_END"/>
          <initialValues xsi:type="references:StringReference" value="FLUSHED"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="CharsetDecoder">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="Non-positive "/>
              <children xsi:type="references:StringReference" value="averageCharsPerByte"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
          <children xsi:type="literals:DecimalFloatLiteral"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="Non-positive "/>
              <children xsi:type="references:StringReference" value="maxCharsPerByte"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
          <children xsi:type="literals:DecimalFloatLiteral"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="averageCharsPerByte"/>
                  <children xsi:type="references:StringReference" value=" exceeds "/>
                  <children xsi:type="references:StringReference" value="maxCharsPerByte"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </throwable>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Charset.class.xmi#//@classifiers.0/@members.12"/>
              <arguments xsi:type="references:StringReference" value="1.4"/>
            </next>
            <target xsi:type="classifiers:Class" href="Charset.class.xmi#//@classifiers.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Charset.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="averageCharsPerByte">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxCharsPerByte">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replacement">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xD;&#xA;     * Initializes a new decoder.  The new decoder will have the given&#xD;&#xA;     * chars-per-byte and replacement values. &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  averageCharsPerByte&#xD;&#xA;     *         A positive float value indicating the expected number of&#xD;&#xA;     *         characters that will be produced for each input byte&#xD;&#xA;     *&#xD;&#xA;     * @param  maxCharsPerByte&#xD;&#xA;     *         A positive float value indicating the maximum number of&#xD;&#xA;     *         characters that will be produced for each input byte&#xD;&#xA;     *&#xD;&#xA;     * @param  replacement&#xD;&#xA;     *         The initial replacement; must not be &lt;tt>null&lt;/tt>, must have&#xD;&#xA;     *         non-zero length, must not be longer than maxCharsPerByte,&#xD;&#xA;     *         and must be {@link #isLegalReplacement &lt;/code>legal&lt;code>}&#xD;&#xA;     *&#xD;&#xA;     * @throws  IllegalArgumentException&#xD;&#xA;     *          If the preconditions on the parameters do not hold&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="CharsetDecoder">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
          <arguments xsi:type="references:StringReference" value="\uFFFD"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cs">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Charset.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="averageCharsPerByte">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxCharsPerByte">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xD;&#xA;     * Initializes a new decoder.  The new decoder will have the given&#xD;&#xA;     * chars-per-byte values and its replacement will be the&#xD;&#xA;     * string &lt;tt>&quot;&amp;#92;uFFFD&quot;&lt;/tt>. &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  averageCharsPerByte&#xD;&#xA;     *         A positive float value indicating the expected number of&#xD;&#xA;     *         characters that will be produced for each input byte&#xD;&#xA;     *&#xD;&#xA;     * @param  maxCharsPerByte&#xD;&#xA;     *         A positive float value indicating the maximum number of&#xD;&#xA;     *         characters that will be produced for each input byte&#xD;&#xA;     *&#xD;&#xA;     * @throws  IllegalArgumentException&#xD;&#xA;     *          If the preconditions on the parameters do not hold&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="charset">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Charset.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Returns the charset that created this decoder.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  This decoder's charset&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="replacement">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Returns this decoder's replacement value. &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  This decoder's current replacement,&#xD;&#xA;     *          which is never &lt;tt>null&lt;/tt> and is never empty&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="replaceWith">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newReplacement">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Changes this decoder's replacement value.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method invokes the {@link #implReplaceWith implReplaceWith}&#xD;&#xA;     * method, passing the new replacement, after checking that the new&#xD;&#xA;     * replacement is acceptable.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  newReplacement&#xD;&#xA;     *&#xD;&#xA;&#xD;&#xA;     *         The new replacement; must not be &lt;tt>null&lt;/tt>&#xD;&#xA;     *         and must have non-zero length&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;     *&#xD;&#xA;     * @return  This decoder&#xD;&#xA;     *&#xD;&#xA;     * @throws  IllegalArgumentException&#xD;&#xA;     *          If the preconditions on the parameter do not hold&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Null replacement"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="len">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Empty replacement"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.1/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Replacement too long"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="implReplaceWith">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newReplacement">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xD;&#xA;     * Reports a change to this decoder's replacement value.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method does nothing.  This method&#xD;&#xA;     * should be overridden by decoders that require notification of changes to&#xD;&#xA;     * the replacement.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  newReplacement&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="malformedInputAction">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Returns this decoder's current action for malformed-input errors.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return The current malformed-input action, which is never &lt;tt>null&lt;/tt>&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="onMalformedInput">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAction">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Changes this decoder's action for malformed-input errors.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method invokes the {@link #implOnMalformedInput&#xD;&#xA;     * implOnMalformedInput} method, passing the new action.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  newAction  The new action; must not be &lt;tt>null&lt;/tt>&#xD;&#xA;     *&#xD;&#xA;     * @return  This decoder&#xD;&#xA;     *&#xD;&#xA;     * @throws IllegalArgumentException&#xD;&#xA;     *         If the precondition on the parameter does not hold&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Null action"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="implOnMalformedInput">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAction">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xD;&#xA;     * Reports a change to this decoder's malformed-input action.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method does nothing.  This method&#xD;&#xA;     * should be overridden by decoders that require notification of changes to&#xD;&#xA;     * the malformed-input action.  &lt;/p>&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="unmappableCharacterAction">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Returns this decoder's current action for unmappable-character errors.&#xD;&#xA;     * &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return The current unmappable-character action, which is never&#xD;&#xA;     *         &lt;tt>null&lt;/tt>&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="onUnmappableCharacter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAction">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Changes this decoder's action for unmappable-character errors.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method invokes the {@link #implOnUnmappableCharacter&#xD;&#xA;     * implOnUnmappableCharacter} method, passing the new action.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  newAction  The new action; must not be &lt;tt>null&lt;/tt>&#xD;&#xA;     *&#xD;&#xA;     * @return  This decoder&#xD;&#xA;     *&#xD;&#xA;     * @throws IllegalArgumentException&#xD;&#xA;     *         If the precondition on the parameter does not hold&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Null action"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="implOnUnmappableCharacter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAction">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xD;&#xA;     * Reports a change to this decoder's unmappable-character action.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method does nothing.  This method&#xD;&#xA;     * should be overridden by decoders that require notification of changes to&#xD;&#xA;     * the unmappable-character action.  &lt;/p>&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="averageCharsPerByte">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Returns the average number of characters that will be produced for each&#xD;&#xA;     * byte of input.  This heuristic value may be used to estimate the size&#xD;&#xA;     * of the output buffer required for a given input sequence. &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  The average number of characters produced&#xD;&#xA;     *          per byte of input&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="maxCharsPerByte">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Returns the maximum number of characters that will be produced for each&#xD;&#xA;     * byte of input.  This value may be used to compute the worst-case size&#xD;&#xA;     * of the output buffer required for a given input sequence. &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  The maximum number of characters that will be produced per&#xD;&#xA;     *          byte of input&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="decode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="endOfInput">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Decodes as many bytes as possible from the given input buffer,&#xD;&#xA;     * writing the results to the given output buffer.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The buffers are read from, and written to, starting at their current&#xD;&#xA;     * positions.  At most {@link Buffer#remaining in.remaining()} bytes&#xD;&#xA;     * will be read and at most {@link Buffer#remaining out.remaining()}&#xD;&#xA;     * characters will be written.  The buffers' positions will be advanced to&#xD;&#xA;     * reflect the bytes read and the characters written, but their marks and&#xD;&#xA;     * limits will not be modified.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> In addition to reading bytes from the input buffer and writing&#xD;&#xA;     * characters to the output buffer, this method returns a {@link CoderResult}&#xD;&#xA;     * object to describe its reason for termination:&#xD;&#xA;     *&#xD;&#xA;     * &lt;ul>&#xD;&#xA;     *&#xD;&#xA;     *   &lt;li>&lt;p> {@link CoderResult#UNDERFLOW} indicates that as much of the&#xD;&#xA;     *   input buffer as possible has been decoded.  If there are no bytes&#xD;&#xA;     *   remaining and the invoker has no further input then the decoding&#xD;&#xA;     *   operation is complete.  Otherwise there is insufficient input for the&#xD;&#xA;     *   operation to proceed, so this method should be invoked again with&#xD;&#xA;     *   further input.  &lt;/p>&lt;/li>&#xD;&#xA;     *&#xD;&#xA;     *   &lt;li>&lt;p> {@link CoderResult#OVERFLOW} indicates that the output buffer&#xD;&#xA;     *   is full.  This method should be invoked again with a non-full output&#xD;&#xA;     *   buffer.  &lt;/p>&lt;/li>&#xD;&#xA;     *&#xD;&#xA;     *   &lt;li>&lt;p> A {@link CoderResult#malformedForLength&#xD;&#xA;     *   &lt;/code>malformed-input&lt;code>} result indicates that a malformed-input&#xD;&#xA;     *   error has been detected.  The malformed bytes begin at the input&#xD;&#xA;     *   buffer's (possibly incremented) position; the number of malformed&#xD;&#xA;     *   bytes may be determined by invoking the result object's {@link&#xD;&#xA;     *   CoderResult#length length} method.  This case applies only if the&#xD;&#xA;     *   {@link #onMalformedInput &lt;/code>malformed action&lt;code>} of this decoder&#xD;&#xA;     *   is {@link CodingErrorAction#REPORT}; otherwise the malformed input&#xD;&#xA;     *   will be ignored or replaced, as requested.  &lt;/p>&lt;/li>&#xD;&#xA;     *&#xD;&#xA;     *   &lt;li>&lt;p> An {@link CoderResult#unmappableForLength&#xD;&#xA;     *   &lt;/code>unmappable-character&lt;code>} result indicates that an&#xD;&#xA;     *   unmappable-character error has been detected.  The bytes that&#xD;&#xA;     *   decode the unmappable character begin at the input buffer's (possibly&#xD;&#xA;     *   incremented) position; the number of such bytes may be determined&#xD;&#xA;     *   by invoking the result object's {@link CoderResult#length length}&#xD;&#xA;     *   method.  This case applies only if the {@link #onUnmappableCharacter&#xD;&#xA;     *   &lt;/code>unmappable action&lt;code>} of this decoder is {@link&#xD;&#xA;     *   CodingErrorAction#REPORT}; otherwise the unmappable character will be&#xD;&#xA;     *   ignored or replaced, as requested.  &lt;/p>&lt;/li>&#xD;&#xA;     *&#xD;&#xA;     * &lt;/ul>&#xD;&#xA;     *&#xD;&#xA;     * In any case, if this method is to be reinvoked in the same decoding&#xD;&#xA;     * operation then care should be taken to preserve any bytes remaining&#xD;&#xA;     * in the input buffer so that they are available to the next invocation.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The &lt;tt>endOfInput&lt;/tt> parameter advises this method as to whether&#xD;&#xA;     * the invoker can provide further input beyond that contained in the given&#xD;&#xA;     * input buffer.  If there is a possibility of providing additional input&#xD;&#xA;     * then the invoker should pass &lt;tt>false&lt;/tt> for this parameter; if there&#xD;&#xA;     * is no possibility of providing further input then the invoker should&#xD;&#xA;     * pass &lt;tt>true&lt;/tt>.  It is not erroneous, and in fact it is quite&#xD;&#xA;     * common, to pass &lt;tt>false&lt;/tt> in one invocation and later discover that&#xD;&#xA;     * no further input was actually available.  It is critical, however, that&#xD;&#xA;     * the final invocation of this method in a sequence of invocations always&#xD;&#xA;     * pass &lt;tt>true&lt;/tt> so that any remaining undecoded input will be treated&#xD;&#xA;     * as being malformed.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method works by invoking the {@link #decodeLoop decodeLoop}&#xD;&#xA;     * method, interpreting its results, handling error conditions, and&#xD;&#xA;     * reinvoking it as necessary.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     *&#xD;&#xA;     * @param  in&#xD;&#xA;     *         The input byte buffer&#xD;&#xA;     *&#xD;&#xA;     * @param  out&#xD;&#xA;     *         The output character buffer&#xD;&#xA;     *&#xD;&#xA;     * @param  endOfInput&#xD;&#xA;     *         &lt;tt>true&lt;/tt> if, and only if, the invoker can provide no&#xD;&#xA;     *         additional input bytes beyond those in the given buffer&#xD;&#xA;     *&#xD;&#xA;     * @return  A coder-result object describing the reason for termination&#xD;&#xA;     *&#xD;&#xA;     * @throws  IllegalStateException&#xD;&#xA;     *          If a decoding operation is already in progress and the previous&#xD;&#xA;     *          step was an invocation neither of the {@link #reset reset}&#xD;&#xA;     *          method, nor of this method with a value of &lt;tt>false&lt;/tt> for&#xD;&#xA;     *          the &lt;tt>endOfInput&lt;/tt> parameter, nor of this method with a&#xD;&#xA;     *          value of &lt;tt>true&lt;/tt> for the &lt;tt>endOfInput&lt;/tt> parameter&#xD;&#xA;     *          but a return value indicating an incomplete decoding operation&#xD;&#xA;     *&#xD;&#xA;     * @throws  CoderMalfunctionError&#xD;&#xA;     *          If an invocation of the decodeLoop method threw&#xD;&#xA;     *          an unexpected exception&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newState">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                  </expression>
                </children>
              </expression>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cr">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1"/>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="CoderMalfunctionError.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.1/@catcheBlocks.0/@parameter"/>
                </throwable>
              </statements>
              <parameter name="x">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../BufferUnderflowException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="CoderMalfunctionError.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.1/@catcheBlocks.1/@parameter"/>
                </throwable>
              </statements>
              <parameter name="x">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../BufferOverflowException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable"/>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.16"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <comments>// Fall through to malformed-input case</comments>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.21"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.16"/>
                            </next>
                          </arguments>
                        </next>
                        <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.17"/>
                    </next>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable"/>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.15"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="action">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.4/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.18"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.19"/>
                </next>
              </condition>
              <elseStatement xsi:type="statements:Assert">
                <condition xsi:type="literals:BooleanLiteral"/>
                <errorMessage xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </errorMessage>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.4/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CodingErrorAction.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="CoderResult.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
                  </returnValue>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.16"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../CharBuffer.class.xmi#//@classifiers.0/@members.24"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.4/@variable"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="CodingErrorAction.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                  <comments>// Skip erroneous input either way</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.7"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.20"/>
                        </next>
                      </children>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.4/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="CodingErrorAction.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.3/@statement/@statements.4/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="CodingErrorAction.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="CodingErrorAction.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Assert">
            <condition xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="flush">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Flushes this decoder.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> Some decoders maintain internal state and may need to write some&#xD;&#xA;     * final characters to the output buffer once the overall input sequence has&#xD;&#xA;     * been read.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> Any additional output is written to the output buffer beginning at&#xD;&#xA;     * its current position.  At most {@link Buffer#remaining out.remaining()}&#xD;&#xA;     * characters will be written.  The buffer's position will be advanced&#xD;&#xA;     * appropriately, but its mark and limit will not be modified.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> If this method completes successfully then it returns {@link&#xD;&#xA;     * CoderResult#UNDERFLOW}.  If there is insufficient room in the output&#xD;&#xA;     * buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens&#xD;&#xA;     * then this method must be invoked again, with an output buffer that has&#xD;&#xA;     * more room, in order to complete the current &lt;a href=&quot;#steps&quot;>decoding&#xD;&#xA;     * operation&lt;/a>.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method invokes the {@link #implFlush implFlush} method to&#xD;&#xA;     * perform the actual flushing operation.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  out&#xD;&#xA;     *         The output character buffer&#xD;&#xA;     *&#xD;&#xA;     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or&#xD;&#xA;     *          {@link CoderResult#OVERFLOW}&#xD;&#xA;     *&#xD;&#xA;     * @throws  IllegalStateException&#xD;&#xA;     *          If the previous step of the current decoding operation was an&#xD;&#xA;     *          invocation neither of the {@link #reset reset} method nor of&#xD;&#xA;     *          the three-argument {@link&#xD;&#xA;     *          #decode(ByteBuffer,CharBuffer,boolean) decode} method&#xD;&#xA;     *          with a value of &lt;tt>true&lt;/tt> for the &lt;tt>endOfInput&lt;/tt>&#xD;&#xA;     *          parameter&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.28">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="implFlush">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xD;&#xA;     * Flushes this decoder.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method does nothing, and always&#xD;&#xA;     * returns {@link CoderResult#UNDERFLOW}.  This method should be overridden&#xD;&#xA;     * by decoders that may need to write final characters to the output buffer&#xD;&#xA;     * once the entire input sequence has been read. &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  out&#xD;&#xA;     *         The output character buffer&#xD;&#xA;     *&#xD;&#xA;     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or&#xD;&#xA;     *          {@link CoderResult#OVERFLOW}&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="CoderResult.class.xmi#//@classifiers.0/@members.8"/>
          </next>
          <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Resets this decoder, clearing any internal state.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method resets charset-independent state and also invokes the&#xD;&#xA;     * {@link #implReset() implReset} method in order to perform any&#xD;&#xA;     * charset-specific reset actions.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  This decoder&#xD;&#xA;     *&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="implReset">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xD;&#xA;     * Resets this decoder, clearing any charset-specific internal state.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method does nothing.  This method&#xD;&#xA;     * should be overridden by decoders that maintain internal state.  &lt;/p>&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="decodeLoop">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xD;&#xA;     * Decodes one or more bytes into one or more characters.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method encapsulates the basic decoding loop, decoding as many&#xD;&#xA;     * bytes as possible until it either runs out of input, runs out of room&#xD;&#xA;     * in the output buffer, or encounters a decoding error.  This method is&#xD;&#xA;     * invoked by the {@link #decode decode} method, which handles result&#xD;&#xA;     * interpretation and error recovery.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The buffers are read from, and written to, starting at their current&#xD;&#xA;     * positions.  At most {@link Buffer#remaining in.remaining()} bytes&#xD;&#xA;     * will be read, and at most {@link Buffer#remaining out.remaining()}&#xD;&#xA;     * characters will be written.  The buffers' positions will be advanced to&#xD;&#xA;     * reflect the bytes read and the characters written, but their marks and&#xD;&#xA;     * limits will not be modified.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method returns a {@link CoderResult} object to describe its&#xD;&#xA;     * reason for termination, in the same manner as the {@link #decode decode}&#xD;&#xA;     * method.  Most implementations of this method will handle decoding errors&#xD;&#xA;     * by returning an appropriate result object for interpretation by the&#xD;&#xA;     * {@link #decode decode} method.  An optimized implementation may instead&#xD;&#xA;     * examine the relevant error action and implement that action itself.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> An implementation of this method may perform arbitrary lookahead by&#xD;&#xA;     * returning {@link CoderResult#UNDERFLOW} until it receives sufficient&#xD;&#xA;     * input.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  in&#xD;&#xA;     *         The input byte buffer&#xD;&#xA;     *&#xD;&#xA;     * @param  out&#xD;&#xA;     *         The output character buffer&#xD;&#xA;     *&#xD;&#xA;     * @return  A coder-result object describing the reason for termination&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="decode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../ByteBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CharacterCodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Convenience method that decodes the remaining content of a single input&#xD;&#xA;     * byte buffer into a newly-allocated character buffer.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> This method implements an entire &lt;a href=&quot;#steps&quot;>decoding&#xD;&#xA;     * operation&lt;/a>; that is, it resets this decoder, then it decodes the&#xD;&#xA;     * bytes in the given byte buffer, and finally it flushes this&#xD;&#xA;     * decoder.  This method should therefore not be invoked if a decoding&#xD;&#xA;     * operation is already in progress.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @param  in&#xD;&#xA;     *         The input byte buffer&#xD;&#xA;     *&#xD;&#xA;     * @return A newly-allocated character buffer containing the result of the&#xD;&#xA;     *         decoding operation.  The buffer's position will be zero and its&#xD;&#xA;     *         limit will follow the last character written.&#xD;&#xA;     *&#xD;&#xA;     * @throws  IllegalStateException&#xD;&#xA;     *          If a decoding operation is already in progress&#xD;&#xA;     *&#xD;&#xA;     * @throws  MalformedInputException&#xD;&#xA;     *          If the byte sequence starting at the input buffer's current&#xD;&#xA;     *          position is not legal for this charset and the current malformed-input action&#xD;&#xA;     *          is {@link CodingErrorAction#REPORT}&#xD;&#xA;     *&#xD;&#xA;     * @throws  UnmappableCharacterException&#xD;&#xA;     *          If the byte sequence starting at the input buffer's current&#xD;&#xA;     *          position cannot be mapped to an equivalent character sequence and&#xD;&#xA;     *          the current unmappable-character action is {@link&#xD;&#xA;     *          CodingErrorAction#REPORT}&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Int"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.24"/>
                <multiplicativeOperators xsi:type="operators:Multiplication"/>
              </expression>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="out">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../CharBuffer.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cr">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="CoderResult.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.4/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable"/>
                  <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                </value>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.17"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.4/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable"/>
                </value>
              </expression>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.4/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.15"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMultiplication"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="o">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../CharBuffer.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../CharBuffer.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.4/@statement/@statements.3/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../CharBuffer.class.xmi#//@classifiers.0/@members.20"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.4/@statement/@statements.3/@statement/@statements.1/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.4/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.16"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.4/@statement/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="CoderResult.class.xmi#//@classifiers.0/@members.23"/>
              </next>
            </expression>
          </statements>
        </statement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../Buffer.class.xmi#//@classifiers.0/@members.14"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isAutoDetecting">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Tells whether or not this decoder implements an auto-detecting charset.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method always returns&#xD;&#xA;     * &lt;tt>false&lt;/tt>; it should be overridden by auto-detecting decoders to&#xD;&#xA;     * return &lt;tt>true&lt;/tt>.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  &lt;tt>true&lt;/tt> if, and only if, this decoder implements an&#xD;&#xA;     *          auto-detecting charset&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isCharsetDetected">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Tells whether or not this decoder has yet detected a&#xD;&#xA;     * charset&amp;nbsp;&amp;nbsp;&lt;i>(optional operation)&lt;/i>.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> If this decoder implements an auto-detecting charset then at a&#xD;&#xA;     * single point during a decoding operation this method may start returning&#xD;&#xA;     * &lt;tt>true&lt;/tt> to indicate that a specific charset has been detected in&#xD;&#xA;     * the input byte sequence.  Once this occurs, the {@link #detectedCharset&#xD;&#xA;     * detectedCharset} method may be invoked to retrieve the detected charset.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> That this method returns &lt;tt>false&lt;/tt> does not imply that no bytes&#xD;&#xA;     * have yet been decoded.  Some auto-detecting decoders are capable of&#xD;&#xA;     * decoding some, or even all, of an input byte sequence without fixing on&#xD;&#xA;     * a particular charset.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method always throws an {@link&#xD;&#xA;     * UnsupportedOperationException}; it should be overridden by&#xD;&#xA;     * auto-detecting decoders to return &lt;tt>true&lt;/tt> once the input charset&#xD;&#xA;     * has been determined.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  &lt;tt>true&lt;/tt> if, and only if, this decoder has detected a&#xD;&#xA;     *          specific charset&#xD;&#xA;     *&#xD;&#xA;     * @throws  UnsupportedOperationException&#xD;&#xA;     *          If this decoder does not implement an auto-detecting charset&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="detectedCharset">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Charset.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xD;&#xA;     * Retrieves the charset that was detected by this&#xD;&#xA;     * decoder&amp;nbsp;&amp;nbsp;&lt;i>(optional operation)&lt;/i>.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> If this decoder implements an auto-detecting charset then this&#xD;&#xA;     * method returns the actual charset once it has been detected.  After that&#xD;&#xA;     * point, this method returns the same value for the duration of the&#xD;&#xA;     * current decoding operation.  If not enough input bytes have yet been&#xD;&#xA;     * read to determine the actual charset then this method throws an {@link&#xD;&#xA;     * IllegalStateException}.&#xD;&#xA;     *&#xD;&#xA;     * &lt;p> The default implementation of this method always throws an {@link&#xD;&#xA;     * UnsupportedOperationException}; it should be overridden by&#xD;&#xA;     * auto-detecting decoders to return the appropriate value.  &lt;/p>&#xD;&#xA;     *&#xD;&#xA;     * @return  The charset detected by this auto-detecting decoder,&#xD;&#xA;     *          or &lt;tt>null&lt;/tt> if the charset has not yet been determined&#xD;&#xA;     *&#xD;&#xA;     * @throws  IllegalStateException&#xD;&#xA;     *          If insufficient bytes have been read to determine a charset&#xD;&#xA;     *&#xD;&#xA;     * @throws  UnsupportedOperationException&#xD;&#xA;     *          If this decoder does not implement an auto-detecting charset&#xD;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="throwIllegalStateException">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="from">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="to">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/IllegalStateException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="Current state = "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
              </arraySelectors>
            </children>
            <children xsi:type="references:StringReference" value=", new state = "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
              </arraySelectors>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>// javadoc</comments>
      <comments>/**&#xD;&#xA; * An engine that can transform a sequence of bytes in a specific charset into a sequence of&#xD;&#xA; * sixteen-bit Unicode characters.&#xD;&#xA; *&#xD;&#xA; * &lt;a name=&quot;steps&quot;>&#xD;&#xA; *&#xD;&#xA; * &lt;p> The input byte sequence is provided in a byte buffer or a series&#xD;&#xA; * of such buffers.  The output character sequence is written to a character buffer&#xD;&#xA; * or a series of such buffers.  A decoder should always be used by making&#xD;&#xA; * the following sequence of method invocations, hereinafter referred to as a&#xD;&#xA; * &lt;i>decoding operation&lt;/i>:&#xD;&#xA; *&#xD;&#xA; * &lt;ol>&#xD;&#xA; *&#xD;&#xA; *   &lt;li>&lt;p> Reset the decoder via the {@link #reset reset} method, unless it&#xD;&#xA; *   has not been used before; &lt;/p>&lt;/li>&#xD;&#xA; *&#xD;&#xA; *   &lt;li>&lt;p> Invoke the {@link #decode decode} method zero or more times, as&#xD;&#xA; *   long as additional input may be available, passing &lt;tt>false&lt;/tt> for the&#xD;&#xA; *   &lt;tt>endOfInput&lt;/tt> argument and filling the input buffer and flushing the&#xD;&#xA; *   output buffer between invocations; &lt;/p>&lt;/li>&#xD;&#xA; *&#xD;&#xA; *   &lt;li>&lt;p> Invoke the {@link #decode decode} method one final time, passing&#xD;&#xA; *   &lt;tt>true&lt;/tt> for the &lt;tt>endOfInput&lt;/tt> argument; and then &lt;/p>&lt;/li>&#xD;&#xA; *&#xD;&#xA; *   &lt;li>&lt;p> Invoke the {@link #flush flush} method so that the decoder can&#xD;&#xA; *   flush any internal state to the output buffer. &lt;/p>&lt;/li>&#xD;&#xA; *&#xD;&#xA; * &lt;/ol>&#xD;&#xA; *&#xD;&#xA; * Each invocation of the {@link #decode decode} method will decode as many&#xD;&#xA; * bytes as possible from the input buffer, writing the resulting characters&#xD;&#xA; * to the output buffer.  The {@link #decode decode} method returns when more&#xD;&#xA; * input is required, when there is not enough room in the output buffer, or&#xD;&#xA; * when a decoding error has occurred.  In each case a {@link CoderResult}&#xD;&#xA; * object is returned to describe the reason for termination.  An invoker can&#xD;&#xA; * examine this object and fill the input buffer, flush the output buffer, or&#xD;&#xA; * attempt to recover from a decoding error, as appropriate, and try again.&#xD;&#xA; *&#xD;&#xA; * &lt;a name=&quot;ce&quot;>&#xD;&#xA; *&#xD;&#xA; * &lt;p> There are two general types of decoding errors.  If the input byte&#xD;&#xA; * sequence is not legal for this charset then the input is considered &lt;i>malformed&lt;/i>.  If&#xD;&#xA; * the input byte sequence is legal but cannot be mapped to a valid&#xD;&#xA; * Unicode character then an &lt;i>unmappable character&lt;/i> has been encountered.&#xD;&#xA; *&#xD;&#xA; * &lt;a name=&quot;cae&quot;>&#xD;&#xA; *&#xD;&#xA; * &lt;p> How a decoding error is handled depends upon the action requested for&#xD;&#xA; * that type of error, which is described by an instance of the {@link&#xD;&#xA; * CodingErrorAction} class.  The possible error actions are to {@link&#xD;&#xA; * CodingErrorAction#IGNORE &lt;/code>ignore&lt;code>} the erroneous input, {@link&#xD;&#xA; * CodingErrorAction#REPORT &lt;/code>report&lt;code>} the error to the invoker via&#xD;&#xA; * the returned {@link CoderResult} object, or {@link CodingErrorAction#REPLACE&#xD;&#xA; * &lt;/code>replace&lt;code>} the erroneous input with the current value of the&#xD;&#xA; * replacement string.  The replacement&#xD;&#xA; *&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; * has the initial value &lt;tt>&quot;&amp;#92;uFFFD&quot;&lt;/tt>;&#xD;&#xA;&#xD;&#xA; *&#xD;&#xA; * its value may be changed via the {@link #replaceWith(java.lang.String)&#xD;&#xA; * replaceWith} method.&#xD;&#xA; *&#xD;&#xA; * &lt;p> The default action for malformed-input and unmappable-character errors&#xD;&#xA; * is to {@link CodingErrorAction#REPORT &lt;/code>report&lt;code>} them.  The&#xD;&#xA; * malformed-input error action may be changed via the {@link&#xD;&#xA; * #onMalformedInput(CodingErrorAction) onMalformedInput} method; the&#xD;&#xA; * unmappable-character action may be changed via the {@link&#xD;&#xA; * #onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter} method.&#xD;&#xA; *&#xD;&#xA; * &lt;p> This class is designed to handle many of the details of the decoding&#xD;&#xA; * process, including the implementation of error actions.  A decoder for a&#xD;&#xA; * specific charset, which is a concrete subclass of this class, need only&#xD;&#xA; * implement the abstract {@link #decodeLoop decodeLoop} method, which&#xD;&#xA; * encapsulates the basic decoding loop.  A subclass that maintains internal&#xD;&#xA; * state should, additionally, override the {@link #flush flush} and {@link&#xD;&#xA; * #reset reset} methods.&#xD;&#xA; *&#xD;&#xA; * &lt;p> Instances of this class are not safe for use by multiple concurrent&#xD;&#xA; * threads.  &lt;/p>&#xD;&#xA; *&#xD;&#xA; *&#xD;&#xA; * @version 1.42, 05/03/03&#xD;&#xA; * @author Mark Reinhold&#xD;&#xA; * @author JSR-51 Expert Group&#xD;&#xA; * @since 1.4&#xD;&#xA; *&#xD;&#xA; * @see ByteBuffer&#xD;&#xA; * @see CharBuffer&#xD;&#xA; * @see Charset&#xD;&#xA; * @see CharsetEncoder&#xD;&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
