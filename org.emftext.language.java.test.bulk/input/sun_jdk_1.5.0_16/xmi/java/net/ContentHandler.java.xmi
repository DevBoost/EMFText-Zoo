<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="ContentHandler.java">
  <comments>/*&#xA; * @(#)ContentHandler.java&#x9;1.17 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>net</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ContentHandler">
    <members xsi:type="members:InterfaceMethod" name="getContent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="urlc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="URLConnection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/** &#xA;     * Given a URL connect stream positioned at the beginning of the &#xA;     * representation of an object, this method reads that stream and &#xA;     * creates an object from it. &#xA;     *&#xA;     * @param      urlc   a URL connection.&#xA;     * @return     the object read by the &lt;code>ContentHandler&lt;/code>.&#xA;     * @exception  IOException  if an I/O error occurs while reading the object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getContent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="urlc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="URLConnection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="classes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Given a URL connect stream positioned at the beginning of the &#xA;     * representation of an object, this method reads that stream and &#xA;     * creates an object that matches one of the types specified. &#xA;     *&#xA;     * The default implementation of this method should call getContent()&#xA;     * and screen the return type for a match of the suggested types.&#xA;     *&#xA;     * @param      urlc   a URL connection.&#xA;     * @param      classes&#x9;an array of types requested  &#xA;     * @return     the object read by the &lt;code>ContentHandler&lt;/code> that is &#xA;     *                 the first match of the suggested types. &#xA;     *                 null if none of the requested  are supported.&#xA;     * @exception  IOException  if an I/O error occurs while reading the object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="obj">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.0">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/Class.class.xmi#//@classifiers.0/@members.37"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.0/@variable"/>
              </next>
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.1/@init"/>
              </arraySelectors>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.1/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Abstract">
      <comments>/**&#xA; * The abstract class &lt;code>ContentHandler&lt;/code> is the superclass &#xA; * of all classes that read an &lt;code>Object&lt;/code> from a &#xA; * &lt;code>URLConnection&lt;/code>. &#xA; * &lt;p>&#xA; * An application does not generally call the &#xA; * &lt;code>getContent&lt;/code> method in this class directly. Instead, an &#xA; * application calls the &lt;code>getContent&lt;/code> method in class &#xA; * &lt;code>URL&lt;/code> or in &lt;code>URLConnection&lt;/code>.&#xA; * The application's content handler factory (an instance of a class that &#xA; * implements the interface &lt;code>ContentHandlerFactory&lt;/code> set &#xA; * up by a call to &lt;code>setContentHandler&lt;/code>) is &#xA; * called with a &lt;code>String&lt;/code> giving the MIME type of the &#xA; * object being received on the socket. The factory returns an &#xA; * instance of a subclass of &lt;code>ContentHandler&lt;/code>, and its &#xA; * &lt;code>getContent&lt;/code> method is called to create the object. &#xA; * &lt;p>&#xA; * If no content handler could be found, URLConnection will &#xA; * look for a content handler in a user-defineable set of places.&#xA; * By default it looks in sun.net.www.content, but users can define a &#xA; * vertical-bar delimited set of class prefixes to search through in &#xA; * addition by defining the java.content.handler.pkgs property.&#xA; * The class name must be of the form:&#xA; * &lt;pre>&#xA; *     {package-prefix}.{major}.{minor}&#xA; * e.g.&#xA; *     YoyoDyne.experimental.text.plain&#xA; * &lt;/pre>&#xA; * If the loading of the content handler class would be performed by &#xA; * a classloader that is outside of the the delegation chain of the caller,&#xA; * the JVM will need the RuntimePermission &quot;getClassLoader&quot;.&#xA; * &#xA; * @author  James Gosling&#xA; * @version 1.17, 12/19/03&#xA; * @see     java.net.ContentHandler#getContent(java.net.URLConnection)&#xA; * @see     java.net.ContentHandlerFactory&#xA; * @see     java.net.URL#getContent()&#xA; * @see     java.net.URLConnection&#xA; * @see     java.net.URLConnection#getContent()&#xA; * @see     java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
  </classifiers>
</containers:CompilationUnit>
