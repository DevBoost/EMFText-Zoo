<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="SocketOptions.java">
  <comments>/*&#xA; * @(#)SocketOptions.java&#x9;1.32 04/01/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>net</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="SocketOptions">
    <members xsi:type="members:InterfaceMethod" name="setOption">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="optID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SocketException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Enable/disable the option specified by &lt;I>optID&lt;/I>.  If the option&#xA;     * is to be enabled, and it takes an option-specific &quot;value&quot;,  this is&#xA;     * passed in &lt;I>value&lt;/I>.  The actual type of value is option-specific,&#xA;     * and it is an error to pass something that isn't of the expected type:&#xA;     * &lt;BR>&lt;PRE>&#xA;     * SocketImpl s;&#xA;     * ...&#xA;     * s.setOption(SO_LINGER, new Integer(10));&#xA;     *    // OK - set SO_LINGER w/ timeout of 10 sec.&#xA;     * s.setOption(SO_LINGER, new Double(10));&#xA;     *    // ERROR - expects java.lang.Integer&#xA;     *&lt;/PRE>&#xA;     * If the requested option is binary, it can be set using this method by&#xA;     * a java.lang.Boolean:&#xA;     * &lt;BR>&lt;PRE>&#xA;     * s.setOption(TCP_NODELAY, new Boolean(true));&#xA;     *    // OK - enables TCP_NODELAY, a binary option&#xA;     * &lt;/PRE>&#xA;     * &lt;BR>&#xA;     * Any option can be disabled using this method with a Boolean(false):&#xA;     * &lt;BR>&lt;PRE>&#xA;     * s.setOption(TCP_NODELAY, new Boolean(false));&#xA;     *    // OK - disables TCP_NODELAY&#xA;     * s.setOption(SO_LINGER, new Boolean(false));&#xA;     *    // OK - disables SO_LINGER&#xA;     * &lt;/PRE>&#xA;     * &lt;BR>&#xA;     * For an option that has a notion of on and off, and requires &#xA;     * a non-boolean parameter, setting its value to anything other than&#xA;     * &lt;I>Boolean(false)&lt;/I> implicitly enables it.&#xA;     * &lt;BR>&#xA;     * Throws SocketException if the option is unrecognized,&#xA;     * the socket is closed, or some low-level error occurred&#xA;     * &lt;BR>&#xA;     * @param optID identifies the option&#xA;     * @param value the parameter of the socket option&#xA;     * @throws SocketException if the option is unrecognized,&#xA;     * the socket is closed, or some low-level error occurred&#xA;     * @see #getOption(int)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOption">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="optID">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SocketException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Fetch the value of an option.&#xA;     * Binary options will return java.lang.Boolean(true)&#xA;     * if enabled, java.lang.Boolean(false) if disabled, e.g.:&#xA;     * &lt;BR>&lt;PRE>&#xA;     * SocketImpl s;&#xA;     * ...&#xA;     * Boolean noDelay = (Boolean)(s.getOption(TCP_NODELAY));&#xA;     * if (noDelay.booleanValue()) {&#xA;     *     // true if TCP_NODELAY is enabled...&#xA;     * ...&#xA;     * }&#xA;     * &lt;/PRE>&#xA;     * &lt;P>&#xA;     * For options that take a particular type as a parameter,&#xA;     * getOption(int) will return the paramter's value, else&#xA;     * it will return java.lang.Boolean(false):&#xA;     * &lt;PRE>&#xA;     * Object o = s.getOption(SO_LINGER);&#xA;     * if (o instanceof Integer) {&#xA;     *     System.out.print(&quot;Linger time is &quot; + ((Integer)o).intValue());&#xA;     * } else {&#xA;     *   // the true type of o is java.lang.Boolean(false);&#xA;     * }&#xA;     * &lt;/PRE>&#xA;     *&#xA;     * @param optID an &lt;code>int&lt;/code> identifying the option to fetch&#xA;     * @return the value of the option&#xA;     * @throws SocketException if the socket is closed&#xA;     * @throws SocketException if &lt;I>optID&lt;/I> is unknown along the&#xA;     *         protocol stack (including the SocketImpl)&#xA;     * @see #setOption(int, java.lang.Object)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="TCP_NODELAY">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The java-supported BSD-style options.&#xA;     */</comments>
        <comments>/**&#xA;     * Disable Nagle's algorithm for this connection.  Written data&#xA;     * to the network is not buffered pending acknowledgement of&#xA;     * previously written data.&#xA;     *&lt;P>&#xA;     * Valid for TCP only: SocketImpl.&#xA;     * &lt;P>&#xA;     * @see Socket#setTcpNoDelay&#xA;     * @see Socket#getTcpNoDelay&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_BINDADDR">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="15"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Fetch the local address binding of a socket (this option cannot&#xA;     * be &quot;set&quot; only &quot;gotten&quot;, since sockets are bound at creation time,&#xA;     * and so the locally bound address cannot be changed).  The default local&#xA;     * address of a socket is INADDR_ANY, meaning any local address on a&#xA;     * multi-homed host.  A multi-homed host can use this option to accept&#xA;     * connections to only one of its addresses (in the case of a&#xA;     * ServerSocket or DatagramSocket), or to specify its return address&#xA;     * to the peer (for a Socket or DatagramSocket).  The parameter of&#xA;     * this option is an InetAddress.&#xA;     * &lt;P>&#xA;     * This option &lt;B>must&lt;/B> be specified in the constructor.&#xA;     * &lt;P>&#xA;     * Valid for: SocketImpl, DatagramSocketImpl&#xA;     * &lt;P>&#xA;     * @see Socket#getLocalAddress&#xA;     * @see DatagramSocket#getLocalAddress&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_REUSEADDR">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Sets SO_REUSEADDR for a socket.  This is used only for MulticastSockets&#xA;     * in java, and it is set by default for MulticastSockets.&#xA;     * &lt;P>&#xA;     * Valid for: DatagramSocketImpl&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_BROADCAST">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets SO_BROADCAST for a socket. This option enables and disables &#xA;     * the ability of the process to send broadcast messages. It is supported&#xA;     * for only datagram sockets and only on networks that support&#xA;     * the concept of a broadcast message (e.g. Ethernet, token ring, etc.),&#xA;     * and it is set by default for DatagramSockets.&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="IP_MULTICAST_IF">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Set which outgoing interface on which to send multicast packets.&#xA;     * Useful on hosts with multiple network interfaces, where applications&#xA;     * want to use other than the system default.  Takes/returns an InetAddress.&#xA;     * &lt;P>&#xA;     * Valid for Multicast: DatagramSocketImpl&#xA;     * &lt;P>&#xA;     * @see MulticastSocket#setInterface(InetAddress)&#xA;     * @see MulticastSocket#getInterface()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="IP_MULTICAST_IF2">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="31"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Same as above. This option is introduced so that the behaviour &#xA;     *  with IP_MULTICAST_IF will be kept the same as before, while&#xA;     *  this new option can support setting outgoing interfaces with either &#xA;     *  IPv4 and IPv6 addresses.&#xA;     *&#xA;     *  NOTE: make sure there is no conflict with this&#xA;     * @see MulticastSocket#setNetworkInterface(NetworkInterface)&#xA;     * @see MulticastSocket#getNetworkInterface()&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="IP_MULTICAST_LOOP">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="18"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * This option enables or disables local loopback of multicast datagrams.&#xA;     * This option is enabled by default for Multicast Sockets.&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="IP_TOS">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * This option sets the type-of-service or traffic class field &#xA;     * in the IP header for a TCP or UDP socket.&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_LINGER">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specify a linger-on-close timeout.  This option disables/enables&#xA;     * immediate return from a &lt;B>close()&lt;/B> of a TCP Socket.  Enabling&#xA;     * this option with a non-zero Integer &lt;I>timeout&lt;/I> means that a&#xA;     * &lt;B>close()&lt;/B> will block pending the transmission and acknowledgement&#xA;     * of all data written to the peer, at which point the socket is closed&#xA;     * &lt;I>gracefully&lt;/I>.  Upon reaching the linger timeout, the socket is&#xA;     * closed &lt;I>forcefully&lt;/I>, with a TCP RST. Enabling the option with a&#xA;     * timeout of zero does a forceful close immediately. If the specified&#xA;     * timeout value exceeds 65,535 it will be reduced to 65,535.&#xA;     * &lt;P>&#xA;     * Valid only for TCP: SocketImpl&#xA;     * &#xA;     * @see Socket#setSoLinger&#xA;     * @see Socket#getSoLinger&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_TIMEOUT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4102"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Set a timeout on blocking Socket operations:&#xA;     * &lt;PRE>&#xA;     * ServerSocket.accept();&#xA;     * SocketInputStream.read();&#xA;     * DatagramSocket.receive();&#xA;     * &lt;/PRE>&#xA;     *&#xA;     * &lt;P> The option must be set prior to entering a blocking&#xA;     * operation to take effect.  If the timeout expires and the&#xA;     * operation would continue to block,&#xA;     * &lt;B>java.io.InterruptedIOException&lt;/B> is raised.  The Socket is&#xA;     * not closed in this case.&#xA;     *&#xA;     * &lt;P> Valid for all sockets: SocketImpl, DatagramSocketImpl&#xA;     *&#xA;     * @see Socket#setSoTimeout&#xA;     * @see ServerSocket#setSoTimeout&#xA;     * @see DatagramSocket#setSoTimeout&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_SNDBUF">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4097"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set a hint the size of the underlying buffers used by the&#xA;     * platform for outgoing network I/O. When used in set, this is a&#xA;     * suggestion to the kernel from the application about the size of&#xA;     * buffers to use for the data to be sent over the socket. When&#xA;     * used in get, this must return the size of the buffer actually&#xA;     * used by the platform when sending out data on this socket.&#xA;     *&#xA;     * Valid for all sockets: SocketImpl, DatagramSocketImpl&#xA;     *&#xA;     * @see Socket#setSendBufferSize&#xA;     * @see Socket#getSendBufferSize&#xA;     * @see DatagramSocket#setSendBufferSize&#xA;     * @see DatagramSocket#getSendBufferSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_RCVBUF">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4098"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set a hint the size of the underlying buffers used by the&#xA;     * platform for incoming network I/O. When used in set, this is a&#xA;     * suggestion to the kernel from the application about the size of&#xA;     * buffers to use for the data to be received over the&#xA;     * socket. When used in get, this must return the size of the&#xA;     * buffer actually used by the platform when receiving in data on&#xA;     * this socket.&#xA;     *&#xA;     * Valid for all sockets: SocketImpl, DatagramSocketImpl&#xA;     *&#xA;     * @see Socket#setReceiveBufferSize&#xA;     * @see Socket#getReceiveBufferSize&#xA;     * @see DatagramSocket#setReceiveBufferSize&#xA;     * @see DatagramSocket#getReceiveBufferSize&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_KEEPALIVE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * When the keepalive option is set for a TCP socket and no data&#xA;     * has been exchanged across the socket in either direction for &#xA;     * 2 hours (NOTE: the actual value is implementation dependent),&#xA;     * TCP automatically sends a keepalive probe to the peer. This probe is a &#xA;     * TCP segment to which the peer must respond. &#xA;     * One of three responses is expected:&#xA;     * 1. The peer responds with the expected ACK. The application is not &#xA;     *    notified (since everything is OK). TCP will send another probe &#xA;     *    following another 2 hours of inactivity.&#xA;     * 2. The peer responds with an RST, which tells the local TCP that&#xA;     *    the peer host has crashed and rebooted. The socket is closed.&#xA;     * 3. There is no response from the peer. The socket is closed. &#xA;     *&#xA;     * The purpose of this option is to detect if the peer host crashes. &#xA;     *&#xA;     * Valid only for TCP socket: SocketImpl&#xA;     *&#xA;     * @see Socket#setKeepAlive&#xA;     * @see Socket#getKeepAlive&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="SO_OOBINLINE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4099"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * When the OOBINLINE option is set, any TCP urgent data received on&#xA;     * the socket will be received through the socket input stream.&#xA;     * When the option is disabled (which is the default) urgent data&#xA;     * is silently discarded.&#xA;     *&#xA;     * @see Socket#setOOBInline&#xA;     * @see Socket#getOOBInline&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface of methods to get/set socket options.  This interface is&#xA; * implemented by: &lt;B>SocketImpl&lt;/B> and  &lt;B>DatagramSocketImpl&lt;/B>.&#xA; * Subclasses of these should override the methods&#xA; * of this interface in order to support their own options.&#xA; * &lt;P>&#xA; * The methods and constants which specify options in this interface are&#xA; * for implementation only.  If you're not subclassing SocketImpl or&#xA; * DatagramSocketImpl, &lt;B>you won't use these directly.&lt;/B> There are&#xA; * type-safe methods to get/set each of these options in Socket, ServerSocket,&#xA; * DatagramSocket and MulticastSocket.&#xA; * &lt;P>&#xA; * @version 1.32, 01/28/04&#xA; * @author David Brown&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
