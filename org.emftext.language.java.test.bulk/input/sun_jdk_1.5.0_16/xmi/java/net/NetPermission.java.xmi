<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="NetPermission.java">
  <comments>/*&#xA; * @(#)NetPermission.java&#x9;1.49 04/02/03&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>net</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/StringTokenizer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="NetPermission">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="8343910153355041693"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="NetPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new NetPermission with the specified name.&#xA;     * The name is the symbolic name of the NetPermission, such as&#xA;     * &quot;setDefaultAuthenticator&quot;, etc. An asterisk&#xA;     * may appear at the end of the name, following a &quot;.&quot;, or by itself, to&#xA;     * signify a wildcard match.&#xA;     *&#xA;     * @param name the name of the NetPermission.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="NetPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="actions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new NetPermission object with the specified name.&#xA;     * The name is the symbolic name of the NetPermission, and the&#xA;     * actions String is currently unused and should be null.&#xA;     *&#xA;     * @param name the name of the NetPermission.&#xA;     * @param actions should be null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class is for various network permissions.&#xA; * A NetPermission contains a name (also referred to as a &quot;target name&quot;) but&#xA; * no actions list; you either have the named permission&#xA; * or you don't.&#xA; * &lt;P>&#xA; * The target name is the name of the network permission (see below). The naming&#xA; * convention follows the  hierarchical property naming convention.&#xA; * Also, an asterisk&#xA; * may appear at the end of the name, following a &quot;.&quot;, or by itself, to&#xA; * signify a wildcard match. For example: &quot;foo.*&quot; or &quot;*&quot; is valid,&#xA; * &quot;*foo&quot; or &quot;a*b&quot; is not valid.&#xA; * &lt;P>&#xA; * The following table lists all the possible NetPermission target names,&#xA; * and for each provides a description of what the permission allows&#xA; * and a discussion of the risks of granting code the permission.&#xA; * &lt;P>&#xA; *&#xA; * &lt;table border=1 cellpadding=5 summary=&quot;Permission target name, what the permission allows, and associated risks&quot;>&#xA; * &lt;tr>&#xA; * &lt;th>Permission Target Name&lt;/th>&#xA; * &lt;th>What the Permission Allows&lt;/th>&#xA; * &lt;th>Risks of Allowing this Permission&lt;/th>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setDefaultAuthenticator&lt;/td>&#xA; *   &lt;td>The ability to set the&#xA; * way authentication information is retrieved when&#xA; * a proxy or HTTP server asks for authentication&lt;/td>&#xA; *   &lt;td>Malicious&#xA; * code can set an authenticator that monitors and steals user&#xA; * authentication input as it retrieves the input from the user.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>requestPasswordAuthentication&lt;/td>&#xA; *   &lt;td>The ability&#xA; * to ask the authenticator registered with the system for&#xA; * a password&lt;/td>&#xA; *   &lt;td>Malicious code may steal this password.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>specifyStreamHandler&lt;/td>&#xA; *   &lt;td>The ability&#xA; * to specify a stream handler when constructing a URL&lt;/td>&#xA; *   &lt;td>Malicious code may create a URL with resources that it would&#xA;normally not have access to (like file:/foo/fum/), specifying a&#xA;stream handler that gets the actual bytes from someplace it does &#xA;have access to. Thus it might be able to trick the system into&#xA;creating a ProtectionDomain/CodeSource for a class even though&#xA;that class really didn't come from that location.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr> &#xA; *   &lt;td>setProxySelector&lt;/td>&#xA; *   &lt;td>The ability to set the proxy selector used to make decisions&#xA; *   on which proxies to use when making network connections.&lt;/td>&#xA; *   &lt;td>Malicious code can set a ProxySelector that directs network&#xA; *   traffic to an arbitrary network host.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr> &#xA; *   &lt;td>getProxySelector&lt;/td>&#xA; *   &lt;td>The ability to get the proxy selector used to make decisions&#xA; *   on which proxies to use when making network connections.&lt;/td>&#xA; *   &lt;td>Malicious code can get a ProxySelector to discover proxy&#xA; *   hosts and ports on internal networks, which could then become&#xA; *   targets for attack.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr> &#xA; *   &lt;td>setCookieHandler&lt;/td>&#xA; *   &lt;td>The ability to set the cookie handler that processes highly&#xA; *   security sensitive cookie information for an Http session.&lt;/td>&#xA; *   &lt;td>Malicious code can set a cookie handler to obtain access to&#xA; *   highly security sensitive cookie information. Some web servers&#xA; *   use cookies to save user private information such as access&#xA; *   control information, or to track user browsing habit.&lt;/td>&#xA; *   &lt;/tr>&#xA; *&#xA; * &lt;tr> &#xA; *   &lt;td>getCookieHandler&lt;/td>&#xA; *   &lt;td>The ability to get the cookie handler that processes highly&#xA; *   security sensitive cookie information for an Http session.&lt;/td>&#xA; *   &lt;td>Malicious code can get a cookie handler to obtain access to&#xA; *   highly security sensitive cookie information. Some web servers&#xA; *   use cookies to save user private information such as access&#xA; *   control information, or to track user browsing habit.&lt;/td>&#xA; *   &lt;/tr>&#xA; *&#xA; * &lt;tr> &#xA; *   &lt;td>setResponseCache&lt;/td>&#xA; *   &lt;td>The ability to set the response cache that provides access to&#xA; *   a local response cache.&lt;/td>&#xA; *   &lt;td>Malicious code getting access to the local response cache&#xA; *   could access security sensitive information, or create false&#xA; *   entries in the response cache.&lt;/td>&#xA; *   &lt;/tr>&#xA; *&#xA; * &lt;tr> &#xA; *   &lt;td>getResponseCache&lt;/td>&#xA; *   &lt;td>The ability to get the response cache that provides&#xA; *   access to a local response cache.&lt;/td>&#xA; *   &lt;td>Malicious code getting access to the local response cache&#xA; *   could access security sensitive information.&lt;/td>&#xA; *   &lt;/tr>&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * @see java.security.BasicPermission&#xA; * @see java.security.Permission&#xA; * @see java.security.Permissions&#xA; * @see java.security.PermissionCollection&#xA; * @see java.lang.SecurityManager&#xA; *&#xA; * @version 1.49 04/02/03&#xA; *&#xA; * @author Marianne Mueller&#xA; * @author Roland Schemers&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../security/BasicPermission.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
