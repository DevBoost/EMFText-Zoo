<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="Compiler.java">
  <comments>/*&#xA; * @(#)Compiler.java&#x9;1.20 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Compiler">
    <members xsi:type="members:Constructor" name="Compiler">
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initialize">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// don't make instances</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="registerNatives">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.2"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>security</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="loaded">
                          <typeReference xsi:type="types:Boolean"/>
                          <initialValue xsi:type="literals:BooleanLiteral"/>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="jit">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.25"/>
                              <arguments xsi:type="references:StringReference" value="java.compiler"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:TryBlock">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.37"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@variable"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.1"/>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="literals:BooleanLiteral" value="true"/>
                              </expression>
                            </statements>
                            <catcheBlocks>
                              <statements xsi:type="statements:ExpressionStatement">
                                <expression xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../io/PrintStream.class.xmi#//@classifiers.0/@members.42"/>
                                      <arguments xsi:type="expressions:AdditiveExpression">
                                        <children xsi:type="references:StringReference" value="Warning: JIT compiler &quot;"/>
                                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@variable"/>
                                        <children xsi:type="references:StringReference" value="&quot; not found. Will use interpreter."/>
                                        <additiveOperators xsi:type="operators:Addition"/>
                                        <additiveOperators xsi:type="operators:Addition"/>
                                      </arguments>
                                    </next>
                                    <target xsi:type="members:Field" href="System.class.xmi#//@classifiers.0/@members.2"/>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
                                </expression>
                              </statements>
                              <parameter name="e">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="UnsatisfiedLinkError.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </parameter>
                            </catcheBlocks>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:ConditionalAndExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@variable"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Negate"/>
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.33"/>
                                  <arguments xsi:type="references:StringReference" value="NONE"/>
                                </next>
                              </child>
                            </expression>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Negate"/>
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.33"/>
                                  <arguments xsi:type="references:StringReference" value=""/>
                                </next>
                              </child>
                            </expression>
                          </children>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="info">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.25"/>
                              <arguments xsi:type="references:StringReference" value="java.vm.info"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.27"/>
                                <arguments xsi:type="references:StringReference" value="java.vm.info"/>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.3/@variable"/>
                                  <children xsi:type="references:StringReference" value=", "/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@variable"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </next>
                              <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                        <elseStatement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.27"/>
                                <arguments xsi:type="references:StringReference" value="java.vm.info"/>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.3/@variable"/>
                                  <children xsi:type="references:StringReference" value=", nojit"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </next>
                              <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
                            </expression>
                          </statements>
                        </elseStatement>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="literals:NullLiteral"/>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="compileClass">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clazz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compiles the specified class.&#xA;     *&#xA;     * @param   clazz   a class.&#xA;     * @return  &lt;code>true&lt;/code> if the compilation succeeded;&#xA;     *          &lt;code>false&lt;/code> if the compilation failed or no compiler&#xA;     *          is available.&#xA;     * @exception NullPointerException if &lt;code>clazz&lt;/code> is &#xA;     *          &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="compileClasses">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="string">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compiles all classes whose name matches the specified string.&#xA;     *&#xA;     * @param   string   the name of the classes to compile.&#xA;     * @return  &lt;code>true&lt;/code> if the compilation succeeded;&#xA;     *          &lt;code>false&lt;/code> if the compilation failed or no compiler&#xA;     *          is available.&#xA;     * @exception NullPointerException if &lt;code>string&lt;/code> is &#xA;     *          &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="command">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Examines the argument type and its fields and perform some documented&#xA;     * operation. No specific operations are required.&#xA;     *&#xA;     * @param   any   an argument.&#xA;     * @return  a compiler-specific value, or &lt;code>null&lt;/code> if no compiler&#xA;     *          is available.&#xA;     * @exception NullPointerException if &lt;code>any&lt;/code> is &#xA;     *          &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="enable">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Cause the Compiler to resume operation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="disable">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Cause the Compiler to cease operation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Compiler&lt;/code> class is provided to support&#xA; * Java-to-native-code compilers and related services. By design, the&#xA; * &lt;code>Compiler&lt;/code> class does nothing; it serves as a&#xA; * placeholder for a JIT compiler implementation.&#xA; * &lt;p>&#xA; * When the Java Virtual Machine first starts, it determines if the&#xA; * system property &lt;code>java.compiler&lt;/code> exists. (System&#xA; * properties are accessible through &lt;code>getProperty&lt;/code>  and ,&#xA; * a method defined by the &lt;code>System&lt;/code> class.) If so, it is&#xA; * assumed to be the name of a library (with a platform-dependent&#xA; * exact location and type); the &lt;code>loadLibrary&lt;/code> method in&#xA; * class &lt;code>System&lt;/code> is called to load that library. If this&#xA; * loading succeeds, the function named&#xA; * &lt;code>java_lang_Compiler_start()&lt;/code> in that library is called.&#xA; * &lt;p>&#xA; * If no compiler is available, these methods do nothing.&#xA; *&#xA; * @author  Frank Yellin&#xA; * @version 1.20, 05/05/04&#xA; * @see     java.lang.System#getProperty(java.lang.String)&#xA; * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)&#xA; * @see     java.lang.System#loadLibrary(java.lang.String)&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
  </classifiers>
</containers:CompilationUnit>
