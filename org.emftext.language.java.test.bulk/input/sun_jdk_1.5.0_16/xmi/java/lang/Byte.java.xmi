<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="Byte.java">
  <comments>/*&#xA; * @(#)Byte.java&#x9;1.40 04/05/11&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Byte">
    <members xsi:type="members:Field" name="MIN_VALUE">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
      </initialValue>
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A constant holding the minimum value a &lt;code>byte&lt;/code> can&#xA;     * have, -2&lt;sup>7&lt;/sup>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAX_VALUE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="127"/>
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A constant holding the maximum value a &lt;code>byte&lt;/code> can&#xA;     * have, 2&lt;sup>7&lt;/sup>-1.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TYPE">
      <initialValue xsi:type="expressions:CastExpression">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <child xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.92"/>
            <arguments xsi:type="references:StringReference" value="byte"/>
          </next>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </child>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>Class&lt;/code> instance representing the primitive type&#xA;     * &lt;code>byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a new &lt;code>String&lt;/code> object representing the&#xA;     * specified &lt;code>byte&lt;/code>. The radix is assumed to be 10.&#xA;     *&#xA;     * @param b&#x9;the &lt;code>byte&lt;/code> to be converted&#xA;     * @return the string representation of the specified &lt;code>byte&lt;/code>&#xA;     * @see java.lang.Integer#toString(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Integer.class.xmi#//@classifiers.0/@members.10"/>
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Int"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          </next>
          <target xsi:type="classifiers:Class" href="Integer.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="ByteCache">
      <members xsi:type="members:Constructor" name="ByteCache">
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="cache">
        <initialValue xsi:type="arrays:ArrayInstantiationBySize">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <sizes xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                </expression>
              </child>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="127"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </sizes>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arrayDimensionsAfter/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="statements:Block">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.2/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Byte"/>
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.2/@statements.0/@init"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </expression>
                  </child>
                </arguments>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.2/@statements.0/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.1">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.2/@statements.0/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <modifiers xsi:type="modifiers:Static"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>Byte&lt;/tt> instance representing the specified&#xA;     * &lt;tt>byte&lt;/tt> value.&#xA;     * If a new &lt;tt>Byte&lt;/tt> instance is not required, this method&#xA;     * should generally be used in preference to the constructor&#xA;     * {@link #Byte(byte)}, as this method is likely to yield&#xA;     * significantly better space and time performance by caching&#xA;     * frequently requested values.&#xA;     *&#xA;     * @param  b a byte value.&#xA;     * @return a &lt;tt>Byte&lt;/tt> instance representing &lt;tt>b&lt;/tt>.&#xA;     * @since  1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="offset">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@members.1">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Int"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </position>
            </arraySelectors>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseByte">
      <typeReference xsi:type="types:Byte"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses the string argument as a signed decimal&#xA;     * &lt;code>byte&lt;/code>. The characters in the string must all be&#xA;     * decimal digits, except that the first character may be an ASCII&#xA;     * minus sign &lt;code>'-'&lt;/code> (&lt;code>'&amp;#92;u002D'&lt;/code>) to&#xA;     * indicate a negative value. The resulting &lt;code>byte&lt;/code> value is&#xA;     * returned, exactly as if the argument and the radix 10 were&#xA;     * given as arguments to the {@link #parseByte(java.lang.String,&#xA;     * int)} method.&#xA;     *&#xA;     * @param s&#x9;&#x9;a &lt;code>String&lt;/code> containing the &#xA;     *                  &lt;code>byte&lt;/code> representation to be parsed&#xA;     * @return &#x9;&#x9;the &lt;code>byte&lt;/code> value represented by the &#xA;     *                  argument in decimal&#xA;     * @exception&#x9;NumberFormatException if the string does not&#xA;     *&#x9;&#x9;&#x9;contain a parsable &lt;code>byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseByte">
      <typeReference xsi:type="types:Byte"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="radix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses the string argument as a signed &lt;code>byte&lt;/code> in the&#xA;     * radix specified by the second argument. The characters in the&#xA;     * string must all be digits, of the specified radix (as&#xA;     * determined by whether {@link java.lang.Character#digit(char,&#xA;     * int)} returns a nonnegative value) except that the first&#xA;     * character may be an ASCII minus sign &lt;code>'-'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u002D'&lt;/code>) to indicate a negative value.  The&#xA;     * resulting &lt;code>byte&lt;/code> value is returned.&#xA;     * &lt;p>&#xA;     * An exception of type &lt;code>NumberFormatException&lt;/code> is&#xA;     * thrown if any of the following situations occurs:&#xA;     * &lt;ul>&#xA;     * &lt;li> The first argument is &lt;code>null&lt;/code> or is a string of&#xA;     * length zero.&#xA;     *&#xA;     * &lt;li> The radix is either smaller than {@link&#xA;     * java.lang.Character#MIN_RADIX} or larger than {@link&#xA;     * java.lang.Character#MAX_RADIX}.&#xA;     *&#xA;     * &lt;li> Any character of the string is not a digit of the specified&#xA;     * radix, except that the first character may be a minus sign&#xA;     * &lt;code>'-'&lt;/code> (&lt;code>'&amp;#92;u002D'&lt;/code>) provided that the&#xA;     * string is longer than length 1.&#xA;     *&#xA;     * &lt;li> The value represented by the string is not a value of type&#xA;     * &lt;code>byte&lt;/code>.&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @param s&#x9;&#x9;the &lt;code>String&lt;/code> containing the &#xA;     *&#x9;&#x9;&#x9;&lt;code>byte&lt;/code>&#xA;     *                  representation to be parsed&#xA;     * @param radix&#x9;the radix to be used while parsing &lt;code>s&lt;/code>&#xA;     * @return &#x9;&#x9;the &lt;code>byte&lt;/code> value represented by the string &#xA;     *                   argument in the specified radix&#xA;     * @exception&#x9;NumberFormatException If the string does&#xA;     *                  not contain a parsable &lt;code>byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Integer.class.xmi#//@classifiers.0/@members.18"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="Integer.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="Value out of range. Value:&quot;"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
              <children xsi:type="references:StringReference" value="&quot; Radix:"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </throwable>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Byte"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="radix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>Byte&lt;/code> object holding the value&#xA;     * extracted from the specified &lt;code>String&lt;/code> when parsed&#xA;     * with the radix given by the second argument. The first argument&#xA;     * is interpreted as representing a signed &lt;code>byte&lt;/code> in&#xA;     * the radix specified by the second argument, exactly as if the&#xA;     * argument were given to the {@link #parseByte(java.lang.String,&#xA;     * int)} method. The result is a &lt;code>Byte&lt;/code> object that&#xA;     * represents the &lt;code>byte&lt;/code> value specified by the string.&#xA;     * &lt;p> In other words, this method returns a &lt;code>Byte&lt;/code> object&#xA;     * equal to the value of:&#xA;     *&#xA;     * &lt;blockquote>&lt;code>&#xA;     * new Byte(Byte.parseByte(s, radix))&#xA;     * &lt;/code>&lt;/blockquote>&#xA;     *&#xA;     * @param s&#x9;&#x9;the string to be parsed&#xA;     * @param radix &#x9;the radix to be used in interpreting &lt;code>s&lt;/code>&#xA;     * @return &#x9;&#x9;a &lt;code>Byte&lt;/code> object holding the value &#xA;     * &#x9;&#x9;&#x9;represented by the string argument in the &#xA;     *&#x9;&#x9;&#x9;specified radix.&#xA;     * @exception&#x9;NumberFormatException If the &lt;code>String&lt;/code> does &#xA;     *&#x9;&#x9;&#x9;not contain a parsable &lt;code>byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>Byte&lt;/code> object holding the value&#xA;     * given by the specified &lt;code>String&lt;/code>. The argument is&#xA;     * interpreted as representing a signed decimal &lt;code>byte&lt;/code>,&#xA;     * exactly as if the argument were given to the {@link&#xA;     * #parseByte(java.lang.String)} method. The result is a&#xA;     * &lt;code>Byte&lt;/code> object that represents the &lt;code>byte&lt;/code>&#xA;     * value specified by the string.  &lt;p> In other words, this method&#xA;     * returns a &lt;code>Byte&lt;/code> object equal to the value of:&#xA;     *&#xA;     * &lt;blockquote>&lt;code>&#xA;     * new Byte(Byte.parseByte(s))&#xA;     * &lt;/code>&lt;/blockquote>&#xA;     *&#xA;     * @param s&#x9;&#x9;the string to be parsed&#xA;     * @return &#x9;&#x9;a &lt;code>Byte&lt;/code> object holding the value&#xA;     * &#x9;&#x9;&#x9;represented by the string argument&#xA;     * @exception&#x9;NumberFormatException If the &lt;code>String&lt;/code> does&#xA;     *&#x9;&#x9;&#x9;not contain a parsable &lt;code>byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="decode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Decodes a &lt;code>String&lt;/code> into a &lt;code>Byte&lt;/code>.&#xA;     * Accepts decimal, hexadecimal, and octal numbers given by&#xA;     * the following grammar:&#xA;     *&#xA;     * &lt;blockquote>&#xA;     * &lt;dl>&#xA;     * &lt;dt>&lt;i>DecodableString:&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub> DecimalNumeral&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>0x&lt;/code> &lt;i>HexDigits&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>0X&lt;/code> &lt;i>HexDigits&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>#&lt;/code> &lt;i>HexDigits&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>0&lt;/code> &lt;i>OctalDigits&lt;/i>&#xA;     * &lt;p>&#xA;     * &lt;dt>&lt;i>Sign:&lt;/i>&#xA;     * &lt;dd>&lt;code>-&lt;/code>&#xA;     * &lt;/dl>&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * &lt;i>DecimalNumeral&lt;/i>, &lt;i>HexDigits&lt;/i>, and &lt;i>OctalDigits&lt;/i>&#xA;     * are defined in &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282&quot;>&amp;sect;3.10.1&lt;/a> &#xA;     * of the &lt;a href=&quot;http://java.sun.com/docs/books/jls/html/&quot;>Java &#xA;     * Language Specification&lt;/a>.&#xA;     * &lt;p>&#xA;     * The sequence of characters following an (optional) negative&#xA;     * sign and/or radix specifier (&amp;quot;&lt;code>0x&lt;/code>&amp;quot;,&#xA;     * &amp;quot;&lt;code>0X&lt;/code>&amp;quot;, &amp;quot;&lt;code>#&lt;/code>&amp;quot;, or&#xA;     * leading zero) is parsed as by the &lt;code>Byte.parseByte&lt;/code>&#xA;     * method with the indicated radix (10, 16, or 8).  This sequence&#xA;     * of characters must represent a positive value or a {@link&#xA;     * NumberFormatException} will be thrown.  The result is negated&#xA;     * if first character of the specified &lt;code>String&lt;/code> is the&#xA;     * minus sign.  No whitespace characters are permitted in the&#xA;     * &lt;code>String&lt;/code>.&#xA;     *&#xA;     * @param     nm the &lt;code>String&lt;/code> to decode.&#xA;     * @return &#x9; a &lt;code>Byte&lt;/code> object holding the &lt;code>byte&lt;/code>&#xA;     * &#x9;&#x9;value represented by &lt;code>nm&lt;/code>&#xA;     * @exception NumberFormatException  if the &lt;code>String&lt;/code> does not&#xA;     *            contain a parsable &lt;code>byte&lt;/code>.&#xA;     * @see java.lang.Byte#parseByte(java.lang.String, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="radix">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="index">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="negative">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Handle minus sign, if present</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
            <arguments xsi:type="references:StringReference" value="-"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
              <arguments xsi:type="references:StringReference" value="0x"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
              <arguments xsi:type="references:StringReference" value="0X"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
            </next>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
              <arguments xsi:type="references:StringReference" value="#"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
            </next>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
                  <arguments xsi:type="references:StringReference" value="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                </next>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </children>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </condition>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Negative sign in wrong position"/>
          </throwable>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
            <arguments xsi:type="references:StringReference" value="-"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.55"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
              <expressionIf xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Byte"/>
                  <child xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.14"/>
                    </child>
                  </child>
                </arguments>
              </expressionIf>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="constant">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// If number is Byte.MIN_VALUE, we'll end up here. The next line</comments>
                  <comments>// handles this case, and causes any genuine format error to be</comments>
                  <comments>// rethrown.</comments>
                  <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
                <expressionIf xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="-"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.55"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.55"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                  </next>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.7/@catcheBlocks.0/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                </next>
              </value>
            </expression>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="value">
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The value of the &lt;code>Byte&lt;/code>.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="Byte">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a newly allocated &lt;code>Byte&lt;/code> object that&#xA;     * represents the specified &lt;code>byte&lt;/code> value.&#xA;     *&#xA;     * @param value&#x9;the value to be represented by the &#xA;     *&#x9;&#x9;&#x9;&lt;code>Byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Byte">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a newly allocated &lt;code>Byte&lt;/code> object that&#xA;     * represents the &lt;code>byte&lt;/code> value indicated by the&#xA;     * &lt;code>String&lt;/code> parameter. The string is converted to a&#xA;     * &lt;code>byte&lt;/code> value in exactly the manner used by the&#xA;     * &lt;code>parseByte&lt;/code> method for radix 10.&#xA;     *&#xA;     * @param s&#x9;&#x9;the &lt;code>String&lt;/code> to be converted to a &#xA;     *&#x9;&#x9;&#x9;&lt;code>Byte&lt;/code>&#xA;     * @exception&#x9;NumberFormatException If the &lt;code>String&lt;/code> &#xA;     *&#x9;&#x9;&#x9;does not contain a parsable &lt;code>byte&lt;/code>.&#xA;     * @see        java.lang.Byte#parseByte(java.lang.String, int)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="byteValue">
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Byte&lt;/code> as a&#xA;     * &lt;code>byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shortValue">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Byte&lt;/code> as a&#xA;     * &lt;code>short&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Short"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intValue">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Byte&lt;/code> as an&#xA;     * &lt;code>int&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Int"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="longValue">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Byte&lt;/code> as a&#xA;     * &lt;code>long&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Long"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="floatValue">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Byte&lt;/code> as a&#xA;     * &lt;code>float&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Float"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doubleValue">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Byte&lt;/code> as a&#xA;     * &lt;code>double&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Double"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>String&lt;/code> object representing this&#xA;     * &lt;code>Byte&lt;/code>'s value.  The value is converted to signed&#xA;     * decimal representation and returned as a string, exactly as if&#xA;     * the &lt;code>byte&lt;/code> value were given as an argument to the&#xA;     * {@link java.lang.Byte#toString(byte)} method.&#xA;     *&#xA;     * @return  a string representation of the value of this object in&#xA;     *          base&amp;nbsp;10.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.83"/>
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Int"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hash code for this &lt;code>Byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Int"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares this object to the specified object.  The result is&#xA;     * &lt;code>true&lt;/code> if and only if the argument is not&#xA;     * &lt;code>null&lt;/code> and is a &lt;code>Byte&lt;/code> object that&#xA;     * contains the same &lt;code>byte&lt;/code> value as this object.&#xA;     *&#xA;     * @param obj&#x9;the object to compare with&#xA;     * @return &#x9;&#x9;&lt;code>true&lt;/code> if the objects are the same;&#xA;     * &#x9;&#x9;&#x9;&lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <children xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.14"/>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
                </expression>
              </children>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareTo">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="anotherByte">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares two &lt;code>Byte&lt;/code> objects numerically.&#xA;     *&#xA;     * @param   anotherByte   the &lt;code>Byte&lt;/code> to be compared.&#xA;     * @return&#x9;the value &lt;code>0&lt;/code> if this &lt;code>Byte&lt;/code> is&#xA;     * &#x9;&#x9;equal to the argument &lt;code>Byte&lt;/code>; a value less than&#xA;     * &#x9;&#x9;&lt;code>0&lt;/code> if this &lt;code>Byte&lt;/code> is numerically less&#xA;     * &#x9;&#x9;than the argument &lt;code>Byte&lt;/code>; and a value greater than&#xA;     * &#x9;&#x9; &lt;code>0&lt;/code> if this &lt;code>Byte&lt;/code> is numerically&#xA;     * &#x9;&#x9; greater than the argument &lt;code>Byte&lt;/code> (signed&#xA;     * &#x9;&#x9; comparison).&#xA;     * @since   1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <self xsi:type="literals:This"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          </children>
          <additiveOperators xsi:type="operators:Subtraction"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="SIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The number of bits used to represent a &lt;tt>byte&lt;/tt> value in two's&#xA;     * complement binary form.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="7183698231559129828"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** use serialVersionUID from JDK 1.1. for interoperability */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * The &lt;code>Byte&lt;/code> class wraps a value of primitive type&#xA; * &lt;code>byte&lt;/code> in an object.  An object of type&#xA; * &lt;code>Byte&lt;/code> contains a single field whose type is&#xA; * &lt;code>byte&lt;/code>.&#xA; *&#xA; * &lt;p>&#xA; *&#xA; * In addition, this class provides several methods for converting a&#xA; * &lt;code>byte&lt;/code> to a &lt;code>String&lt;/code> and a &lt;code>String&lt;/code>&#xA; * to a &lt;code>byte&lt;/code>, as well as other constants and methods&#xA; * useful when dealing with a &lt;code>byte&lt;/code>.&#xA; *&#xA; * @author  Nakul Saraiya&#xA; * @version 1.40, 05/11/04&#xA; * @see     java.lang.Number&#xA; * @since   JDK1.1&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Interface" href="Comparable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Number.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
