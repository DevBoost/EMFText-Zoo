<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/types ../../java.ecore#/16" name="Runnable.java">
  <comments>/*&#xA; * @(#)Runnable.java&#x9;1.24 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Runnable">
    <members xsi:type="members:InterfaceMethod" name="run">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * When an object implementing interface &lt;code>Runnable&lt;/code> is used &#xA;     * to create a thread, starting the thread causes the object's &#xA;     * &lt;code>run&lt;/code> method to be called in that separately executing &#xA;     * thread. &#xA;     * &lt;p>&#xA;     * The general contract of the method &lt;code>run&lt;/code> is that it may &#xA;     * take any action whatsoever.&#xA;     *&#xA;     * @see     java.lang.Thread#run()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Runnable&lt;/code> interface should be implemented by any&#xA; * class whose instances are intended to be executed by a thread. The&#xA; * class must define a method of no arguments called &lt;code>run&lt;/code>.&#xA; * &lt;p>&#xA; * This interface is designed to provide a common protocol for objects that&#xA; * wish to execute code while they are active. For example,&#xA; * &lt;code>Runnable&lt;/code> is implemented by class &lt;code>Thread&lt;/code>.&#xA; * Being active simply means that a thread has been started and has not&#xA; * yet been stopped.&#xA; * &lt;p>&#xA; * In addition, &lt;code>Runnable&lt;/code> provides the means for a class to be&#xA; * active while not subclassing &lt;code>Thread&lt;/code>. A class that implements&#xA; * &lt;code>Runnable&lt;/code> can run without subclassing &lt;code>Thread&lt;/code>&#xA; * by instantiating a &lt;code>Thread&lt;/code> instance and passing itself in&#xA; * as the target.  In most cases, the &lt;code>Runnable&lt;/code> interface should&#xA; * be used if you are only planning to override the &lt;code>run()&lt;/code>&#xA; * method and no other &lt;code>Thread&lt;/code> methods.&#xA; * This is important because classes should not be subclassed&#xA; * unless the programmer intends on modifying or enhancing the fundamental&#xA; * behavior of the class.&#xA; *&#xA; * @author  Arthur van Hoff&#xA; * @version 1.24, 12/19/03&#xA; * @see     java.lang.Thread&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
