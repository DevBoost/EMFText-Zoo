<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="PhantomReference.java">
  <comments>/*&#xA; * @(#)PhantomReference.java&#x9;1.19 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>ref</namespaces>
  <classifiers xsi:type="classifiers:Class" name="PhantomReference">
    <typeParameters name="T"/>
    <members xsi:type="members:ClassMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this reference object's referent.  Because the referent of a&#xA;     * phantom reference is always inaccessible, this method always returns&#xA;     * &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return  &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="PhantomReference">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="referent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="q">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:SuperTypeArgument">
              <superType xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </superType>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="ReferenceQueue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new phantom reference that refers to the given object and&#xA;     * is registered with the given queue.&#xA;     *&#xA;     * &lt;p> It is possible to create a phantom reference with a &lt;tt>null&lt;/tt>&#xA;     * queue, but such a reference is completely useless: Its &lt;tt>get&lt;/tt>&#xA;     * method will always return null and, since it does not have a queue, it&#xA;     * will never be enqueued.&#xA;     *&#xA;     * @param referent the object the new phantom reference will refer to&#xA;     * @param q the queue with which the reference is to be registered,&#xA;     *          or &lt;tt>null&lt;/tt> if registration is not required&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Phantom reference objects, which are enqueued after the collector&#xA; * determines that their referents may otherwise be reclaimed.  Phantom&#xA; * references are most often used for scheduling pre-mortem cleanup actions in&#xA; * a more flexible way than is possible with the Java finalization mechanism.&#xA; *&#xA; * &lt;p> If the garbage collector determines at a certain point in time that the&#xA; * referent of a phantom reference is &lt;a&#xA; * href=&quot;package-summary.html#reachability&quot;>phantom reachable&lt;/a>, then at that&#xA; * time or at some later time it will enqueue the reference.&#xA; *&#xA; * &lt;p> In order to ensure that a reclaimable object remains so, the referent of&#xA; * a phantom reference may not be retrieved: The &lt;code>get&lt;/code> method of a&#xA; * phantom reference always returns &lt;code>null&lt;/code>.&#xA; *&#xA; * &lt;p> Unlike soft and weak references, phantom references are not&#xA; * automatically cleared by the garbage collector as they are enqueued.  An&#xA; * object that is reachable via phantom references will remain so until all&#xA; * such references are cleared or themselves become unreachable.&#xA; *&#xA; * @version  1.19, 12/19/03&#xA; * @author   Mark Reinhold&#xA; * @since    1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Class" href="Reference.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
