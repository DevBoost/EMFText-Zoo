<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="System.java">
  <comments>/*&#xA; * @(#)System.java&#x9;1.150 06/03/22&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/PropertyPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/StringTokenizer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../security/AllPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../nio/channels/Channel.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>channels</namespaces>
    <namespaces>spi</namespaces>
    <classifier xsi:type="classifiers:Class" href="../nio/channels/spi/SelectorProvider.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/net/InetAddressCachePolicy.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>ch</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../sun/nio/ch/Interruptible.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/reflect/Reflection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <namespaces>annotation</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/reflect/annotation/AnnotationType.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="System">
    <members xsi:type="members:InterfaceMethod" name="registerNatives">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* First thing---register the natives */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.0"/>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="System">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Don't let anyone instantiate this class */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="in">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.40"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &quot;standard&quot; input stream. This stream is already&#xA;     * open and ready to supply input data. Typically this stream&#xA;     * corresponds to keyboard input or another input source specified by&#xA;     * the host environment or user.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="out">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &quot;standard&quot; output stream. This stream is already&#xA;     * open and ready to accept output data. Typically this stream&#xA;     * corresponds to display output or another output destination&#xA;     * specified by the host environment or user.&#xA;     * &lt;p>&#xA;     * For simple stand-alone Java applications, a typical way to write&#xA;     * a line of output data is:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     *     System.out.println(data)&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     * &lt;p>&#xA;     * See the &lt;code>println&lt;/code> methods in class &lt;code>PrintStream&lt;/code>.&#xA;     *&#xA;     * @see     java.io.PrintStream#println()&#xA;     * @see     java.io.PrintStream#println(boolean)&#xA;     * @see     java.io.PrintStream#println(char)&#xA;     * @see     java.io.PrintStream#println(char[])&#xA;     * @see     java.io.PrintStream#println(double)&#xA;     * @see     java.io.PrintStream#println(float)&#xA;     * @see     java.io.PrintStream#println(int)&#xA;     * @see     java.io.PrintStream#println(long)&#xA;     * @see     java.io.PrintStream#println(java.lang.Object)&#xA;     * @see     java.io.PrintStream#println(java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="err">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &quot;standard&quot; error output stream. This stream is already&#xA;     * open and ready to accept output data.&#xA;     * &lt;p>&#xA;     * Typically this stream corresponds to display output or another&#xA;     * output destination specified by the host environment or user. By&#xA;     * convention, this output stream is used to display error messages&#xA;     * or other information that should come to the immediate attention&#xA;     * of a user even if the principal output stream, the value of the&#xA;     * variable &lt;code>out&lt;/code>, has been redirected to a file or other&#xA;     * destination that is typically not continuously monitored.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="security">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* The security manager for the system.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setIn">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reassigns the &quot;standard&quot; input stream.&#xA;     *&#xA;     * &lt;p>First, if there is a security manager, its &lt;code>checkPermission&lt;/code>&#xA;     * method is called with a &lt;code>RuntimePermission(&quot;setIO&quot;)&lt;/code> permission&#xA;     *  to see if it's ok to reassign the &quot;standard&quot; input stream.&#xA;     * &lt;p>&#xA;     *&#xA;     * @param in the new standard input stream.&#xA;     *&#xA;     * @throws SecurityException&#xA;     *        if a security manager exists and its&#xA;     *        &lt;code>checkPermission&lt;/code> method doesn't allow&#xA;     *        reassigning of the standard input stream.&#xA;     *&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     *&#xA;     * @since   JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setOut">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reassigns the &quot;standard&quot; output stream.&#xA;     *&#xA;     * &lt;p>First, if there is a security manager, its &lt;code>checkPermission&lt;/code>&#xA;     * method is called with a &lt;code>RuntimePermission(&quot;setIO&quot;)&lt;/code> permission&#xA;     *  to see if it's ok to reassign the &quot;standard&quot; output stream.&#xA;     *&#xA;     * @param out the new standard output stream&#xA;     *&#xA;     * @throws SecurityException&#xA;     *        if a security manager exists and its&#xA;     *        &lt;code>checkPermission&lt;/code> method doesn't allow&#xA;     *        reassigning of the standard output stream.&#xA;     *&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     *&#xA;     * @since   JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setErr">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="err">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reassigns the &quot;standard&quot; error output stream.&#xA;     *&#xA;     * &lt;p>First, if there is a security manager, its &lt;code>checkPermission&lt;/code>&#xA;     * method is called with a &lt;code>RuntimePermission(&quot;setIO&quot;)&lt;/code> permission&#xA;     *  to see if it's ok to reassign the &quot;standard&quot; error output stream.&#xA;     *&#xA;     * @param err the new standard error output stream.&#xA;     *&#xA;     * @throws SecurityException&#xA;     *        if a security manager exists and its&#xA;     *        &lt;code>checkPermission&lt;/code> method doesn't allow&#xA;     *        reassigning of the standard error output stream.&#xA;     *&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     *&#xA;     * @since   JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="inheritedChannel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../nio/channels/Channel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the channel inherited from the entity that created this&#xA;     * Java virtual machine.&#xA;     *&#xA;     * &lt;p> This method returns the channel obtained by invoking the&#xA;     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel&#xA;     * inheritedChannel} method of the system-wide default&#xA;     * {@link java.nio.channels.spi.SelectorProvider} object. &lt;/p>&#xA;     *&#xA;     * &lt;p> In addition to the network-oriented channels described in&#xA;     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel&#xA;     * inheritedChannel}, this method may return other kinds of&#xA;     * channels in the future.&#xA;     *&#xA;     * @return&#x9;The inherited channel, if any, otherwise &lt;tt>null&lt;/tt>.&#xA;     *&#xA;     * @throws&#x9;IOException&#xA;     *&#x9;&#x9;If an I/O error occurs&#xA;     *&#xA;     * @throws&#x9;SecurityException&#xA;     *&#x9;&#x9;If a security manager is present and it does not&#xA;     *&#x9;&#x9;permit access to the channel.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../nio/channels/spi/SelectorProvider.class.xmi#//@classifiers.0/@members.11"/>
            </next>
            <target xsi:type="members:ClassMethod" href="../nio/channels/spi/SelectorProvider.class.xmi#//@classifiers.0/@members.5"/>
          </next>
          <target xsi:type="classifiers:Class" href="../nio/channels/spi/SelectorProvider.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkIO">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="setIO"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setIn0">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setOut0">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setErr0">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="err">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setSecurityManager">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the System security.&#xA;     *&#xA;     * &lt;p> If there is a security manager already installed, this method first&#xA;     * calls the security manager's &lt;code>checkPermission&lt;/code> method&#xA;     * with a &lt;code>RuntimePermission(&quot;setSecurityManager&quot;)&lt;/code>&#xA;     * permission to ensure it's ok to replace the existing&#xA;     * security manager.&#xA;     * This may result in throwing a &lt;code>SecurityException&lt;/code>.&#xA;     *&#xA;     * &lt;p> Otherwise, the argument is established as the current&#xA;     * security manager. If the argument is &lt;code>null&lt;/code> and no&#xA;     * security manager has been established, then no action is taken and&#xA;     * the method simply returns.&#xA;     *&#xA;     * @param      s   the security manager.&#xA;     * @exception  SecurityException  if the security manager has already&#xA;     *             been set and its &lt;code>checkPermission&lt;/code> method&#xA;     *             doesn't allow it to be replaced.&#xA;     * @see #getSecurityManager&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.50"/>
              <arguments xsi:type="references:StringReference" value="java.lang"/>
            </next>
          </expression>
        </statements>
        <catcheBlocks>
          <comments>// no-op</comments>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSecurityManager0">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
              <comments>// ask the currently installed security manager if we</comments>
              <comments>// can replace it.</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="setSecurityManager"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <comments>// New security manager class is not on bootstrap classpath.</comments>
              <comments>// Cause policy to get initialized before we install the new</comments>
              <comments>// security manager, in order to prevent infinite loops when</comments>
              <comments>// trying to initialize the policy (which usually involves</comments>
              <comments>// accessing some security and/or system properties, which in turn</comments>
              <comments>// calls the installed security manager's checkPermission method</comments>
              <comments>// which will loop infinitely if there is a non-system class</comments>
              <comments>// (in this case: the new security manager class) on the stack).</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <next xsi:type="references:MethodCall">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../security/ProtectionDomain.class.xmi#//@classifiers.0/@members.12"/>
                                <arguments xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.12"/>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                                </arguments>
                              </next>
                              <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.89"/>
                            </next>
                            <target xsi:type="members:ClassMethod" href="Object.class.xmi#//@classifiers.0/@members.2"/>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="literals:NullLiteral"/>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.46"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="Object.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../sun/net/InetAddressCachePolicy.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/net/InetAddressCachePolicy.class.xmi#//@classifiers.0/@members.4"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/net/InetAddressCachePolicy.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../sun/net/InetAddressCachePolicy.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSecurityManager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the system security interface.&#xA;     *&#xA;     * @return  if a security manager has already been established for the&#xA;     *          current application, then that security manager is returned;&#xA;     *          otherwise, &lt;code>null&lt;/code> is returned.&#xA;     * @see     #setSecurityManager&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="currentTimeMillis">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the current time in milliseconds.  Note that&#xA;     * while the unit of time of the return value is a millisecond,&#xA;     * the granularity of the value depends on the underlying&#xA;     * operating system and may be larger.  For example, many&#xA;     * operating systems measure time in units of tens of&#xA;     * milliseconds.&#xA;     *&#xA;     * &lt;p> See the description of the class &lt;code>Date&lt;/code> for&#xA;     * a discussion of slight discrepancies that may arise between&#xA;     * &quot;computer time&quot; and coordinated universal time (UTC).&#xA;     *&#xA;     * @return  the difference, measured in milliseconds, between&#xA;     *          the current time and midnight, January 1, 1970 UTC.&#xA;     * @see     java.util.Date&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="nanoTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the current value of the most precise available system&#xA;     * timer, in nanoseconds.&#xA;     *&#xA;     * &lt;p>This method can only be used to measure elapsed time and is&#xA;     * not related to any other notion of system or wall-clock time.&#xA;     * The value returned represents nanoseconds since some fixed but&#xA;     * arbitrary time (perhaps in the future, so values may be&#xA;     * negative).  This method provides nanosecond precision, but not&#xA;     * necessarily nanosecond accuracy. No guarantees are made about&#xA;     * how frequently values change. Differences in successive calls&#xA;     * that span greater than approximately 292 years (2&lt;sup>63&lt;/sup>&#xA;     * nanoseconds) will not accurately compute elapsed time due to&#xA;     * numerical overflow.&#xA;     *&#xA;     * &lt;p> For example, to measure how long some code takes to execute:&#xA;     * &lt;pre>&#xA;     *   long startTime = System.nanoTime();&#xA;     *   // ... the code being measured ...&#xA;     *   long estimatedTime = System.nanoTime() - startTime;&#xA;     * &lt;/pre>&#xA;     * &#xA;     * @return The current value of the system timer, in nanoseconds.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="arraycopy">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="srcPos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dest">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="destPos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Copies an array from the specified source array, beginning at the&#xA;     * specified position, to the specified position of the destination array.&#xA;     * A subsequence of array components are copied from the source&#xA;     * array referenced by &lt;code>src&lt;/code> to the destination array&#xA;     * referenced by &lt;code>dest&lt;/code>. The number of components copied is&#xA;     * equal to the &lt;code>length&lt;/code> argument. The components at&#xA;     * positions &lt;code>srcPos&lt;/code> through&#xA;     * &lt;code>srcPos+length-1&lt;/code> in the source array are copied into&#xA;     * positions &lt;code>destPos&lt;/code> through&#xA;     * &lt;code>destPos+length-1&lt;/code>, respectively, of the destination&#xA;     * array.&#xA;     * &lt;p>&#xA;     * If the &lt;code>src&lt;/code> and &lt;code>dest&lt;/code> arguments refer to the&#xA;     * same array object, then the copying is performed as if the&#xA;     * components at positions &lt;code>srcPos&lt;/code> through&#xA;     * &lt;code>srcPos+length-1&lt;/code> were first copied to a temporary&#xA;     * array with &lt;code>length&lt;/code> components and then the contents of&#xA;     * the temporary array were copied into positions&#xA;     * &lt;code>destPos&lt;/code> through &lt;code>destPos+length-1&lt;/code> of the&#xA;     * destination array.&#xA;     * &lt;p>&#xA;     * If &lt;code>dest&lt;/code> is &lt;code>null&lt;/code>, then a&#xA;     * &lt;code>NullPointerException&lt;/code> is thrown.&#xA;     * &lt;p>&#xA;     * If &lt;code>src&lt;/code> is &lt;code>null&lt;/code>, then a&#xA;     * &lt;code>NullPointerException&lt;/code> is thrown and the destination&#xA;     * array is not modified.&#xA;     * &lt;p>&#xA;     * Otherwise, if any of the following is true, an&#xA;     * &lt;code>ArrayStoreException&lt;/code> is thrown and the destination is&#xA;     * not modified:&#xA;     * &lt;ul>&#xA;     * &lt;li>The &lt;code>src&lt;/code> argument refers to an object that is not an&#xA;     *     array.&#xA;     * &lt;li>The &lt;code>dest&lt;/code> argument refers to an object that is not an&#xA;     *     array.&#xA;     * &lt;li>The &lt;code>src&lt;/code> argument and &lt;code>dest&lt;/code> argument refer&#xA;     *     to arrays whose component types are different primitive types.&#xA;     * &lt;li>The &lt;code>src&lt;/code> argument refers to an array with a primitive&#xA;     *    component type and the &lt;code>dest&lt;/code> argument refers to an array&#xA;     *     with a reference component type.&#xA;     * &lt;li>The &lt;code>src&lt;/code> argument refers to an array with a reference&#xA;     *    component type and the &lt;code>dest&lt;/code> argument refers to an array&#xA;     *     with a primitive component type.&#xA;     * &lt;/ul>&#xA;     * &lt;p>&#xA;     * Otherwise, if any of the following is true, an&#xA;     * &lt;code>IndexOutOfBoundsException&lt;/code> is&#xA;     * thrown and the destination is not modified:&#xA;     * &lt;ul>&#xA;     * &lt;li>The &lt;code>srcPos&lt;/code> argument is negative.&#xA;     * &lt;li>The &lt;code>destPos&lt;/code> argument is negative.&#xA;     * &lt;li>The &lt;code>length&lt;/code> argument is negative.&#xA;     * &lt;li>&lt;code>srcPos+length&lt;/code> is greater than&#xA;     *     &lt;code>src.length&lt;/code>, the length of the source array.&#xA;     * &lt;li>&lt;code>destPos+length&lt;/code> is greater than&#xA;     *     &lt;code>dest.length&lt;/code>, the length of the destination array.&#xA;     * &lt;/ul>&#xA;     * &lt;p>&#xA;     * Otherwise, if any actual component of the source array from&#xA;     * position &lt;code>srcPos&lt;/code> through&#xA;     * &lt;code>srcPos+length-1&lt;/code> cannot be converted to the component&#xA;     * type of the destination array by assignment conversion, an&#xA;     * &lt;code>ArrayStoreException&lt;/code> is thrown. In this case, let&#xA;     * &lt;b>&lt;i>k&lt;/i>&lt;/b> be the smallest nonnegative integer less than&#xA;     * length such that &lt;code>src[srcPos+&lt;/code>&lt;i>k&lt;/i>&lt;code>]&lt;/code>&#xA;     * cannot be converted to the component type of the destination&#xA;     * array; when the exception is thrown, source array components from&#xA;     * positions &lt;code>srcPos&lt;/code> through&#xA;     * &lt;code>srcPos+&lt;/code>&lt;i>k&lt;/i>&lt;code>-1&lt;/code>&#xA;     * will already have been copied to destination array positions&#xA;     * &lt;code>destPos&lt;/code> through&#xA;     * &lt;code>destPos+&lt;/code>&lt;i>k&lt;/I>&lt;code>-1&lt;/code> and no other&#xA;     * positions of the destination array will have been modified.&#xA;     * (Because of the restrictions already itemized, this&#xA;     * paragraph effectively applies only to the situation where both&#xA;     * arrays have component types that are reference types.)&#xA;     *&#xA;     * @param      src      the source array.&#xA;     * @param      srcPos   starting position in the source array.&#xA;     * @param      dest     the destination array.&#xA;     * @param      destPos  starting position in the destination data.&#xA;     * @param      length   the number of array elements to be copied.&#xA;     * @exception  IndexOutOfBoundsException  if copying would cause&#xA;     *               access of data outside array bounds.&#xA;     * @exception  ArrayStoreException  if an element in the &lt;code>src&lt;/code>&#xA;     *               array could not be stored into the &lt;code>dest&lt;/code> array&#xA;     *               because of a type mismatch.&#xA;     * @exception  NullPointerException if either &lt;code>src&lt;/code> or&#xA;     *               &lt;code>dest&lt;/code> is &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="identityHashCode">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the same hash code for the given object as&#xA;     * would be returned by the default method hashCode(),&#xA;     * whether or not the given object's class overrides&#xA;     * hashCode().&#xA;     * The hash code for the null reference is zero.&#xA;     *&#xA;     * @param x object for which the hashCode is to be calculated&#xA;     * @return  the hashCode&#xA;     * @since   JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:Field" name="props">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * System properties. The following properties are guaranteed to be defined:&#xA;     * &lt;dl>&#xA;     * &lt;dt>java.version&#x9;&#x9;&lt;dd>Java version number&#xA;     * &lt;dt>java.vendor&#x9;&#x9;&lt;dd>Java vendor specific string&#xA;     * &lt;dt>java.vendor.url&#x9;&lt;dd>Java vendor URL&#xA;     * &lt;dt>java.home&#x9;&#x9;&lt;dd>Java installation directory&#xA;     * &lt;dt>java.class.version&#x9;&lt;dd>Java class version number&#xA;     * &lt;dt>java.class.path&#x9;&lt;dd>Java classpath&#xA;     * &lt;dt>os.name&#x9;&#x9;&lt;dd>Operating System Name&#xA;     * &lt;dt>os.arch&#x9;&#x9;&lt;dd>Operating System Architecture&#xA;     * &lt;dt>os.version&#x9;&#x9;&lt;dd>Operating System Version&#xA;     * &lt;dt>file.separator&#x9;&lt;dd>File separator (&quot;/&quot; on Unix)&#xA;     * &lt;dt>path.separator&#x9;&lt;dd>Path separator (&quot;:&quot; on Unix)&#xA;     * &lt;dt>line.separator&#x9;&lt;dd>Line separator (&quot;\n&quot; on Unix)&#xA;     * &lt;dt>user.name&#x9;&#x9;&lt;dd>User account name&#xA;     * &lt;dt>user.home&#x9;&#x9;&lt;dd>User home directory&#xA;     * &lt;dt>user.dir&#x9;&#x9;&lt;dd>User's current working directory&#xA;     * &lt;/dl>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initProperties">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getProperties">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the current system properties.&#xA;     * &lt;p>&#xA;     * First, if there is a security manager, its&#xA;     * &lt;code>checkPropertiesAccess&lt;/code> method is called with no&#xA;     * arguments. This may result in a security exception.&#xA;     * &lt;p>&#xA;     * The current set of system properties for use by the &#xA;     * {@link #getProperty(String)} method is returned as a &#xA;     * &lt;code>Properties&lt;/code> object. If there is no current set of &#xA;     * system properties, a set of system properties is first created and &#xA;     * initialized. This set of system properties always includes values &#xA;     * for the following keys: &#xA;     * &lt;table summary=&quot;Shows property keys and associated values&quot;>&#xA;     * &lt;tr>&lt;th>Key&lt;/th>&#xA;     *     &lt;th>Description of Associated Value&lt;/th>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.version&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Runtime Environment version&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.vendor&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Runtime Environment vendor&lt;/td>&lt;/tr&#xA;     * &lt;tr>&lt;td>&lt;code>java.vendor.url&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java vendor URL&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.home&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java installation directory&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.vm.specification.version&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Virtual Machine specification version&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.vm.specification.vendor&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Virtual Machine specification vendor&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.vm.specification.name&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Virtual Machine specification name&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.vm.version&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Virtual Machine implementation version&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.vm.vendor&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Virtual Machine implementation vendor&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.vm.name&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Virtual Machine implementation name&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.specification.version&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Runtime Environment specification  version&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.specification.vendor&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Runtime Environment specification  vendor&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.specification.name&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java Runtime Environment specification  name&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.class.version&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java class format version number&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.class.path&lt;/code>&lt;/td>&#xA;     *     &lt;td>Java class path&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.library.path&lt;/code>&lt;/td>&#xA;     *     &lt;td>List of paths to search when loading libraries&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.io.tmpdir&lt;/code>&lt;/td>&#xA;     *     &lt;td>Default temp file path&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.compiler&lt;/code>&lt;/td>&#xA;     *     &lt;td>Name of JIT compiler to use&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>java.ext.dirs&lt;/code>&lt;/td>&#xA;     *     &lt;td>Path of extension directory or directories&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>os.name&lt;/code>&lt;/td>&#xA;     *     &lt;td>Operating system name&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>os.arch&lt;/code>&lt;/td>&#xA;     *     &lt;td>Operating system architecture&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>os.version&lt;/code>&lt;/td>&#xA;     *     &lt;td>Operating system version&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>file.separator&lt;/code>&lt;/td>&#xA;     *     &lt;td>File separator (&quot;/&quot; on UNIX)&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>path.separator&lt;/code>&lt;/td>&#xA;     *     &lt;td>Path separator (&quot;:&quot; on UNIX)&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>line.separator&lt;/code>&lt;/td>&#xA;     *     &lt;td>Line separator (&quot;\n&quot; on UNIX)&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>user.name&lt;/code>&lt;/td>&#xA;     *     &lt;td>User's account name&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>user.home&lt;/code>&lt;/td>&#xA;     *     &lt;td>User's home directory&lt;/td>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>user.dir&lt;/code>&lt;/td>&#xA;     *     &lt;td>User's current working directory&lt;/td>&lt;/tr>&#xA;     * &lt;/table>&#xA;     * &lt;p>&#xA;     * Multiple paths in a system property value are separated by the path&#xA;     * separator character of the platform.&#xA;     * &lt;p>&#xA;     * Note that even if the security manager does not permit the&#xA;     * &lt;code>getProperties&lt;/code> operation, it may choose to permit the&#xA;     * {@link #getProperty(String)} operation.&#xA;     *&#xA;     * @return     the system properties&#xA;     * @exception  SecurityException  if a security manager exists and its&#xA;     *             &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *              to the system properties.&#xA;     * @see        #setProperties&#xA;     * @see        java.lang.SecurityException&#xA;     * @see        java.lang.SecurityManager#checkPropertiesAccess()&#xA;     * @see        java.util.Properties&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.43"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setProperties">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the system properties to the &lt;code>Properties&lt;/code>&#xA;     * argument.&#xA;     * &lt;p>&#xA;     * First, if there is a security manager, its&#xA;     * &lt;code>checkPropertiesAccess&lt;/code> method is called with no&#xA;     * arguments. This may result in a security exception.&#xA;     * &lt;p>&#xA;     * The argument becomes the current set of system properties for use&#xA;     * by the {@link #getProperty(String)} method. If the argument is&#xA;     * &lt;code>null&lt;/code>, then the current set of system properties is&#xA;     * forgotten.&#xA;     *&#xA;     * @param      props   the new system properties.&#xA;     * @exception  SecurityException  if a security manager exists and its&#xA;     *             &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *              to the system properties.&#xA;     * @see        #getProperties&#xA;     * @see        java.util.Properties&#xA;     * @see        java.lang.SecurityException&#xA;     * @see        java.lang.SecurityManager#checkPropertiesAccess()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.43"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the system property indicated by the specified key.&#xA;     * &lt;p>&#xA;     * First, if there is a security manager, its&#xA;     * &lt;code>checkPropertyAccess&lt;/code> method is called with the key as&#xA;     * its argument. This may result in a SecurityException.&#xA;     * &lt;p>&#xA;     * If there is no current set of system properties, a set of system&#xA;     * properties is first created and initialized in the same manner as&#xA;     * for the &lt;code>getProperties&lt;/code> method.&#xA;     *&#xA;     * @param      key   the name of the system property.&#xA;     * @return     the string value of the system property,&#xA;     *             or &lt;code>null&lt;/code> if there is no property with that key.&#xA;     *&#xA;     * @exception  SecurityException  if a security manager exists and its&#xA;     *             &lt;code>checkPropertyAccess&lt;/code> method doesn't allow&#xA;     *              access to the specified system property.&#xA;     * @exception  NullPointerException if &lt;code>key&lt;/code> is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @exception  IllegalArgumentException if &lt;code>key&lt;/code> is empty.&#xA;     * @see        #setProperty&#xA;     * @see        java.lang.SecurityException&#xA;     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see        java.lang.System#getProperties()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.44"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../util/Properties.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="def">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the system property indicated by the specified key.&#xA;     * &lt;p>&#xA;     * First, if there is a security manager, its&#xA;     * &lt;code>checkPropertyAccess&lt;/code> method is called with the&#xA;     * &lt;code>key&lt;/code> as its argument.&#xA;     * &lt;p>&#xA;     * If there is no current set of system properties, a set of system&#xA;     * properties is first created and initialized in the same manner as&#xA;     * for the &lt;code>getProperties&lt;/code> method.&#xA;     *&#xA;     * @param      key   the name of the system property.&#xA;     * @param      def   a default value.&#xA;     * @return     the string value of the system property,&#xA;     *             or the default value if there is no property with that key.&#xA;     *&#xA;     * @exception  SecurityException  if a security manager exists and its&#xA;     *             &lt;code>checkPropertyAccess&lt;/code> method doesn't allow&#xA;     *             access to the specified system property.&#xA;     * @exception  NullPointerException if &lt;code>key&lt;/code> is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @exception  IllegalArgumentException if &lt;code>key&lt;/code> is empty.&#xA;     * @see        #setProperty&#xA;     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see        java.lang.System#getProperties()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.44"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../util/Properties.class.xmi#//@classifiers.0/@members.16"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the system property indicated by the specified key.&#xA;     * &lt;p>&#xA;     * First, if a security manager exists, its&#xA;     * &lt;code>SecurityManager.checkPermission&lt;/code> method&#xA;     * is called with a &lt;code>PropertyPermission(key, &quot;write&quot;)&lt;/code>&#xA;     * permission. This may result in a SecurityException being thrown.&#xA;     * If no exception is thrown, the specified property is set to the given&#xA;     * value.&#xA;     * &lt;p>&#xA;     *&#xA;     * @param      key   the name of the system property.&#xA;     * @param      value the value of the system property.&#xA;     * @return     the previous value of the system property,&#xA;     *             or &lt;code>null&lt;/code> if it did not have one.&#xA;     *&#xA;     * @exception  SecurityException  if a security manager exists and its&#xA;     *             &lt;code>checkPermission&lt;/code> method doesn't allow&#xA;     *             setting of the specified property.&#xA;     * @exception  NullPointerException if &lt;code>key&lt;/code> or &#xA;     *             &lt;code>value&lt;/code> is &lt;code>null&lt;/code>.&#xA;     * @exception  IllegalArgumentException if &lt;code>key&lt;/code> is empty.&#xA;     * @see        #getProperty&#xA;     * @see        java.lang.System#getProperty(java.lang.String)&#xA;     * @see        java.lang.System#getProperty(java.lang.String, java.lang.String)&#xA;     * @see        java.util.PropertyPermission&#xA;     * @see        SecurityManager#checkPermission&#xA;     * @since      1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../util/PropertyPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.11"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../util/Properties.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clearProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the system property indicated by the specified key. &#xA;     * &lt;p>&#xA;     * First, if a security manager exists, its &#xA;     * &lt;code>SecurityManager.checkPermission&lt;/code> method&#xA;     * is called with a &lt;code>PropertyPermission(key, &quot;write&quot;)&lt;/code>&#xA;     * permission. This may result in a SecurityException being thrown.&#xA;     * If no exception is thrown, the specified property is removed.&#xA;     * &lt;p>&#xA;     *&#xA;     * @param      key   the name of the system property to be removed. &#xA;     * @return     the previous string value of the system property,&#xA;     *             or &lt;code>null&lt;/code> if there was no property with that key.&#xA;     *&#xA;     * @exception  SecurityException  if a security manager exists and its  &#xA;     *             &lt;code>checkPropertyAccess&lt;/code> method doesn't allow&#xA;     *              access to the specified system property.&#xA;     * @exception  NullPointerException if &lt;code>key&lt;/code> is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @exception  IllegalArgumentException if &lt;code>key&lt;/code> is empty.&#xA;     * @see        #getProperty&#xA;     * @see        #setProperty&#xA;     * @see        java.util.Properties&#xA;     * @see        java.lang.SecurityException&#xA;     * @see        java.lang.SecurityManager#checkPropertiesAccess()&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../util/PropertyPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
                <arguments xsi:type="references:StringReference" value="write"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../util/Hashtable.class.xmi#//@classifiers.0/@members.28"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkKey">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="key can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="key can't be empty"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:StringReference" value=""/>
          </next>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getenv">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of the specified environment variable. An&#xA;     * environment variable is a system-dependent external named&#xA;     * value.&#xA;     *&#xA;     * &lt;p>If a security manager exists, its&#xA;     * {@link SecurityManager#checkPermission checkPermission}&#xA;     * method is called with a&#xA;     * &lt;code>{@link RuntimePermission}(&quot;getenv.&quot;+name)&lt;/code>&#xA;     * permission.  This may result in a {@link SecurityException}&#xA;     * being thrown.  If no exception is thrown the value of the&#xA;     * variable &lt;code>name&lt;/code> is returned.&#xA;     *&#xA;     * &lt;p>&lt;a name=&quot;EnvironmentVSSystemProperties&quot;>&lt;i>System&#xA;     * properties&lt;/i> and &lt;i>environment variables&lt;/i> are both&#xA;     * conceptually mappings between names and values.  Both&#xA;     * mechanisms can be used to pass user-defined information to a&#xA;     * Java process.  Environment variables have a more global effect,&#xA;     * because they are visible to all descendants of the process&#xA;     * which defines them, not just the immediate Java subprocess.&#xA;     * They can have subtly different semantics, such as case&#xA;     * insensitivity, on different operating systems.  For these&#xA;     * reasons, environment variables are more likely to have&#xA;     * unintended side effects.  It is best to use system properties&#xA;     * where possible.  Environment variables should be used when a&#xA;     * global effect is desired, or when an external system interface&#xA;     * requires an environment variable (such as &lt;code>PATH&lt;/code>).&#xA;     *&#xA;     * &lt;p>On UNIX systems the alphabetic case of &lt;code>name&lt;/code> is&#xA;     * typically significant, while on Microsoft Windows systems it is&#xA;     * typically not.  For example, the expression&#xA;     * &lt;code>System.getenv(&quot;FOO&quot;).equals(System.getenv(&quot;foo&quot;))&lt;/code>&#xA;     * is likely to be true on Microsoft Windows.&#xA;     *&#xA;     * @param  name the name of the environment variable&#xA;     * @return the string value of the variable, or &lt;code>null&lt;/code>&#xA;     *         if the variable is not defined in the system environment&#xA;     * @throws NullPointerException if &lt;code>name&lt;/code> is &lt;code>null&lt;/code>&#xA;     * @throws SecurityException&#xA;     *         if a security manager exists and its&#xA;     *         {@link SecurityManager#checkPermission checkPermission}&#xA;     *         method doesn't allow access to the environment variable&#xA;     *         &lt;code>name&lt;/code>&#xA;     * @see    #getenv()&#xA;     * @see    ProcessBuilder#environment()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="getenv."/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ProcessEnvironment.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="ProcessEnvironment.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getenv">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an unmodifiable string map view of the current system environment.&#xA;     * The environment is a system-dependent mapping from names to&#xA;     * values which is passed from parent to child processes.&#xA;     *&#xA;     * &lt;p>If the system does not support environment variables, an&#xA;     * empty map is returned.&#xA;     *&#xA;     * &lt;p>The returned map will never contain null keys or values.&#xA;     * Attempting to query the presence of a null key or value will&#xA;     * throw a {@link NullPointerException}.  Attempting to query&#xA;     * the presence of a key or value which is not of type&#xA;     * {@link String} will throw a {@link ClassCastException}.&#xA;     *&#xA;     * &lt;p>The returned map and its collection views may not obey the&#xA;     * general contract of the {@link Object#equals} and&#xA;     * {@link Object#hashCode} methods.&#xA;     *&#xA;     * &lt;p>The returned map is typically case-sensitive on all platforms.&#xA;     *&#xA;     * &lt;p>If a security manager exists, its&#xA;     * {@link SecurityManager#checkPermission checkPermission}&#xA;     * method is called with a&#xA;     * &lt;code>{@link RuntimePermission}(&quot;getenv.*&quot;)&lt;/code>&#xA;     * permission.  This may result in a {@link SecurityException} being&#xA;     * thrown.&#xA;     *&#xA;     * &lt;p>When passing information to a Java subprocess,&#xA;     * &lt;a href=#EnvironmentVSSystemProperties>system properties&lt;/a>&#xA;     * are generally preferred over environment variables.&#xA;     *&#xA;     * @return the environment as a map of variable names to values&#xA;     * @throws SecurityException&#xA;     *         if a security manager exists and its&#xA;     *         {@link SecurityManager#checkPermission checkPermission}&#xA;     *         method doesn't allow access to the process environment&#xA;     * @see    #getenv(String)&#xA;     * @see    ProcessBuilder#environment()&#xA;     * @since  1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="getenv.*"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ProcessEnvironment.class.xmi#//@classifiers.0/@members.20"/>
          </next>
          <target xsi:type="classifiers:Class" href="ProcessEnvironment.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="exit">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="status">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Terminates the currently running Java Virtual Machine. The&#xA;     * argument serves as a status code; by convention, a nonzero status&#xA;     * code indicates abnormal termination.&#xA;     * &lt;p>&#xA;     * This method calls the &lt;code>exit&lt;/code> method in class&#xA;     * &lt;code>Runtime&lt;/code>. This method never returns normally.&#xA;     * &lt;p>&#xA;     * The call &lt;code>System.exit(n)&lt;/code> is effectively equivalent to&#xA;     * the call:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Runtime.getRuntime().exit(n)&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param      status   exit status.&#xA;     * @throws  SecurityException&#xA;     *        if a security manager exists and its &lt;code>checkExit&lt;/code>&#xA;     *        method doesn't allow exit with the specified status.&#xA;     * @see        java.lang.Runtime#exit(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.3"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="Runtime.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="gc">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Runs the garbage collector.&#xA;     * &lt;p>&#xA;     * Calling the &lt;code>gc&lt;/code> method suggests that the Java Virtual&#xA;     * Machine expend effort toward recycling unused objects in order to&#xA;     * make the memory they currently occupy available for quick reuse.&#xA;     * When control returns from the method call, the Java Virtual&#xA;     * Machine has made a best effort to reclaim space from all discarded&#xA;     * objects.&#xA;     * &lt;p>&#xA;     * The call &lt;code>System.gc()&lt;/code> is effectively equivalent to the&#xA;     * call:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Runtime.getRuntime().gc()&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @see     java.lang.Runtime#gc()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.18"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="Runtime.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="runFinalization">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Runs the finalization methods of any objects pending finalization.&#xA;     * &lt;p>&#xA;     * Calling this method suggests that the Java Virtual Machine expend&#xA;     * effort toward running the &lt;code>finalize&lt;/code> methods of objects&#xA;     * that have been found to be discarded but whose &lt;code>finalize&lt;/code>&#xA;     * methods have not yet been run. When control returns from the&#xA;     * method call, the Java Virtual Machine has made a best effort to&#xA;     * complete all outstanding finalizations.&#xA;     * &lt;p>&#xA;     * The call &lt;code>System.runFinalization()&lt;/code> is effectively&#xA;     * equivalent to the call:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Runtime.getRuntime().runFinalization()&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @see     java.lang.Runtime#runFinalization()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.20"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="Runtime.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="runFinalizersOnExit">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Enable or disable finalization on exit; doing so specifies that the&#xA;     * finalizers of all objects that have finalizers that have not yet been&#xA;     * automatically invoked are to be run before the Java runtime exits.&#xA;     * By default, finalization on exit is disabled.&#xA;     *&#xA;     * &lt;p>If there is a security manager,&#xA;     * its &lt;code>checkExit&lt;/code> method is first called&#xA;     * with 0 as its argument to ensure the exit is allowed.&#xA;     * This could result in a SecurityException.&#xA;     *&#xA;     * @deprecated  This method is inherently unsafe.  It may result in&#xA;     * &#x9;    finalizers being called on live objects while other threads are&#xA;     *      concurrently manipulating those objects, resulting in erratic&#xA;     *&#x9;    behavior or deadlock.&#xA;     * @param value indicating enabling or disabling of finalization&#xA;     * @throws  SecurityException&#xA;     *        if a security manager exists and its &lt;code>checkExit&lt;/code>&#xA;     *        method doesn't allow the exit.&#xA;     *&#xA;     * @see     java.lang.Runtime#exit(int)&#xA;     * @see     java.lang.Runtime#gc()&#xA;     * @see     java.lang.SecurityManager#checkExit(int)&#xA;     * @since   JDK1.1&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="Runtime.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="load">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filename">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Loads a code file with the specified filename from the local file&#xA;     * system as a dynamic library. The filename&#xA;     * argument must be a complete path name.&#xA;     * &lt;p>&#xA;     * The call &lt;code>System.load(name)&lt;/code> is effectively equivalent&#xA;     * to the call:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Runtime.getRuntime().load(name)&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param      filename   the file to load.&#xA;     * @exception  SecurityException  if a security manager exists and its&#xA;     *             &lt;code>checkLink&lt;/code> method doesn't allow&#xA;     *             loading of the specified dynamic library&#xA;     * @exception  UnsatisfiedLinkError  if the file does not exist.&#xA;     * @exception  NullPointerException if &lt;code>filename&lt;/code> is&#xA;     *             &lt;code>null&lt;/code>&#xA;     * @see        java.lang.Runtime#load(java.lang.String)&#xA;     * @see        java.lang.SecurityManager#checkLink(java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.24"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.43"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="Runtime.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadLibrary">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="libname">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Loads the system library specified by the &lt;code>libname&lt;/code>&#xA;     * argument. The manner in which a library name is mapped to the&#xA;     * actual system library is system dependent.&#xA;     * &lt;p>&#xA;     * The call &lt;code>System.loadLibrary(name)&lt;/code> is effectively&#xA;     * equivalent to the call&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Runtime.getRuntime().loadLibrary(name)&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param      libname   the name of the library.&#xA;     * @exception  SecurityException  if a security manager exists and its&#xA;     *             &lt;code>checkLink&lt;/code> method doesn't allow&#xA;     *             loading of the specified dynamic library&#xA;     * @exception  UnsatisfiedLinkError  if the library does not exist.&#xA;     * @exception  NullPointerException if &lt;code>libname&lt;/code> is&#xA;     *             &lt;code>null&lt;/code>&#xA;     * @see        java.lang.Runtime#loadLibrary(java.lang.String)&#xA;     * @see        java.lang.SecurityManager#checkLink(java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.26"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.43"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Runtime.class.xmi#//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="Runtime.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="mapLibraryName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="libname">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Maps a library name into a platform-specific string representing&#xA;     * a native library.&#xA;     *&#xA;     * @param      libname the name of the library.&#xA;     * @return     a platform-dependent native library name.&#xA;     * @exception  NullPointerException if &lt;code>libname&lt;/code> is&#xA;     *             &lt;code>null&lt;/code>&#xA;     * @see        java.lang.System#loadLibrary(java.lang.String)&#xA;     * @see        java.lang.ClassLoader#findLibrary(java.lang.String)&#xA;     * @since      1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="nullInputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The following two methods exist because in, out, and err must be&#xA;     * initialized to null.  The compiler, however, cannot be permitted to&#xA;     * inline access to them, since they are later set to more sensible values&#xA;     * by initializeSystemClass().&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="nullPrintStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="initializeSystemClass">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Initialize the system class.  Called after thread initialization.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../util/Properties.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/misc/Version.class.xmi#//@classifiers.0/@members.4"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/misc/Version.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fdIn">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../io/FileInputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/FileInputStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../io/FileDescriptor.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="classifiers:Class" href="../io/FileDescriptor.class.xmi#//@classifiers.0"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fdOut">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../io/FileDescriptor.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="classifiers:Class" href="../io/FileDescriptor.class.xmi#//@classifiers.0"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fdErr">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../io/FileDescriptor.class.xmi#//@classifiers.0/@members.4"/>
              </next>
              <target xsi:type="classifiers:Class" href="../io/FileDescriptor.class.xmi#//@classifiers.0"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/BufferedInputStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/BufferedOutputStream.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.4/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
            </arguments>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/BufferedOutputStream.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.5/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
            </arguments>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </arguments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
          <comments>// Load the zip library now in order to keep java.util.zip.ZipFile</comments>
          <comments>// from trying to use itself to load this library later.</comments>
          <arguments xsi:type="references:StringReference" value="zip"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// Currently File.deleteOnExit is built on JVM_Exit, which is a</comments>
          <comments>// separate mechanism from shutdown hooks. Unfortunately in order to</comments>
          <comments>// work properly JVM_Exit implicitly requires that Java signal</comments>
          <comments>// handlers be set up for HUP, TERM, and INT (where available). If</comments>
          <comments>// File.deleteOnExit were implemented in terms of shutdown hooks this</comments>
          <comments>// call to Terminator.setup() could be removed.</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Terminator.class.xmi#//@classifiers.0/@members.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="Terminator.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// Set the maximum amount of direct memory.  This value is controlled</comments>
          <comments>// by the vm option -XX:MaxDirectMemorySize=&lt;size>.  This method acts</comments>
          <comments>// as an initializer only if it is called before sun.misc.VM.booted().</comments>
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/misc/VM.class.xmi#//@classifiers.0/@members.24"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/misc/VM.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// Set a boolean to determine whether ClassLoader.loadClass accepts</comments>
          <comments>// array syntax.  This value is controlled by the system property</comments>
          <comments>// &quot;sun.lang.ClassLoader.allowArraySyntax&quot;.  This method acts as</comments>
          <comments>// an initializer only if it is called before sun.misc.VM.booted().</comments>
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/misc/VM.class.xmi#//@classifiers.0/@members.25"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/misc/VM.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// Subsystems that are invoked during initialization can invoke</comments>
          <comments>// sun.misc.VM.isBooted() in order to avoid doing things that should</comments>
          <comments>// wait until the application class loader has been set up.</comments>
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/misc/VM.class.xmi#//@classifiers.0/@members.22"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/misc/VM.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="current">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// The main thread is not added to its thread group in the same</comments>
              <comments>// way as other threads; we must do it ourselves here.</comments>
              <target xsi:type="classifiers:Class" href="Thread.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.33"/>
            </next>
            <target xsi:type="classifiers:Class" href="Thread.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.14/@variable">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.40"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.14/@variable"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.64"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// Allow privileged classes outside of java.lang</comments>
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/misc/SharedSecrets.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>sun</namespaces>
                    <namespaces>misc</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../sun/misc/JavaLangAccess.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="getConstantPool">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>sun</namespaces>
                        <namespaces>reflect</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../sun/reflect/ConstantPool.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <parameters xsi:type="parameters:OrdinaryParameter" name="klass">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameters>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.16/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.100"/>
                          </next>
                        </returnValue>
                      </statements>
                    </members>
                    <members xsi:type="members:ClassMethod" name="setAnnotationType">
                      <typeReference xsi:type="types:Void"/>
                      <parameters xsi:type="parameters:OrdinaryParameter" name="klass">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameters>
                      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../sun/reflect/annotation/AnnotationType.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameters>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.16/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.1/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.135"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.16/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.1/@parameters.1"/>
                          </next>
                        </expression>
                      </statements>
                    </members>
                    <members xsi:type="members:ClassMethod" name="getAnnotationType">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../sun/reflect/annotation/AnnotationType.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <parameters xsi:type="parameters:OrdinaryParameter" name="klass">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameters>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.16/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.2/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.136"/>
                          </next>
                        </returnValue>
                      </statements>
                    </members>
                    <members xsi:type="members:ClassMethod" name="blockedOn">
                      <typeReference xsi:type="types:Void"/>
                      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="Thread.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameters>
                      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Interface" href="../../sun/nio/ch/Interruptible.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameters>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.16/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.3/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.32"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.16/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.3/@parameters.1"/>
                          </next>
                        </expression>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/misc/SharedSecrets.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCallerClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/* returns the class of the caller. */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// NOTE use of more generic Reflection.getCallerClass()</comments>
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../sun/reflect/Reflection.class.xmi#//@classifiers.0/@members.2"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../sun/reflect/Reflection.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>System&lt;/code> class contains several useful class fields&#xA; * and methods. It cannot be instantiated.&#xA; *&#xA; * &lt;p>Among the facilities provided by the &lt;code>System&lt;/code> class&#xA; * are standard input, standard output, and error output streams;&#xA; * access to externally defined properties and environment&#xA; * variables; a means of loading files and libraries; and a utility&#xA; * method for quickly copying a portion of an array.&#xA; *&#xA; * @author  unascribed&#xA; * @version 1.150, 03/22/06&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
  </classifiers>
</containers:CompilationUnit>
