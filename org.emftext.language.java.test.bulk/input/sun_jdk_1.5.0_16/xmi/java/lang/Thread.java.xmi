<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="Thread.java">
  <comments>/*&#xA; * @(#)Thread.java&#x9;1.156 06/03/22&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../security/AccessControlContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/HashMap.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Collections.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <namespaces>concurrent</namespaces>
    <namespaces>locks</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/concurrent/locks/LockSupport.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/misc/SoftCache.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>ch</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../sun/nio/ch/Interruptible.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Thread">
    <members xsi:type="members:InterfaceMethod" name="registerNatives">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* Make sure registerNatives is the first thing &lt;clinit> does. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.0"/>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="name">
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="priority">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="threadQ">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="eetop">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="started">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="single_step">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// true iff this thread has been started</comments>
        <comments>/* Whether or not to single_step this thread. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="daemon">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* Whether or not the thread is a daemon thread. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="stillborn">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* Whether or not this thread was asked to exit before it runs.*/</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="target">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* What will be run. */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="group">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* The group of this thread */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="contextClassLoader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* The context ClassLoader for this thread */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="inheritedAccessControlContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../security/AccessControlContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* The inherited AccessControlContext of this thread */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="threadInitNumber">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* For autonumbering anonymous threads. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="nextThreadNum">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
          <operator xsi:type="operators:PlusPlus"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="threadLocals">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/* ThreadLocal values pertaining to this thread. This map is maintained&#xA;     * by the ThreadLocal class. */</comments>
        <namespaces>ThreadLocal</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ThreadLocal$ThreadLocalMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="inheritableThreadLocals">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/*&#xA;     * InheritableThreadLocal values pertaining to this thread. This map is&#xA;     * maintained by the InheritableThreadLocal class.  &#xA;     */</comments>
        <namespaces>ThreadLocal</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ThreadLocal$ThreadLocalMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="stackSize">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * The requested stack size for this thread, or 0 if the creator did&#xA;     * not specify a stack size.  It is up to the VM to do whatever it&#xA;     * likes with this number; some VMs will ignore it.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="tid">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * Thread ID&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="threadSeqNumber">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* For generating thread ID */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="threadStatus">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* Java thread status for tools, &#xA;     * initialized to indicate thread 'not yet started'&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="nextThreadID">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:PrefixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
          <operator xsi:type="operators:PlusPlus"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="blocker">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../sun/nio/ch/Interruptible.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* The object in which this thread is blocked in an interruptible I/O&#xA;     * operation, if any.  The blocker's interrupt method should be invoked&#xA;     * after setting this thread's interrupt status.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:Field" name="blockerLock">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:ClassMethod" name="blockedOn">
      <typeReference xsi:type="types:Void">
        <comments>/* Set the blocker field; invoked via sun.misc.SharedSecrets from java.nio code&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../sun/nio/ch/Interruptible.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="MIN_PRIORITY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The minimum priority that a thread can have. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="NORM_PRIORITY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The default priority that is assigned to a thread. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="MAX_PRIORITY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The maximum priority that a thread can have. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="currentThread">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a reference to the currently executing thread object.&#xA;     *&#xA;     * @return  the currently executing thread.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="yield">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Causes the currently executing thread object to temporarily pause &#xA;     * and allow other threads to execute. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sleep">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="millis">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#x9;&#xA;     * Causes the currently executing thread to sleep (temporarily cease &#xA;     * execution) for the specified number of milliseconds. The thread &#xA;     * does not lose ownership of any monitors.&#xA;     *&#xA;     * @param      millis   the length of time to sleep in milliseconds.&#xA;     * @exception  InterruptedException if another thread has interrupted&#xA;     *             the current thread.  The &lt;i>interrupted status&lt;/i> of the&#xA;     *             current thread is cleared when this exception is thrown.&#xA;     * @see        java.lang.Object#notify()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="sleep">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="millis">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nanos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Causes the currently executing thread to sleep (cease execution) &#xA;     * for the specified number of milliseconds plus the specified number &#xA;     * of nanoseconds. The thread does not lose ownership of any monitors.&#xA;     *&#xA;     * @param      millis   the length of time to sleep in milliseconds.&#xA;     * @param      nanos    0-999999 additional nanoseconds to sleep.&#xA;     * @exception  IllegalArgumentException  if the value of millis is &#xA;     *             negative or the value of nanos is not in the range &#xA;     *             0-999999.&#xA;     * @exception  InterruptedException if another thread has interrupted&#xA;     *             the current thread.  The &lt;i>interrupted status&lt;/i> of the&#xA;     *             current thread is cleared when this exception is thrown.&#xA;     * @see        java.lang.Object#notify()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="timeout value is negative"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="nanosecond timeout value out of range"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="999999"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="500000"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stackSize">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Initialize a Thread.&#xA;     *&#xA;     * @param g the Thread group&#xA;     * @param target the object whose run() method gets called&#xA;     * @param name the name of the new Thread&#xA;     * @param stackSize the desired stack size for the new thread, or&#xA;     *        zero to indicate that this parameter is to be ignored.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="parent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="security">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>/* Determine if it's an applet or not */</comments>
            <comments>/* If there is a security manager, ask the security manager&#xA;&#x9;       what to do. */</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.56"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>/* If the security doesn't have a strong opinion of the matter&#xA;&#x9;       use the parent thread group. */</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.60"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
          <comments>/* checkAccess regardless of whether or not threadgroup is&#xA;           explicitly passed in. */</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.22"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>/*&#xA;&#x9; * Do we have the required permissions?&#xA;&#x9; */</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.78"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.80">
              <arguments xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Object.class.xmi#//@classifiers.0/@members.2"/>
              </arguments>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.39"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.69"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.57"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.73"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.72"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.80">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </arguments>
          </children>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
            </value>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.7"/>
            </next>
            <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ThreadLocal.class.xmi#//@classifiers.0/@members.11"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="ThreadLocal.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
            <self xsi:type="literals:This">
              <comments>/* Stash the specified stack size in case the VM cares */</comments>
            </self>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19">
            <comments>/* Set thread ID */</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="Thread-"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object. This constructor has &#xA;     * the same effect as &lt;code>Thread(null, null,&lt;/code>&#xA;     * &lt;i>gname&lt;/i>&lt;code>)&lt;/code>, where &lt;b>&lt;i>gname&lt;/i>&lt;/b> is &#xA;     * a newly generated name. Automatically generated names are of the &#xA;     * form &lt;code>&quot;Thread-&quot;+&lt;/code>&lt;i>n&lt;/i>, where &lt;i>n&lt;/i> is an integer. &#xA;     *&#xA;     * @see     java.lang.Thread#Thread(java.lang.ThreadGroup,&#xA;     *          java.lang.Runnable, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="Thread-"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object. This constructor has &#xA;     * the same effect as &lt;code>Thread(null, target,&lt;/code>&#xA;     * &lt;i>gname&lt;/i>&lt;code>)&lt;/code>, where &lt;i>gname&lt;/i> is &#xA;     * a newly generated name. Automatically generated names are of the &#xA;     * form &lt;code>&quot;Thread-&quot;+&lt;/code>&lt;i>n&lt;/i>, where &lt;i>n&lt;/i> is an integer. &#xA;     *&#xA;     * @param   target   the object whose &lt;code>run&lt;/code> method is called.&#xA;     * @see     java.lang.Thread#Thread(java.lang.ThreadGroup, &#xA;     *          java.lang.Runnable, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="Thread-"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object. This constructor has &#xA;     * the same effect as &lt;code>Thread(group, target,&lt;/code>&#xA;     * &lt;i>gname&lt;/i>&lt;code>)&lt;/code>, where &lt;i>gname&lt;/i> is &#xA;     * a newly generated name. Automatically generated names are of the &#xA;     * form &lt;code>&quot;Thread-&quot;+&lt;/code>&lt;i>n&lt;/i>, where &lt;i>n&lt;/i> is an integer. &#xA;     *&#xA;     * @param      group    the thread group.&#xA;     * @param      target   the object whose &lt;code>run&lt;/code> method is called.&#xA;     * @exception  SecurityException  if the current thread cannot create a&#xA;     *             thread in the specified thread group.&#xA;     * @see        java.lang.Thread#Thread(java.lang.ThreadGroup, &#xA;     *             java.lang.Runnable, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object. This constructor has &#xA;     * the same effect as &lt;code>Thread(null, null, name)&lt;/code>. &#xA;     *&#xA;     * @param   name   the name of the new thread.&#xA;     * @see     java.lang.Thread#Thread(java.lang.ThreadGroup, &#xA;     *          java.lang.Runnable, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.1"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object. This constructor has &#xA;     * the same effect as &lt;code>Thread(group, null, name)&lt;/code> &#xA;     *&#xA;     * @param      group   the thread group.&#xA;     * @param      name    the name of the new thread.&#xA;     * @exception  SecurityException  if the current thread cannot create a&#xA;     *               thread in the specified thread group.&#xA;     * @see        java.lang.Thread#Thread(java.lang.ThreadGroup, &#xA;     *          java.lang.Runnable, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.1"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object. This constructor has &#xA;     * the same effect as &lt;code>Thread(null, target, name)&lt;/code>. &#xA;     *&#xA;     * @param   target   the object whose &lt;code>run&lt;/code> method is called.&#xA;     * @param   name     the name of the new thread.&#xA;     * @see     java.lang.Thread#Thread(java.lang.ThreadGroup, &#xA;     *          java.lang.Runnable, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object so that it has &#xA;     * &lt;code>target&lt;/code> as its run object, has the specified &#xA;     * &lt;code>name&lt;/code> as its name, and belongs to the thread group &#xA;     * referred to by &lt;code>group&lt;/code>.&#xA;     * &lt;p>&#xA;     * If &lt;code>group&lt;/code> is &lt;code>null&lt;/code> and there is a &#xA;     * security manager, the group is determined by the security manager's &#xA;     * &lt;code>getThreadGroup&lt;/code> method. If &lt;code>group&lt;/code> is &#xA;     * &lt;code>null&lt;/code> and there is not a security manager, or the&#xA;     * security manager's &lt;code>getThreadGroup&lt;/code> method returns &#xA;     * &lt;code>null&lt;/code>, the group is set to be the same ThreadGroup &#xA;     * as the thread that is creating the new thread.&#xA;     * &#xA;     * &lt;p>If there is a security manager, its &lt;code>checkAccess&lt;/code> &#xA;     * method is called with the ThreadGroup as its argument.&#xA;     * &lt;p>In addition, its &lt;code>checkPermission&lt;/code>&#xA;     * method is called with the&#xA;     * &lt;code>RuntimePermission(&quot;enableContextClassLoaderOverride&quot;)&lt;/code>&#xA;     * permission when invoked directly or indirectly by the constructor&#xA;     * of a subclass which overrides the &lt;code>getContextClassLoader&lt;/code>&#xA;     * or &lt;code>setContextClassLoader&lt;/code> methods.&#xA;     * This may result in a SecurityException.&#xA;&#xA;     * &lt;p>&#xA;     * If the &lt;code>target&lt;/code> argument is not &lt;code>null&lt;/code>, the &#xA;     * &lt;code>run&lt;/code> method of the &lt;code>target&lt;/code> is called when &#xA;     * this thread is started. If the target argument is &#xA;     * &lt;code>null&lt;/code>, this thread's &lt;code>run&lt;/code> method is called &#xA;     * when this thread is started. &#xA;     * &lt;p>&#xA;     * The priority of the newly created thread is set equal to the &#xA;     * priority of the thread creating it, that is, the currently running &#xA;     * thread. The method &lt;code>setPriority&lt;/code> may be used to &#xA;     * change the priority to a new value. &#xA;     * &lt;p>&#xA;     * The newly created thread is initially marked as being a daemon &#xA;     * thread if and only if the thread creating it is currently marked &#xA;     * as a daemon thread. The method &lt;code>setDaemon &lt;/code> may be used &#xA;     * to change whether or not a thread is a daemon. &#xA;     *&#xA;     * @param      group     the thread group.&#xA;     * @param      target   the object whose &lt;code>run&lt;/code> method is called.&#xA;     * @param      name     the name of the new thread.&#xA;     * @exception  SecurityException  if the current thread cannot create a&#xA;     *               thread in the specified thread group or cannot&#xA;     *               override the context class loader methods.&#xA;     * @see        java.lang.Runnable#run()&#xA;     * @see        java.lang.Thread#run()&#xA;     * @see        java.lang.Thread#setDaemon(boolean)&#xA;     * @see        java.lang.Thread#setPriority(int)&#xA;     * @see        java.lang.ThreadGroup#checkAccess()&#xA;     * @see        SecurityManager#checkAccess&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Thread">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stackSize">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a new &lt;code>Thread&lt;/code> object so that it has&#xA;     * &lt;code>target&lt;/code> as its run object, has the specified&#xA;     * &lt;code>name&lt;/code> as its name, belongs to the thread group referred to&#xA;     * by &lt;code>group&lt;/code>, and has the specified &lt;i>stack size&lt;/i>.&#xA;     *&#xA;     * &lt;p>This constructor is identical to {@link&#xA;     * #Thread(ThreadGroup,Runnable,String)} with the exception of the fact&#xA;     * that it allows the thread stack size to be specified.  The stack size&#xA;     * is the approximate number of bytes of address space that the virtual&#xA;     * machine is to allocate for this thread's stack.  &lt;b>The effect of the&#xA;     * &lt;tt>stackSize&lt;/tt> parameter, if any, is highly platform dependent.&lt;/b>&#xA;     *&#xA;     * &lt;p>On some platforms, specifying a higher value for the&#xA;     * &lt;tt>stackSize&lt;/tt> parameter may allow a thread to achieve greater&#xA;     * recursion depth before throwing a {@link StackOverflowError}.&#xA;     * Similarly, specifying a lower value may allow a greater number of&#xA;     * threads to exist concurrently without throwing an {@link&#xA;     * OutOfMemoryError} (or other internal error).  The details of&#xA;     * the relationship between the value of the &lt;tt>stackSize&lt;/tt> parameter&#xA;     * and the maximum recursion depth and concurrency level are&#xA;     * platform-dependent.  &lt;b>On some platforms, the value of the&#xA;     * &lt;tt>stackSize&lt;/tt> parameter may have no effect whatsoever.&lt;/b>&#xA;     * &#xA;     * &lt;p>The virtual machine is free to treat the &lt;tt>stackSize&lt;/tt>&#xA;     * parameter as a suggestion.  If the specified value is unreasonably low&#xA;     * for the platform, the virtual machine may instead use some&#xA;     * platform-specific minimum value; if the specified value is unreasonably&#xA;     * high, the virtual machine may instead use some platform-specific&#xA;     * maximum.  Likewise, the virtual machine is free to round the specified&#xA;     * value up or down as it sees fit (or to ignore it completely).&#xA;     *&#xA;     * &lt;p>Specifying a value of zero for the &lt;tt>stackSize&lt;/tt> parameter will&#xA;     * cause this constructor to behave exactly like the&#xA;     * &lt;tt>Thread(ThreadGroup, Runnable, String)&lt;/tt> constructor.&#xA;     *&#xA;     * &lt;p>&lt;i>Due to the platform-dependent nature of the behavior of this&#xA;     * constructor, extreme care should be exercised in its use.&#xA;     * The thread stack size necessary to perform a given computation will&#xA;     * likely vary from one JRE implementation to another.  In light of this&#xA;     * variation, careful tuning of the stack size parameter may be required,&#xA;     * and the tuning may need to be repeated for each JRE implementation on&#xA;     * which an application is to run.&lt;/i>&#xA;     *&#xA;     * &lt;p>Implementation note: Java platform implementers are encouraged to&#xA;     * document their implementation's behavior with respect to the&#xA;     * &lt;tt>stackSize parameter&lt;/tt>.&#xA;     *&#xA;     * @param      group    the thread group.&#xA;     * @param      target   the object whose &lt;code>run&lt;/code> method is called.&#xA;     * @param      name     the name of the new thread.&#xA;     * @param      stackSize the desired stack size for the new thread, or&#xA;     *             zero to indicate that this parameter is to be ignored.&#xA;     * @exception  SecurityException  if the current thread cannot create a&#xA;     *               thread in the specified thread group.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="start">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Causes this thread to begin execution; the Java Virtual Machine &#xA;     * calls the &lt;code>run&lt;/code> method of this thread. &#xA;     * &lt;p>&#xA;     * The result is that two threads are running concurrently: the &#xA;     * current thread (which returns from the call to the &#xA;     * &lt;code>start&lt;/code> method) and the other thread (which executes its &#xA;     * &lt;code>run&lt;/code> method). &#xA;     * &lt;p>&#xA;     * It is never legal to start a thread more than once.&#xA;     * In particular, a thread may not be restarted once it has completed&#xA;     * execution.&#xA;     *&#xA;     * @exception  IllegalThreadStateException  if the thread was already&#xA;     *               started.&#xA;     * @see        java.lang.Thread#run()&#xA;     * @see        java.lang.Thread#stop()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="IllegalThreadStateException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.40"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="start0">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="run">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * If this thread was constructed using a separate &#xA;     * &lt;code>Runnable&lt;/code> run object, then that &#xA;     * &lt;code>Runnable&lt;/code> object's &lt;code>run&lt;/code> method is called; &#xA;     * otherwise, this method does nothing and returns. &#xA;     * &lt;p>&#xA;     * Subclasses of &lt;code>Thread&lt;/code> should override this method. &#xA;     *&#xA;     * @see     java.lang.Thread#start()&#xA;     * @see     java.lang.Thread#stop()&#xA;     * @see     java.lang.Thread#Thread(java.lang.ThreadGroup, &#xA;     *          java.lang.Runnable, java.lang.String)&#xA;     * @see     java.lang.Runnable#run()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="Runnable.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="exit">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * This method is called by the system to give a Thread&#xA;     * a chance to clean up before it actually exits.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.41"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
            <comments>/* Aggressively null out all reference fields: see bug 4006245 */</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16">
            <comments>/* Speed the release of some of these resources */</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="stop">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Forces the thread to stop executing.&#xA;     * &lt;p>&#xA;     * If there is a security manager installed, its &lt;code>checkAccess&lt;/code>&#xA;     * method is called with &lt;code>this&lt;/code> &#xA;     * as its argument. This may result in a &#xA;     * &lt;code>SecurityException&lt;/code> being raised (in the current thread). &#xA;     * &lt;p>&#xA;     * If this thread is different from the current thread (that is, the current&#xA;     * thread is trying to stop a thread other than itself), the&#xA;     * security manager's &lt;code>checkPermission&lt;/code> method (with a&#xA;     * &lt;code>RuntimePermission(&quot;stopThread&quot;)&lt;/code> argument) is called in&#xA;     * addition.&#xA;     * Again, this may result in throwing a &#xA;     * &lt;code>SecurityException&lt;/code> (in the current thread). &#xA;     * &lt;p>&#xA;     * The thread represented by this thread is forced to stop whatever &#xA;     * it is doing abnormally and to throw a newly created &#xA;     * &lt;code>ThreadDeath&lt;/code> object as an exception. &#xA;     * &lt;p>&#xA;     * It is permitted to stop a thread that has not yet been started. &#xA;     * If the thread is eventually started, it immediately terminates. &#xA;     * &lt;p>&#xA;     * An application should not normally try to catch &#xA;     * &lt;code>ThreadDeath&lt;/code> unless it must do some extraordinary &#xA;     * cleanup operation (note that the throwing of &#xA;     * &lt;code>ThreadDeath&lt;/code> causes &lt;code>finally&lt;/code> clauses of &#xA;     * &lt;code>try&lt;/code> statements to be executed before the thread &#xA;     * officially dies).  If a &lt;code>catch&lt;/code> clause catches a &#xA;     * &lt;code>ThreadDeath&lt;/code> object, it is important to rethrow the &#xA;     * object so that the thread actually dies. &#xA;     * &lt;p>&#xA;     * The top-level error handler that reacts to otherwise uncaught &#xA;     * exceptions does not print out a message or otherwise notify the &#xA;     * application if the uncaught exception is an instance of &#xA;     * &lt;code>ThreadDeath&lt;/code>. &#xA;     *&#xA;     * @exception  SecurityException  if the current thread cannot &#xA;     *               modify this thread.&#xA;     * @see        java.lang.Thread#interrupt()&#xA;     * @see        java.lang.Thread#checkAccess()&#xA;     * @see        java.lang.Thread#run()&#xA;     * @see        java.lang.Thread#start()&#xA;     * @see        java.lang.ThreadDeath&#xA;     * @see        java.lang.ThreadGroup#uncaughtException(java.lang.Thread,&#xA;     *             java.lang.Throwable)&#xA;     * @see        SecurityManager#checkAccess(Thread)&#xA;     * @see        SecurityManager#checkPermission&#xA;     * @deprecated This method is inherently unsafe.  Stopping a thread with&#xA;     *&#x9;     Thread.stop causes it to unlock all of the monitors that it&#xA;     *&#x9;     has locked (as a natural consequence of the unchecked&#xA;     *&#x9;     &lt;code>ThreadDeath&lt;/code> exception propagating up the stack).  If&#xA;     *       any of the objects previously protected by these monitors were in&#xA;     *       an inconsistent state, the damaged objects become visible to&#xA;     *       other threads, potentially resulting in arbitrary behavior.  Many&#xA;     *       uses of &lt;code>stop&lt;/code> should be replaced by code that simply&#xA;     *       modifies some variable to indicate that the target thread should&#xA;     *       stop running.  The target thread should check this variable  &#xA;     *       regularly, and return from its run method in an orderly fashion&#xA;     *       if the variable indicates that it is to stop running.  If the&#xA;     *       target thread waits for long periods (on a condition variable,&#xA;     *       for example), the &lt;code>interrupt&lt;/code> method should be used to&#xA;     *       interrupt the wait. &#xA;     *       For more information, see &#xA;     *       &lt;a href=&quot;{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html&quot;>Why &#xA;     *       are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <comments>//if the thread is already dead, return</comments>
          <statement xsi:type="statements:Return"/>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
              <self xsi:type="literals:This"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="security">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
              </next>
              <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.34"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                </children>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55"/>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.96">
            <comments>// Wake up thread if it was suspended; no-op otherwise</comments>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="ThreadDeath.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </arguments>
          </expression>
        </statements>
        <lockProvider xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="stop">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Throwable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Forces the thread to stop executing.&#xA;     * &lt;p>&#xA;     * If there is a security manager installed, the &lt;code>checkAccess&lt;/code>&#xA;     * method of this thread is called, which may result in a &#xA;     * &lt;code>SecurityException&lt;/code> being raised (in the current thread). &#xA;     * &lt;p>&#xA;     * If this thread is different from the current thread (that is, the current&#xA;     * thread is trying to stop a thread other than itself) or&#xA;     * &lt;code>obj&lt;/code> is not an instance of &lt;code>ThreadDeath&lt;/code>, the&#xA;     * security manager's &lt;code>checkPermission&lt;/code> method (with the&#xA;     * &lt;code>RuntimePermission(&quot;stopThread&quot;)&lt;/code> argument) is called in&#xA;     * addition.&#xA;     * Again, this may result in throwing a &#xA;     * &lt;code>SecurityException&lt;/code> (in the current thread). &#xA;     * &lt;p>&#xA;     * If the argument &lt;code>obj&lt;/code> is null, a &#xA;     * &lt;code>NullPointerException&lt;/code> is thrown (in the current thread). &#xA;     * &lt;p>&#xA;     * The thread represented by this thread is forced to complete &#xA;     * whatever it is doing abnormally and to throw the &#xA;     * &lt;code>Throwable&lt;/code> object &lt;code>obj&lt;/code> as an exception. This &#xA;     * is an unusual action to take; normally, the &lt;code>stop&lt;/code> method &#xA;     * that takes no arguments should be used. &#xA;     * &lt;p>&#xA;     * It is permitted to stop a thread that has not yet been started. &#xA;     * If the thread is eventually started, it immediately terminates. &#xA;     *&#xA;     * @param      obj   the Throwable object to be thrown.&#xA;     * @exception  SecurityException  if the current thread cannot modify&#xA;     *               this thread.&#xA;     * @see        java.lang.Thread#interrupt()&#xA;     * @see        java.lang.Thread#checkAccess()&#xA;     * @see        java.lang.Thread#run()&#xA;     * @see        java.lang.Thread#start()&#xA;     * @see        java.lang.Thread#stop()&#xA;     * @see        SecurityManager#checkAccess(Thread)&#xA;     * @see        SecurityManager#checkPermission&#xA;     * @deprecated This method is inherently unsafe.  See {@link #stop()}&#xA;     *        for details.  An additional danger of this&#xA;     *        method is that it may be used to generate exceptions that the&#xA;     *        target thread is unprepared to handle (including checked&#xA;     *        exceptions that the thread could not possibly throw, were it&#xA;     *        not for this method).&#xA;     *        For more information, see &#xA;     *        &lt;a href=&quot;{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html&quot;>Why &#xA;     *        are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="security">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.34"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:InstanceOfExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="ThreadDeath.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                    </expression>
                  </child>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.96">
          <comments>// Wake up thread if it was suspended; no-op otherwise</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="interrupt">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Interrupts this thread.&#xA;     * &#xA;     * &lt;p> Unless the current thread is interrupting itself, which is&#xA;     * always permitted, the {@link #checkAccess() checkAccess} method&#xA;     * of this thread is invoked, which may cause a {@link&#xA;     * SecurityException} to be thrown.&#xA;     *&#xA;     * &lt;p> If this thread is blocked in an invocation of the {@link&#xA;     * Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link&#xA;     * Object#wait(long, int) wait(long, int)} methods of the {@link Object}&#xA;     * class, or of the {@link #join()}, {@link #join(long)}, {@link&#xA;     * #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)},&#xA;     * methods of this class, then its interrupt status will be cleared and it&#xA;     * will receive an {@link InterruptedException}.&#xA;     *&#xA;     * &lt;p> If this thread is blocked in an I/O operation upon an {@link&#xA;     * java.nio.channels.InterruptibleChannel &lt;/code>interruptible&#xA;     * channel&lt;code>} then the channel will be closed, the thread's interrupt&#xA;     * status will be set, and the thread will receive a {@link&#xA;     * java.nio.channels.ClosedByInterruptException}.&#xA;     *&#xA;     * &lt;p> If this thread is blocked in a {@link java.nio.channels.Selector}&#xA;     * then the thread's interrupt status will be set and it will return&#xA;     * immediately from the selection operation, possibly with a non-zero&#xA;     * value, just as if the selector's {@link&#xA;     * java.nio.channels.Selector#wakeup wakeup} method were invoked.&#xA;     *&#xA;     * &lt;p> If none of the previous conditions hold then this thread's interrupt&#xA;     * status will be set. &lt;/p>&#xA;     * &#xA;     * @throws  SecurityException&#xA;     *          if the current thread cannot modify this thread&#xA;     *&#xA;     * @revised 1.4&#xA;     * @spec JSR-51&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="b">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../sun/nio/ch/Interruptible.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.99"/>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@statements.0/@variable">
                <comments>// Just to set the interrupt flag</comments>
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../../sun/nio/ch/Interruptible.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.99"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="interrupted">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests whether the current thread has been interrupted.  The&#xA;     * &lt;i>interrupted status&lt;/i> of the thread is cleared by this method.  In&#xA;     * other words, if this method were to be called twice in succession, the&#xA;     * second call would return false (unless the current thread were&#xA;     * interrupted again, after the first call had cleared its interrupted&#xA;     * status and before the second call had examined it).&#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if the current thread has been interrupted;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     * @see java.lang.Thread#isInterrupted()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isInterrupted">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests whether this thread has been interrupted.  The &lt;i>interrupted&#xA;     * status&lt;/i> of the thread is unaffected by this method.&#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if this thread has been interrupted;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     * @see     java.lang.Thread#interrupted()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
          <arguments xsi:type="literals:BooleanLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isInterrupted">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ClearInterrupted">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Tests if some Thread has been interrupted.  The interrupted state&#xA;     * is reset or not based on the value of ClearInterrupted that is&#xA;     * passed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="destroy">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Throws {@link NoSuchMethodError}.&#xA;     *&#xA;     * @deprecated This method was originally designed to destroy this&#xA;     *     thread without any cleanup. Any monitors it held would have&#xA;     *     remained locked. However, the method was never implemented.&#xA;     *     If if were to be implemented, it would be deadlock-prone in&#xA;     *     much the manner of {@link #suspend}. If the target thread held&#xA;     *     a lock protecting a critical system resource when it was&#xA;     *     destroyed, no thread could ever access this resource again.&#xA;     *     If another thread ever attempted to lock this resource, deadlock&#xA;     *     would result. Such deadlocks typically manifest themselves as&#xA;     *     &quot;frozen&quot; processes. For more information, see&#xA;     *     &lt;a href=&quot;{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html&quot;>&#xA;     *     Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a>.&#xA;     * @throws NoSuchMethodError always&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NoSuchMethodError.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAlive">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if this thread is alive. A thread is alive if it has &#xA;     * been started and has not yet died. &#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if this thread is alive;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="suspend">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Suspends this thread.&#xA;     * &lt;p>&#xA;     * First, the &lt;code>checkAccess&lt;/code> method of this thread is called &#xA;     * with no arguments. This may result in throwing a &#xA;     * &lt;code>SecurityException &lt;/code>(in the current thread). &#xA;     * &lt;p>&#xA;     * If the thread is alive, it is suspended and makes no further &#xA;     * progress unless and until it is resumed. &#xA;     *&#xA;     * @exception  SecurityException  if the current thread cannot modify&#xA;     *               this thread.&#xA;     * @see #checkAccess&#xA;     * @deprecated   This method has been deprecated, as it is&#xA;     *   inherently deadlock-prone.  If the target thread holds a lock on the&#xA;     *   monitor protecting a critical system resource when it is suspended, no&#xA;     *   thread can access this resource until the target thread is resumed. If&#xA;     *   the thread that would resume the target thread attempts to lock this&#xA;     *   monitor prior to calling &lt;code>resume&lt;/code>, deadlock results.  Such&#xA;     *   deadlocks typically manifest themselves as &quot;frozen&quot; processes.&#xA;     *   For more information, see &#xA;     *   &lt;a href=&quot;{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html&quot;>Why &#xA;     *   are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.97"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="resume">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Resumes a suspended thread.&#xA;     * &lt;p>&#xA;     * First, the &lt;code>checkAccess&lt;/code> method of this thread is called &#xA;     * with no arguments. This may result in throwing a &#xA;     * &lt;code>SecurityException&lt;/code> (in the current thread). &#xA;     * &lt;p>&#xA;     * If the thread is alive but suspended, it is resumed and is &#xA;     * permitted to make progress in its execution. &#xA;     *&#xA;     * @exception  SecurityException  if the current thread cannot modify this&#xA;     *               thread.&#xA;     * @see        #checkAccess&#xA;     * @see        java.lang.Thread#suspend()&#xA;     * @deprecated This method exists solely for use with {@link #suspend},&#xA;     *     which has been deprecated because it is deadlock-prone.&#xA;     *     For more information, see &#xA;     *     &lt;a href=&quot;{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html&quot;>Why &#xA;     *     are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.98"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPriority">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newPriority">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the priority of this thread. &#xA;     * &lt;p>&#xA;     * First the &lt;code>checkAccess&lt;/code> method of this thread is called &#xA;     * with no arguments. This may result in throwing a &#xA;     * &lt;code>SecurityException&lt;/code>. &#xA;     * &lt;p>&#xA;     * Otherwise, the priority of this thread is set to the smaller of &#xA;     * the specified &lt;code>newPriority&lt;/code> and the maximum permitted &#xA;     * priority of the thread's thread group. &#xA;     *&#xA;     * @param newPriority priority to set this thread to&#xA;     * @exception  IllegalArgumentException  If the priority is not in the&#xA;     *               range &lt;code>MIN_PRIORITY&lt;/code> to&#xA;     *               &lt;code>MAX_PRIORITY&lt;/code>.&#xA;     * @exception  SecurityException  if the current thread cannot modify&#xA;     *               this thread.&#xA;     * @see        #getPriority&#xA;     * @see        java.lang.Thread#checkAccess()&#xA;     * @see        java.lang.Thread#getPriority()&#xA;     * @see        java.lang.Thread#getThreadGroup()&#xA;     * @see        java.lang.Thread#MAX_PRIORITY&#xA;     * @see        java.lang.Thread#MIN_PRIORITY&#xA;     * @see        java.lang.ThreadGroup#getMaxPriority()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.16"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.16"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.95">
          <arguments xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPriority">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this thread's priority.&#xA;     *&#xA;     * @return  this thread's priority.&#xA;     * @see     #setPriority&#xA;     * @see     java.lang.Thread#setPriority(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Changes the name of this thread to be equal to the argument &#xA;     * &lt;code>name&lt;/code>. &#xA;     * &lt;p>&#xA;     * First the &lt;code>checkAccess&lt;/code> method of this thread is called &#xA;     * with no arguments. This may result in throwing a &#xA;     * &lt;code>SecurityException&lt;/code>. &#xA;     *&#xA;     * @param      name   the new name for this thread.&#xA;     * @exception  SecurityException  if the current thread cannot modify this&#xA;     *               thread.&#xA;     * @see        #getName&#xA;     * @see        java.lang.Thread#checkAccess()&#xA;     * @see        java.lang.Thread#getName()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.73"/>
            </next>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this thread's name.&#xA;     *&#xA;     * @return  this thread's name.&#xA;     * @see     #setName&#xA;     * @see     java.lang.Thread#setName(java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.77"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getThreadGroup">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the thread group to which this thread belongs. &#xA;     * This method returns null if this thread has died&#xA;     * (been stopped).&#xA;     *&#xA;     * @return  this thread's thread group.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="activeCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of active threads in the current thread's thread&#xA;     * group.&#xA;     *&#xA;     * @return  the number of active threads in the current thread's thread&#xA;     *          group.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.23"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="enumerate">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tarray">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Copies into the specified array every active thread in &#xA;     * the current thread's thread group and its subgroups. This method simply &#xA;     * calls the &lt;code>enumerate&lt;/code> method of the current thread's thread &#xA;     * group with the array argument. &#xA;     * &lt;p>&#xA;     * First, if there is a security manager, that &lt;code>enumerate&lt;/code>&#xA;     * method calls the security&#xA;     * manager's &lt;code>checkAccess&lt;/code> method &#xA;     * with the thread group as its argument. This may result &#xA;     * in throwing a &lt;code>SecurityException&lt;/code>. &#xA;     *&#xA;     * @param tarray an array of Thread objects to copy to&#xA;     * @return  the number of threads put into the array&#xA;     * @exception  SecurityException  if a security manager exists and its  &#xA;     *             &lt;code>checkAccess&lt;/code> method doesn't allow the operation.&#xA;     * @see     java.lang.ThreadGroup#enumerate(java.lang.Thread[])&#xA;     * @see     java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.60">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.24"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="countStackFrames">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Counts the number of stack frames in this thread. The thread must &#xA;     * be suspended. &#xA;     *&#xA;     * @return     the number of stack frames in this thread.&#xA;     * @exception  IllegalThreadStateException  if this thread is not&#xA;     *             suspended.&#xA;     * @deprecated The definition of this call depends on {@link #suspend},&#xA;     *&#x9;&#x9;   which is deprecated.  Further, the results of this call&#xA;     *&#x9;&#x9;   were never well-defined.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="join">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="millis">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Waits at most &lt;code>millis&lt;/code> milliseconds for this thread to &#xA;     * die. A timeout of &lt;code>0&lt;/code> means to wait forever. &#xA;     *&#xA;     * @param      millis   the time to wait in milliseconds.&#xA;     * @exception  InterruptedException if another thread has interrupted&#xA;     *             the current thread.  The &lt;i>interrupted status&lt;/i> of the&#xA;     *             current thread is cleared when this exception is thrown.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="base">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.18"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="now">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="timeout value is negative"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Object.class.xmi#//@classifiers.0/@members.9"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="delay">
                  <typeReference xsi:type="types:Long"/>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.1/@variable"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.3/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThanOrEqual"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Object.class.xmi#//@classifiers.0/@members.9"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.3/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.18"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@variable"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="join">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="millis">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nanos">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Waits at most &lt;code>millis&lt;/code> milliseconds plus &#xA;     * &lt;code>nanos&lt;/code> nanoseconds for this thread to die. &#xA;     *&#xA;     * @param      millis   the time to wait in milliseconds.&#xA;     * @param      nanos    0-999999 additional nanoseconds to wait.&#xA;     * @exception  IllegalArgumentException  if the value of millis is negative&#xA;     *               the value of nanos is not in the range 0-999999.&#xA;     * @exception  InterruptedException if another thread has interrupted&#xA;     *             the current thread.  The &lt;i>interrupted status&lt;/i> of the&#xA;     *             current thread is cleared when this exception is thrown.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="timeout value is negative"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="nanosecond timeout value out of range"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="999999"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="500000"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="join">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Waits for this thread to die. &#xA;     *&#xA;     * @exception  InterruptedException if another thread has interrupted&#xA;     *             the current thread.  The &lt;i>interrupted status&lt;/i> of the&#xA;     *             current thread is cleared when this exception is thrown.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dumpStack">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Prints a stack trace of the current thread. This method is used &#xA;     * only for debugging. &#xA;     *&#xA;     * @see     java.lang.Throwable#printStackTrace()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Exception.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Throwable.class.xmi#//@classifiers.0/@members.14"/>
          </next>
          <arguments xsi:type="references:StringReference" value="Stack trace"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDaemon">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="on">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Marks this thread as either a daemon thread or a user thread. The &#xA;     * Java Virtual Machine exits when the only threads running are all &#xA;     * daemon threads. &#xA;     * &lt;p>&#xA;     * This method must be called before the thread is started. &#xA;      * &lt;p>&#xA;     * This method first calls the &lt;code>checkAccess&lt;/code> method &#xA;     * of this thread &#xA;     * with no arguments. This may result in throwing a &#xA;     * &lt;code>SecurityException &lt;/code>(in the current thread). &#xA;    *&#xA;     * @param      on   if &lt;code>true&lt;/code>, marks this thread as a&#xA;     *                  daemon thread.&#xA;     * @exception  IllegalThreadStateException  if this thread is active.&#xA;     * @exception  SecurityException  if the current thread cannot modify&#xA;     *               this thread.&#xA;     * @see        java.lang.Thread#isDaemon()&#xA;     * @see          #checkAccess&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalThreadStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isDaemon">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if this thread is a daemon thread.&#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if this thread is a daemon thread;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     * @see     java.lang.Thread#setDaemon(boolean)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkAccess">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if the currently running thread has permission to &#xA;     * modify this thread. &#xA;     * &lt;p>&#xA;     * If there is a security manager, its &lt;code>checkAccess&lt;/code> method &#xA;     * is called with this thread as its argument. This may result in &#xA;     * throwing a &lt;code>SecurityException&lt;/code>. &#xA;     * &lt;p>&#xA;     * Note: This method was mistakenly non-final in JDK 1.1.&#xA;     * It has been made final in the Java 2 Platform.&#xA;     *&#xA;     * @exception  SecurityException  if the current thread is not allowed to&#xA;     *               access this thread.&#xA;     * @see        java.lang.SecurityManager#checkAccess(java.lang.Thread)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="security">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.26"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.70/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of this thread, including the &#xA;     * thread's name, priority, and thread group.&#xA;     *&#xA;     * @return  a string representation of this thread.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="group">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.60"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="Thread["/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
              <children xsi:type="references:StringReference" value=","/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.57"/>
              <children xsi:type="references:StringReference" value=","/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <children xsi:type="references:StringReference" value="]"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.71/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="Thread["/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.59"/>
              <children xsi:type="references:StringReference" value=","/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.57"/>
              <children xsi:type="references:StringReference" value=","/>
              <children xsi:type="references:StringReference" value=""/>
              <children xsi:type="references:StringReference" value="]"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getContextClassLoader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns the context ClassLoader for this Thread. The context&#xA;     * ClassLoader is provided by the creator of the thread for use&#xA;     * by code running in this thread when loading classes and resources.&#xA;     * If not set, the default is the ClassLoader context of the parent&#xA;     * Thread. The context ClassLoader of the primordial thread is&#xA;     * typically set to the class loader used to load the application.&#xA;     *&#xA;     * &lt;p>First, if there is a security manager, and the caller's class&#xA;     * loader is not null and the caller's class loader is not the same as or&#xA;     * an ancestor of the context class loader for the thread whose&#xA;     * context class loader is being requested, then the security manager's&#xA;     * &lt;code>checkPermission&lt;/code> &#xA;     * method is called with a &#xA;     * &lt;code>RuntimePermission(&quot;getClassLoader&quot;)&lt;/code> permission&#xA;     *  to see if it's ok to get the context ClassLoader.. &#xA;     *&#xA;     * @return the context ClassLoader for this Thread&#xA;     *&#xA;     * @throws SecurityException&#xA;     *        if a security manager exists and its &#xA;     *        &lt;code>checkPermission&lt;/code> method doesn't allow &#xA;     *        getting the context ClassLoader.&#xA;     * @see #setContextClassLoader&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     * &#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="ccl">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ClassLoader.class.xmi#//@classifiers.0/@members.67"/>
                </next>
                <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.33"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ClassLoader.class.xmi#//@classifiers.0/@members.66"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.2/@statement/@statements.0/@variable"/>
                  </next>
                </child>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setContextClassLoader">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**   &#xA;     * Sets the context ClassLoader for this Thread. The context&#xA;     * ClassLoader can be set when a thread is created, and allows&#xA;     * the creator of the thread to provide the appropriate class loader&#xA;     * to code running in the thread when loading classes and resources.&#xA;     *&#xA;     * &lt;p>First, if there is a security manager, its &lt;code>checkPermission&lt;/code> &#xA;     * method is called with a &#xA;     * &lt;code>RuntimePermission(&quot;setContextClassLoader&quot;)&lt;/code> permission&#xA;     *  to see if it's ok to set the context ClassLoader.. &#xA;     *&#xA;     * @param cl the context ClassLoader for this Thread&#xA;     * &#xA;     * @exception  SecurityException  if the current thread cannot set the &#xA;     * context ClassLoader.&#xA;     * @see #getContextClassLoader&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     * &#xA;     * @since 1.2 &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="setContextClassLoader"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.73/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="holdsLock">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if and only if the current thread holds the&#xA;     * monitor lock on the specified object.&#xA;     *&#xA;     * &lt;p>This method is designed to allow a program to assert that&#xA;     * the current thread already holds a specified lock:&#xA;     * &lt;pre>&#xA;     *     assert Thread.holdsLock(obj);&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @param  obj the object on which to test lock ownership&#xA;     * @throws NullPointerException if obj is &lt;tt>null&lt;/tt>&#xA;     * @return &lt;tt>true&lt;/tt> if the current thread holds the monitor lock on&#xA;     *         the specified object.&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:Field" name="EMPTY_STACK_TRACE">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getStackTrace">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of stack trace elements representing the stack dump&#xA;     * of this thread.  This method will return a zero-length array if&#xA;     * this thread has not started or has terminated. &#xA;     * If the returned array is of non-zero length then the first element of &#xA;     * the array represents the top of the stack, which is the most recent&#xA;     * method invocation in the sequence.  The last element of the array&#xA;     * represents the bottom of the stack, which is the least recent method&#xA;     * invocation in the sequence.&#xA;     *&#xA;     * &lt;p>If there is a security manager, and this thread is not &#xA;     * the current thread, then the security manager's &#xA;     * &lt;tt>checkPermission&lt;/tt> method is called with a &#xA;     * &lt;tt>RuntimePermission(&quot;getStackTrace&quot;)&lt;/tt> permission&#xA;     * to see if it's ok to get the stack trace. &#xA;     *&#xA;     * &lt;p>Some virtual machines may, under some circumstances, omit one&#xA;     * or more stack frames from the stack trace.  In the extreme case,&#xA;     * a virtual machine that has no stack trace information concerning&#xA;     * this thread is permitted to return a zero-length array from this&#xA;     * method.  &#xA;     *&#xA;     * @return an array of &lt;tt>StackTraceElement&lt;/tt>, &#xA;     * each represents one stack frame.&#xA;     *&#xA;     * @throws SecurityException&#xA;     *        if a security manager exists and its &#xA;     *        &lt;tt>checkPermission&lt;/tt> method doesn't allow &#xA;     *        getting the stack trace of thread.&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     * @see Throwable#getStackTrace&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="security">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// check for getStackTrace permission</comments>
                  <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
                </next>
                <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.35"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.29"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="threads">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.2/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.82">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.2/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.76/@statements.4/@variable">
          <arraySelectors>
            <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </arraySelectors>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAllStackTraces">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <arrayDimensionsBefore/>
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a map of stack traces for all live threads.&#xA;     * The map keys are threads and each map value is an array of&#xA;     * &lt;tt>StackTraceElement&lt;/tt> that represents the stack dump&#xA;     * of the corresponding &lt;tt>Thread&lt;/tt>.&#xA;     * The returned stack traces are in the format specified for&#xA;     * the {@link #getStackTrace getStackTrace} method.&#xA;     *&#xA;     * &lt;p>The threads may be executing while this method is called.&#xA;     * The stack trace of each thread only represents a snapshot and&#xA;     * each stack trace may be obtained at different time.  A zero-length&#xA;     * array will be returned in the map value if the virtual machine has &#xA;     * no stack trace information about a thread.&#xA;     *&#xA;     * &lt;p>If there is a security manager, then the security manager's &#xA;     * &lt;tt>checkPermission&lt;/tt> method is called with a &#xA;     * &lt;tt>RuntimePermission(&quot;getStackTrace&quot;)&lt;/tt> permission as well as&#xA;     * &lt;tt>RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/tt> permission&#xA;     * to see if it is ok to get the stack trace of all threads. &#xA;     *&#xA;     * @return a &lt;tt>Map&lt;/tt> from &lt;tt>Thread&lt;/tt> to an array of &#xA;     * &lt;tt>StackTraceElement&lt;/tt> that represents the stack trace of &#xA;     * the corresponding thread.&#xA;     *&#xA;     * @throws SecurityException&#xA;     *        if a security manager exists and its &#xA;     *        &lt;tt>checkPermission&lt;/tt> method doesn't allow &#xA;     *        getting the stack trace of thread.&#xA;     * @see #getStackTrace&#xA;     * @see SecurityManager#checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     * @see Throwable#getStackTrace&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="security">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// check for getStackTrace permission</comments>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.35"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.31"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="threads">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0">
              <comments>// Get a snapshot of the list of all threads </comments>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.83"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="traces">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.82">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="m">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <arrayDimensionsBefore/>
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <arrayDimensionsBefore/>
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Class" href="../util/HashMap.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="stackTrace">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arrayDimensionsBefore/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.3/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@init"/>
                    </arraySelectors>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.75"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@statement/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.4/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../util/Map.class.xmi#//@classifiers.0/@members.5"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@init"/>
                      </arraySelectors>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@statement/@statements.0/@statement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@init"/>
              </arraySelectors>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.2/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.5/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.77/@statements.4/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="SUBCLASS_IMPLEMENTATION_PERMISSION">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="enableContextClassLoaderOverride"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="subclassAudits">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../sun/misc/SoftCache.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../sun/misc/SoftCache.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** cache of subclass security audit results */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="isCCLOverridden">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Verifies that this (possibly subclass) instance can be constructed&#xA;     * without violating security constraints: the subclass must not override&#xA;     * security-sensitive non-final methods, or else the&#xA;     * &quot;enableContextClassLoaderOverride&quot; RuntimePermission is checked.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:ReflectiveClassReference"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.1/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../sun/misc/SoftCache.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0"/>
                </next>
              </child>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.1/@variable">
                  <comments>/*&#xA;&#x9;&#x9; * Note: only new Boolean instances (i.e., not Boolean.TRUE or&#xA;&#x9;&#x9; * Boolean.FALSE) must be used as cache values, otherwise cache&#xA;&#x9;&#x9; * entry will pin associated class.&#xA;&#x9;&#x9; */</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.81">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0"/>
                  </arguments>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../sun/misc/SoftCache.class.xmi#//@classifiers.0/@members.12"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.1/@variable"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.79"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.80/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Boolean.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="auditSubclass">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="subcl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Performs reflective checks on given subclass to verify that it doesn't&#xA;     * override security-sensitive non-final methods.  Returns true if the&#xA;     * subclass overrides any of the methods, false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:ForLoop">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:TryBlock">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@init">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.85"/>
                                  <arguments xsi:type="references:StringReference" value="getContextClassLoader"/>
                                  <arguments xsi:type="arrays:ArrayInstantiationBySize">
                                    <typeReference xsi:type="types:NamespaceClassifierReference">
                                      <classifierReferences>
                                        <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
                                      </classifierReferences>
                                    </typeReference>
                                    <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                  </arguments>
                                </next>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:Return">
                              <returnValue xsi:type="references:IdentifierReference">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="Boolean.class.xmi#//@classifiers.0/@members.0"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
                              </returnValue>
                            </statements>
                            <catcheBlocks>
                              <parameter name="ex">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="NoSuchMethodException.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </parameter>
                            </catcheBlocks>
                          </statements>
                          <statements xsi:type="statements:TryBlock">
                            <statements xsi:type="statements:LocalVariableStatement">
                              <variable name="params">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <arrayDimensionsBefore/>
                                <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                                  <arrayInitializer>
                                    <initialValues xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:ReflectiveClassReference"/>
                                      <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
                                    </initialValues>
                                  </arrayInitializer>
                                </initialValue>
                              </variable>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@init">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.85"/>
                                  <arguments xsi:type="references:StringReference" value="setContextClassLoader"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@statement/@statements.1/@statements.0/@variable"/>
                                </next>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:Return">
                              <returnValue xsi:type="references:IdentifierReference">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="Boolean.class.xmi#//@classifiers.0/@members.0"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
                              </returnValue>
                            </statements>
                            <catcheBlocks>
                              <parameter name="ex">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="NoSuchMethodException.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </parameter>
                            </catcheBlocks>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@init"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
                            <next xsi:type="references:ReflectiveClassReference"/>
                          </children>
                        </condition>
                        <init xsi:type="variables:LocalVariable" name="cl">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@parameters.0"/>
                        </init>
                        <updates xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@init"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@init">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.49"/>
                            </next>
                          </value>
                        </updates>
                      </statements>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="Boolean.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="Boolean.class.xmi#//@classifiers.0"/>
                        </returnValue>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.81/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Boolean.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dumpThreads">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="StackTraceElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="threads">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getThreads">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getId">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the identifier of this Thread.  The thread ID is a positive&#xA;     * &lt;tt>long&lt;/tt> number generated when this thread was created.  &#xA;     * The thread ID is unique and remains unchanged during its lifetime.  &#xA;     * When a thread is terminated, this thread ID may be reused.&#xA;     *&#xA;     * @return this thread's ID.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
      </statements>
    </members>
    <members xsi:type="classifiers:Enumeration" name="State">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A thread state.  A thread can be in one of the following states: &#xA;     * &lt;ul>&#xA;     * &lt;li>{@link #NEW}&lt;br>&#xA;     *     A thread that has not yet started is in this state.&#xA;     *     &lt;/li>&#xA;     * &lt;li>{@link #RUNNABLE}&lt;br>&#xA;     *     A thread executing in the Java virtual machine is in this state. &#xA;     *     &lt;/li>&#xA;     * &lt;li>{@link #BLOCKED}&lt;br>&#xA;     *     A thread that is blocked waiting for a monitor lock &#xA;     *     is in this state. &#xA;     *     &lt;/li>&#xA;     * &lt;li>{@link #WAITING}&lt;br>&#xA;     *     A thread that is waiting indefinitely for another thread to &#xA;     *     perform a particular action is in this state. &#xA;     *     &lt;/li>&#xA;     * &lt;li>{@link #TIMED_WAITING}&lt;br>&#xA;     *     A thread that is waiting for another thread to perform an action &#xA;     *     for up to a specified waiting time is in this state. &#xA;     *     &lt;/li>&#xA;     * &lt;li>{@link #TERMINATED}&lt;br> &#xA;     *     A thread that has exited is in this state.&#xA;     *     &lt;/li>&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>&#xA;     * A thread can be in only one state at a given point in time. &#xA;     * These states are virtual machine states which do not reflect&#xA;     * any operating system thread states.&#xA;     * &#xA;     * @since   1.5&#xA;     * @see Thread#getState&#xA;     */</comments>
      </annotationsAndModifiers>
      <constants name="NEW">
        <comments>/**&#xA;         * Thread state for a thread which has not yet started.&#xA;         */</comments>
      </constants>
      <constants name="RUNNABLE">
        <comments>/**&#xA;         * Thread state for a runnable thread.  A thread in the runnable&#xA;         * state is executing in the Java virtual machine but it may&#xA;         * be waiting for other resources from the operating system&#xA;         * such as processor.&#xA;         */</comments>
      </constants>
      <constants name="BLOCKED">
        <comments>/**&#xA;         * Thread state for a thread blocked waiting for a monitor lock.&#xA;         * A thread in the blocked state is waiting for a monitor lock&#xA;         * to enter a synchronized block/method or &#xA;         * reenter a synchronized block/method after calling&#xA;         * {@link Object#wait() Object.wait}.&#xA;         */</comments>
      </constants>
      <constants name="WAITING">
        <comments>/**&#xA;         * Thread state for a waiting thread.&#xA;         * A thread is in the waiting state due to calling one of the &#xA;         * following methods:&#xA;         * &lt;ul>&#xA;         *   &lt;li>{@link Object#wait() Object.wait} with no timeout&lt;/li>&#xA;         *   &lt;li>{@link Thread#join() Thread.join} with no timeout&lt;/li>&#xA;         *   &lt;li>{@link LockSupport#park() LockSupport.park}&lt;/li>&#xA;         * &lt;/ul>&#xA;         * &#xA;         * &lt;p>A thread in the waiting state is waiting for another thread to&#xA;         * perform a particular action.  &#xA;         *&#xA;         * For example, a thread that has called &lt;tt>Object.wait()&lt;/tt>&#xA;         * on an object is waiting for another thread to call &#xA;         * &lt;tt>Object.notify()&lt;/tt> or &lt;tt>Object.notifyAll()&lt;/tt> on &#xA;         * that object. A thread that has called &lt;tt>Thread.join()&lt;/tt> &#xA;         * is waiting for a specified thread to terminate.&#xA;         */</comments>
      </constants>
      <constants name="TIMED_WAITING">
        <comments>/**&#xA;         * Thread state for a waiting thread with a specified waiting time.&#xA;         * A thread is in the timed waiting state due to calling one of &#xA;         * the following methods with a specified positive waiting time:&#xA;         * &lt;ul>&#xA;         *   &lt;li>{@link Thread#sleep Thread.sleep}&lt;/li>&#xA;         *   &lt;li>{@link Object#wait(long) Object.wait} with timeout&lt;/li>&#xA;         *   &lt;li>{@link Thread#join(long) Thread.join} with timeout&lt;/li>&#xA;         *   &lt;li>{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li> &#xA;         *   &lt;li>{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li>&#xA;         * &lt;/ul>&#xA;         */</comments>
      </constants>
      <constants name="TERMINATED">
        <comments>/**&#xA;         * Thread state for a terminated thread.&#xA;         * The thread has completed execution.&#xA;         */</comments>
      </constants>
    </members>
    <members xsi:type="members:ClassMethod" name="getState">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.85"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the state of this thread.&#xA;     * This method is designed for use in monitoring of the system state,&#xA;     * not for synchronization control.&#xA;     * &#xA;     * @return this thread's state.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// get current thread state</comments>
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/misc/VM.class.xmi#//@classifiers.0/@members.29"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/misc/VM.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Interface" name="UncaughtExceptionHandler">
      <members xsi:type="members:InterfaceMethod" name="uncaughtException">
        <typeReference xsi:type="types:Void">
          <comments>/** &#xA;         * Method invoked when the given thread terminates due to the&#xA;         * given uncaught exception.&#xA;         * &lt;p>Any exception thrown by this method will be ignored by the&#xA;         * Java Virtual Machine.&#xA;         * @param t the thread&#xA;         * @param e the exception&#xA;         */</comments>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Throwable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Added in JSR-166</comments>
        <comments>/**&#xA;     * Interface for handlers invoked when a &lt;tt>Thread&lt;/tt> abruptly &#xA;     * terminates due to an uncaught exception. &#xA;     * &lt;p>When a thread is about to terminate due to an uncaught exception&#xA;     * the Java Virtual Machine will query the thread for its&#xA;     * &lt;tt>UncaughtExceptionHandler&lt;/tt> using &#xA;     * {@link Thread#getUncaughtExceptionHandler} and will invoke the handler's&#xA;     * &lt;tt>uncaughtException&lt;/tt> method, passing the thread and the&#xA;     * exception as arguments.&#xA;     * If a thread has not had its &lt;tt>UncaughtExceptionHandler&lt;/tt>&#xA;     * explicitly set, then its &lt;tt>ThreadGroup&lt;/tt> object acts as its&#xA;     * &lt;tt>UncaughtExceptionHandler&lt;/tt>. If the &lt;tt>ThreadGroup&lt;/tt> object&#xA;     * has no&#xA;     * special requirements for dealing with the exception, it can forward &#xA;     * the invocation to the {@linkplain #getDefaultUncaughtExceptionHandler &#xA;     * default uncaught exception handler}.&#xA;     *&#xA;     * @see #setDefaultUncaughtExceptionHandler&#xA;     * @see #setUncaughtExceptionHandler&#xA;     * @see ThreadGroup#uncaughtException&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="uncaughtExceptionHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.87"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// null unless explicitly set</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:Field" name="defaultUncaughtExceptionHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.87"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// null unless explicitly set</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setDefaultUncaughtExceptionHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="eh">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.87"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the default handler invoked when a thread abruptly terminates&#xA;     * due to an uncaught exception, and no other handler has been defined&#xA;     * for that thread. &#xA;     *&#xA;     * &lt;p>Uncaught exception handling is controlled first by the thread, then&#xA;     * by the thread's {@link ThreadGroup} object and finally by the default&#xA;     * uncaught exception handler. If the thread does not have an explicit&#xA;     * uncaught exception handler set, and the thread's thread group&#xA;     * (including parent thread groups)  does not specialize its &#xA;     * &lt;tt>uncaughtException&lt;/tt> method, then the default handler's&#xA;     * &lt;tt>uncaughtException&lt;/tt> method will be invoked.&#xA;     * &lt;p>By setting the default uncaught exception handler, an application&#xA;     * can change the way in which uncaught exceptions are handled (such as&#xA;     * logging to a specific device, or file) for those threads that would&#xA;     * already accept whatever &amp;quot;default&amp;quot; behavior the system&#xA;     * provided.&#xA;     *&#xA;     * &lt;p>Note that the default uncaught exception handler should not usually&#xA;     * defer to the thread's &lt;tt>ThreadGroup&lt;/tt> object, as that could cause&#xA;     * infinite recursion.&#xA;     *&#xA;     * @param eh the object to use as the default uncaught exception handler.&#xA;     * If &lt;tt>null&lt;/tt> then there is no default handler.&#xA;     *&#xA;     * @throws SecurityException if a security manager is present and it&#xA;     *         denies &lt;tt>{@link RuntimePermission}&#xA;     *         (&amp;quot;setDefaultUncaughtExceptionHandler&amp;quot;)&lt;/tt>&#xA;     *&#xA;     * @see #setUncaughtExceptionHandler&#xA;     * @see #getUncaughtExceptionHandler&#xA;     * @see ThreadGroup#uncaughtException&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="setDefaultUncaughtExceptionHandler"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.90/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDefaultUncaughtExceptionHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.87"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the default handler invoked when a thread abruptly terminates&#xA;     * due to an uncaught exception. If the returned value is &lt;tt>null&lt;/tt>,&#xA;     * there is no default.&#xA;     * @since 1.5&#xA;     * @see #setDefaultUncaughtExceptionHandler&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.89"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUncaughtExceptionHandler">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.87"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the handler invoked when this thread abruptly terminates&#xA;     * due to an uncaught exception. If this thread has not had an&#xA;     * uncaught exception handler explicitly set then this thread's&#xA;     * &lt;tt>ThreadGroup&lt;/tt> object is returned, unless this thread&#xA;     * has terminated, in which case &lt;tt>null&lt;/tt> is returned.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88"/>
            <children xsi:type="literals:NullLiteral"/>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88"/>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setUncaughtExceptionHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="eh">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.87"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the handler invoked when this thread abruptly terminates&#xA;     * due to an uncaught exception. &#xA;     * &lt;p>A thread can take full control of how it responds to uncaught&#xA;     * exceptions by having its uncaught exception handler explicitly set.&#xA;     * If no such handler is set then the thread's &lt;tt>ThreadGroup&lt;/tt>&#xA;     * object acts as its handler.&#xA;     * @param eh the object to use as this thread's uncaught exception&#xA;     * handler. If &lt;tt>null&lt;/tt> then this thread has no explicit handler.&#xA;     * @throws  SecurityException  if the current thread is not allowed to&#xA;     *          modify this thread.&#xA;     * @see #setDefaultUncaughtExceptionHandler&#xA;     * @see ThreadGroup#uncaughtException&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.88"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.93/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatchUncaughtException">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Throwable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Dispatch an uncaught exception to the handler. This method is &#xA;     * intended to be called only by the JVM.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.92">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.87/@members.0">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.94/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPriority0">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newPriority">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* Some private helper methods */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="stop0">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="suspend0">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="resume0">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="interrupt0">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;i>thread&lt;/i> is a thread of execution in a program. The Java &#xA; * Virtual Machine allows an application to have multiple threads of &#xA; * execution running concurrently. &#xA; * &lt;p>&#xA; * Every thread has a priority. Threads with higher priority are &#xA; * executed in preference to threads with lower priority. Each thread &#xA; * may or may not also be marked as a daemon. When code running in &#xA; * some thread creates a new &lt;code>Thread&lt;/code> object, the new &#xA; * thread has its priority initially set equal to the priority of the &#xA; * creating thread, and is a daemon thread if and only if the &#xA; * creating thread is a daemon. &#xA; * &lt;p>&#xA; * When a Java Virtual Machine starts up, there is usually a single &#xA; * non-daemon thread (which typically calls the method named &#xA; * &lt;code>main&lt;/code> of some designated class). The Java Virtual &#xA; * Machine continues to execute threads until either of the following &#xA; * occurs: &#xA; * &lt;ul>&#xA; * &lt;li>The &lt;code>exit&lt;/code> method of class &lt;code>Runtime&lt;/code> has been &#xA; *     called and the security manager has permitted the exit operation &#xA; *     to take place. &#xA; * &lt;li>All threads that are not daemon threads have died, either by &#xA; *     returning from the call to the &lt;code>run&lt;/code> method or by &#xA; *     throwing an exception that propagates beyond the &lt;code>run&lt;/code>&#xA; *     method.&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * There are two ways to create a new thread of execution. One is to &#xA; * declare a class to be a subclass of &lt;code>Thread&lt;/code>. This &#xA; * subclass should override the &lt;code>run&lt;/code> method of class &#xA; * &lt;code>Thread&lt;/code>. An instance of the subclass can then be &#xA; * allocated and started. For example, a thread that computes primes &#xA; * larger than a stated value could be written as follows: &#xA; * &lt;p>&lt;hr>&lt;blockquote>&lt;pre>&#xA; *     class PrimeThread extends Thread {&#xA; *         long minPrime;&#xA; *         PrimeThread(long minPrime) {&#xA; *             this.minPrime = minPrime;&#xA; *         }&#xA; * &#xA; *         public void run() {&#xA; *             // compute primes larger than minPrime&#xA; *             &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&#xA; *         }&#xA; *     }&#xA; * &lt;/pre>&lt;/blockquote>&lt;hr>&#xA; * &lt;p>&#xA; * The following code would then create a thread and start it running: &#xA; * &lt;p>&lt;blockquote>&lt;pre>&#xA; *     PrimeThread p = new PrimeThread(143);&#xA; *     p.start();&#xA; * &lt;/pre>&lt;/blockquote>&#xA; * &lt;p>&#xA; * The other way to create a thread is to declare a class that &#xA; * implements the &lt;code>Runnable&lt;/code> interface. That class then &#xA; * implements the &lt;code>run&lt;/code> method. An instance of the class can &#xA; * then be allocated, passed as an argument when creating &#xA; * &lt;code>Thread&lt;/code>, and started. The same example in this other &#xA; * style looks like the following: &#xA; * &lt;p>&lt;hr>&lt;blockquote>&lt;pre>&#xA; *     class PrimeRun implements Runnable {&#xA; *         long minPrime;&#xA; *         PrimeRun(long minPrime) {&#xA; *             this.minPrime = minPrime;&#xA; *         }&#xA; * &#xA; *         public void run() {&#xA; *             // compute primes larger than minPrime&#xA; *             &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&#xA; *         }&#xA; *     }&#xA; * &lt;/pre>&lt;/blockquote>&lt;hr>&#xA; * &lt;p>&#xA; * The following code would then create a thread and start it running: &#xA; * &lt;p>&lt;blockquote>&lt;pre>&#xA; *     PrimeRun p = new PrimeRun(143);&#xA; *     new Thread(p).start();&#xA; * &lt;/pre>&lt;/blockquote>&#xA; * &lt;p>&#xA; * Every thread has a name for identification purposes. More than &#xA; * one thread may have the same name. If a name is not specified when &#xA; * a thread is created, a new name is generated for it. &#xA; *&#xA; * @author  unascribed&#xA; * @version 1.156, 03/22/06&#xA; * @see     java.lang.Runnable&#xA; * @see     java.lang.Runtime#exit(int)&#xA; * @see     java.lang.Thread#run()&#xA; * @see     java.lang.Thread#stop()&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Runnable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
