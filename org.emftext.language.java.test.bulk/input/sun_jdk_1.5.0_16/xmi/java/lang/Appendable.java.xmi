<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Appendable.java">
  <comments>/*&#xA; * @(#)Appendable.java&#x9;1.3 04/07/16&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Appendable">
    <members xsi:type="members:InterfaceMethod" name="append">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Appends the specified character sequence to this &lt;tt>Appendable&lt;/tt>.&#xA;     *&#xA;     * &lt;p> Depending on which class implements the character sequence&#xA;     * &lt;tt>csq&lt;/tt>, the entire sequence may not be appended.  For&#xA;     * instance, if &lt;tt>csq&lt;/tt> is a {@link java.nio.CharBuffer} then&#xA;     * the subsequence to append is defined by the buffer's position and limit.&#xA;     *&#xA;     * @param  csq&#xA;     *         The character sequence to append.  If &lt;tt>csq&lt;/tt> is&#xA;     *         &lt;tt>null&lt;/tt>, then the four characters &lt;tt>&quot;null&quot;&lt;/tt> are&#xA;     *         appended to this Appendable.&#xA;     *&#xA;     * @return  A reference to this &lt;tt>Appendable&lt;/tt>&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If an I/O error occurs&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CharSequence.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="append">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Appends a subsequence of the specified character sequence to this&#xA;     * &lt;tt>Appendable&lt;/tt>.&#xA;     *&#xA;     * &lt;p> An invocation of this method of the form &lt;tt>out.append(csq, start,&#xA;     * end)&lt;/tt> when &lt;tt>csq&lt;/tt> is not &lt;tt>null&lt;/tt>, behaves in&#xA;     * exactly the same way as the invocation&#xA;     *&#xA;     * &lt;pre>&#xA;     *     out.append(csq.subSequence(start, end)) &lt;/pre>&#xA;     *&#xA;     * @param  csq&#xA;     *         The character sequence from which a subsequence will be&#xA;     *         appended.  If &lt;tt>csq&lt;/tt> is &lt;tt>null&lt;/tt>, then characters&#xA;     *         will be appended as if &lt;tt>csq&lt;/tt> contained the four&#xA;     *         characters &lt;tt>&quot;null&quot;&lt;/tt>.&#xA;     *&#xA;     * @param  start&#xA;     *         The index of the first character in the subsequence&#xA;     *&#xA;     * @param  end&#xA;     *         The index of the character following the last character in the&#xA;     *         subsequence&#xA;     *&#xA;     * @return  A reference to this &lt;tt>Appendable&lt;/tt>&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          If &lt;tt>start&lt;/tt> or &lt;tt>end&lt;/tt> are negative, &lt;tt>start&lt;/tt>&#xA;     *          is greater than &lt;tt>end&lt;/tt>, or &lt;tt>end&lt;/tt> is greater than&#xA;     *          &lt;tt>csq.length()&lt;/tt>&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If an I/O error occurs&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CharSequence.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="end">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="append">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Appends the specified character to this &lt;tt>Appendable&lt;/tt>.&#xA;     *&#xA;     * @param  c&#xA;     *         The character to append&#xA;     *&#xA;     * @return  A reference to this &lt;tt>Appendable&lt;/tt>&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If an I/O error occurs&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object to which &lt;tt>char&lt;/tt> sequences and values can be appended.  The&#xA; * &lt;tt>Appendable&lt;/tt> interface must be implemented by any class whose&#xA; * instances are intended to receive formatted output from a {@link&#xA; * java.util.Formatter}.&#xA; *&#xA; * &lt;p> The characters to be appended should be valid Unicode characters as&#xA; * described in &lt;a href=&quot;Character.html#unicode&quot;>Unicode Character&#xA; * Representation&lt;/a>.  Note that supplementary characters may be composed of&#xA; * multiple 16-bit &lt;tt>char&lt;/tt> values.&#xA; *&#xA; * &lt;p> Appendables are not necessarily safe for multithreaded access.  Thread&#xA; * safety is the responsibility of classes that extend and implement this&#xA; * interface.&#xA; *&#xA; * &lt;p> Since this interface may be implemented by existing classes&#xA; * with different styles of error handling there is no guarantee that&#xA; * errors will be propagated to the invoker.&#xA; *&#xA; * @version &#x9;1.3, 07/16/04&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
