<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Annotation.java">
  <comments>/*&#xA; * @(#)Annotation.java&#x9;1.9 04/06/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>annotation</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Annotation">
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if the specified object represents an annotation&#xA;     * that is logically equivalent to this one.  In other words,&#xA;     * returns true if the specified object is an instance of the same&#xA;     * annotation type as this instance, all of whose members are equal&#xA;     * to the corresponding member of this annotation, as defined below:&#xA;     * &lt;ul>&#xA;     *    &lt;li>Two corresponding primitive typed members whose values are&#xA;     *    &lt;tt>x&lt;/tt> and &lt;tt>y&lt;/tt> are considered equal if &lt;tt>x == y&lt;/tt>,&#xA;     *    unless their type is &lt;tt>float&lt;/tt> or &lt;tt>double&lt;/tt>.&#xA;     *&#xA;     *    &lt;li>Two corresponding &lt;tt>float&lt;/tt> members whose values&#xA;     *    are &lt;tt>x&lt;/tt> and &lt;tt>y&lt;/tt> are considered equal if&#xA;     *    &lt;tt>Float.valueOf(x).equals(Float.valueOf(y))&lt;/tt>.&#xA;     *    (Unlike the &lt;tt>==&lt;/tt> operator, NaN is considered equal&#xA;     *    to itself, and &lt;tt>0.0f&lt;/tt> unequal to &lt;tt>-0.0f&lt;/tt>.) &#xA;     *&#xA;     *    &lt;li>Two corresponding &lt;tt>double&lt;/tt> members whose values&#xA;     *    are &lt;tt>x&lt;/tt> and &lt;tt>y&lt;/tt> are considered equal if&#xA;     *    &lt;tt>Double.valueOf(x).equals(Double.valueOf(y))&lt;/tt>.&#xA;     *    (Unlike the &lt;tt>==&lt;/tt> operator, NaN is considered equal&#xA;     *    to itself, and &lt;tt>0.0&lt;/tt> unequal to &lt;tt>-0.0&lt;/tt>.)&#xA;     *&#xA;     *    &lt;li>Two corresponding &lt;tt>String&lt;/tt>, &lt;tt>Class&lt;/tt>, enum, or&#xA;     *    annotation typed members whose values are &lt;tt>x&lt;/tt> and &lt;tt>y&lt;/tt>&#xA;     *    are considered equal if &lt;tt>x.equals(y)&lt;/tt>.  (Note that this&#xA;     *    definition is recursive for annotation typed members.)&#xA;     *&#xA;     *    &lt;li>Two corresponding array typed members &lt;tt>x&lt;/tt> and &lt;tt>y&lt;/tt>&#xA;     *    are considered equal if &lt;tt>Arrays.equals(x, y)&lt;/tt>, for the&#xA;     *    appropriate overloading of {@link java.util.Arrays#equals}.&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return true if the specified object represents an annotation&#xA;     *     that is logically equivalent to this one, otherwise false&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the hash code of this annotation, as defined below:&#xA;     *&#xA;     * &lt;p>The hash code of an annotation is the sum of the hash codes&#xA;     * of its members (including those with default values), as defined&#xA;     * below:&#xA;     *&#xA;     * The hash code of an annotation member is (127 times the hash code&#xA;     * of the member-name as computed by {@link String#hashCode()}) XOR&#xA;     * the hash code of the member-value, as defined below:&#xA;     *&#xA;     * &lt;p>The hash code of a member-value depends on its type:&#xA;     * &lt;ul>&#xA;     * &lt;li>The hash code of a primitive value &lt;tt>&lt;i>v&lt;/i>&lt;/tt> is equal to&#xA;     *     &lt;tt>&lt;i>WrapperType&lt;/i>.valueOf(&lt;i>v&lt;/i>).hashCode()&lt;/tt>, where&#xA;     *     &lt;tt>&lt;i>WrapperType&lt;/i>&lt;/tt> is the wrapper type corresponding&#xA;     *     to the primitive type of &lt;tt>&lt;i>v&lt;/i>&lt;/tt> ({@link Byte},&#xA;     *     {@link Character}, {@link Double}, {@link Float}, {@link Integer},&#xA;     *     {@link Long}, {@link Short}, or {@link Boolean}).&#xA;     *&#xA;     * &lt;li>The hash code of a string, enum, class, or annotation member-value&#xA;     I     &lt;tt>&lt;i>v&lt;/i>&lt;/tt> is computed as by calling&#xA;     *     &lt;tt>&lt;i>v&lt;/i>.hashCode()&lt;/tt>.  (In the case of annotation&#xA;     *     member values, this is a recursive definition.)&#xA;     *&#xA;     * &lt;li>The hash code of an array member-value is computed by calling&#xA;     *     the appropriate overloading of&#xA;     *     {@link java.util.Arrays#hashCode(long[]) Arrays.hashCode}&#xA;     *     on the value.  (There is one overloading for each primitive&#xA;     *     type, and one for object reference types.)&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return the hash code of this annotation&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a string representation of this annotation.  The details&#xA;     * of the representation are implementation-dependent, but the following&#xA;     * may be regarded as typical:&#xA;     * &lt;pre>&#xA;     *   &amp;#064;com.acme.util.Name(first=Alfred, middle=E., last=Neuman)&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @return a string representation of this annotation&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="annotationType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the annotation type of this annotation.&#xA;     */</comments>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The common interface extended by all annotation types.  Note that an&#xA; * interface that manually extends this one does &lt;i>not&lt;/i> define&#xA; * an annotation type.  Also note that this interface does not itself&#xA; * define an annotation type.&#xA; *&#xA; * @author  Josh Bloch&#xA; * @since   1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
