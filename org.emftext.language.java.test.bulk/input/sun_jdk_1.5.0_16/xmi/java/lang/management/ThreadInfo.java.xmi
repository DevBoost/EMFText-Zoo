<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ThreadInfo.java">
  <comments>/*&#xA; * @(#)ThreadInfo.java&#x9;1.16 04/04/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>management</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>openmbean</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ThreadInfo">
    <members xsi:type="members:Field" name="threadName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="threadId">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="blockedTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="blockedCount">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="waitedTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="waitedCount">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="lockName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="lockOwnerId">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="lockOwnerName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="inNative">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="suspended">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="threadState">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>Thread</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Enumeration" href="../Thread$State.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="stackTrace">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../StackTraceElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="ThreadInfo">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../Thread.class.xmi#//@classifiers.0/@members.85"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../Thread.class.xmi#//@classifiers.0/@members.63"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.57"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.55"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.56"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.5"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.6"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.7"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.44"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../Object.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="literals:CharacterLiteral" value="64"/>
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Integer.class.xmi#//@classifiers.0/@members.11"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../System.class.xmi#//@classifiers.0/@members.21"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../System.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../Integer.class.xmi#//@classifiers.0"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:EmptyStatement"/>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../Thread.class.xmi#//@classifiers.0/@members.85"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.3">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../Thread.class.xmi#//@classifiers.0/@members.63"/>
                </next>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.8"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Thread.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lockObj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lockOwner">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Thread.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="blockedCount">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="blockedTime">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="waitedCount">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="waitedTime">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stackTrace">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../StackTraceElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Constructor of ThreadInfo created by the JVM&#xA;     *&#xA;     * @param t             Thread &#xA;     * @param state         Thread state &#xA;     * @param lockObj       Object on which the thread is blocked &#xA;     *                      to enter or waiting &#xA;     * @param lockOwner     the thread holding the lock &#xA;     * @param blockedCount  Number of times blocked to enter a lock&#xA;     * @param blockedTime   Approx time blocked to enter a lock&#xA;     * @param waitedCount   Number of times waited on a lock&#xA;     * @param waitedTime    Approx time waited on a lock&#xA;     * @param stackTrace    Thread stack trace&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ThreadInfo">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.40"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.27"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.28"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.30"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.31"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.32"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.34"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.35"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.36"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.29"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.37"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.38"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.39"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * Constructs a &lt;tt>ThreadInfo&lt;/tt> object from a&#xA;     * {@link CompositeData CompositeData}.  &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getThreadId">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the ID of the thread associated with this &lt;tt>ThreadInfo&lt;/tt>.  &#xA;     *&#xA;     * @return the ID of the associated thread.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getThreadName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the thread associated with this &lt;tt>ThreadInfo&lt;/tt>.&#xA;     *&#xA;     * @return the name of the associated thread.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getThreadState">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>Thread</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Enumeration" href="../Thread$State.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the state of the thread associated with this &lt;tt>ThreadInfo&lt;/tt>.&#xA;     *&#xA;     * @return &lt;tt>Thread.State&lt;/tt> of the associated thread.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBlockedTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the approximate accumulated elapsed time (in milliseconds)&#xA;     * that the thread associated with this &lt;tt>ThreadInfo&lt;/tt> &#xA;     * has blocked to enter or reenter a monitor&#xA;     * since thread contention monitoring is enabled.&#xA;     * I.e. the total accumulated time the thread has been in the&#xA;     * {@link java.lang.Thread.State#BLOCKED BLOCKED} state since thread&#xA;     * contention monitoring was last enabled.&#xA;     * This method returns &lt;tt>-1&lt;/tt> if thread contention monitoring&#xA;     * is disabled.&#xA;     *&#xA;     * &lt;p>The Java virtual machine may measure the time with a high&#xA;     * resolution timer.  This statistic is reset when&#xA;     * the thread contention monitoring is reenabled.&#xA;     *&#xA;     * @return the approximate accumulated elapsed time in milliseconds&#xA;     * that a thread entered the &lt;tt>BLOCKED&lt;/tt> state;&#xA;     * &lt;tt>-1&lt;/tt> if thread contention monitoring is disabled.&#xA;     *&#xA;     * @throws java.lang.UnsupportedOperationException if the Java &#xA;     * virtual machine does not support this operation.&#xA;     *&#xA;     * @see ThreadMXBean#isThreadContentionMonitoringSupported&#xA;     * @see ThreadMXBean#setThreadContentionMonitoringEnabled&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBlockedCount">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the total number of times that &#xA;     * the thread associated with this &lt;tt>ThreadInfo&lt;/tt> &#xA;     * blocked to enter or reenter a monitor. &#xA;     * I.e. the number of times a thread has been in the&#xA;     * {@link java.lang.Thread.State#BLOCKED BLOCKED} state. &#xA;     *&#xA;     * @return the total number of times that the thread &#xA;     * entered the &lt;tt>BLOCKED&lt;/tt> state.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getWaitedTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the approximate accumulated elapsed time (in milliseconds)&#xA;     * that the thread associated with this &lt;tt>ThreadInfo&lt;/tt> &#xA;     * has waited for notification&#xA;     * since thread contention monitoring is enabled.&#xA;     * I.e. the total accumulated time the thread has been in the&#xA;     * {@link java.lang.Thread.State#WAITING WAITING}&#xA;     * or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state&#xA;     * since thread contention monitoring is enabled.&#xA;     * This method returns &lt;tt>-1&lt;/tt> if thread contention monitoring&#xA;     * is disabled.&#xA;     *&#xA;     * &lt;p>The Java virtual machine may measure the time with a high&#xA;     * resolution timer.  This statistic is reset when&#xA;     * the thread contention monitoring is reenabled.&#xA;     * &#xA;     * @return the approximate accumulated elapsed time in milliseconds &#xA;     * that a thread has been in the &lt;tt>WAITING&lt;/tt> or&#xA;     * &lt;tt>TIMED_WAITING&lt;/tt> state;&#xA;     * &lt;tt>-1&lt;/tt> if thread contention monitoring is disabled.&#xA;     *&#xA;     * @throws java.lang.UnsupportedOperationException if the Java &#xA;     * virtual machine does not support this operation.&#xA;     *&#xA;     * @see ThreadMXBean#isThreadContentionMonitoringSupported&#xA;     * @see ThreadMXBean#setThreadContentionMonitoringEnabled&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getWaitedCount">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the total number of times that &#xA;     * the thread associated with this &lt;tt>ThreadInfo&lt;/tt> &#xA;     * waited for notification.&#xA;     * I.e. the number of times that a thread has been&#xA;     * in the {@link java.lang.Thread.State#WAITING WAITING}&#xA;     * or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state.&#xA;     *&#xA;     * @return the total number of times that the thread &#xA;     * was in the &lt;tt>WAITING&lt;/tt> or &lt;tt>TIMED_WAITING&lt;/tt> state.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLockName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the string representation of the monitor lock that&#xA;     * the thread associated with this &lt;tt>ThreadInfo&lt;/tt> &#xA;     * is blocked to enter or waiting to be notified through &#xA;     * the {@link Object#wait Object.wait} method.  &#xA;     * The returned string representation of a monitor lock consists of&#xA;     * the name of the class of which the object is an instance, the&#xA;     * at-sign character `@', and the unsigned hexadecimal representation &#xA;     * of the &lt;em>identity&lt;/em> hash code of the object. &#xA;     * The returned string may not &#xA;     * be unique depending on the implementation of the &#xA;     * {@link System#identityHashCode} method.&#xA;     * This method returns a string equals to the value of: &#xA;     * &lt;blockquote>&#xA;     * &lt;pre>&#xA;     * lock.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(lock))&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     * where &lt;tt>lock&lt;/tt> is the monitor lock object.&#xA;     *&#xA;     * &lt;p>If the thread is not blocking to enter on any monitor object,&#xA;     * or is not waiting on a monitor object for notification in a &#xA;     * &lt;tt>Object.wait&lt;/tt> call, &#xA;     * this method returns &lt;tt>null&lt;/tt>. &#xA;     *&#xA;     * @return the string representation of the monitor lock that &#xA;     * the thread is blocking to enter or waiting to be notified through  &#xA;     * the &lt;tt>Object.wait&lt;/tt> method if any;&#xA;     * &lt;tt>null&lt;/tt> otherwise.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLockOwnerId">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the ID of the thread which holds the monitor lock of an object &#xA;     * on which the thread associated with this &lt;tt>ThreadInfo&lt;/tt>&#xA;     * is blocking.&#xA;     * This method will return &lt;tt>-1&lt;/tt> if this thread is not blocked&#xA;     * or waiting on any monitor, or if the monitor lock is not held&#xA;     * by any thread.&#xA;     *&#xA;     * @return the thread ID of the owner thread of the monitor lock of the&#xA;     * object this thread is blocking on;&#xA;     * &lt;tt>-1&lt;/tt> if this thread is not blocked&#xA;     * or waiting on any monitor, or if the monitor lock is not held&#xA;     * by any thread.&#xA;     *&#xA;     * @see #getLockName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLockOwnerName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the thread which holds the monitor lock of an object &#xA;     * on which the thread associated with this &lt;tt>ThreadInfo&lt;/tt>&#xA;     * is blocking.&#xA;     * This method will return &lt;tt>null&lt;/tt> if this thread is not blocked&#xA;     * or waiting on any monitor, or if the monitor lock is not held&#xA;     * by any thread.&#xA;     *&#xA;     * @return the name of the thread that holds the monitor lock of the object&#xA;     * this thread is blocking on;&#xA;     * &lt;tt>null&lt;/tt> if this thread is not blocked&#xA;     * or waiting on any monitor, or if the monitor lock is not held&#xA;     * by any thread.&#xA;     *&#xA;     * @see #getLockName&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStackTrace">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../StackTraceElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the stack trace of the thread &#xA;     * associated with this &lt;tt>ThreadInfo&lt;/tt>.&#xA;     * If no stack trace was requested for this thread info, this method&#xA;     * will return a zero-length array.&#xA;     * If the returned array is of non-zero length then the first element of&#xA;     * the array represents the top of the stack, which is the most recent&#xA;     * method invocation in the sequence.  The last element of the array&#xA;     * represents the bottom of the stack, which is the least recent method&#xA;     * invocation in the sequence.&#xA;     *&#xA;     * &lt;p>Some Java virtual machines may, under some circumstances, omit one&#xA;     * or more stack frames from the stack trace.  In the extreme case,&#xA;     * a virtual machine that has no stack trace information concerning&#xA;     * the thread associated with this &lt;tt>ThreadInfo&lt;/tt> &#xA;     * is permitted to return a zero-length array from this method.&#xA;     *&#xA;     * @return an array of &lt;tt>StackTraceElement&lt;/tt> objects of the thread.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isSuspended">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the thread associated with this &lt;tt>ThreadInfo&lt;/tt>&#xA;     * is suspended.  This method returns &lt;tt>true&lt;/tt> if&#xA;     * {@link Thread#suspend} has been called.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if the thread is suspended;&#xA;     *         &lt;tt>false&lt;/tt> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isInNative">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the thread associated with this &lt;tt>ThreadInfo&lt;/tt>&#xA;     * is executing native code via the Java Native Interface (JNI).&#xA;     * The JNI native code does not include&#xA;     * the virtual machine support code or the compiled native&#xA;     * code generated by the virtual machine.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if the thread is executing native code;&#xA;     *         &lt;tt>false&lt;/tt> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of this thread info.&#xA;     *&#xA;     * @return a string representation of this thread info.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:StringReference" value="Thread "/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
          <children xsi:type="references:StringReference" value=" (Id = "/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15"/>
          <children xsi:type="references:StringReference" value=") "/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
          <children xsi:type="references:StringReference" value=" "/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="from">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>ThreadInfo&lt;/tt> object represented by the&#xA;     * given &lt;tt>CompositeData&lt;/tt>.&#xA;     * The given &lt;tt>CompositeData&lt;/tt> must contain the following attributes:&#xA;     * &lt;blockquote>&#xA;     * &lt;table border>&#xA;     * &lt;tr>&#xA;     *   &lt;th align=left>Attribute Name&lt;/th>&#xA;     *   &lt;th align=left>Type&lt;/th>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>threadId&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>threadName&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>threadState&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>suspended&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Boolean&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>inNative&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Boolean&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>blockedCount&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>blockedTime&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>waitedCount&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>waitedTime&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>lockName&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>lockOwnerId&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>lockOwnerName&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>stackTrace&lt;/td>&#xA;     *   &lt;td>&lt;tt>javax.management.openmbean.CompositeData[]&lt;/tt>&#xA;     *       &lt;p>&#xA;     *       Each element is a &lt;tt>CompositeData&lt;/tt> representing&#xA;     *       StackTraceElement containing the following attributes:&#xA;     *       &lt;blockquote>&#xA;     *       &lt;table cellspacing=1 cellpadding=0>&#xA;     *       &lt;tr>&#xA;     *         &lt;th align=left>Attribute Name&lt;/th>&#xA;     *         &lt;th align=left>Type&lt;/th>&#xA;     *       &lt;/tr>&#xA;     *       &lt;tr>&#xA;     *         &lt;td>className&lt;/td>&#xA;     *         &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     *       &lt;/tr>&#xA;     *       &lt;tr>&#xA;     *         &lt;td>methodName&lt;/td>&#xA;     *         &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     *       &lt;/tr>&#xA;     *       &lt;tr>&#xA;     *         &lt;td>fileName&lt;/td>&#xA;     *         &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     *       &lt;/tr>&#xA;     *       &lt;tr>&#xA;     *         &lt;td>lineNumber&lt;/td>&#xA;     *         &lt;td>&lt;tt>java.lang.Integer&lt;/tt>&lt;/td>&#xA;     *       &lt;/tr>&#xA;     *       &lt;tr>&#xA;     *         &lt;td>nativeMethod&lt;/td>&#xA;     *         &lt;td>&lt;tt>java.lang.Boolean&lt;/tt>&lt;/td>&#xA;     *       &lt;/tr>&#xA;     *       &lt;/table>&#xA;     *       &lt;/blockquote>&#xA;     *   &lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;/table>&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * @param cd &lt;tt>CompositeData&lt;/tt> representing a &lt;tt>ThreadInfo&lt;/tt>&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;tt>cd&lt;/tt> does not&#xA;     *   represent a &lt;tt>ThreadInfo&lt;/tt> with the attributes described&#xA;     *   above.&#xA;&#xA;     * @return a &lt;tt>ThreadInfo&lt;/tt> object represented&#xA;     *         by &lt;tt>cd&lt;/tt> if &lt;tt>cd&lt;/tt> is not &lt;tt>null&lt;/tt>;&#xA;     *         &lt;tt>null&lt;/tt> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0/@members.24"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ThreadInfoCompositeData.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:Field" name="NO_STACK_TRACE">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../StackTraceElement.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../StackTraceElement.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Thread information. &lt;tt>ThreadInfo&lt;/tt> contains the information &#xA; * about a thread including:&#xA; * &lt;h4>General thread information&lt;/h4>&#xA; * &lt;ul>&#xA; *   &lt;li>Thread ID.&lt;/li>&#xA; *   &lt;li>Name of the thread.&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;h4>Execution information&lt;/h4>&#xA; * &lt;ul>&#xA; *   &lt;li>Thread state.&lt;/tt>&#xA; *   &lt;li>The object upon which the thread is blocked waiting to enter &#xA; *       a synchronization block or waiting to be notified in&#xA; *       a {@link Object#wait Object.wait} call.&lt;/li>&#xA; *   &lt;li>The ID of the thread that owns the object&#xA; *       that the thread is blocked.&lt;/li>&#xA; *   &lt;li>Stack trace of the thread.&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;h4>Synchronization statistics&lt;/h4>&#xA; * &lt;ul>&#xA; *   &lt;li>The number of times that the thread has blocked for &#xA; *       synchronization or waited for notification.&lt;/li>&#xA; *   &lt;li>The accumulated elapsed time that the thread has blocked&#xA; *       for synchronization or waited for notification&#xA; *       since thread contention monitoring&#xA; *       was enabled. Some Java virtual machine implementation &#xA; *       may not support this.  The &#xA; *       {@link ThreadMXBean#isThreadContentionMonitoringSupported()}&#xA; *       method can be used to determine if a Java virtual machine&#xA; *       supports this.&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>This thread information class is designed for use in monitoring of&#xA; * the system, not for synchronization control.&#xA; *&#xA; * &lt;h4>MXBean Mapping&lt;/h4>&#xA; * &lt;tt>ThreadInfo&lt;/tt> is mapped to a {@link CompositeData CompositeData}&#xA; * with attributes as specified in &#xA; * the {@link #from from} method.&#xA; *&#xA; * @see ThreadMXBean#isThreadContentionMonitoringSupported&#xA; *&#xA; * @author  Mandy Chung&#xA; * @version 1.16, 04/18/04 &#xA; * @since   1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
