<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="MemoryMXBean.java">
  <comments>/*&#xA; * @(#)MemoryMXBean.java&#x9;1.16 06/03/08&#xA; *&#xA; * Copyright 2006 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>management</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>openmbean</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="MemoryMXBean">
    <members xsi:type="members:InterfaceMethod" name="getObjectPendingFinalizationCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the approximate number of objects for which &#xA;     * finalization is pending.&#xA;     *&#xA;     * @return the approximate number objects for which finalization&#xA;     * is pending.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHeapMemoryUsage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MemoryUsage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the current memory usage of the heap that&#xA;     * is used for object allocation.  The heap consists &#xA;     * of one or more memory pools.  The &lt;tt>used&lt;/tt>&#xA;     * and &lt;tt>committed&lt;/tt> size of the returned memory&#xA;     * usage is the sum of those values of all heap memory pools&#xA;     * whereas the &lt;tt>init&lt;/tt> and &lt;tt>max&lt;/tt> size of the&#xA;     * returned memory usage represents the setting of the heap&#xA;     * memory which may not be the sum of those of all heap&#xA;     * memory pools.&#xA;     * &lt;p>&#xA;     * The amount of used memory in the returned memory usage&#xA;     * is the amount of memory occupied by both live objects&#xA;     * and garbage objects that have not been collected, if any.&#xA;     *&#xA;     * &lt;p>&#xA;     * &lt;b>MBeanServer access&lt;/b>:&lt;br>&#xA;     * The mapped type of &lt;tt>MemoryUsage&lt;/tt> is&#xA;     * &lt;tt>CompositeData&lt;/tt> with attributes as specified in &#xA;     * {@link MemoryUsage#from MemoryUsage}.&#xA;     *&#xA;     * @return a {@link MemoryUsage} object representing &#xA;     * the heap memory usage.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNonHeapMemoryUsage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MemoryUsage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the current memory usage of non-heap memory that&#xA;     * is used by the Java virtual machine.&#xA;     * The non-heap memory consists of one or more memory pools.  &#xA;     * The &lt;tt>used&lt;/tt> and &lt;tt>committed&lt;/tt> size of the &#xA;     * returned memory usage is the sum of those values of &#xA;     * all non-heap memory pools whereas the &lt;tt>init&lt;/tt> &#xA;     * and &lt;tt>max&lt;/tt> size of the returned memory usage &#xA;     * represents the setting of the non-heap&#xA;     * memory which may not be the sum of those of all non-heap&#xA;     * memory pools.&#xA;     *&#xA;     * &lt;p>&#xA;     * &lt;b>MBeanServer access&lt;/b>:&lt;br>&#xA;     * The mapped type of &lt;tt>MemoryUsage&lt;/tt> is&#xA;     * &lt;tt>CompositeData&lt;/tt> with attributes as specified in &#xA;     * {@link MemoryUsage#from MemoryUsage}.&#xA;     *&#xA;     * @return a {@link MemoryUsage} object representing &#xA;     * the non-heap memory usage.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isVerbose">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if verbose output for the memory system is enabled.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if verbose output for the memory &#xA;     * system is enabled; &lt;tt>false&lt;/tt> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setVerbose">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Enables or disables verbose output for the memory&#xA;     * system.  The verbose output information and the output stream&#xA;     * to which the verbose information is emitted are implementation&#xA;     * dependent.  Typically, a Java virtual machine implementation&#xA;     * prints a message whenever it frees memory at garbage collection. &#xA;     *&#xA;     * &lt;p>&#xA;     * Each invocation of this method enables or disables verbose&#xA;     * output globally.&#xA;     *&#xA;     * @param value &lt;tt>true&lt;/tt> to enable verbose output;&#xA;     *              &lt;tt>false&lt;/tt> to disable.&#xA;     *&#xA;     * @exception  java.lang.SecurityException if a security manager&#xA;     *             exists and the caller does not have&#xA;     *             ManagementPermission(&quot;control&quot;).&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="gc">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Runs the garbage collector.  &#xA;     * The call &lt;code>gc()&lt;/code> is effectively equivalent to the&#xA;     * call:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * System.gc()&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @see     java.lang.System#gc()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The management interface for the memory system of&#xA; * the Java virtual machine.&#xA; *&#xA; * &lt;p> A Java virtual machine has a single instance of the implementation&#xA; * class of this interface.  This instance implementing this interface is&#xA; * an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;>MXBean&lt;/a>&#xA; * that can be obtained by calling&#xA; * the {@link ManagementFactory#getMemoryMXBean} method or&#xA; * from the {@link ManagementFactory#getPlatformMBeanServer&#xA; * platform &lt;tt>MBeanServer&lt;/tt>} method.&#xA; *&#xA; * &lt;p>The &lt;tt>ObjectName&lt;/tt> for uniquely identifying the MXBean for&#xA; * the memory system within an MBeanServer is:&#xA; * &lt;blockquote>&#xA; *    {@link ManagementFactory#MEMORY_MXBEAN_NAME &#xA; *           &lt;tt>java.lang:type=Memory&lt;/tt>}&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;h4> Memory &lt;/h4>&#xA; * The memory system of the Java virtual machine manages &#xA; * the following kinds of memory:&#xA; *&#xA; * &lt;h4> 1. Heap &lt;/h4>&#xA; * The Java virtual machine has a &lt;i>heap&lt;/i> that is the runtime&#xA; * data area from which memory for all class instances and arrays &#xA; * are allocated.  It is created at the Java virtual machine start-up.&#xA; * Heap memory for objects is reclaimed by an automatic memory management&#xA; * system which is known as a &lt;i>garbage collector&lt;/i>.&#xA; *&#xA; * &lt;p>The heap may be of a fixed size or may be expanded and shrunk.&#xA; * The memory for the heap does not need to be contiguous.&#xA; *&#xA; * &lt;h4> 2. Non-Heap Memory&lt;/h4>&#xA; * The Java virtual machine manages memory other than the heap&#xA; * (referred as &lt;i>non-heap memory&lt;/i>).&#xA; * &#xA; * &lt;p> The Java virtual machine has a &lt;i>method area&lt;/i> that is shared&#xA; * among all threads.&#xA; * The method area belongs to non-heap memory.  It stores per-class structures&#xA; * such as a runtime constant pool, field and method data, and the code for&#xA; * methods and constructors.  It is created at the Java virtual machine&#xA; * start-up.&#xA; * &#xA; * &lt;p> The method area is logically part of the heap but a Java virtual&#xA; * machine implementation may choose not to either garbage collect&#xA; * or compact it.  Similar to the heap, the method area may be of a&#xA; * fixed size or may be expanded and shrunk.  The memory for the&#xA; * method area does not need to be contiguous.&#xA; *&#xA; * &lt;p>In addition to the method area, a Java virtual machine&#xA; * implementation may require memory for internal processing or &#xA; * optimization which also belongs to non-heap memory.&#xA; * For example, the JIT compiler requires memory for storing the native&#xA; * machine code translated from the Java virtual machine code for&#xA; * high performance.&#xA; *&#xA; * &lt;h4>Memory Pools and Memory Managers&lt;/h4>&#xA; * {@link MemoryPoolMXBean Memory pools} and &#xA; * {@link MemoryManagerMXBean memory managers} are the abstract entities&#xA; * that monitor and manage the memory system&#xA; * of the Java virtual machine.&#xA; *&#xA; * &lt;p>A memory pool represents a memory area that the Java virtual machine &#xA; * manages.  The Java virtual machine has at least one memory pool&#xA; * and it may create or remove memory pools during execution.  &#xA; * A memory pool can belong to either the heap or the non-heap memory. &#xA; * &#xA; * &lt;p>A memory manager is responsible for managing one or more memory pools.&#xA; * The garbage collector is one type of memory manager responsible &#xA; * for reclaiming memory occupied by unreachable objects.  A Java virtual&#xA; * machine may have one or more memory managers.   It may&#xA; * add or remove memory managers during execution.&#xA; * A memory pool can be managed by more than one memory manager.&#xA; *&#xA; * &lt;h4>Memory Usage Monitoring&lt;/h4>&#xA; *&#xA; * Memory usage is a very important monitoring attribute for the memory system.&#xA; * The memory usage, for example, could indicate:&#xA; * &lt;ul>&#xA; *   &lt;li>the memory usage of an application,&lt;/li>&#xA; *   &lt;li>the workload being imposed on the automatic memory management system,&lt;/li>&#xA; *   &lt;li>potential memory leakage.&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>&#xA; * The memory usage can be monitored in three ways:&#xA; * &lt;ul>&#xA; *   &lt;li>Polling&lt;/li>&#xA; *   &lt;li>Usage Threshold Notification&lt;/li>&#xA; *   &lt;li>Collection Usage Threshold Notification&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * Details are specified in the {@link MemoryPoolMXBean} interface.&#xA; *&#xA; * &lt;p>The memory usage monitoring mechanism is intended for load-balancing&#xA; * or workload distribution use.  For example, an application would stop&#xA; * receiving any new workload when its memory usage exceeds a&#xA; * certain threshold. It is not intended for an application to detect&#xA; * and recover from a low memory condition.&#xA; *&#xA; * &lt;h4>Notifications&lt;/h4>&#xA; *&#xA; * &lt;p>This &lt;tt>MemoryMXBean&lt;/tt> is a &#xA; * {@link javax.management.NotificationEmitter NotificationEmitter}&#xA; * that emits two types of memory {@link javax.management.Notification &#xA; * notifications} if any one of the memory pools&#xA; * supports a &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;>usage threshold&lt;/a>&#xA; * or a &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;>collection usage&#xA; * threshold&lt;/a> which can be determined by calling the&#xA; * {@link MemoryPoolMXBean#isUsageThresholdSupported} and&#xA; * {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} methods. &#xA; * &lt;ul>&#xA; *   &lt;li>{@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED&#xA; *       usage threshold exceeded notification} - for notifying that&#xA; *       the memory usage of a memory pool is increased and has reached&#xA; *       or exceeded its&#xA; *       &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;> usage threshold&lt;/a> value.&#xA; *       &lt;/li>&#xA; *   &lt;li>{@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&#xA; *       collection usage threshold exceeded notification} - for notifying that&#xA; *       the memory usage of a memory pool is greater than or equal to its&#xA; *       &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;>&#xA; *       collection usage threshold&lt;/a> after the Java virtual machine&#xA; *       has expended effort in recycling unused objects in that&#xA; *       memory pool.&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>&#xA; * The notification emitted is a {@link javax.management.Notification}&#xA; * instance whose {@link javax.management.Notification#setUserData &#xA; * user data} is set to a {@link CompositeData CompositeData} &#xA; * that represents a {@link MemoryNotificationInfo} object&#xA; * containing information about the memory pool when the notification&#xA; * was constructed. The &lt;tt>CompositeData&lt;/tt> contains the attributes&#xA; * as described in {@link MemoryNotificationInfo#from &#xA; * MemoryNotificationInfo}.&#xA; *&#xA; * &lt;hr>&#xA; * &lt;h4>NotificationEmitter&lt;/h4>&#xA; * The &lt;tt>MemoryMXBean&lt;/tt> object returned by&#xA; * {@link ManagementFactory#getMemoryMXBean} implements&#xA; * the {@link javax.management.NotificationEmitter NotificationEmitter}&#xA; * interface that allows a listener to be registered within the&#xA; * &lt;tt>MemoryMXBean&lt;/tt> as a notification listener.  &#xA; * &#xA; * Below is an example code that registers a &lt;tt>MyListener&lt;/tt> to handle &#xA; * notification emitted by the &lt;tt>MemoryMXBean&lt;/tt>. &#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; * class MyListener implements javax.management.NotificationListener {&#xA; *     public void handleNotification(Notification notif, Object handback) {&#xA; *         // handle notification&#xA; *         ....&#xA; *     }&#xA; * }&#xA; *&#xA; * MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();&#xA; * NotificationEmitter emitter = (NotificationEmitter) mbean;&#xA; * MyListener listener = new MyListener();&#xA; * emitter.addNotificationListener(listener, null, null);&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * @see &lt;a href=&quot;../../../javax/management/package-summary.html&quot;>&#xA; *      JMX Specification.&lt;/a>&#xA; * @see &lt;a href=&quot;package-summary.html#examples&quot;>&#xA; *      Ways to Access MXBeans&lt;/a>&#xA; *&#xA; * @author  Mandy Chung&#xA; * @version 1.16, 03/08/06 &#xA; * @since   1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
