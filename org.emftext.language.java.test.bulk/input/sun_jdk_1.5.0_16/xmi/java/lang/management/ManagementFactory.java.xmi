<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ManagementFactory.java">
  <comments>/*&#xA; * @(#)ManagementFactory.java&#x9;1.19 04/05/17&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>management</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/NotificationEmitter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/management/MBeanServerFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/MBeanServerConnection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/management/MBeanServerPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/management/InstanceNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/management/MalformedObjectNameException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>openmbean</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>openmbean</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/management/openmbean/CompositeType.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>openmbean</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/TabularData.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../reflect/Proxy.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../reflect/InvocationHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../security/AccessController.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../security/Permission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/management/PlatformMXBeanInvocationHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ManagementFactory">
    <members xsi:type="members:Constructor" name="ManagementFactory">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// A class with only static fields and methods.</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:Field" name="CLASS_LOADING_MXBEAN_NAME">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=ClassLoading"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * String representation of the&#xA;     * &lt;tt>ObjectName&lt;/tt> for the {@link ClassLoadingMXBean}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="COMPILATION_MXBEAN_NAME">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=Compilation"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * String representation of the&#xA;     * &lt;tt>ObjectName&lt;/tt> for the {@link CompilationMXBean}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="MEMORY_MXBEAN_NAME">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=Memory"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * String representation of the&#xA;     * &lt;tt>ObjectName&lt;/tt> for the {@link MemoryMXBean}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="OPERATING_SYSTEM_MXBEAN_NAME">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=OperatingSystem"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * String representation of the&#xA;     * &lt;tt>ObjectName&lt;/tt> for the {@link OperatingSystemMXBean}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="RUNTIME_MXBEAN_NAME">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=Runtime"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * String representation of the&#xA;     * &lt;tt>ObjectName&lt;/tt> for the {@link RuntimeMXBean}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="THREAD_MXBEAN_NAME">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=Threading"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * String representation of the&#xA;     * &lt;tt>ObjectName&lt;/tt> for the {@link ThreadMXBean}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=GarbageCollector"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The domain name and the type key property in &#xA;     * the &lt;tt>ObjectName&lt;/tt> for a {@link GarbageCollectorMXBean}.&#xA;     * The unique &lt;tt>ObjectName&lt;/tt> for a &lt;tt>GarbageCollectorMXBean&lt;/tt>&#xA;     * can be formed by appending this string with &#xA;     * &quot;&lt;tt>,name=&lt;/tt>&lt;i>collector's name&lt;/i>&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=MemoryManager"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The domain name and the type key property in &#xA;     * the &lt;tt>ObjectName&lt;/tt> for a {@link MemoryManagerMXBean}. &#xA;     * The unique &lt;tt>ObjectName&lt;/tt> for a &lt;tt>MemoryManagerMXBean&lt;/tt>&#xA;     * can be formed by appending this string with&#xA;     * &quot;&lt;tt>,name=&lt;/tt>&lt;i>manager's name&lt;/i>&quot;.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="MEMORY_POOL_MXBEAN_DOMAIN_TYPE">
      <initialValue xsi:type="references:StringReference" value="java.lang:type=MemoryPool"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The domain name and the type key property in &#xA;     * the &lt;tt>ObjectName&lt;/tt> for a {@link MemoryPoolMXBean}. &#xA;     * The unique &lt;tt>ObjectName&lt;/tt> for a &lt;tt>MemoryPoolMXBean&lt;/tt>&#xA;     * can be formed by appending this string with&#xA;     * &lt;tt>,name=&lt;/tt>&lt;i>pool's name&lt;/i>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getClassLoadingMXBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ClassLoadingMXBean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the managed bean for the class loading system of &#xA;     * the Java virtual machine.&#xA;     *&#xA;     * @return a {@link ClassLoadingMXBean} object for &#xA;     * the Java virtual machine.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.26"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMemoryMXBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="MemoryMXBean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the managed bean for the memory system of &#xA;     * the Java virtual machine.&#xA;     *&#xA;     * @return a {@link MemoryMXBean} object for the Java virtual machine.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.27"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getThreadMXBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ThreadMXBean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the managed bean for the thread system of &#xA;     * the Java virtual machine.&#xA;     *&#xA;     * @return a {@link ThreadMXBean} object for the Java virtual machine.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.28"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRuntimeMXBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="RuntimeMXBean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the managed bean for the runtime system of &#xA;     * the Java virtual machine.&#xA;     *&#xA;     * @return a {@link RuntimeMXBean} object for the Java virtual machine.&#xA;&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.29"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCompilationMXBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="CompilationMXBean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the managed bean for the compilation system of &#xA;     * the Java virtual machine.  This method returns &lt;tt>null&lt;/tt>&#xA;     * if the Java virtual machine has no compilation system.&#xA;     *&#xA;     * @return a {@link CompilationMXBean} object for the Java virtual &#xA;     *   machine or &lt;tt>null&lt;/tt> if the Java virtual machine has &#xA;     *   no compilation system. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.30"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getOperatingSystemMXBean">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="OperatingSystemMXBean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the managed bean for the operating system on which&#xA;     * the Java virtual machine is running.&#xA;     *&#xA;     * @return an {@link OperatingSystemMXBean} object for &#xA;     * the Java virtual machine.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.31"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMemoryPoolMXBeans">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="MemoryPoolMXBean.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a list of {@link MemoryPoolMXBean} objects in the &#xA;     * Java virtual machine.&#xA;     * The Java virtual machine can have one or more memory pools.&#xA;     * It may add or remove memory pools during execution.&#xA;     *&#xA;     * @return a list of &lt;tt>MemoryPoolMXBean&lt;/tt> objects.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.32"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMemoryManagerMXBeans">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="MemoryManagerMXBean.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a list of {@link MemoryManagerMXBean} objects &#xA;     * in the Java virtual machine. &#xA;     * The Java virtual machine can have one or more memory managers.&#xA;     * It may add or remove memory managers during execution.&#xA;     *&#xA;     * @return a list of &lt;tt>MemoryManagerMXBean&lt;/tt> objects.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.33"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getGarbageCollectorMXBeans">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="GarbageCollectorMXBean.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a list of {@link GarbageCollectorMXBean} objects &#xA;     * in the Java virtual machine.&#xA;     * The Java virtual machine may have one or more&#xA;     * &lt;tt>GarbageCollectorMXBean&lt;/tt> objects.&#xA;     * It may add or remove &lt;tt>GarbageCollectorMXBean&lt;/tt> &#xA;     * during execution.&#xA;     *&#xA;     * @return a list of &lt;tt>GarbageCollectorMXBean&lt;/tt> objects.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.34"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="platformMBeanServer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getPlatformMBeanServer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/management/MBeanServer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the platform {@link javax.management.MBeanServer MBeanServer}.&#xA;     * On the first call to this method, it first creates the platform &#xA;     * &lt;tt>MBeanServer&lt;/tt> by calling the &#xA;     * {@link MBeanServerFactory#createMBeanServer} &#xA;     * method and registers the platform MXBeans in this platform&#xA;     * &lt;tt>MBeanServer&lt;/tt> using the &lt;a href=&quot;#MXBeanNames&quot;>MXBean names&lt;/a>&#xA;     * defined in the class description.&#xA;     * This method, in subsequent calls, will simply return the &#xA;     * initially created platform &lt;tt>MBeanServer&lt;/tt>.&#xA;     * &lt;p>&#xA;     * MXBeans that get created and destroyed dynamically, for example, &#xA;     * memory {@link MemoryPoolMXBean pools} and &#xA;     * {@link MemoryManagerMXBean managers},&#xA;     * will automatically be registered and deregistered into the platform&#xA;     * &lt;tt>MBeanServer&lt;/tt>.&#xA;     * &lt;p>&#xA;     * If the system property &lt;tt>javax.management.builder.initial&lt;/tt>&#xA;     * is set, the platform &lt;tt>MBeanServer&lt;/tt> creation will be done&#xA;     * by the specified {@link javax.management.MBeanServerBuilder}.&#xA;     * &lt;p>&#xA;     * It is recommended that this platform MBeanServer also be used&#xA;     * to register other application managed beans &#xA;     * besides the platform MXBeans. &#xA;     * This will allow all MBeans to be published through the same &#xA;     * &lt;tt>MBeanServer&lt;/tt> and hence allow for easier network publishing&#xA;     * and discovery.&#xA;     * Name conflicts with the platform MXBeans should be avoided.&#xA;     *&#xA;     * @return the platform &lt;tt>MBeanServer&lt;/tt>; the platform&#xA;     *         MXBeans are registered into the platform &lt;tt>MBeanServer&lt;/tt>&#xA;     *         at the first time this method is called.&#xA;     *&#xA;     * @exception SecurityException if there is a security manager &#xA;     * and the caller does not have the permission required by &#xA;     * {@link javax.management.MBeanServerFactory#createMBeanServer}.&#xA;     * &#xA;     * @see javax.management.MBeanServerFactory&#xA;     * @see javax.management.MBeanServerFactory#createMBeanServer&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="perm">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../security/Permission.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../javax/management/MBeanServerPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="createMBeanServer"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statement/@statements.0/@variable"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0/@members.45"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../sun/management/ManagementFactory.class.xmi#//@classifiers.0"/>
                  </next>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newPlatformMXBeanProxy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.22/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="connection">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/management/MBeanServerConnection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mxbeanName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mxbeanInterface">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.22/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a proxy for a platform MXBean interface of a &#xA;     * given &lt;a href=&quot;#MXBeanNames&quot;>MXBean name&lt;/a>&#xA;     * that forwards its method calls through the given &#xA;     * &lt;tt>MBeanServerConnection&lt;/tt>.&#xA;     *&#xA;     * &lt;p>This method is equivalent to:&#xA;     * &lt;blockquote>&#xA;     * {@link java.lang.reflect.Proxy#newProxyInstance &#xA;     *        Proxy.newProxyInstance}&lt;tt>(mxbeanInterface.getClassLoader(), &#xA;     *        new Class[] { mxbeanInterface }, handler)&lt;/tt>&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * where &lt;tt>handler&lt;/tt> is an {@link java.lang.reflect.InvocationHandler&#xA;     * InvocationHandler} to which method invocations to the MXBean interface&#xA;     * are dispatched. This &lt;tt>handler&lt;/tt> converts an input parameter&#xA;     * from an MXBean data type to its mapped open type before forwarding &#xA;     * to the &lt;tt>MBeanServer&lt;/tt> and converts a return value from&#xA;     * an MXBean method call through the &lt;tt>MBeanServer&lt;/tt>&#xA;     * from an open type to the corresponding return type declared in &#xA;     * the MXBean interface.&#xA;     *&#xA;     * &lt;p>&#xA;     * If the MXBean is a notification emitter (i.e.,&#xA;     * it implements {@link NotificationEmitter NotificationEmitter}),&#xA;     * both the &lt;tt>mxbeanInterface&lt;/tt> and &lt;tt>NotificationEmitter&lt;/tt>&#xA;     * will be implemented by this proxy.&#xA;     *&#xA;     * &lt;p>&#xA;     * &lt;b>Notes:&lt;/b>&#xA;     * &lt;ol>&#xA;     * &lt;li>Using an MXBean proxy is a convenience remote access to&#xA;     * a platform MXBean of a running virtual machine.  All method &#xA;     * calls to the MXBean proxy are forwarded to an &#xA;     * &lt;tt>MBeanServerConnection&lt;/tt> where &#xA;     * {@link java.io.IOException IOException} may be thrown&#xA;     * when the communication problem occurs with the connector server.&#xA;     * An application remotely accesses the platform MXBeans using &#xA;     * proxy should prepare to catch &lt;tt>IOException&lt;/tt> as if &#xA;     * accessing with the &lt;tt>MBeanServerConnector&lt;/tt> interface.&lt;/li>&#xA;     * &#xA;     * &lt;li>When a client application is designed to remotely access MXBeans&#xA;     * for a running virtual machine whose version is different than&#xA;     * the version on which the application is running, &#xA;     * it should prepare to catch &#xA;     * {@link java.io.InvalidObjectException InvalidObjectException}&#xA;     * which is thrown when an MXBean proxy receives a name of an &#xA;     * enum constant which is missing in the enum class loaded in&#xA;     * the client application. &lt;/li>&#xA;     *&#xA;     * &lt;li>{@link javax.management.MBeanServerInvocationHandler&#xA;     * MBeanServerInvocationHandler} or its&#xA;     * {@link javax.management.MBeanServerInvocationHandler#newProxyInstance&#xA;     * newProxyInstance} method cannot be used to create &#xA;     * a proxy for a platform MXBean. The proxy object created&#xA;     * by &lt;tt>MBeanServerInvocationHandler&lt;/tt> does not handle&#xA;     * the properties of the platform MXBeans described in&#xA;     * the &lt;a href=&quot;#MXBean&quot;>class specification&lt;/a>.&#xA;     *&lt;/li>&#xA;     * &lt;/ol>&#xA;     * &#xA;     * @param connection the &lt;tt>MBeanServerConnection&lt;/tt> to forward to.&#xA;     * @param mxbeanName the name of a platform MXBean within&#xA;     * &lt;tt>connection&lt;/tt> to forward to. &lt;tt>mxbeanName&lt;/tt> must be&#xA;     * in the format of {@link ObjectName ObjectName}. &#xA;     * @param mxbeanInterface the MXBean interface to be implemented&#xA;     * by the proxy.&#xA;     *&#xA;     * @throws IllegalArgumentException if &#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;tt>mxbeanName&lt;/tt> is not with a valid &#xA;     *     {@link ObjectName ObjectName} format, or&lt;/li>&#xA;     * &lt;li>the named MXBean in the &lt;tt>connection&lt;/tt> is&#xA;     *     not a MXBean provided by the platform, or&lt;/li>&#xA;     * &lt;li>the named MXBean is not registered in the &#xA;     *     &lt;tt>MBeanServerConnection&lt;/tt>, or&lt;/li>&#xA;     * &lt;li>the named MXBean is not an instance of the given &#xA;     *     &lt;tt>mxbeanInterface&lt;/tt>&lt;/li>&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @throws java.io.IOException if a communication problem &#xA;     * occurred when accessing the &lt;tt>MBeanServerConnection&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="interfaceClass">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.2"/>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="loader">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../ClassLoader.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../ClassLoader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.46"/>
                          </next>
                        </returnValue>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../security/AccessController.class.xmi#//@classifiers.0"/>
            </child>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final">
            <comments>// Only allow MXBean interfaces from rt.jar loaded by the</comments>
            <comments>// bootstrap class loader</comments>
          </annotationsAndModifiers>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
                <children xsi:type="references:StringReference" value=" is not a platform MXBean"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="objName">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../javax/management/ObjectName.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
            </initialValue>
            <annotationsAndModifiers xsi:type="modifiers:Final"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
                  <children xsi:type="references:StringReference" value=" is not an instance of "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../../javax/management/MBeanServerConnection.class.xmi#//@classifiers.0/@members.24"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.44"/>
                  </next>
                </arguments>
              </next>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interfaces">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arrayDimensionsBefore/>
            <annotationsAndModifiers xsi:type="modifiers:Final"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// check if the registered MBean is a notification emitter</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="arrays:ArrayInstantiationByValues">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arrayDimensionsBefore/>
                  <arrayInitializer>
                    <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                    <initialValues xsi:type="references:IdentifierReference">
                      <next xsi:type="references:ReflectiveClassReference"/>
                      <target xsi:type="classifiers:Interface" href="../../../javax/management/NotificationEmitter.class.xmi#//@classifiers.0"/>
                    </initialValues>
                  </arrayInitializer>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../../javax/management/MBeanServerConnection.class.xmi#//@classifiers.0/@members.24"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
            </next>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="arrays:ArrayInstantiationByValues">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arrayDimensionsBefore/>
                  <arrayInitializer>
                    <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                  </arrayInitializer>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="handler">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// create a MXBean proxy</comments>
                <target xsi:type="classifiers:Interface" href="../reflect/InvocationHandler.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../sun/management/PlatformMXBeanInvocationHandler.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.22/@typeParameters.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../reflect/Proxy.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.46"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@statements.2/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@statements.4/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../reflect/Proxy.class.xmi#//@classifiers.0"/>
            </child>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="iae">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
                  <children xsi:type="references:StringReference" value=" not found in the connection."/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </initialValue>
              <annotationsAndModifiers xsi:type="modifiers:Final"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@catcheBlocks.0/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Throwable.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@catcheBlocks.0/@parameter"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@catcheBlocks.0/@statements.0/@variable"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../javax/management/InstanceNotFoundException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="iae">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
                  <children xsi:type="references:StringReference" value=" is not a valid ObjectName format."/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </initialValue>
              <annotationsAndModifiers xsi:type="modifiers:Final"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@catcheBlocks.1/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Throwable.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@catcheBlocks.1/@parameter"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.3/@catcheBlocks.1/@statements.0/@variable"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../javax/management/MalformedObjectNameException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:Field" name="NOTIF_EMITTER">
      <initialValue xsi:type="references:StringReference" value="javax.management.NotificationEmitter"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;tt>ManagementFactory&lt;/tt> class is a factory class for getting &#xA; * managed beans for the Java platform.&#xA; * This class consists of static methods each of which returns&#xA; * one or more &lt;a href=&quot;#MXBean&quot;>platform MXBean(s)&lt;/a> representing  &#xA; * the management interface of a component of the Java virtual&#xA; * machine.  &#xA; *&#xA; * &lt;p>&#xA; * An application can access a platform MXBean in the following ways:&#xA; * &lt;ul>&#xA; * &lt;li>&lt;i>Direct access to an MXBean interface&lt;/i>&#xA; *     &lt;ol type=&quot;a&quot;>&#xA; *     &lt;li>Get the MXBean instance through the static factory method&#xA; *         and access the MXBean locally of the running&#xA; *         virtual machine.&#xA; *         &lt;/li>&#xA; *     &lt;li>Construct an MXBean proxy instance that forwards the &#xA; *         method calls to a given {@link MBeanServer MBeanServer} by calling&#xA; *         {@link #newPlatformMXBeanProxy newPlatfromMXBeanProxy}.&#xA; *         A proxy is typically constructed to remotely access&#xA; *         an MXBean of another running virtual machine.&#xA; *         &lt;/li> &#xA; *     &lt;/ol>&lt;/li>&#xA; * &lt;li>&lt;i>Indirect access to an MXBean interface via MBeanServer&lt;/i>&#xA; *     &lt;ol type=&quot;a&quot;>&#xA; *     &lt;li>Go through the {@link #getPlatformMBeanServer &#xA; *         platform MBeanServer} to access MXBeans locally or &#xA; *         a specific &lt;tt>MBeanServerConnection&lt;/tt> to access&#xA; *         MXBeans remotely.&#xA; *         The attributes and operations of an MXBean use only &#xA; *         &lt;em>JMX open types&lt;/em> which include basic &#xA; *         data types, {@link CompositeData CompositeData},&#xA; *         and {@link TabularData TabularData} defined in&#xA; *         {@link javax.management.openmbean.OpenType OpenType}.&#xA; *         The mapping is specified below.&#xA; *        &lt;/li>&#xA; *     &lt;/ol>&lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;h4>&lt;a name=&quot;MXBean&quot;>Platform MXBeans&lt;/a>&lt;/h4>&#xA; * A platform MXBean is a &lt;i>managed bean&lt;/i> that conforms to&#xA; * the JMX Instrumentation Specification and only uses&#xA; * a set of basic data types described below.&#xA; * A JMX management application and the platform &lt;tt>MBeanServer&lt;/tt>&#xA; * can interoperate without requiring classes for MXBean specific&#xA; * data types.  &#xA; * The data types being transmitted between the JMX connector &#xA; * server and the connector client are &#xA; * {@link javax.management.openmbean.OpenType open types}&#xA; * and this allows interoperation across versions. &#xA; * &lt;p>&#xA; * The platform MXBean interfaces use only the following data types:&#xA; * &lt;ul>&#xA; *   &lt;li>Primitive types such as &lt;tt>int&lt;/tt>, &lt;tt>long&lt;/tt>, &#xA; *       &lt;tt>boolean&lt;/tt>, etc&lt;/li>&#xA; *   &lt;li>Wrapper classes for primitive types such as &#xA; *       {@link java.lang.Integer Integer}, {@link java.lang.Long Long},&#xA; *       {@link java.lang.Boolean Boolean}, etc and &#xA; *       {@link java.lang.String String}&lt;/li>&#xA; *   &lt;li>{@link java.lang.Enum Enum} classes&lt;/li> &#xA; *   &lt;li>Classes that define only getter methods and define a static&#xA; *       &lt;tt>from&lt;/tt> method with a {@link CompositeData CompositeData} &#xA; *       argument to convert from an input &lt;tt>CompositeData&lt;/tt> to &#xA; *       an instance of that class&#xA; *       &lt;/li> &#xA; *   &lt;li>{@link java.util.List List&amp;lt;E&amp;gt;} &#xA; *       where &lt;tt>E&lt;/tt> is a primitive type, a wrapper class, &#xA; *       an enum class, or a class supporting conversion from a &#xA; *       &lt;tt>CompositeData&lt;/tt> to its class&#xA; *       &lt;/li> &#xA; *   &lt;li>{@link java.util.Map Map&amp;lt;K,V&amp;gt;}&#xA; *       where &lt;tt>K&lt;/tt> and &lt;tt>V&lt;/tt> are &#xA; *       a primitive type, a wrapper class, &#xA; *       an enum class, or a class supporting conversion from a &#xA; *       &lt;tt>CompositeData&lt;/tt> to its class&#xA; *       &lt;/li> &#xA; * &lt;/ul> &#xA; * &#xA; * &lt;p>&#xA; * When an attribute or operation of a platform MXBean&#xA; * is accessed via an &lt;tt>MBeanServer&lt;/tt>, the data types are mapped&#xA; * as follows:&#xA; * &lt;ul>&#xA; *   &lt;li>A primitive type or a wrapper class is mapped&#xA; *       to the same type.&#xA; *       &lt;/li>&#xA; *   &lt;li>An {@link Enum} is mapped to&#xA; *       &lt;tt>String&lt;/tt> whose value is the name of the enum constant.&#xA; *   &lt;li>A class that defines only getter methods and a static&#xA; *       &lt;tt>from&lt;/tt> method with a {@link CompositeData CompositeData} &#xA; *       argument is mapped to&#xA; *       {@link javax.management.openmbean.CompositeData CompositeData}.&#xA; *       &lt;/li>&#xA; *   &lt;li>&lt;tt>Map&amp;lt;K,V&amp;gt;&lt;/tt> is mapped to&#xA; *       {@link TabularData TabularData}&#xA; *       whose row type is a {@link CompositeType CompositeType} with&#xA; *       two items whose names are &lt;i>&quot;key&quot;&lt;/i> and &lt;i>&quot;value&quot;&lt;/i> &#xA; *       and the item types are &#xA; *       the corresponding mapped type of &lt;tt>K&lt;/tt> and &lt;tt>V&lt;/tt> &#xA; *       respectively and the &lt;i>&quot;key&quot;&lt;/i> is the index.&#xA; *       &lt;/li>&#xA; *   &lt;li>&lt;tt>List&amp;lt;E&amp;gt;&lt;/tt> is mapped to an array with the mapped &#xA; *       type of &lt;tt>E&lt;/tt> as the element type.&#xA; *       &lt;/li>&#xA; *   &lt;li>An array of element type &lt;tt>E&lt;/tt> is mapped to&#xA; *       an array of the same dimenions with the mapped type of &lt;tt>E&lt;/tt> &#xA; *       as the element type.&lt;/li>&#xA; * &lt;/ul> &#xA; *&#xA; * The {@link javax.management.MBeanInfo MBeanInfo} &#xA; * for a platform MXBean&#xA; * describes the data types of the attributes and operations&#xA; * as primitive or open types mapped as specified above. &#xA; * &#xA; * &lt;p>&#xA; * For example, the {@link MemoryMXBean}&#xA; * interface has the following &lt;i>getter&lt;/i> and &lt;i>setter&lt;/i> methods:&#xA; * &#xA; * &lt;blockquote>&lt;pre>&#xA; * public MemoryUsage getHeapMemoryUsage();&#xA; * public boolean isVerbose();&#xA; * public void setVerbose(boolean value);&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * These attributes in the &lt;tt>MBeanInfo&lt;/tt> &#xA; * of the &lt;tt>MemoryMXBean&lt;/tt> have the following names and types:&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;table border>&#xA; * &lt;tr>&#xA; *   &lt;th>Attribute Name&lt;/th>&#xA; *   &lt;th>Type&lt;/th>&#xA; *   &lt;/tr>&#xA; * &lt;tr>&#xA; *   &lt;td>&lt;tt>HeapMemoryUsage&lt;/tt>&lt;/td>&#xA; *   &lt;td>{@link MemoryUsage#from &#xA; *              CompositeData representing MemoryUsage}&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; *   &lt;td>&lt;tt>Verbose&lt;/tt>&lt;/td>&#xA; *   &lt;td>&lt;tt>boolean&lt;/tt>&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;/table>&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>&#xA; * &lt;b>Implementation Note:&lt;/b>&lt;p>&#xA; * The mapping specified above could be done in the implementation&#xA; * of each platform MXBean.  One good implementation choice is to&#xA; * implement a MXBean as a {@link javax.management.DynamicMBean dynamic&#xA; * MBean}.&#xA; *&#xA; *&#xA; * &lt;h4>&lt;a name=&quot;MXBeanNames&quot;>MXBean Names&lt;/a>&lt;/h4>&#xA; * Each platform MXBean for a Java virtual machine has a unique&#xA; * {@link javax.management.ObjectName ObjectName} for &#xA; * registration in the platform &lt;tt>MBeanServer&lt;/tt>. &#xA; * A Java virtual machine has a single instance of the following management&#xA; * interfaces:&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;table border>&#xA; * &lt;tr>&#xA; * &lt;th>Management Interface&lt;/th>&#xA; * &lt;th>ObjectName&lt;/th>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link ClassLoadingMXBean} &lt;/td>&#xA; * &lt;td> {@link #CLASS_LOADING_MXBEAN_NAME&#xA; *             &lt;tt>java.lang:type=ClassLoading&lt;/tt>}&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link MemoryMXBean} &lt;/td>&#xA; * &lt;td> {@link #MEMORY_MXBEAN_NAME&#xA; *             &lt;tt>java.lang:type=Memory&lt;/tt>}&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link ThreadMXBean} &lt;/td>&#xA; * &lt;td> {@link #THREAD_MXBEAN_NAME&#xA; *             &lt;tt>java.lang:type=Threading&lt;/tt>}&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link RuntimeMXBean} &lt;/td>&#xA; * &lt;td> {@link #RUNTIME_MXBEAN_NAME&#xA; *             &lt;tt>java.lang:type=Runtime&lt;/tt>}&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link OperatingSystemMXBean} &lt;/td>&#xA; * &lt;td> {@link #OPERATING_SYSTEM_MXBEAN_NAME&#xA; *             &lt;tt>java.lang:type=OperatingSystem&lt;/tt>}&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;/table>&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>&#xA; * A Java virtual machine has zero or a single instance of &#xA; * the following management interfaces.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;table border>&#xA; * &lt;tr>&#xA; * &lt;th>Management Interface&lt;/th>&#xA; * &lt;th>ObjectName&lt;/th>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link CompilationMXBean} &lt;/td>&#xA; * &lt;td> {@link #COMPILATION_MXBEAN_NAME&#xA; *             &lt;tt>java.lang:type=Compilation&lt;/tt>}&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;/table>&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>&#xA; * A Java virtual machine may have one or more instances of the following&#xA; * management interfaces. &#xA; * &lt;blockquote>&#xA; * &lt;table border>&#xA; * &lt;tr>&#xA; * &lt;th>Management Interface&lt;/th>&#xA; * &lt;th>ObjectName&lt;/th>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link GarbageCollectorMXBean} &lt;/td>&#xA; * &lt;td> {@link #GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE&#xA; *    &lt;tt>java.lang:type=GarbageCollector&lt;/tt>}&lt;tt>,name=&lt;/tt>&lt;i>collector's name&lt;/i>&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link MemoryManagerMXBean} &lt;/td>&#xA; * &lt;td> {@link #MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE&#xA; *    &lt;tt>java.lang:type=MemoryManager&lt;/tt>}&lt;tt>,name=&lt;/tt>&lt;i>manager's name&lt;/i>&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td> {@link MemoryPoolMXBean} &lt;/td>&#xA; * &lt;td> {@link #MEMORY_POOL_MXBEAN_DOMAIN_TYPE&#xA; *    &lt;tt>java.lang:type=MemoryPool&lt;/tt>}&lt;tt>,name=&lt;/tt>&lt;i>pool's name&lt;/i>&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;/table>&#xA; * &lt;/blockquote>&#xA; *&#xA; * @see &lt;a href=&quot;../../../javax/management/package-summary.html&quot;>&#xA; *      JMX Specification.&lt;/a>&#xA; * @see &lt;a href=&quot;package-summary.html#examples&quot;>&#xA; *      Ways to Access Management Metrics&lt;/a>&#xA; * @see java.util.logging.LoggingMXBean&#xA; *&#xA; * @author  Mandy Chung&#xA; * @version 1.19, 05/17/04 &#xA; * @since   1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
