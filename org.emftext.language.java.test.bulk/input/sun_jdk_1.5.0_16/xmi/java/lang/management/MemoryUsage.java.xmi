<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="MemoryUsage.java">
  <comments>/*&#xA; * @(#)MemoryUsage.java&#x9;1.16 04/05/25&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>management</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>openmbean</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MemoryUsage">
    <members xsi:type="members:Field" name="init">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="used">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="committed">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="max">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="MemoryUsage">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="init parameter = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                <children xsi:type="references:StringReference" value=" is negative but not -1."/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="max parameter = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
                <children xsi:type="references:StringReference" value=" is negative but not -1."/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="used parameter = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                <children xsi:type="references:StringReference" value=" is negative."/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="committed parameter = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                <children xsi:type="references:StringReference" value=" is negative."/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="used = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                <children xsi:type="references:StringReference" value=" should be &lt;= committed = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="committed = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
                <children xsi:type="references:StringReference" value=" should be &lt; max = "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.3"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="init">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="used">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="committed">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="max">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;tt>MemoryUsage&lt;/tt> object.&#xA;     *&#xA;     * @param init      the initial amount of memory in bytes that&#xA;     *                  the Java virtual machine allocates;&#xA;     *                  or &lt;tt>-1&lt;/tt> if undefined.&#xA;     * @param used      the amount of used memory in bytes.&#xA;     * @param committed the amount of committed memory in bytes.&#xA;     * @param max       the maximum amount of memory in bytes that&#xA;     *                  can be used; or &lt;tt>-1&lt;/tt> if undefined.&#xA;     *&#xA;     * @throws IllegalArgumentException if&#xA;     * &lt;ul>&#xA;     * &lt;li> the value of &lt;tt>init&lt;/tt> or &lt;tt>max&lt;/tt> is negative&#xA;     *      but not &lt;tt>-1&lt;/tt>; or&lt;/li>&#xA;     * &lt;li> the value of &lt;tt>used&lt;/tt> or &lt;tt>committed&lt;/tt> is negative;&#xA;     *      or&lt;/li>&#xA;     * &lt;li> &lt;tt>used&lt;/tt> is greater than the value of &lt;tt>committed&lt;/tt>;&#xA;     *      or&lt;/li>&#xA;     * &lt;li> &lt;tt>committed&lt;/tt> is greater than the value of &lt;tt>max&lt;/tt> &#xA;     *      &lt;tt>max&lt;/tt> if defined.&lt;/li>&#xA;     * &lt;/ul>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="MemoryUsage">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>// validate the input composite data  </comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0/@members.16"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0/@members.12"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0/@members.13"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0/@members.14"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0/@members.15"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Constructs a &lt;tt>MemoryUsage&lt;/tt> object from a &#xA;     * {@link CompositeData CompositeData}.  &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getInit">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the amount of memory in bytes that the Java virtual machine&#xA;     * initially requests from the operating system for memory management.&#xA;     * This method returns &lt;tt>-1&lt;/tt> if the initial memory size is undefined.&#xA;     *&#xA;     * @return the initial size of memory in bytes;&#xA;     * &lt;tt>-1&lt;/tt> if undefined.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUsed">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the amount of used memory in bytes.&#xA;     *&#xA;     * @return the amount of used memory in bytes.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:ClassMethod" name="getCommitted">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the amount of memory in bytes that is committed for&#xA;     * the Java virtual machine to use.  This amount of memory is&#xA;     * guaranteed for the Java virtual machine to use. &#xA;     *&#xA;     * @return the amount of committed memory in bytes.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:ClassMethod" name="getMax">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the maximum amount of memory in bytes that can be &#xA;     * used for memory management.  This method returns &lt;tt>-1&lt;/tt> &#xA;     * if the maximum memory size is undefined.&#xA;     *&#xA;     * &lt;p> This amount of memory is not guaranteed to be available &#xA;     * for memory management if it is greater than the amount of &#xA;     * committed memory.  The Java virtual machine may fail to allocate &#xA;     * memory even if the amount of used memory does not exceed this &#xA;     * maximum size.&#xA;     * &#xA;     * @return the maximum amount of memory in bytes; &#xA;     * &lt;tt>-1&lt;/tt> if undefined.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a descriptive representation of this memory usage.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="buf">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="init = "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <children xsi:type="references:StringReference" value="("/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                  <shiftOperators xsi:type="operators:RightShift"/>
                </expression>
              </children>
              <children xsi:type="references:StringReference" value="K) "/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="used = "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="references:StringReference" value="("/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                  <shiftOperators xsi:type="operators:RightShift"/>
                </expression>
              </children>
              <children xsi:type="references:StringReference" value="K) "/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="committed = "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <children xsi:type="references:StringReference" value="("/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                  <shiftOperators xsi:type="operators:RightShift"/>
                </expression>
              </children>
              <children xsi:type="references:StringReference" value="K) "/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="max = "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <children xsi:type="references:StringReference" value="("/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                  <shiftOperators xsi:type="operators:RightShift"/>
                </expression>
              </children>
              <children xsi:type="references:StringReference" value="K)"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="from">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>MemoryUsage&lt;/tt> object represented by the&#xA;     * given &lt;tt>CompositeData&lt;/tt>. The given &lt;tt>CompositeData&lt;/tt>&#xA;     * must contain the following attributes:&#xA;     * &lt;p>&#xA;     * &lt;blockquote>&#xA;     * &lt;table border>&#xA;     * &lt;tr>&#xA;     *   &lt;th align=left>Attribute Name&lt;/th>&#xA;     *   &lt;th align=left>Type&lt;/th>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>init&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>used&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>committed&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>max&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;/table>&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * @param cd &lt;tt>CompositeData&lt;/tt> representing a &lt;tt>MemoryUsage&lt;/tt>&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;tt>cd&lt;/tt> does not&#xA;     *   represent a &lt;tt>MemoryUsage&lt;/tt> with the attributes described&#xA;     *   above.&#xA;     *&#xA;     * @return a &lt;tt>MemoryUsage&lt;/tt> object represented by &lt;tt>cd&lt;/tt>&#xA;     *         if &lt;tt>cd&lt;/tt> is not &lt;tt>null&lt;/tt>;&#xA;     *         &lt;tt>null&lt;/tt> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryUsageCompositeData.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;tt>MemoryUsage&lt;/tt> object represents a snapshot of memory usage.&#xA; * Instances of the &lt;tt>MemoryUsage&lt;/tt> class are usually constructed&#xA; * by methods that are used to obtain memory usage&#xA; * information about individual memory pool of the Java virtual machine or&#xA; * the heap or non-heap memory of the Java virtual machine as a whole.&#xA; *&#xA; * &lt;p> A &lt;tt>MemoryUsage&lt;/tt> object contains four values:&#xA; * &lt;ul>&#xA; * &lt;table>&#xA; * &lt;tr>&#xA; * &lt;td valign=top> &lt;tt>init&lt;/tt> &lt;/td>&#xA; * &lt;td valign=top> represents the initial amount of memory (in bytes) that&#xA; *      the Java virtual machine requests from the operating system&#xA; *      for memory management during startup.  The Java virtual machine&#xA; *      may request additional memory from the operating system and&#xA; *      may also release memory to the system over time.&#xA; *      The value of &lt;tt>init&lt;/tt> may be undefined.&#xA; * &lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td valign=top> &lt;tt>used&lt;/tt> &lt;/td>&#xA; * &lt;td valign=top> represents the amount of memory currently used (in bytes).&#xA; * &lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td valign=top> &lt;tt>committed&lt;/tt> &lt;/td>&#xA; * &lt;td valign=top> represents the amount of memory (in bytes) that is&#xA; *      guaranteed to be available for use by the Java virtual machine.&#xA; *      The amount of committed memory may change over time (increase&#xA; *      or decrease).  The Java virtual machine may release memory to&#xA; *      the system and &lt;tt>committed&lt;/tt> could be less than &lt;tt>init&lt;/tt>.&#xA; *      &lt;tt>committed&lt;/tt> will always be greater than&#xA; *      or equal to &lt;tt>used&lt;/tt>.&#xA; * &lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; * &lt;td valign=top> &lt;tt>max&lt;/tt> &lt;/td>&#xA; * &lt;td valign=top> represents the maximum amount of memory (in bytes)&#xA; *      that can be used for memory management. Its value may be undefined.&#xA; *      The maximum amount of memory may change over time if defined.&#xA; *      The amount of used and committed memory will always be less than &#xA; *      or equal to &lt;tt>max&lt;/tt> if &lt;tt>max&lt;/tt> is defined.&#xA; *      A memory allocation may fail if it attempts to increase the&#xA; *      used memory such that &lt;tt>used &amp;gt committed&lt;/tt> even&#xA; *      if &lt;tt>used &amp;lt= max&lt;/tt> would still be true (for example,&#xA; *      when the system is low on virtual memory).&#xA; * &lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;/table>&#xA; * &lt;/ul>&#xA; *&#xA; * Below is a picture showing an example of a memory pool:&#xA; * &lt;p>&#xA; * &lt;pre>&#xA; *        +----------------------------------------------+&#xA; *        +////////////////           |                  +&#xA; *        +////////////////           |                  +&#xA; *        +----------------------------------------------+&#xA; *&#xA; *        |--------|&#xA; *           init&#xA; *        |---------------|&#xA; *               used&#xA; *        |---------------------------|&#xA; *                  committed &#xA; *        |----------------------------------------------|&#xA; *                            max &#xA; * &lt;/pre>&#xA; *&#xA; * &lt;h4>MXBean Mapping&lt;/h4>&#xA; * &lt;tt>MemoryUsage&lt;/tt> is mapped to a {@link CompositeData CompositeData}&#xA; * with attributes as specified in the {@link #from from} method. &#xA; *&#xA; * @author   Mandy Chung&#xA; * @version 1.16, 05/25/04&#xA; * @since   1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
