<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="MemoryNotificationInfo.java">
  <comments>/*&#xA; * @(#)MemoryNotificationInfo.java&#x9;1.8 06/03/08&#xA; *&#xA; * Copyright 2006 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>management</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>management</namespaces>
    <namespaces>openmbean</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>management</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MemoryNotificationInfo">
    <members xsi:type="members:Field" name="poolName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="usage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MemoryUsage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="count">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MEMORY_THRESHOLD_EXCEEDED">
      <initialValue xsi:type="references:StringReference" value="java.management.memory.threshold.exceeded"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Notification type denoting that &#xA;     * the memory usage of a memory pool has&#xA;     * reached or exceeded its&#xA;     * &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;> usage threshold&lt;/a> value.&#xA;     * This notification is emitted by {@link MemoryMXBean}.&#xA;     * Subsequent crossing of the usage threshold value does not cause&#xA;     * further notification until the memory usage has returned&#xA;     * to become less than the usage threshold value.&#xA;     * The value of this notification type is &#xA;     * &lt;tt>java.management.memory.threshold.exceeded&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MEMORY_COLLECTION_THRESHOLD_EXCEEDED">
      <initialValue xsi:type="references:StringReference" value="java.management.memory.collection.threshold.exceeded"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Notification type denoting that &#xA;     * the memory usage of a memory pool is greater than or equal to its&#xA;     * &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;>&#xA;     * collection usage threshold&lt;/a> after the Java virtual machine&#xA;     * has expended effort in recycling unused objects in that&#xA;     * memory pool. &#xA;     * This notification is emitted by {@link MemoryMXBean}.&#xA;     * The value of this notification type is &#xA;     * &lt;tt>java.management.memory.collection.threshold.exceeded&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="MemoryNotificationInfo">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Null poolName"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Null usage"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="poolName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="usage">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="MemoryUsage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="count">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;tt>MemoryNotificationInfo&lt;/tt> object.&#xA;     *&#xA;     * @param poolName The name of the memory pool which triggers this notification.&#xA;     * @param usage Memory usage of the memory pool.&#xA;     * @param count The threshold crossing count.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="MemoryNotificationInfo">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0/@members.10"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0/@members.11"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0/@members.12"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:ClassMethod" name="getPoolName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the memory pool that triggers this notification.&#xA;     * The memory pool usage has crossed a threshold.&#xA;     *&#xA;     * @return the name of the memory pool that triggers this notification.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUsage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MemoryUsage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the memory usage of the memory pool&#xA;     * when this notification was constructed.&#xA;     *&#xA;     * @return the memory usage of the memory pool  &#xA;     * when this notification was constructed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCount">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of times that the memory usage has crossed &#xA;     * a threshold when the notification was constructed.&#xA;     * For usage threshold notifications, this count will be the &#xA;     * {@link MemoryPoolMXBean#getUsageThresholdCount threshold&#xA;     * count}.  For collection threshold notifications, &#xA;     * this count will be the&#xA;     * {@link MemoryPoolMXBean#getCollectionUsageThresholdCount&#xA;     * collection usage threshold count}.&#xA;     *&#xA;     * @return the number of times that the memory usage has crossed &#xA;     * a threshold when the notification was constructed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="from">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/management/openmbean/CompositeData.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>MemoryNotificationInfo&lt;/tt> object represented by the&#xA;     * given &lt;tt>CompositeData&lt;/tt>.&#xA;     * The given &lt;tt>CompositeData&lt;/tt> must contain&#xA;     * the following attributes:&#xA;     * &lt;blockquote>&#xA;     * &lt;table border>&#xA;     * &lt;tr>&#xA;     *   &lt;th align=left>Attribute Name&lt;/th>&#xA;     *   &lt;th align=left>Type&lt;/th>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>poolName&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.String&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>usage&lt;/td>&#xA;     *   &lt;td>&lt;tt>javax.management.openmbean.CompositeData&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>count&lt;/td>&#xA;     *   &lt;td>&lt;tt>java.lang.Long&lt;/tt>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;/table>&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * @param cd &lt;tt>CompositeData&lt;/tt> representing a&#xA;     *           &lt;tt>MemoryNotificationInfo&lt;/tt>&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;tt>cd&lt;/tt> does not&#xA;     *   represent a &lt;tt>MemoryNotificationInfo&lt;/tt> object.&#xA;     *&#xA;     * @return a &lt;tt>MemoryNotificationInfo&lt;/tt> object represented &#xA;     *         by &lt;tt>cd&lt;/tt> if &lt;tt>cd&lt;/tt> is not &lt;tt>null&lt;/tt>;&#xA;     *         &lt;tt>null&lt;/tt> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0/@members.7"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../sun/management/MemoryNotifInfoCompositeData.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The information about a memory notification.&#xA; *&#xA; * &lt;p>&#xA; * A memory notification is emitted by {@link MemoryMXBean} &#xA; * when the Java virtual machine detects that the memory usage &#xA; * of a memory pool is exceeding a threshold value. &#xA; * The notification emitted will contain the memory notification&#xA; * information about the detected condition:&#xA; * &lt;ul>&#xA; *   &lt;li>The name of the memory pool.&lt;/li>&#xA; *   &lt;li>The memory usage of the memory pool when the notification &#xA; *       was constructed.&lt;/li>&#xA; *   &lt;li>The number of times that the memory usage has crossed &#xA; *       a threshold when the notification was constructed.&#xA; *       For usage threshold notifications, this count will be the &#xA; *       {@link MemoryPoolMXBean#getUsageThresholdCount usage threshold&#xA; *       count}.  For collection threshold notifications, &#xA; *       this count will be the&#xA; *       {@link MemoryPoolMXBean#getCollectionUsageThresholdCount&#xA; *       collection usage threshold count}.&#xA; *       &lt;/li>&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>&#xA; * A {@link CompositeData CompositeData} representing &#xA; * the &lt;tt>MemoryNotificationInfo&lt;/tt> object &#xA; * is stored in the&#xA; * {@link javax.management.Notification#setUserData user data} &#xA; * of a {@link javax.management.Notification notification}.&#xA; * The {@link #from from} method is provided to convert from &#xA; * a &lt;tt>CompositeData&lt;/tt> to a &lt;tt>MemoryNotificationInfo&lt;/tt> &#xA; * object. For example:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *      Notification notif;&#xA; *&#xA; *      // receive the notification emitted by MemoryMXBean and set to notif&#xA; *      ...&#xA; *            &#xA; *      String notifType = notif.getType();&#xA; *      if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) ||&#xA; *          notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) {&#xA; *          // retrieve the memory notification information&#xA; *          CompositeData cd = (CompositeData) notif.getUserData();&#xA; *          MemoryNotificationInfo info = MemoryNotificationInfo.from(cd);&#xA; *          ....&#xA; *      }  &#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p>&#xA; * The types of notifications emitted by &lt;tt>MemoryMXBean&lt;/tt> are:&#xA; * &lt;ul> &#xA; *   &lt;li>A {@link #MEMORY_THRESHOLD_EXCEEDED &#xA; *       usage threshold exceeded notification}.&#xA; *       &lt;br>This notification will be emitted when&#xA; *       the memory usage of a memory pool is increased and has reached &#xA; *       or exceeded its &#xA; *       &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;> usage threshold&lt;/a> value.&#xA; *       Subsequent crossing of the usage threshold value does not cause&#xA; *       further notification until the memory usage has returned&#xA; *       to become less than the usage threshold value.&#xA; *       &lt;p>&lt;/li>&#xA; *   &lt;li>A {@link #MEMORY_COLLECTION_THRESHOLD_EXCEEDED&#xA; *       collection usage threshold exceeded notification}.&#xA; *       &lt;br>This notification will be emitted when&#xA; *       the memory usage of a memory pool is greater than or equal to its&#xA; *       &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;>&#xA; *       collection usage threshold&lt;/a> after the Java virtual machine&#xA; *       has expended effort in recycling unused objects in that&#xA; *       memory pool.&lt;/li> &#xA; * &lt;/ul>&#xA; *&#xA; * @author  Mandy Chung&#xA; * @version 1.8, 03/08/06&#xA; * @since   1.5&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
