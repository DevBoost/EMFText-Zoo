<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RuntimeMXBean.java">
  <comments>/*&#xA; * @(#)RuntimeMXBean.java&#x9;1.13 04/04/20&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>management</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="RuntimeMXBean">
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name representing the running Java virtual machine.&#xA;     * The returned name string can be any arbitrary string and  &#xA;     * a Java virtual machine implementation can choose &#xA;     * to embed platform-specific useful information in the &#xA;     * returned name string.  Each running virtual machine could have&#xA;     * a different name.&#xA;     * &#xA;     * @return the name representing the running Java virtual machine.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVmName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java virtual machine implementation name. &#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.vm.name&quot;)}.&#xA;     *&#xA;     * @return the Java virtual machine implementation name.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVmVendor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java virtual machine implementation vendor. &#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.vm.vendor&quot;)}.&#xA;     *&#xA;     * @return the Java virtual machine implementation vendor.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVmVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java virtual machine implementation version. &#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.vm.version&quot;)}.&#xA;     *&#xA;     * @return the Java virtual machine implementation version.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSpecName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java virtual machine specification name. &#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.vm.specification.name&quot;)}.&#xA;     *&#xA;     * @return the Java virtual machine specification name.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSpecVendor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java virtual machine specification vendor. &#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.vm.specification.vendor&quot;)}.&#xA;     *&#xA;     * @return the Java virtual machine specification vendor.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSpecVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java virtual machine specification version. &#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.vm.specification.version&quot;)}.&#xA;     *&#xA;     * @return the Java virtual machine specification version.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getManagementSpecVersion">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the version of the specification for the management interface&#xA;     * implemented by the running Java virtual machine.&#xA;     *&#xA;     * @return the version of the specification for the management interface&#xA;     * implemented by the running Java virtual machine.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClassPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java class path that is used by the system class loader &#xA;     * to search for class files.&#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.class.path&quot;)}.&#xA;     *&#xA;     * &lt;p> Multiple paths in the Java class path are separated by the &#xA;     * path separator character of the platform of the Java virtual machine&#xA;     * being monitored.&#xA;     *&#xA;     * @return the Java class path.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLibraryPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java library path. &#xA;     * This method is equivalent to {@link System#getProperty &#xA;     * System.getProperty(&quot;java.library.path&quot;)}.&#xA;     *&#xA;     * &lt;p> Multiple paths in the Java library path are separated by the &#xA;     * path separator character of the platform of the Java virtual machine&#xA;     * being monitored.&#xA;     *&#xA;     * @return the Java library path.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and its &#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to this system property.&#xA;     * @see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)&#xA;     * @see java.lang.System#getProperty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isBootClassPathSupported">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the Java virtual machine supports the boot class path&#xA;     * mechanism used by the bootstrap class loader to search for class &#xA;     * files.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if the Java virtual machine supports the &#xA;     * class path mechanism; &lt;tt>false&lt;/tt> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBootClassPath">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the boot class path that is used by the bootstrap class loader &#xA;     * to search for class files.&#xA;     *&#xA;     * &lt;p> Multiple paths in the boot class path are separated by the &#xA;     * path separator character of the platform on which the Java &#xA;     * virtual machine is running.&#xA;     *&#xA;     * &lt;p>A Java virtual machine implementation may not support &#xA;     * the boot class path mechanism for the bootstrap class loader &#xA;     * to search for class files.&#xA;     * The {@link #isBootClassPathSupported} method can be used&#xA;     * to determine if the Java virtual machine supports this method.&#xA;     *&#xA;     * @return the boot class path.&#xA;     *&#xA;     * @throws java.lang.UnsupportedOperationException &#xA;     *     if the Java virtual machine does not support this operation.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and the caller does not have&#xA;     *     ManagementPermission(&quot;monitor&quot;).&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInputArguments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the input arguments passed to the Java virtual machine&#xA;     * which does not include the arguments to the &lt;tt>main&lt;/tt> method.&#xA;     * This method returns an empty list if there is no input argument&#xA;     * to the Java virtual machine.&#xA;     * &lt;p>&#xA;     * Some Java virtual machine implementations may take input arguments &#xA;     * from multiple different sources: for examples, arguments passed from &#xA;     * the application that launches the Java virtual machine such as&#xA;     * the 'java' command, environment variables, configuration files, etc.&#xA;     * &lt;p>&#xA;     * Typically, not all command-line options to the 'java' command &#xA;     * are passed to the Java virtual machine.  &#xA;     * Thus, the returned input arguments may not&#xA;     * include all command-line options.&#xA;     *&#xA;     * &lt;p>&#xA;     * &lt;b>MBeanServer access&lt;/b>:&lt;br>&#xA;     * The mapped type of &lt;tt>List&lt;String>&lt;/tt> is &lt;tt>String[]&lt;/tt>.&#xA;     *&#xA;     * @return a list of &lt;tt>String&lt;/tt> objects; each element &#xA;     * is an argument passed to the Java virtual machine.&#xA;     *&#xA;     * @throws  java.lang.SecurityException &#xA;     *     if a security manager exists and the caller does not have&#xA;     *     ManagementPermission(&quot;monitor&quot;).&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUptime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the uptime of the Java virtual machine in milliseconds.&#xA;     *&#xA;     * @return uptime of the Java virtual machine in milliseconds.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStartTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the start time of the Java virtual machine in milliseconds.&#xA;     * This method returns the approximate time when the Java virtual &#xA;     * machine started. &#xA;     *&#xA;     * @return start time of the Java virtual machine in milliseconds.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSystemProperties">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a map of names and values of all system properties.&#xA;     * This method calls {@link System#getProperties} to get all&#xA;     * system properties.  Properties whose name or value is not&#xA;     * a &lt;tt>String&lt;/tt> are omitted.&#xA;     *&#xA;     * &lt;p>&#xA;     * &lt;b>MBeanServer access&lt;/b>:&lt;br>&#xA;     * The mapped type of &lt;tt>Map&lt;String,String>&lt;/tt> is&#xA;     * {@link javax.management.openmbean.TabularData TabularData}&#xA;     * with two items in each row as follows:&#xA;     * &lt;blockquote>&#xA;     * &lt;table border>&#xA;     * &lt;tr>&#xA;     *   &lt;th>Item Name&lt;/th>&#xA;     *   &lt;th>Item Type&lt;/th>&#xA;     *   &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>&lt;tt>key&lt;/tt>&lt;/td>&#xA;     *   &lt;td>&lt;tt>String&lt;/tt>&lt;/td>&#xA;     *   &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>&lt;tt>value&lt;/tt>&lt;/td>&#xA;     *   &lt;td>&lt;tt>String&lt;/tt>&lt;/td>&#xA;     *   &lt;/tr>&#xA;     * &lt;/table>&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * @return a map of names and values of all system properties.&#xA;     *&#xA;     * @throws  java.lang.SecurityException&#xA;     *     if a security manager exists and its&#xA;     *     &lt;code>checkPropertiesAccess&lt;/code> method doesn't allow access&#xA;     *     to the system properties.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The management interface for the runtime system of&#xA; * the Java virtual machine.&#xA; *&#xA; * &lt;p> A Java virtual machine has a single instance of the implementation&#xA; * class of this interface.  This instance implementing this interface is&#xA; * an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;>MXBean&lt;/a>&#xA; * that can be obtained by calling&#xA; * the {@link ManagementFactory#getRuntimeMXBean} method or&#xA; * from the {@link ManagementFactory#getPlatformMBeanServer&#xA; * platform &lt;tt>MBeanServer&lt;/tt>} method.&#xA; *&#xA; * &lt;p>The &lt;tt>ObjectName&lt;/tt> for uniquely identifying the MXBean for&#xA; * the runtime system within an MBeanServer is:&#xA; * &lt;blockquote>&#xA; *    {@link ManagementFactory#RUNTIME_MXBEAN_NAME &#xA; *           &lt;tt>java.lang:type=Runtime&lt;/tt>}&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p> This interface defines several convenient methods for accessing &#xA; * system properties about the Java virtual machine.  &#xA; *&#xA; * @see &lt;a href=&quot;../../../javax/management/package-summary.html&quot;>&#xA; *      JMX Specification.&lt;/a>&#xA; * @see &lt;a href=&quot;package-summary.html#examples&quot;>&#xA; *      Ways to Access MXBeans&lt;/a>&#xA; *&#xA; * @author  Mandy Chung&#xA; * @version 1.13, 04/20/04 &#xA; * @since   1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
