<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="Integer.java">
  <comments>/*&#xA; * @(#)Integer.java&#x9;1.90 04/05/11&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Integer">
    <members xsi:type="members:Field" name="MIN_VALUE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="2147483648"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A constant holding the minimum value an &lt;code>int&lt;/code> can&#xA;     * have, -2&lt;sup>31&lt;/sup>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAX_VALUE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="2147483647"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A constant holding the maximum value an &lt;code>int&lt;/code> can&#xA;     * have, 2&lt;sup>31&lt;/sup>-1.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TYPE">
      <initialValue xsi:type="expressions:CastExpression">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <child xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.92"/>
            <arguments xsi:type="references:StringReference" value="int"/>
          </next>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </child>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>Class&lt;/code> instance representing the primitive type&#xA;     * &lt;code>int&lt;/code>.&#xA;     *&#xA;     * @since   JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="digits">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="97"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="98"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="99"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="100"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="101"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="102"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="103"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="104"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="105"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="106"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="107"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="108"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="109"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="110"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="111"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="112"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="113"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="114"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="115"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="116"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="117"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="118"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="119"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="120"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="121"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="122"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * All possible chars for representing a number as a String&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="radix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of the first argument in the&#xA;     * radix specified by the second argument.&#xA;     * &lt;p>&#xA;     * If the radix is smaller than &lt;code>Character.MIN_RADIX&lt;/code>&#xA;     * or larger than &lt;code>Character.MAX_RADIX&lt;/code>, then the radix&#xA;     * &lt;code>10&lt;/code> is used instead.&#xA;     * &lt;p>&#xA;     * If the first argument is negative, the first element of the&#xA;     * result is the ASCII minus character &lt;code>'-'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u002D'&lt;/code>). If the first argument is not&#xA;     * negative, no sign character appears in the result.&#xA;     * &lt;p>&#xA;     * The remaining characters of the result represent the magnitude&#xA;     * of the first argument. If the magnitude is zero, it is&#xA;     * represented by a single zero character &lt;code>'0'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u0030'&lt;/code>); otherwise, the first character of&#xA;     * the representation of the magnitude will not be the zero&#xA;     * character.  The following ASCII characters are used as digits: &#xA;     * &lt;blockquote>&lt;pre>&#xA;     *   0123456789abcdefghijklmnopqrstuvwxyz&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     * These are &lt;code>'&amp;#92;u0030'&lt;/code> through&#xA;     * &lt;code>'&amp;#92;u0039'&lt;/code> and &lt;code>'&amp;#92;u0061'&lt;/code> through&#xA;     * &lt;code>'&amp;#92;u007A'&lt;/code>. If &lt;code>radix&lt;/code> is&#xA;     * &lt;var>N&lt;/var>, then the first &lt;var>N&lt;/var> of these characters&#xA;     * are used as radix-&lt;var>N&lt;/var> digits in the order shown. Thus,&#xA;     * the digits for hexadecimal (radix 16) are&#xA;     * &lt;code>0123456789abcdef&lt;/code>. If uppercase letters are&#xA;     * desired, the {@link java.lang.String#toUpperCase()} method may&#xA;     * be called on the result:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Integer.toString(n, 16).toUpperCase()&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param   i       an integer to be converted to a string.&#xA;     * @param   radix   the radix to use in the string representation.&#xA;     * @return  a string representation of the argument in the specified radix.&#xA;     * @see     java.lang.Character#MAX_RADIX&#xA;     * @see     java.lang.Character#MIN_RADIX&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Character.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="Character.class.xmi#//@classifiers.0"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Character.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="Character.class.xmi#//@classifiers.0"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>/* Use the faster version */</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="buf">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="33"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="negative">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="charPos">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.3/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.2/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <arraySelectors>
                  <position xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:MultiplicativeExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                        <multiplicativeOperators xsi:type="operators:Remainder"/>
                      </expression>
                    </child>
                  </position>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          </children>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.2/@variable">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <arraySelectors>
              <position xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
              </position>
            </arraySelectors>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.2/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:CharacterLiteral" value="45"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.3/@variable"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.2/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
          <arguments xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="33"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.4/@variable"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </expression>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toHexString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of the integer argument as an&#xA;     * unsigned integer in base&amp;nbsp;16.&#xA;     * &lt;p>&#xA;     * The unsigned integer value is the argument plus 2&lt;sup>32&lt;/sup>&#xA;     * if the argument is negative; otherwise, it is equal to the&#xA;     * argument.  This value is converted to a string of ASCII digits&#xA;     * in hexadecimal (base&amp;nbsp;16) with no extra leading&#xA;     * &lt;code>0&lt;/code>s. If the unsigned magnitude is zero, it is&#xA;     * represented by a single zero character &lt;code>'0'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u0030'&lt;/code>); otherwise, the first character of&#xA;     * the representation of the unsigned magnitude will not be the&#xA;     * zero character. The following characters are used as&#xA;     * hexadecimal digits:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * 0123456789abcdef&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     * These are the characters &lt;code>'&amp;#92;u0030'&lt;/code> through&#xA;     * &lt;code>'&amp;#92;u0039'&lt;/code> and &lt;code>'&amp;#92;u0061'&lt;/code> through&#xA;     * &lt;code>'&amp;#92;u0066'&lt;/code>. If uppercase letters are&#xA;     * desired, the {@link java.lang.String#toUpperCase()} method may&#xA;     * be called on the result:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Integer.toHexString(n).toUpperCase()&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param   i   an integer to be converted to a string.&#xA;     * @return  the string representation of the unsigned integer value&#xA;     *          represented by the argument in hexadecimal (base&amp;nbsp;16).&#xA;     * @since   JDK1.0.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toOctalString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of the integer argument as an&#xA;     * unsigned integer in base&amp;nbsp;8.&#xA;     * &lt;p>&#xA;     * The unsigned integer value is the argument plus 2&lt;sup>32&lt;/sup>&#xA;     * if the argument is negative; otherwise, it is equal to the&#xA;     * argument.  This value is converted to a string of ASCII digits&#xA;     * in octal (base&amp;nbsp;8) with no extra leading &lt;code>0&lt;/code>s.&#xA;     * &lt;p>&#xA;     * If the unsigned magnitude is zero, it is represented by a&#xA;     * single zero character &lt;code>'0'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u0030'&lt;/code>); otherwise, the first character of&#xA;     * the representation of the unsigned magnitude will not be the&#xA;     * zero character. The following characters are used as octal&#xA;     * digits:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * 01234567&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     * These are the characters &lt;code>'&amp;#92;u0030'&lt;/code> through&#xA;     * &lt;code>'&amp;#92;u0037'&lt;/code>.&#xA;     *&#xA;     * @param   i   an integer to be converted to a string.&#xA;     * @return  the string representation of the unsigned integer value&#xA;     *          represented by the argument in octal (base&amp;nbsp;8).&#xA;     * @since   JDK1.0.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toBinaryString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of the integer argument as an&#xA;     * unsigned integer in base&amp;nbsp;2.&#xA;     * &lt;p>&#xA;     * The unsigned integer value is the argument plus 2&lt;sup>32&lt;/sup>&#xA;     * if the argument is negative; otherwise it is equal to the&#xA;     * argument.  This value is converted to a string of ASCII digits&#xA;     * in binary (base&amp;nbsp;2) with no extra leading &lt;code>0&lt;/code>s.&#xA;     * If the unsigned magnitude is zero, it is represented by a&#xA;     * single zero character &lt;code>'0'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u0030'&lt;/code>); otherwise, the first character of&#xA;     * the representation of the unsigned magnitude will not be the&#xA;     * zero character. The characters &lt;code>'0'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u0030'&lt;/code>) and &lt;code>'1'&lt;/code>&#xA;     * (&lt;code>'&amp;#92;u0031'&lt;/code>) are used as binary digits.&#xA;     *&#xA;     * @param   i   an integer to be converted to a string.&#xA;     * @return  the string representation of the unsigned integer value&#xA;     *          represented by the argument in binary (base&amp;nbsp;2).&#xA;     * @since   JDK1.0.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toUnsignedString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shift">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Convert the integer to an unsigned number.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="buf">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="charPos">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="radix">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mask">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:DoWhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <arraySelectors>
                  <position xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.3/@variable"/>
                  </position>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
              <assignmentOperator xsi:type="operators:AssignmentUnsignedRightShift"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
          <arguments xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AdditiveExpression">
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.1/@variable"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </expression>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="DigitTens">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="DigitOnes">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="49"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="50"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="51"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="52"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="53"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="54"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="55"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="56"/>
          <initialValues xsi:type="literals:CharacterLiteral" value="57"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Char"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// I use the &quot;invariant division by multiplication&quot; trick to</comments>
        <comments>// accelerate Integer.toString.  In particular we want to</comments>
        <comments>// avoid division by 10.</comments>
        <comments>//</comments>
        <comments>// The &quot;trick&quot; has roughly the same performance characteristics</comments>
        <comments>// as the &quot;classic&quot; Integer.toString code on a non-JIT VM.</comments>
        <comments>// The trick avoids .rem and .div calls but has a longer code</comments>
        <comments>// path and is thus dominated by dispatch overhead.  In the</comments>
        <comments>// JIT case the dispatch overhead doesn't exist and the</comments>
        <comments>// &quot;trick&quot; is considerably faster than the classic code.</comments>
        <comments>//</comments>
        <comments>// TODO-FIXME: convert (x * 52429) into the equiv shift-add</comments>
        <comments>// sequence.</comments>
        <comments>//</comments>
        <comments>// RE:  Division by Invariant Integers using Multiplication</comments>
        <comments>//      T Gralund, P Montgomery</comments>
        <comments>//      ACM PLDI 1994</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Returns a &lt;code>String&lt;/code> object representing the&#xA;     * specified integer. The argument is converted to signed decimal&#xA;     * representation and returned as a string, exactly as if the&#xA;     * argument and radix 10 were given as arguments to the {@link&#xA;     * #toString(int, int)} method.&#xA;     *&#xA;     * @param   i   an integer to be converted.&#xA;     * @return  a string representation of the argument in base&amp;nbsp;10.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:StringReference" value="-2147483648"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="size">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </expression>
            </child>
            <expressionIf xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                <arguments xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                </arguments>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </expressionIf>
            <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            </expressionElse>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="buf">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.2/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getChars">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="buf">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Places characters representing the integer i into the&#xA;     * character array buf. The characters are placed into&#xA;     * the buffer backwards starting with the least significant&#xA;     * digit at the specified index (exclusive), and working&#xA;     * backwards from there.&#xA;     *&#xA;     * Will fail if i == Integer.MIN_VALUE&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="q">
          <typeReference xsi:type="types:Int"/>
          <additionalLocalVariables name="r"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="charPos">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sign">
          <typeReference xsi:type="types:Char"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:CharacterLiteral" value="45"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>// Generate two digits per iteration</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable/@additionalLocalVariables.0">
                <comments>// really: r = i - (q * 100);</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                        <shiftOperators xsi:type="operators:LeftShift"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
                        <shiftOperators xsi:type="operators:LeftShift"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        <shiftOperators xsi:type="operators:LeftShift"/>
                      </expression>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2">
                <arraySelectors>
                  <position xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable/@additionalLocalVariables.0"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2">
                <arraySelectors>
                  <position xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable/@additionalLocalVariables.0"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="65536"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Fall thru to fast mode for smaller numbers</comments>
        <comments>// assert(i &lt;= 65536, i);</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:ShiftExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="52429"/>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable/@additionalLocalVariables.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        <shiftOperators xsi:type="operators:LeftShift"/>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <shiftOperators xsi:type="operators:LeftShift"/>
                      </expression>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2">
                <comments>// r = i-(q*10) ...</comments>
                <arraySelectors>
                  <position xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable/@additionalLocalVariables.0"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Break"/>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
        </statement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2">
                <arraySelectors>
                  <position xsi:type="expressions:PrefixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
                    <operator xsi:type="operators:MinusMinus"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:Field" name="sizeTable">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="9"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="999"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="9999"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99999"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="999999"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="9999999"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="99999999"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="999999999"/>
          <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </initialValues>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="stringSize">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>// Requires positive x</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@init"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </returnValue>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@init"/>
              </arraySelectors>
            </children>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </condition>
        </statement>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseInt">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="radix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses the string argument as a signed integer in the radix &#xA;     * specified by the second argument. The characters in the string &#xA;     * must all be digits of the specified radix (as determined by &#xA;     * whether {@link java.lang.Character#digit(char, int)} returns a &#xA;     * nonnegative value), except that the first character may be an &#xA;     * ASCII minus sign &lt;code>'-'&lt;/code> (&lt;code>'&amp;#92;u002D'&lt;/code>) to &#xA;     * indicate a negative value. The resulting integer value is returned. &#xA;     * &lt;p>&#xA;     * An exception of type &lt;code>NumberFormatException&lt;/code> is&#xA;     * thrown if any of the following situations occurs:&#xA;     * &lt;ul>&#xA;     * &lt;li>The first argument is &lt;code>null&lt;/code> or is a string of&#xA;     * length zero.&#xA;     * &lt;li>The radix is either smaller than &#xA;     * {@link java.lang.Character#MIN_RADIX} or&#xA;     * larger than {@link java.lang.Character#MAX_RADIX}. &#xA;     * &lt;li>Any character of the string is not a digit of the specified&#xA;     * radix, except that the first character may be a minus sign&#xA;     * &lt;code>'-'&lt;/code> (&lt;code>'&amp;#92;u002D'&lt;/code>) provided that the&#xA;     * string is longer than length 1.&#xA;     * &lt;li>The value represented by the string is not a value of type&#xA;     * &lt;code>int&lt;/code>. &#xA;     * &lt;/ul>&lt;p>&#xA;     * Examples:&#xA;     * &lt;blockquote>&lt;pre>&#xA;     * parseInt(&quot;0&quot;, 10) returns 0&#xA;     * parseInt(&quot;473&quot;, 10) returns 473&#xA;     * parseInt(&quot;-0&quot;, 10) returns 0&#xA;     * parseInt(&quot;-FF&quot;, 16) returns -255&#xA;     * parseInt(&quot;1100110&quot;, 2) returns 102&#xA;     * parseInt(&quot;2147483647&quot;, 10) returns 2147483647&#xA;     * parseInt(&quot;-2147483648&quot;, 10) returns -2147483648&#xA;     * parseInt(&quot;2147483648&quot;, 10) throws a NumberFormatException&#xA;     * parseInt(&quot;99&quot;, 8) throws a NumberFormatException&#xA;     * parseInt(&quot;Kona&quot;, 10) throws a NumberFormatException&#xA;     * parseInt(&quot;Kona&quot;, 27) returns 411787&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * @param      s   the &lt;code>String&lt;/code> containing the integer &#xA;     * &#x9;&#x9;&#x9;representation to be parsed&#xA;     * @param      radix   the radix to be used while parsing &lt;code>s&lt;/code>.&#xA;     * @return     the integer represented by the string argument in the&#xA;     *             specified radix.&#xA;     * @exception  NumberFormatException if the &lt;code>String&lt;/code>&#xA;     * &#x9;&#x9;   does not contain a parsable &lt;code>int&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="radix "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                <children xsi:type="references:StringReference" value=" less than Character.MIN_RADIX"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Character.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="Character.class.xmi#//@classifiers.0"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="radix "/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                <children xsi:type="references:StringReference" value=" greater than Character.MAX_RADIX"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Character.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="Character.class.xmi#//@classifiers.0"/>
          </children>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="negative">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <additionalLocalVariables name="max">
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </initialValue>
          </additionalLocalVariables>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="limit">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="multmin">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="digit">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </next>
              </children>
              <children xsi:type="literals:CharacterLiteral" value="45"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    </child>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.7/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Character.class.xmi#//@classifiers.0/@members.134"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </arguments>
                        </next>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Character.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="NumberFormatException.class.xmi#//@classifiers.0/@members.3"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                      </value>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable/@additionalLocalVariables.0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:WhileLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable">
                    <comments>// Accumulating negatively avoids surprises near MAX_VALUE</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Character.class.xmi#//@classifiers.0/@members.134"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.23"/>
                          <arguments xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </arguments>
                        </next>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Character.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="NumberFormatException.class.xmi#//@classifiers.0/@members.3"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="NumberFormatException.class.xmi#//@classifiers.0/@members.3"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.7/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMultiplication"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="NumberFormatException.class.xmi#//@classifiers.0/@members.3"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.6/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.8/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable/@additionalLocalVariables.0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable/@additionalLocalVariables.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="NumberFormatException.class.xmi#//@classifiers.0/@members.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
            </throwable>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <comments>/* Only got &quot;-&quot; */</comments>
                <throwable xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="NumberFormatException.class.xmi#//@classifiers.0/@members.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                </throwable>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parseInt">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses the string argument as a signed decimal integer. The &#xA;     * characters in the string must all be decimal digits, except that &#xA;     * the first character may be an ASCII minus sign &lt;code>'-'&lt;/code> &#xA;     * (&lt;code>'&amp;#92;u002D'&lt;/code>) to indicate a negative value. The resulting &#xA;     * integer value is returned, exactly as if the argument and the radix &#xA;     * 10 were given as arguments to the &#xA;     * {@link #parseInt(java.lang.String, int)} method.&#xA;     *&#xA;     * @param s&#x9;   a &lt;code>String&lt;/code> containing the &lt;code>int&lt;/code>&#xA;     *             representation to be parsed&#xA;     * @return     the integer value represented by the argument in decimal.&#xA;     * @exception  NumberFormatException  if the string does not contain a&#xA;     *               parsable integer.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="radix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;code>Integer&lt;/code> object holding the value&#xA;     * extracted from the specified &lt;code>String&lt;/code> when parsed&#xA;     * with the radix given by the second argument. The first argument&#xA;     * is interpreted as representing a signed integer in the radix&#xA;     * specified by the second argument, exactly as if the arguments&#xA;     * were given to the {@link #parseInt(java.lang.String, int)}&#xA;     * method. The result is an &lt;code>Integer&lt;/code> object that&#xA;     * represents the integer value specified by the string.&#xA;     * &lt;p>&#xA;     * In other words, this method returns an &lt;code>Integer&lt;/code>&#xA;     * object equal to the value of:&#xA;     *&#xA;     * &lt;blockquote>&lt;code>&#xA;     * new Integer(Integer.parseInt(s, radix))  &#xA;     * &lt;/code>&lt;/blockquote>&#xA;     *&#xA;     * @param      s   the string to be parsed.&#xA;     * @param      radix the radix to be used in interpreting &lt;code>s&lt;/code>&#xA;     * @return     an &lt;code>Integer&lt;/code> object holding the value&#xA;     *             represented by the string argument in the specified&#xA;     *             radix.&#xA;     * @exception NumberFormatException if the &lt;code>String&lt;/code>&#xA;     * &#x9;&#x9;  does not contain a parsable &lt;code>int&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;code>Integer&lt;/code> object holding the&#xA;     * value of the specified &lt;code>String&lt;/code>. The argument is&#xA;     * interpreted as representing a signed decimal integer, exactly&#xA;     * as if the argument were given to the {@link&#xA;     * #parseInt(java.lang.String)} method. The result is an&#xA;     * &lt;code>Integer&lt;/code> object that represents the integer value&#xA;     * specified by the string.&#xA;     * &lt;p>&#xA;     * In other words, this method returns an &lt;code>Integer&lt;/code>&#xA;     * object equal to the value of:&#xA;     *&#xA;     * &lt;blockquote>&lt;code>&#xA;     * new Integer(Integer.parseInt(s))&#xA;     * &lt;/code>&lt;/blockquote>&#xA;     *&#xA;     * @param      s   the string to be parsed.&#xA;     * @return     an &lt;code>Integer&lt;/code> object holding the value&#xA;     *             represented by the string argument.&#xA;     * @exception  NumberFormatException  if the string cannot be parsed &#xA;     *             as an integer.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="IntegerCache">
      <members xsi:type="members:Constructor" name="IntegerCache">
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="cache">
        <initialValue xsi:type="arrays:ArrayInstantiationBySize">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <sizes xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                </expression>
              </child>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="127"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </sizes>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arrayDimensionsAfter/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="statements:Block">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.2/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.2/@statements.0/@init"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </arguments>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.2/@statements.0/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.1">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.2/@statements.0/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <modifiers xsi:type="modifiers:Static"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>Integer&lt;/tt> instance representing the specified&#xA;     * &lt;tt>int&lt;/tt> value.&#xA;     * If a new &lt;tt>Integer&lt;/tt> instance is not required, this method&#xA;     * should generally be used in preference to the constructor&#xA;     * {@link #Integer(int)}, as this method is likely to yield&#xA;     * significantly better space and time performance by caching&#xA;     * frequently requested values.&#xA;     *&#xA;     * @param  i an &lt;code>int&lt;/code> value.&#xA;     * @return a &lt;tt>Integer&lt;/tt> instance representing &lt;tt>i&lt;/tt>.&#xA;     * @since  1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="offset">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// must cache </comments>
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@members.1">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </next>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="127"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="value">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The value of the &lt;code>Integer&lt;/code>.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="Integer">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a newly allocated &lt;code>Integer&lt;/code> object that&#xA;     * represents the specified &lt;code>int&lt;/code> value.&#xA;     *&#xA;     * @param   value   the value to be represented by the &#xA;     *&#x9;&#x9;&#x9;&lt;code>Integer&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Integer">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          </value>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a newly allocated &lt;code>Integer&lt;/code> object that&#xA;     * represents the &lt;code>int&lt;/code> value indicated by the&#xA;     * &lt;code>String&lt;/code> parameter. The string is converted to an&#xA;     * &lt;code>int&lt;/code> value in exactly the manner used by the&#xA;     * &lt;code>parseInt&lt;/code> method for radix 10.&#xA;     *&#xA;     * @param      s   the &lt;code>String&lt;/code> to be converted to an&#xA;     *                 &lt;code>Integer&lt;/code>.&#xA;     * @exception  NumberFormatException  if the &lt;code>String&lt;/code> does not&#xA;     *               contain a parsable integer.&#xA;     * @see        java.lang.Integer#parseInt(java.lang.String, int)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="byteValue">
      <typeReference xsi:type="types:Byte"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Integer&lt;/code> as a&#xA;     * &lt;code>byte&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Byte"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shortValue">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Integer&lt;/code> as a&#xA;     * &lt;code>short&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Short"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intValue">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Integer&lt;/code> as an&#xA;     * &lt;code>int&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="longValue">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Integer&lt;/code> as a&#xA;     * &lt;code>long&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Long"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="floatValue">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Integer&lt;/code> as a&#xA;     * &lt;code>float&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Float"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doubleValue">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;code>Integer&lt;/code> as a&#xA;     * &lt;code>double&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Double"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>String&lt;/code> object representing this&#xA;     * &lt;code>Integer&lt;/code>'s value. The value is converted to signed&#xA;     * decimal representation and returned as a string, exactly as if&#xA;     * the integer value were given as an argument to the {@link&#xA;     * java.lang.Integer#toString(int)} method.&#xA;     *&#xA;     * @return  a string representation of the value of this object in&#xA;     *          base&amp;nbsp;10.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.83"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
          </next>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hash code for this &lt;code>Integer&lt;/code>.&#xA;     *&#xA;     * @return  a hash code value for this object, equal to the &#xA;     *          primitive &lt;code>int&lt;/code> value represented by this &#xA;     *          &lt;code>Integer&lt;/code> object. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares this object to the specified object.  The result is&#xA;     * &lt;code>true&lt;/code> if and only if the argument is not&#xA;     * &lt;code>null&lt;/code> and is an &lt;code>Integer&lt;/code> object that&#xA;     * contains the same &lt;code>int&lt;/code> value as this object.&#xA;     *&#xA;     * @param   obj   the object to compare with.&#xA;     * @return  &lt;code>true&lt;/code> if the objects are the same;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
              <children xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.26"/>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
                </expression>
              </children>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInteger">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the integer value of the system property with the&#xA;     * specified name.&#xA;     * &lt;p>&#xA;     * The first argument is treated as the name of a system property. &#xA;     * System properties are accessible through the &#xA;     * {@link java.lang.System#getProperty(java.lang.String)} method. The &#xA;     * string value of this property is then interpreted as an integer &#xA;     * value and an &lt;code>Integer&lt;/code> object representing this value is &#xA;     * returned. Details of possible numeric formats can be found with &#xA;     * the definition of &lt;code>getProperty&lt;/code>. &#xA;     * &lt;p>&#xA;     * If there is no property with the specified name, if the specified name&#xA;     * is empty or &lt;code>null&lt;/code>, or if the property does not have &#xA;     * the correct numeric format, then &lt;code>null&lt;/code> is returned.&#xA;     * &lt;p>&#xA;     * In other words, this method returns an &lt;code>Integer&lt;/code>&#xA;     * object equal to the value of:&#xA;     *&#xA;     * &lt;blockquote>&lt;code>&#xA;     * getInteger(nm, null)&#xA;     * &lt;/code>&lt;/blockquote>&#xA;     *&#xA;     * @param   nm   property name.&#xA;     * @return  the &lt;code>Integer&lt;/code> value of the property.&#xA;     * @see     java.lang.System#getProperty(java.lang.String)&#xA;     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInteger">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="val">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the integer value of the system property with the&#xA;     * specified name.&#xA;     * &lt;p>&#xA;     * The first argument is treated as the name of a system property.&#xA;     * System properties are accessible through the {@link&#xA;     * java.lang.System#getProperty(java.lang.String)} method. The &#xA;     * string value of this property is then interpreted as an integer &#xA;     * value and an &lt;code>Integer&lt;/code> object representing this value is &#xA;     * returned. Details of possible numeric formats can be found with &#xA;     * the definition of &lt;code>getProperty&lt;/code>. &#xA;     * &lt;p>&#xA;     * The second argument is the default value. An &lt;code>Integer&lt;/code> object&#xA;     * that represents the value of the second argument is returned if there&#xA;     * is no property of the specified name, if the property does not have&#xA;     * the correct numeric format, or if the specified name is empty or&#xA;     *  &lt;code>null&lt;/code>.&#xA;     * &lt;p>&#xA;     * In other words, this method returns an &lt;code>Integer&lt;/code> object &#xA;     * equal to the value of:&#xA;     * &lt;blockquote>&lt;code>&#xA;     * getInteger(nm, new Integer(val))&#xA;     * &lt;/code>&lt;/blockquote>&#xA;     * but in practice it may be implemented in a manner such as: &#xA;     * &lt;blockquote>&lt;pre>&#xA;     * Integer result = getInteger(nm, null);&#xA;     * return (result == null) ? new Integer(val) : result;&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     * to avoid the unnecessary allocation of an &lt;code>Integer&lt;/code> &#xA;     * object when the default value is not needed. &#xA;     *&#xA;     * @param   nm   property name.&#xA;     * @param   val   default value.&#xA;     * @return  the &lt;code>Integer&lt;/code> value of the property.&#xA;     * @see     java.lang.System#getProperty(java.lang.String)&#xA;     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.1"/>
          </expressionIf>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInteger">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="val">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the integer value of the system property with the&#xA;     * specified name.  The first argument is treated as the name of a&#xA;     * system property.  System properties are accessible through the&#xA;     * {@link java.lang.System#getProperty(java.lang.String)} method.&#xA;     * The string value of this property is then interpreted as an&#xA;     * integer value, as per the &lt;code>Integer.decode&lt;/code> method,&#xA;     * and an &lt;code>Integer&lt;/code> object representing this value is&#xA;     * returned.&#xA;     * &lt;p>&#xA;     * &lt;ul>&lt;li>If the property value begins with the two ASCII characters &#xA;     *         &lt;code>0x&lt;/code> or the ASCII character &lt;code>#&lt;/code>, not &#xA;     *      followed by a minus sign, then the rest of it is parsed as a &#xA;     *      hexadecimal integer exactly as by the method &#xA;     *      {@link #valueOf(java.lang.String, int)} with radix 16. &#xA;     * &lt;li>If the property value begins with the ASCII character &#xA;     *     &lt;code>0&lt;/code> followed by another character, it is parsed as an &#xA;     *     octal integer exactly as by the method &#xA;     *     {@link #valueOf(java.lang.String, int)} with radix 8. &#xA;     * &lt;li>Otherwise, the property value is parsed as a decimal integer &#xA;     * exactly as by the method {@link #valueOf(java.lang.String, int)} &#xA;     * with radix 10. &#xA;     * &lt;/ul>&lt;p>&#xA;     * The second argument is the default value. The default value is&#xA;     * returned if there is no property of the specified name, if the&#xA;     * property does not have the correct numeric format, or if the&#xA;     * specified name is empty or &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @param   nm   property name.&#xA;     * @param   val   default value.&#xA;     * @return  the &lt;code>Integer&lt;/code> value of the property.&#xA;     * @see     java.lang.System#getProperty(java.lang.String)&#xA;     * @see java.lang.System#getProperty(java.lang.String, java.lang.String)&#xA;     * @see java.lang.Integer#decode&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="v">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.25"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.36">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
                </next>
              </returnValue>
            </statements>
            <catcheBlocks>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="decode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Decodes a &lt;code>String&lt;/code> into an &lt;code>Integer&lt;/code>.&#xA;     * Accepts decimal, hexadecimal, and octal numbers given&#xA;     * by the following grammar:&#xA;     *&#xA;     * &lt;blockquote>&#xA;     * &lt;dl>&#xA;     * &lt;dt>&lt;i>DecodableString:&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub> DecimalNumeral&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>0x&lt;/code> &lt;i>HexDigits&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>0X&lt;/code> &lt;i>HexDigits&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>#&lt;/code> &lt;i>HexDigits&lt;/i>&#xA;     * &lt;dd>&lt;i>Sign&lt;sub>opt&lt;/sub>&lt;/i> &lt;code>0&lt;/code> &lt;i>OctalDigits&lt;/i>&#xA;     * &lt;p>&#xA;     * &lt;dt>&lt;i>Sign:&lt;/i>&#xA;     * &lt;dd>&lt;code>-&lt;/code>&#xA;     * &lt;/dl>&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * &lt;i>DecimalNumeral&lt;/i>, &lt;i>HexDigits&lt;/i>, and &lt;i>OctalDigits&lt;/i>&#xA;     * are defined in &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282&quot;>&amp;sect;3.10.1&lt;/a> &#xA;     * of the &lt;a href=&quot;http://java.sun.com/docs/books/jls/html/&quot;>Java &#xA;     * Language Specification&lt;/a>.&#xA;     * &lt;p>&#xA;     * The sequence of characters following an (optional) negative&#xA;     * sign and/or radix specifier (&amp;quot;&lt;code>0x&lt;/code>&amp;quot;,&#xA;     * &amp;quot;&lt;code>0X&lt;/code>&amp;quot;, &amp;quot;&lt;code>#&lt;/code>&amp;quot;, or&#xA;     * leading zero) is parsed as by the &lt;code>Integer.parseInt&lt;/code>&#xA;     * method with the indicated radix (10, 16, or 8).  This sequence&#xA;     * of characters must represent a positive value or a {@link&#xA;     * NumberFormatException} will be thrown.  The result is negated&#xA;     * if first character of the specified &lt;code>String&lt;/code> is the&#xA;     * minus sign.  No whitespace characters are permitted in the&#xA;     * &lt;code>String&lt;/code>.&#xA;     *&#xA;     * @param     nm the &lt;code>String&lt;/code> to decode.&#xA;     * @return    a &lt;code>Integer&lt;/code> object holding the &lt;code>int&lt;/code>&#xA;     *&#x9;&#x9;   value represented by &lt;code>nm&lt;/code>&#xA;     * @exception NumberFormatException  if the &lt;code>String&lt;/code> does not&#xA;     *            contain a parsable integer.&#xA;     * @see java.lang.Integer#parseInt(java.lang.String, int)&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="radix">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="index">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="negative">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Handle minus sign, if present</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
              <operator xsi:type="operators:PlusPlus"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
            <arguments xsi:type="references:StringReference" value="-"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Handle radix specifier, if present</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
              <arguments xsi:type="references:StringReference" value="0x"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
              <arguments xsi:type="references:StringReference" value="0X"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
            </next>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
              <arguments xsi:type="references:StringReference" value="#"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
            </next>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
                  <arguments xsi:type="references:StringReference" value="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
                </next>
              </children>
              <children xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </children>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </children>
            </condition>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Negative sign in wrong position"/>
          </throwable>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.41"/>
            <arguments xsi:type="references:StringReference" value="-"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.55"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable"/>
              <expressionIf xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <arguments xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.26"/>
                  </child>
                </arguments>
              </expressionIf>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@variable"/>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="constant">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// If number is Integer.MIN_VALUE, we'll end up here. The next line</comments>
                  <comments>// handles this case, and causes any genuine format error to be</comments>
                  <comments>// rethrown.</comments>
                  <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:ConditionalExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable"/>
                <expressionIf xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="-"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.55"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.55"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.1/@variable"/>
                  </next>
                </expressionElse>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.7/@catcheBlocks.0/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                </next>
              </value>
            </expression>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NumberFormatException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.3/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareTo">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="anotherInteger">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares two &lt;code>Integer&lt;/code> objects numerically.&#xA;     *&#xA;     * @param   anotherInteger   the &lt;code>Integer&lt;/code> to be compared.&#xA;     * @return&#x9;the value &lt;code>0&lt;/code> if this &lt;code>Integer&lt;/code> is&#xA;     * &#x9;&#x9;equal to the argument &lt;code>Integer&lt;/code>; a value less than&#xA;     * &#x9;&#x9;&lt;code>0&lt;/code> if this &lt;code>Integer&lt;/code> is numerically less&#xA;     * &#x9;&#x9;than the argument &lt;code>Integer&lt;/code>; and a value greater &#xA;     * &#x9;&#x9;than &lt;code>0&lt;/code> if this &lt;code>Integer&lt;/code> is numerically&#xA;     * &#x9;&#x9; greater than the argument &lt;code>Integer&lt;/code> (signed&#xA;     * &#x9;&#x9; comparison).&#xA;     * @since   1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="thisVal">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="anotherVal">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </child>
            <expressionIf xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </expressionIf>
            <expressionElse xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.1/@variable"/>
                </child>
                <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </expression>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="SIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Bit twiddling</comments>
        <comments>/**&#xA;     * The number of bits used to represent an &lt;tt>int&lt;/tt> value in two's&#xA;     * complement binary form.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="highestOneBit">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;tt>int&lt;/tt> value with at most a single one-bit, in the&#xA;     * position of the highest-order (&quot;leftmost&quot;) one-bit in the specified&#xA;     * &lt;tt>int&lt;/tt> value.  Returns zero if the specified value has no&#xA;     * one-bits in its two's complement binary representation, that is, if it&#xA;     * is equal to zero.&#xA;     *&#xA;     * @return an &lt;tt>int&lt;/tt> value with a single one-bit, in the position&#xA;     *     of the highest-order one-bit in the specified value, or zero if&#xA;     *     the specified value is itself equal to zero.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0">
            <comments>// HD, Figure 3-1</comments>
          </child>
          <assignmentOperator xsi:type="operators:AssignmentOr"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <assignmentOperator xsi:type="operators:AssignmentOr"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <assignmentOperator xsi:type="operators:AssignmentOr"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <assignmentOperator xsi:type="operators:AssignmentOr"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <assignmentOperator xsi:type="operators:AssignmentOr"/>
          <value xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <shiftOperators xsi:type="operators:UnsignedRightShift"/>
            </expression>
          </children>
          <additiveOperators xsi:type="operators:Subtraction"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="lowestOneBit">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an &lt;tt>int&lt;/tt> value with at most a single one-bit, in the&#xA;     * position of the lowest-order (&quot;rightmost&quot;) one-bit in the specified&#xA;     * &lt;tt>int&lt;/tt> value.  Returns zero if the specified value has no&#xA;     * one-bits in its two's complement binary representation, that is, if it&#xA;     * is equal to zero.&#xA;     *&#xA;     * @return an &lt;tt>int&lt;/tt> value with a single one-bit, in the position&#xA;     *     of the lowest-order one-bit in the specified value, or zero if&#xA;     *     the specified value is itself equal to zero.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <comments>// HD, Section 2-1</comments>
        <returnValue xsi:type="expressions:AndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="numberOfLeadingZeros">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of zero bits preceding the highest-order&#xA;     * (&quot;leftmost&quot;) one-bit in the two's complement binary representation&#xA;     * of the specified &lt;tt>int&lt;/tt> value.  Returns 32 if the&#xA;     * specified value has no one-bits in its two's complement representation,&#xA;     * in other words if it is equal to zero.&#xA;     *&#xA;     * &lt;p>Note that this method is closely related to the logarithm base 2.&#xA;     * For all positive &lt;tt>int&lt;/tt> values x:&#xA;     * &lt;ul>&#xA;     * &lt;li>floor(log&lt;sub>2&lt;/sub>(x)) = &lt;tt>31 - numberOfLeadingZeros(x)&lt;/tt>&#xA;     * &lt;li>ceil(log&lt;sub>2&lt;/sub>(x)) = &lt;tt>32 - numberOfLeadingZeros(x - 1)&lt;/tt>&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return the number of zero bits preceding the highest-order&#xA;     *     (&quot;leftmost&quot;) one-bit in the two's complement binary representation&#xA;     *     of the specified &lt;tt>int&lt;/tt> value, or 32 if the value&#xA;     *     is equal to zero.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <comments>// HD, Figure 5-6</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              <assignmentOperator xsi:type="operators:AssignmentLeftShift"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <shiftOperators xsi:type="operators:UnsignedRightShift"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              <assignmentOperator xsi:type="operators:AssignmentLeftShift"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
            <shiftOperators xsi:type="operators:UnsignedRightShift"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              <assignmentOperator xsi:type="operators:AssignmentLeftShift"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="28"/>
            <shiftOperators xsi:type="operators:UnsignedRightShift"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              <assignmentOperator xsi:type="operators:AssignmentLeftShift"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="30"/>
            <shiftOperators xsi:type="operators:UnsignedRightShift"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@variable"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
            <shiftOperators xsi:type="operators:UnsignedRightShift"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="numberOfTrailingZeros">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of zero bits following the lowest-order (&quot;rightmost&quot;)&#xA;     * one-bit in the two's complement binary representation of the specified&#xA;     * &lt;tt>int&lt;/tt> value.  Returns 32 if the specified value has no&#xA;     * one-bits in its two's complement representation, in other words if it is&#xA;     * equal to zero.&#xA;     *&#xA;     * @return the number of zero bits following the lowest-order (&quot;rightmost&quot;)&#xA;     *     one-bit in the two's complement binary representation of the&#xA;     *     specified &lt;tt>int&lt;/tt> value, or 32 if the value is equal&#xA;     *     to zero.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="y">
          <typeReference xsi:type="types:Int">
            <comments>// HD, Figure 5-14</comments>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ShiftExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <shiftOperators xsi:type="operators:LeftShift"/>
                </expression>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
              <shiftOperators xsi:type="operators:UnsignedRightShift"/>
            </expression>
          </children>
          <additiveOperators xsi:type="operators:Subtraction"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="bitCount">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of one-bits in the two's complement binary&#xA;     * representation of the specified &lt;tt>int&lt;/tt> value.  This function is&#xA;     * sometimes referred to as the &lt;i>population count&lt;/i>.&#xA;     *&#xA;     * @return the number of one-bits in the two's complement binary&#xA;     *     representation of the specified &lt;tt>int&lt;/tt> value.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0">
            <comments>// HD, Figure 5-2</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                  </expression>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="1431655765"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="858993459"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                  </expression>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="858993459"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </expression>
            </children>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="252645135"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <children xsi:type="literals:HexIntegerLiteral" hexValue="63"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="rotateLeft">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="distance">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value obtained by rotating the two's complement binary&#xA;     * representation of the specified &lt;tt>int&lt;/tt> value left by the&#xA;     * specified number of bits.  (Bits shifted out of the left hand, or&#xA;     * high-order, side reenter on the right, or low-order.)&#xA;     *&#xA;     * &lt;p>Note that left rotation with a negative distance is equivalent to&#xA;     * right rotation: &lt;tt>rotateLeft(val, -distance) == rotateRight(val,&#xA;     * distance)&lt;/tt>.  Note also that rotation by any multiple of 32 is a&#xA;     * no-op, so all but the last five bits of the rotation distance can be&#xA;     * ignored, even if the distance is negative: &lt;tt>rotateLeft(val,&#xA;     * distance) == rotateLeft(val, distance &amp; 0x1F)&lt;/tt>.&#xA;     *&#xA;     * @return the value obtained by rotating the two's complement binary&#xA;     *     representation of the specified &lt;tt>int&lt;/tt> value left by the&#xA;     *     specified number of bits.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:InclusiveOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.1"/>
              <shiftOperators xsi:type="operators:LeftShift"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.1"/>
              </children>
              <shiftOperators xsi:type="operators:UnsignedRightShift"/>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="rotateRight">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="distance">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value obtained by rotating the two's complement binary&#xA;     * representation of the specified &lt;tt>int&lt;/tt> value right by the&#xA;     * specified number of bits.  (Bits shifted out of the right hand, or&#xA;     * low-order, side reenter on the left, or high-order.)&#xA;     *&#xA;     * &lt;p>Note that right rotation with a negative distance is equivalent to&#xA;     * left rotation: &lt;tt>rotateRight(val, -distance) == rotateLeft(val,&#xA;     * distance)&lt;/tt>.  Note also that rotation by any multiple of 32 is a&#xA;     * no-op, so all but the last five bits of the rotation distance can be&#xA;     * ignored, even if the distance is negative: &lt;tt>rotateRight(val,&#xA;     * distance) == rotateRight(val, distance &amp; 0x1F)&lt;/tt>.&#xA;     *&#xA;     * @return the value obtained by rotating the two's complement binary&#xA;     *     representation of the specified &lt;tt>int&lt;/tt> value right by the&#xA;     *     specified number of bits.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:InclusiveOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.1"/>
              <shiftOperators xsi:type="operators:UnsignedRightShift"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.1"/>
              </children>
              <shiftOperators xsi:type="operators:LeftShift"/>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reverse">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value obtained by reversing the order of the bits in the&#xA;     * two's complement binary representation of the specified &lt;tt>int&lt;/tt>&#xA;     * value.&#xA;     *&#xA;     * @return the value obtained by reversing order of the bits in the&#xA;     *     specified &lt;tt>int&lt;/tt> value.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0">
            <comments>// HD, Figure 7-1</comments>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="expressions:ShiftExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="1431655765"/>
                </expression>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <shiftOperators xsi:type="operators:LeftShift"/>
            </children>
            <children xsi:type="expressions:AndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="1431655765"/>
            </children>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="expressions:ShiftExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="858993459"/>
                </expression>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <shiftOperators xsi:type="operators:LeftShift"/>
            </children>
            <children xsi:type="expressions:AndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="858993459"/>
            </children>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="expressions:ShiftExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="252645135"/>
                </expression>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
              <shiftOperators xsi:type="operators:LeftShift"/>
            </children>
            <children xsi:type="expressions:AndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                  <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="252645135"/>
            </children>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="65280"/>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                    <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                  </expression>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="65280"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </expression>
            </children>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="signum">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the signum function of the specified &lt;tt>int&lt;/tt> value.  (The&#xA;     * return value is -1 if the specified value is negative; 0 if the&#xA;     * specified value is zero; and 1 if the specified value is positive.)&#xA;     *&#xA;     * @return the signum function of the specified &lt;tt>int&lt;/tt> value.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <comments>// HD, Section 2-7</comments>
        <returnValue xsi:type="expressions:InclusiveOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="31"/>
              <shiftOperators xsi:type="operators:UnsignedRightShift"/>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="reverseBytes">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value obtained by reversing the order of the bytes in the&#xA;     * two's complement representation of the specified &lt;tt>int&lt;/tt> value.&#xA;     *&#xA;     * @return the value obtained by reversing the bytes in the specified&#xA;     *     &lt;tt>int&lt;/tt> value.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:InclusiveOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </expression>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                  <shiftOperators xsi:type="operators:RightShift"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="65280"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                  <shiftOperators xsi:type="operators:LeftShift"/>
                </expression>
              </children>
              <children xsi:type="literals:HexIntegerLiteral" hexValue="16711680"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="1360826667806852920"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** use serialVersionUID from JDK 1.0.2 for interoperability */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Integer&lt;/code> class wraps a value of the primitive type&#xA; * &lt;code>int&lt;/code> in an object. An object of type&#xA; * &lt;code>Integer&lt;/code> contains a single field whose type is&#xA; * &lt;code>int&lt;/code>.&#xA; *&#xA; *  &lt;p>&#xA; * &#xA; * In addition, this class provides several methods for converting an&#xA; * &lt;code>int&lt;/code> to a &lt;code>String&lt;/code> and a &lt;code>String&lt;/code>&#xA; * to an &lt;code>int&lt;/code>, as well as other constants and methods&#xA; * useful when dealing with an &lt;code>int&lt;/code>.&#xA; *&#xA; * &lt;p>Implementation note: The implementations of the &quot;bit twiddling&quot;&#xA; * methods (such as {@link #highestOneBit(int) highestOneBit} and&#xA; * {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are&#xA; * based on material from Henry S. Warren, Jr.'s &lt;i>Hacker's&#xA; * Delight&lt;/i>, (Addison Wesley, 2002).&#xA; *&#xA; * @author  Lee Boynton&#xA; * @author  Arthur van Hoff&#xA; * @author  Josh Bloch&#xA; * @version 1.90, 05/11/04&#xA; * @since JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Interface" href="Comparable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Number.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
