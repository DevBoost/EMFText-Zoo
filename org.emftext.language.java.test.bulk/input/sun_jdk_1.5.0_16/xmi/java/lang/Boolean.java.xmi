<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="Boolean.java">
  <comments>/*&#xA; * @(#)Boolean.java&#x9;1.51 04/05/11&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Boolean">
    <members xsi:type="members:Field" name="TRUE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:BooleanLiteral" value="true"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * The &lt;code>Boolean&lt;/code> object corresponding to the primitive &#xA;     * value &lt;code>true&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FALSE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="literals:BooleanLiteral"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * The &lt;code>Boolean&lt;/code> object corresponding to the primitive &#xA;     * value &lt;code>false&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TYPE">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.92"/>
          <arguments xsi:type="references:StringReference" value="boolean"/>
        </next>
        <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The Class object representing the primitive type boolean.&#xA;     *&#xA;     * @since   JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="value">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The value of the Boolean.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="3665804199014368530"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** use serialVersionUID from JDK 1.0.2 for interoperability */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="Boolean">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a &lt;code>Boolean&lt;/code> object representing the &#xA;     * &lt;code>value&lt;/code> argument. &#xA;     *&#xA;     * &lt;p>&lt;b>Note: It is rarely appropriate to use this constructor.&#xA;     * Unless a &lt;i>new&lt;/i> instance is required, the static factory&#xA;     * {@link #valueOf(boolean)} is generally a better choice. It is&#xA;     * likely to yield significantly better space and time performance.&lt;/b>&#xA;     * &#xA;     * @param   value   the value of the &lt;code>Boolean&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Boolean">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allocates a &lt;code>Boolean&lt;/code> object representing the value &#xA;     * &lt;code>true&lt;/code> if the string argument is not &lt;code>null&lt;/code> &#xA;     * and is equal, ignoring case, to the string &lt;code>&quot;true&quot;&lt;/code>. &#xA;     * Otherwise, allocate a &lt;code>Boolean&lt;/code> object representing the &#xA;     * value &lt;code>false&lt;/code>. Examples:&lt;p>&#xA;     * &lt;tt>new&amp;nbsp;Boolean(&quot;True&quot;)&lt;/tt> produces a &lt;tt>Boolean&lt;/tt> object &#xA;     * that represents &lt;tt>true&lt;/tt>.&lt;br>&#xA;     * &lt;tt>new&amp;nbsp;Boolean(&quot;yes&quot;)&lt;/tt> produces a &lt;tt>Boolean&lt;/tt> object &#xA;     * that represents &lt;tt>false&lt;/tt>.&#xA;     *&#xA;     * @param   s   the string to be converted to a &lt;code>Boolean&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="parseBoolean">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parses the string argument as a boolean.  The &lt;code>boolean&lt;/code> &#xA;     * returned represents the value &lt;code>true&lt;/code> if the string argument &#xA;     * is not &lt;code>null&lt;/code> and is equal, ignoring case, to the string &#xA;     * &lt;code>&quot;true&quot;&lt;/code>.&#xA;     *&#xA;     * @param      s   the &lt;code>String&lt;/code> containing the boolean&#xA;     *                 representation to be parsed&#xA;     * @return     the boolean represented by the string argument&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="booleanValue">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of this &lt;tt>Boolean&lt;/tt> object as a boolean &#xA;     * primitive.&#xA;     *&#xA;     * @return  the primitive &lt;code>boolean&lt;/code> value of this object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>Boolean&lt;/tt> instance representing the specified&#xA;     * &lt;tt>boolean&lt;/tt> value.  If the specified &lt;tt>boolean&lt;/tt> value&#xA;     * is &lt;tt>true&lt;/tt>, this method returns &lt;tt>Boolean.TRUE&lt;/tt>;&#xA;     * if it is &lt;tt>false&lt;/tt>, this method returns &lt;tt>Boolean.FALSE&lt;/tt>.&#xA;     * If a new &lt;tt>Boolean&lt;/tt> instance is not required, this method&#xA;     * should generally be used in preference to the constructor&#xA;     * {@link #Boolean(boolean)}, as this method is likely to yield&#xA;     * significantly better space and time performance.&#xA;     *&#xA;     * @param  b a boolean value.&#xA;     * @return a &lt;tt>Boolean&lt;/tt> instance representing &lt;tt>b&lt;/tt>.&#xA;     * @since  1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>Boolean&lt;/code> with a value represented by the&#xA;     * specified String.  The &lt;code>Boolean&lt;/code> returned represents the&#xA;     * value &lt;code>true&lt;/code> if the string argument is not &lt;code>null&lt;/code>&#xA;     * and is equal, ignoring case, to the string &lt;code>&quot;true&quot;&lt;/code>. &lt;p>&#xA;     * Example: &lt;tt>Boolean.valueOf(&quot;True&quot;)&lt;/tt> returns &lt;tt>true&lt;/tt>.&lt;br>&#xA;     * Example: &lt;tt>Boolean.valueOf(&quot;yes&quot;)&lt;/tt> returns &lt;tt>false&lt;/tt>.&#xA;     *&#xA;     * @param   s   a string.&#xA;     * @return  the &lt;code>Boolean&lt;/code> value represented by the string.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>String&lt;/tt> object representing the specified&#xA;     * boolean.  If the specified boolean is &lt;code>true&lt;/code>, then&#xA;     * the string &lt;tt>&quot;true&quot;&lt;/tt> will be returned, otherwise the&#xA;     * string &lt;tt>&quot;false&quot;&lt;/tt> will be returned.&#xA;     *&#xA;     * @param b&#x9;the boolean to be converted&#xA;     * @return the string representation of the specified &lt;code>boolean&lt;/code>&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <expressionIf xsi:type="references:StringReference" value="true"/>
          <expressionElse xsi:type="references:StringReference" value="false"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>String&lt;/tt> object representing this Boolean's&#xA;     * value.  If this object represents the value &lt;code>true&lt;/code>,&#xA;     * a string equal to &lt;code>&quot;true&quot;&lt;/code> is returned. Otherwise, a&#xA;     * string equal to &lt;code>&quot;false&quot;&lt;/code> is returned.&#xA;     *&#xA;     * @return  a string representation of this object. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <expressionIf xsi:type="references:StringReference" value="true"/>
          <expressionElse xsi:type="references:StringReference" value="false"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hash code for this &lt;tt>Boolean&lt;/tt> object.&#xA;     *&#xA;     * @return  the integer &lt;tt>1231&lt;/tt> if this object represents &#xA;     * &lt;tt>true&lt;/tt>; returns the integer &lt;tt>1237&lt;/tt> if this &#xA;     * object represents &lt;tt>false&lt;/tt>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1231"/>
          <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="1237"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if and only if the argument is not &#xA;     * &lt;code>null&lt;/code> and is a &lt;code>Boolean &lt;/code>object that &#xA;     * represents the same &lt;code>boolean&lt;/code> value as this object. &#xA;     *&#xA;     * @param   obj   the object to compare with.&#xA;     * @return  &lt;code>true&lt;/code> if the Boolean objects represent the &#xA;     *          same value; &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <children xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.8"/>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
                </expression>
              </children>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBoolean">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if and only if the system property &#xA;     * named by the argument exists and is equal to the string &#xA;     * &lt;code>&quot;true&quot;&lt;/code>. (Beginning with version 1.0.2 of the &#xA;     * Java&lt;font size=&quot;-2&quot;>&lt;sup>TM&lt;/sup>&lt;/font> platform, the test of &#xA;     * this string is case insensitive.) A system property is accessible &#xA;     * through &lt;code>getProperty&lt;/code>, a method defined by the &#xA;     * &lt;code>System&lt;/code> class.&#xA;     * &lt;p>&#xA;     * If there is no property with the specified name, or if the specified&#xA;     * name is empty or null, then &lt;code>false&lt;/code> is returned.&#xA;     *&#xA;     * @param   name   the system property name.&#xA;     * @return  the &lt;code>boolean&lt;/code> value of the system property.&#xA;     * @see     java.lang.System#getProperty(java.lang.String)&#xA;     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="result">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.25"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
              </arguments>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareTo">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares this &lt;tt>Boolean&lt;/tt> instance with another.&#xA;     *&#xA;     * @param   b the &lt;tt>Boolean&lt;/tt> instance to be compared&#xA;     * @return  zero if this object represents the same boolean value as the&#xA;     *          argument; a positive value if this object represents true&#xA;     *          and the argument represents false; and a negative value if&#xA;     *          this object represents false and the argument represents true&#xA;     * @throws  NullPointerException if the argument is &lt;tt>null&lt;/tt>&#xA;     * @see     Comparable&#xA;     * @since  1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            </child>
            <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <expressionElse xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <expressionElse xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expressionElse>
              </expression>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toBoolean">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="references:StringReference" value="true"/>
              </next>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The Boolean class wraps a value of the primitive type &#xA; * &lt;code>boolean&lt;/code> in an object. An object of type &#xA; * &lt;code>Boolean&lt;/code> contains a single field whose type is &#xA; * &lt;code>boolean&lt;/code>. &#xA; * &lt;p>&#xA; * In addition, this class provides many methods for &#xA; * converting a &lt;code>boolean&lt;/code> to a &lt;code>String&lt;/code> and a &#xA; * &lt;code>String&lt;/code> to a &lt;code>boolean&lt;/code>, as well as other &#xA; * constants and methods useful when dealing with a &#xA; * &lt;code>boolean&lt;/code>. &#xA; *&#xA; * @author  Arthur van Hoff&#xA; * @version 1.51, 05/11/04&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Interface" href="Comparable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
