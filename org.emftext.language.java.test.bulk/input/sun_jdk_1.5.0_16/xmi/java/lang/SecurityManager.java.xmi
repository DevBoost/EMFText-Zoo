<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="SecurityManager.java">
  <comments>/*&#xA; * @(#)SecurityManager.java&#x9;1.136 04/06/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/FileDescriptor.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/FilePermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../awt/AWTPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/PropertyPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <classifier xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../net/NetPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../net/InetAddress.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Interface" href="reflect/Member.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="SecurityManager">
    <members xsi:type="members:Field" name="inCheck">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * This field is &lt;code>true&lt;/code> if there is a security check in &#xA;     * progress; &lt;code>false&lt;/code> otherwise.&#xA;     *&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="initialized">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* &#xA;     * Have we been initialized. Effective against finalizer attacks.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="hasAllPermission">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * returns true if the current context has been granted AllPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.12"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
          <parameter name="se">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="SecurityException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInCheck">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Tests if there is a security check in progress.&#xA;     *&#xA;     * @return the value of the &lt;code>inCheck&lt;/code> field. This field &#xA;     *          should contain &lt;code>true&lt;/code> if a security check is&#xA;     *          in progress,&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     * @see     java.lang.SecurityManager#inCheck&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="SecurityManager">
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sm">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
              </next>
              <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statements.0/@variable">
                <comments>// ask the currently installed security manager if we </comments>
                <comments>// can create a new one.</comments>
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:StringReference" value="createSecurityManager"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </lockProvider>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new &lt;code>SecurityManager&lt;/code>.&#xA;     *&#xA;     * &lt;p> If there is a security manager already installed, this method first&#xA;     * calls the security manager's &lt;code>checkPermission&lt;/code> method&#xA;     * with the &lt;code>RuntimePermission(&quot;createSecurityManager&quot;)&lt;/code>&#xA;     * permission to ensure the calling thread has permission to create a new &#xA;     * security manager.&#xA;     * This may result in throwing a &lt;code>SecurityException&lt;/code>.&#xA;     *&#xA;     * @exception  java.lang.SecurityException if a security manager already &#xA;     *             exists and its &lt;code>checkPermission&lt;/code> method &#xA;     *             doesn't allow creation of a new security manager.&#xA;     * @see        java.lang.System#getSecurityManager()&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     * @see java.lang.RuntimePermission&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClassContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns the current execution stack as an array of classes. &#xA;     * &lt;p>&#xA;     * The length of the array is the number of methods on the execution &#xA;     * stack. The element at index &lt;code>0&lt;/code> is the class of the &#xA;     * currently executing method, the element at index &lt;code>1&lt;/code> is &#xA;     * the class of that method's caller, and so on. &#xA;     *&#xA;     * @return  the execution stack.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="currentClassLoader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns the class loader of the most recently executing method from&#xA;     * a class defined using a non-system class loader. A non-system &#xA;     * class loader is defined as being a class loader that is not equal to&#xA;     * the system class loader (as returned &#xA;     * by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.&#xA;     * &lt;p>&#xA;     * This method will return&#xA;     * &lt;code>null&lt;/code> in the following three cases:&lt;p>&#xA;     * &lt;ol>&#xA;     *   &lt;li>All methods on the execution stack are from classes&#xA;     *   defined using the system class loader or one of its ancestors.&#xA;     *&#xA;     *   &lt;li>All methods on the execution stack up to the first&#xA;     *   &quot;privileged&quot; caller &#xA;     *   (see {@link java.security.AccessController#doPrivileged})&#xA;     *   are from classes&#xA;     *   defined using the system class loader or one of its ancestors.&#xA;     *&#xA;     *   &lt;li> A call to &lt;code>checkPermission&lt;/code> with &#xA;     *   &lt;code>java.security.AllPermission&lt;/code> does not &#xA;     *   result in a SecurityException. &#xA;     *&#xA;     * &lt;/ol>&#xA;     *&#xA;     * @return  the class loader of the most recent occurrence on the stack&#xA;     *          of a method from a class defined using a non-system class &#xA;     *          loader.&#xA;     *&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     * &#xA;     * @see  java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader&#xA;     * @see  #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cl">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:NullLiteral"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.2"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="currentClassLoader0">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="currentLoadedClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns the class of the most recently executing method from&#xA;     * a class defined using a non-system class loader. A non-system &#xA;     * class loader is defined as being a class loader that is not equal to&#xA;     * the system class loader (as returned &#xA;     * by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.&#xA;     * &lt;p>&#xA;     * This method will return&#xA;     * &lt;code>null&lt;/code> in the following three cases:&lt;p>&#xA;     * &lt;ol>&#xA;     *   &lt;li>All methods on the execution stack are from classes&#xA;     *   defined using the system class loader or one of its ancestors.&#xA;     *&#xA;     *   &lt;li>All methods on the execution stack up to the first&#xA;     *   &quot;privileged&quot; caller&#xA;     *   (see {@link java.security.AccessController#doPrivileged})&#xA;     *   are from classes&#xA;     *   defined using the system class loader or one of its ancestors.&#xA;     *&#xA;     *   &lt;li> A call to &lt;code>checkPermission&lt;/code> with &#xA;     *   &lt;code>java.security.AllPermission&lt;/code> does not &#xA;     *   result in a SecurityException. &#xA;     *&#xA;     * &lt;/ol>&#xA;     *&#xA;     * @return  the class  of the most recent occurrence on the stack&#xA;     *          of a method from a class defined using a non-system class &#xA;     *          loader.&#xA;     *&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     * &#xA;     * @see  java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader&#xA;     * @see  #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.55"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:NullLiteral"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.2"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="classDepth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns the stack depth of the specified class. &#xA;     *&#xA;     * @param   name   the fully qualified name of the class to search for.&#xA;     * @return  the depth on the stack frame of the first occurrence of a&#xA;     *          method from a class with the specified name;&#xA;     *          &lt;code>-1&lt;/code> if such a frame cannot be found.&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     *&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="classLoaderDepth">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns the stack depth of the most recently executing method &#xA;     * from a class defined using a non-system class loader.  A non-system &#xA;     * class loader is defined as being a class loader that is not equal to&#xA;     * the system class loader (as returned &#xA;     * by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.&#xA;     * &lt;p>&#xA;     * This method will return&#xA;     * -1 in the following three cases:&lt;p>&#xA;     * &lt;ol>&#xA;     *   &lt;li>All methods on the execution stack are from classes&#xA;     *   defined using the system class loader or one of its ancestors.&#xA;     *&#xA;     *   &lt;li>All methods on the execution stack up to the first&#xA;     *   &quot;privileged&quot; caller&#xA;     *   (see {@link java.security.AccessController#doPrivileged})&#xA;     *   are from classes&#xA;     *   defined using the system class loader or one of its ancestors.&#xA;     *&#xA;     *   &lt;li> A call to &lt;code>checkPermission&lt;/code> with &#xA;     *   &lt;code>java.security.AllPermission&lt;/code> does not &#xA;     *   result in a SecurityException. &#xA;     *&#xA;     * &lt;/ol>&#xA;     *&#xA;     * @return the depth on the stack frame of the most recent occurrence of&#xA;     *          a method from a class defined using a non-system class loader.&#xA;     *&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     * &#xA;     * @see   java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader&#xA;     * @see   #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="depth">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.11"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>// make sure we don't include ourself</comments>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </value>
              </expression>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.2"/>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                <operator xsi:type="operators:MinusMinus"/>
              </expression>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="classLoaderDepth0">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="inClass">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Tests if a method from a class with the specified&#xA;     *         name is on the execution stack. &#xA;     *&#xA;     * @param  name   the fully qualified name of the class.&#xA;     * @return &lt;code>true&lt;/code> if a method from a class with the specified&#xA;     *         name is on the execution stack; &lt;code>false&lt;/code> otherwise.&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:RelationExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="inClassLoader">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Basically, tests if a method from a class defined using a&#xA;     *          class loader is on the execution stack.&#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if a call to &lt;code>currentClassLoader&lt;/code>&#xA;     *          has a non-null return value.&#xA;     *&#xA;     * @deprecated This type of security checking is not recommended.&#xA;     *  It is recommended that the &lt;code>checkPermission&lt;/code>&#xA;     *  call be used instead.&#xA;     * @see        #currentClassLoader() currentClassLoader &#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSecurityContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an object that encapsulates the current execution &#xA;     * environment. The result of this method is used, for example, by the &#xA;     * three-argument &lt;code>checkConnect&lt;/code> method and by the &#xA;     * two-argument &lt;code>checkRead&lt;/code> method. &#xA;     * These methods are needed because a trusted method may be called &#xA;     * on to read a file or open a socket on behalf of another method. &#xA;     * The trusted method needs to determine if the other (possibly &#xA;     * untrusted) method would be allowed to perform the operation on its &#xA;     * own. &#xA;     * &lt;p> The default implementation of this method is to return &#xA;     * an &lt;code>AccessControlContext&lt;/code> object.&#xA;     *&#xA;     * @return  an implementation-dependent object that encapsulates&#xA;     *          sufficient information about the current execution environment&#xA;     *          to perform some security checks later.&#xA;     * @see     java.lang.SecurityManager#checkConnect(java.lang.String, int, &#xA;     *   java.lang.Object) checkConnect&#xA;     * @see     java.lang.SecurityManager#checkRead(java.lang.String, &#xA;     *   java.lang.Object) checkRead&#xA;     * @see     java.security.AccessControlContext AccessControlContext&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.7"/>
          </next>
          <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkPermission">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="perm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../security/Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the requested&#xA;     * access, specified by the given permission, is not permitted based&#xA;     * on the security policy currently in effect.&#xA;     * &lt;p>&#xA;     * This method calls &lt;code>AccessController.checkPermission&lt;/code> &#xA;     * with the given permission.&#xA;     *&#xA;     * @param     perm   the requested permission.&#xA;     * @exception SecurityException if access is not permitted based on&#xA;     *&#x9;&#x9;  the current security policy.&#xA;     * @exception NullPointerException if the permission argument is&#xA;     *            &lt;code>null&lt;/code>.&#xA;     * @since     1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkPermission">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="perm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../security/Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the&#xA;     * specified security context is denied access to the resource&#xA;     * specified by the given permission.&#xA;     * The context must be a security &#xA;     * context returned by a previous call to &#xA;     * &lt;code>getSecurityContext&lt;/code> and the access control&#xA;     * decision is based upon the configured security policy for&#xA;     * that security context.&#xA;     * &lt;p>&#xA;     * If &lt;code>context&lt;/code> is an instance of &#xA;     * &lt;code>AccessControlContext&lt;/code> then the&#xA;     * &lt;code>AccessControlContext.checkPermission&lt;/code> method is&#xA;     * invoked with the specified permission.&#xA;     * &lt;p>&#xA;     * If &lt;code>context&lt;/code> is not an instance of &#xA;     * &lt;code>AccessControlContext&lt;/code> then a&#xA;     * &lt;code>SecurityException&lt;/code> is thrown. &#xA;     *&#xA;     * @param      perm      the specified permission&#xA;     * @param      context   a system-dependent security context.&#xA;     * @exception  SecurityException  if the specified security context&#xA;     *             is not an instance of &lt;code>AccessControlContext&lt;/code>&#xA;     *             (e.g., is &lt;code>null&lt;/code>), or is denied access to the&#xA;     *             resource specified by the given permission.&#xA;     * @exception  NullPointerException if the permission argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.SecurityManager#getSecurityContext()&#xA;     * @see java.security.AccessControlContext#checkPermission(java.security.Permission) &#xA;     * @since      1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../security/AccessControlContext.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../security/AccessControlContext.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
              </expression>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../security/AccessControlContext.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SecurityException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkCreateClassLoader">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to create a new class loader. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;createClassLoader&quot;)&lt;/code>&#xA;     * permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkCreateClassLoader&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @exception SecurityException if the calling thread does not &#xA;     *             have permission&#xA;     *             to create a new class loader.&#xA;     * @see        java.lang.ClassLoader#ClassLoader()&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.28"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Field" name="rootGroup">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * reference to the root thread group, used for the checkAccess&#xA;     * methods.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getRootGroup">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="root">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.64"/>
              </next>
              <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.33"/>
            </next>
            <target xsi:type="classifiers:Class" href="Thread.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.15"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ThreadGroup.class.xmi#//@classifiers.0/@members.15"/>
            </next>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkAccess">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Thread.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to modify the thread argument. &#xA;     * &lt;p>&#xA;     * This method is invoked for the current security manager by the &#xA;     * &lt;code>stop&lt;/code>, &lt;code>suspend&lt;/code>, &lt;code>resume&lt;/code>, &#xA;     * &lt;code>setPriority&lt;/code>, &lt;code>setName&lt;/code>, and &#xA;     * &lt;code>setDaemon&lt;/code> methods of class &lt;code>Thread&lt;/code>. &#xA;     * &lt;p>&#xA;     * If the thread argument is a system thread (belongs to&#xA;     * the thread group with a &lt;code>null&lt;/code> parent) then &#xA;     * this method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;modifyThread&quot;)&lt;/code> permission.&#xA;     * If the thread argument is &lt;i>not&lt;/i> a system thread,&#xA;     * this method just returns silently.&#xA;     * &lt;p>&#xA;     * Applications that want a stricter policy should override this&#xA;     * method. If this method is overridden, the method that overrides&#xA;     * it should additionally check to see if the calling thread has the&#xA;     * &lt;code>RuntimePermission(&quot;modifyThread&quot;)&lt;/code> permission, and&#xA;     * if so, return silently. This is to ensure that code granted&#xA;     * that permission (such as the JDK itself) is allowed to&#xA;     * manipulate any thread.&#xA;     * &lt;p>&#xA;     * If this method is overridden, then &#xA;     * &lt;code>super.checkAccess&lt;/code> should&#xA;     * be called by the first statement in the overridden method, or the &#xA;     * equivalent security check should be placed in the overridden method.&#xA;     *&#xA;     * @param      t   the thread to be checked.&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to modify the thread.&#xA;     * @exception  NullPointerException if the thread argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.Thread#resume() resume&#xA;     * @see        java.lang.Thread#setDaemon(boolean) setDaemon&#xA;     * @see        java.lang.Thread#setName(java.lang.String) setName&#xA;     * @see        java.lang.Thread#setPriority(int) setPriority&#xA;     * @see        java.lang.Thread#stop() stop&#xA;     * @see        java.lang.Thread#suspend() suspend&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="thread can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.30"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.64"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <comments>// just return</comments>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkAccess">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to modify the thread group argument. &#xA;     * &lt;p>&#xA;     * This method is invoked for the current security manager when a &#xA;     * new child thread or child thread group is created, and by the &#xA;     * &lt;code>setDaemon&lt;/code>, &lt;code>setMaxPriority&lt;/code>, &#xA;     * &lt;code>stop&lt;/code>, &lt;code>suspend&lt;/code>, &lt;code>resume&lt;/code>, and &#xA;     * &lt;code>destroy&lt;/code> methods of class &lt;code>ThreadGroup&lt;/code>. &#xA;     * &lt;p>&#xA;     * If the thread group argument is the system thread group (&#xA;     * has a &lt;code>null&lt;/code> parent) then &#xA;     * this method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code> permission.&#xA;     * If the thread group argument is &lt;i>not&lt;/i> the system thread group,&#xA;     * this method just returns silently.&#xA;     * &lt;p>&#xA;     * Applications that want a stricter policy should override this&#xA;     * method. If this method is overridden, the method that overrides&#xA;     * it should additionally check to see if the calling thread has the&#xA;     * &lt;code>RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code> permission, and&#xA;     * if so, return silently. This is to ensure that code granted&#xA;     * that permission (such as the JDK itself) is allowed to&#xA;     * manipulate any thread.&#xA;     * &lt;p>&#xA;     * If this method is overridden, then &#xA;     * &lt;code>super.checkAccess&lt;/code> should&#xA;     * be called by the first statement in the overridden method, or the &#xA;     * equivalent security check should be placed in the overridden method.&#xA;     *&#xA;     * @param      g   the thread group to be checked.&#xA;     * @exception  SecurityException  if the calling thread does not have&#xA;     *             permission to modify the thread group.&#xA;     * @exception  NullPointerException if the thread group argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.ThreadGroup#destroy() destroy&#xA;     * @see        java.lang.ThreadGroup#resume() resume&#xA;     * @see        java.lang.ThreadGroup#setDaemon(boolean) setDaemon&#xA;     * @see        java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority&#xA;     * @see        java.lang.ThreadGroup#stop() stop&#xA;     * @see        java.lang.ThreadGroup#suspend() suspend&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="thread group can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.31"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <comments>// just return</comments>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkExit">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="status">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to cause the Java Virtual Machine to &#xA;     * halt with the specified status code. &#xA;     * &lt;p>&#xA;     * This method is invoked for the current security manager by the &#xA;     * &lt;code>exit&lt;/code> method of class &lt;code>Runtime&lt;/code>. A status &#xA;     * of &lt;code>0&lt;/code> indicates success; other values indicate various &#xA;     * errors. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;exitVM&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkExit&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      status   the exit status.&#xA;     * @exception SecurityException if the calling thread does not have &#xA;     *              permission to halt the Java Virtual Machine with &#xA;     *              the specified status.&#xA;     * @see        java.lang.Runtime#exit(int) exit&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="exitVM"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkExec">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cmd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to create a subprocess. &#xA;     * &lt;p>&#xA;     * This method is invoked for the current security manager by the &#xA;     * &lt;code>exec&lt;/code> methods of class &lt;code>Runtime&lt;/code>.&#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>FilePermission(cmd,&quot;execute&quot;)&lt;/code> permission&#xA;     * if cmd is an absolute path, otherwise it calls &#xA;     * &lt;code>checkPermission&lt;/code> with &#xA;     * &lt;code>FilePermission(&quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,&quot;execute&quot;)&lt;/code>.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkExec&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      cmd   the specified system command.&#xA;     * @exception  SecurityException if the calling thread does not have &#xA;     *             permission to create a subprocess.&#xA;     * @exception  NullPointerException if the &lt;code>cmd&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see     java.lang.Runtime#exec(java.lang.String)&#xA;     * @see     java.lang.Runtime#exec(java.lang.String, java.lang.String[])&#xA;     * @see     java.lang.Runtime#exec(java.lang.String[])&#xA;     * @see     java.lang.Runtime#exec(java.lang.String[], java.lang.String[])&#xA;     * @see     #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/FilePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/File.class.xmi#//@classifiers.0/@members.23"/>
          </next>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/FilePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="&lt;&lt;ALL FILES>>"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </arguments>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkLink">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lib">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to dynamic link the library code &#xA;     * specified by the string argument file. The argument is either a &#xA;     * simple library name or a complete filename. &#xA;     * &lt;p>&#xA;     * This method is invoked for the current security manager by &#xA;     * methods &lt;code>load&lt;/code> and &lt;code>loadLibrary&lt;/code> of class &#xA;     * &lt;code>Runtime&lt;/code>. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;loadLibrary.&quot;+lib)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkLink&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      lib   the name of the library.&#xA;     * @exception  SecurityException if the calling thread does not have&#xA;     *             permission to dynamically link the library.&#xA;     * @exception  NullPointerException if the &lt;code>lib&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.Runtime#load(java.lang.String)&#xA;     * @see        java.lang.Runtime#loadLibrary(java.lang.String)&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="library can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="loadLibrary."/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkRead">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/FileDescriptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to read from the specified file &#xA;     * descriptor. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;readFileDescriptor&quot;)&lt;/code>&#xA;     * permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkRead&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      fd   the system-dependent file descriptor.&#xA;     * @exception  SecurityException  if the calling thread does not have&#xA;     *             permission to access the specified file descriptor.&#xA;     * @exception  NullPointerException if the file descriptor argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.io.FileDescriptor&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="file descriptor can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="readFileDescriptor"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkRead">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to read the file specified by the &#xA;     * string argument. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>FilePermission(file,&quot;read&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkRead&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception. &#xA;     *&#xA;     * @param      file   the system-dependent file name.&#xA;     * @exception  SecurityException if the calling thread does not have &#xA;     *             permission to access the specified file.&#xA;     * @exception  NullPointerException if the &lt;code>file&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/FilePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkRead">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * specified security context is not allowed to read the file &#xA;     * specified by the string argument. The context must be a security &#xA;     * context returned by a previous call to &#xA;     * &lt;code>getSecurityContext&lt;/code>. &#xA;     * &lt;p> If &lt;code>context&lt;/code> is an instance of &#xA;     * &lt;code>AccessControlContext&lt;/code> then the&#xA;     * &lt;code>AccessControlContext.checkPermission&lt;/code> method will&#xA;     * be invoked with the &lt;code>FilePermission(file,&quot;read&quot;)&lt;/code> permission.&#xA;     * &lt;p> If &lt;code>context&lt;/code> is not an instance of &#xA;     * &lt;code>AccessControlContext&lt;/code> then a&#xA;     * &lt;code>SecurityException&lt;/code> is thrown. &#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkRead&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception. &#xA;     *&#xA;     * @param      file      the system-dependent filename.&#xA;     * @param      context   a system-dependent security context.&#xA;     * @exception  SecurityException  if the specified security context&#xA;     *             is not an instance of &lt;code>AccessControlContext&lt;/code>&#xA;     *             (e.g., is &lt;code>null&lt;/code>), or does not have permission&#xA;     *             to read the specified file.&#xA;     * @exception  NullPointerException if the &lt;code>file&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.SecurityManager#getSecurityContext()&#xA;     * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/FilePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkWrite">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fd">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/FileDescriptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to write to the specified file &#xA;     * descriptor. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;writeFileDescriptor&quot;)&lt;/code>&#xA;     * permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkWrite&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      fd   the system-dependent file descriptor.&#xA;     * @exception SecurityException  if the calling thread does not have&#xA;     *             permission to access the specified file descriptor.&#xA;     * @exception  NullPointerException if the file descriptor argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.io.FileDescriptor&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="file descriptor can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="writeFileDescriptor"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkWrite">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to write to the file specified by &#xA;     * the string argument. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>FilePermission(file,&quot;write&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkWrite&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      file   the system-dependent filename.&#xA;     * @exception  SecurityException  if the calling thread does not &#xA;     *             have permission to access the specified file.&#xA;     * @exception  NullPointerException if the &lt;code>file&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/FilePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkDelete">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to delete the specified file. &#xA;     * &lt;p>&#xA;     * This method is invoked for the current security manager by the &#xA;     * &lt;code>delete&lt;/code> method of class &lt;code>File&lt;/code>.&#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>FilePermission(file,&quot;delete&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkDelete&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      file   the system-dependent filename.&#xA;     * @exception  SecurityException if the calling thread does not &#xA;     *             have permission to delete the file.&#xA;     * @exception  NullPointerException if the &lt;code>file&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.io.File#delete()&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/FilePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkConnect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="host">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="port">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to open a socket connection to the &#xA;     * specified host and port number. &#xA;     * &lt;p>&#xA;     * A port number of &lt;code>-1&lt;/code> indicates that the calling &#xA;     * method is attempting to determine the IP address of the specified &#xA;     * host name. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)&lt;/code> permission if&#xA;     * the port is not equal to -1. If the port is equal to -1, then&#xA;     * it calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>SocketPermission(host,&quot;resolve&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkConnect&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      host   the host name port to connect to.&#xA;     * @param      port   the protocol port to connect to.&#xA;     * @exception  SecurityException  if the calling thread does not have&#xA;     *             permission to open a socket connection to the specified&#xA;     *               &lt;code>host&lt;/code> and &lt;code>port&lt;/code>.&#xA;     * @exception  NullPointerException if the &lt;code>host&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="host can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="["/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                <children xsi:type="references:StringReference" value="]"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="["/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.45"/>
                <arguments xsi:type="literals:CharacterLiteral" value="58"/>
              </next>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                  <children xsi:type="references:StringReference" value=":"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </arguments>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkConnect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="host">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="port">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * specified security context is not allowed to open a socket &#xA;     * connection to the specified host and port number. &#xA;     * &lt;p>&#xA;     * A port number of &lt;code>-1&lt;/code> indicates that the calling &#xA;     * method is attempting to determine the IP address of the specified &#xA;     * host name. &#xA;     * &lt;p> If &lt;code>context&lt;/code> is not an instance of &#xA;     * &lt;code>AccessControlContext&lt;/code> then a&#xA;     * &lt;code>SecurityException&lt;/code> is thrown.&#xA;     * &lt;p>&#xA;     * Otherwise, the port number is checked. If it is not equal&#xA;     * to -1, the &lt;code>context&lt;/code>'s &lt;code>checkPermission&lt;/code>&#xA;     * method is called with a &#xA;     * &lt;code>SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)&lt;/code> permission.&#xA;     * If the port is equal to -1, then&#xA;     * the &lt;code>context&lt;/code>'s &lt;code>checkPermission&lt;/code> method &#xA;     * is called with a&#xA;     * &lt;code>SocketPermission(host,&quot;resolve&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkConnect&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      host      the host name port to connect to.&#xA;     * @param      port      the protocol port to connect to.&#xA;     * @param      context   a system-dependent security context.&#xA;     * @exception  SecurityException if the specified security context&#xA;     *             is not an instance of &lt;code>AccessControlContext&lt;/code>&#xA;     *             (e.g., is &lt;code>null&lt;/code>), or does not have permission&#xA;     *             to open a socket connection to the specified&#xA;     *             &lt;code>host&lt;/code> and &lt;code>port&lt;/code>.&#xA;     * @exception  NullPointerException if the &lt;code>host&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.SecurityManager#getSecurityContext()&#xA;     * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="host can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="["/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
                <children xsi:type="references:StringReference" value="]"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="["/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.45"/>
                <arguments xsi:type="literals:CharacterLiteral" value="58"/>
              </next>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
                <children xsi:type="references:StringReference" value=":"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
          </expression>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkListen">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="port">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to wait for a connection request on &#xA;     * the specified local port number. &#xA;     * &lt;p>&#xA;     * If port is not 0, this method calls&#xA;     * &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>SocketPermission(&quot;localhost:&quot;+port,&quot;listen&quot;)&lt;/code>.&#xA;     * If port is zero, this method calls &lt;code>checkPermission&lt;/code>&#xA;     * with &lt;code>SocketPermission(&quot;localhost:1024-&quot;,&quot;listen&quot;).&lt;/code>&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkListen&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      port   the local port.&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to listen on the specified port.&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.39"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="localhost:"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </arguments>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkAccept">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="host">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="port">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not permitted to accept a socket connection from &#xA;     * the specified host and port number. &#xA;     * &lt;p>&#xA;     * This method is invoked for the current security manager by the &#xA;     * &lt;code>accept&lt;/code> method of class &lt;code>ServerSocket&lt;/code>. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>SocketPermission(host+&quot;:&quot;+port,&quot;accept&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkAccept&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      host   the host name of the socket connection.&#xA;     * @param      port   the port number of the socket connection.&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to accept the connection.&#xA;     * @exception  NullPointerException if the &lt;code>host&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.net.ServerSocket#accept()&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="host can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="["/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
                <children xsi:type="references:StringReference" value="]"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="["/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.45"/>
                <arguments xsi:type="literals:CharacterLiteral" value="58"/>
              </next>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
              <children xsi:type="references:StringReference" value=":"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.1"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.7"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkMulticast">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maddr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../net/InetAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to use&#xA;     * (join/leave/send/receive) IP multicast.&#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>java.net.SocketPermission(maddr.getHostAddress(), &#xA;     * &quot;accept,connect&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkMulticast&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      maddr  Internet group address to be used.&#xA;     * @exception  SecurityException  if the calling thread is not allowed to &#xA;     *  use (join/leave/send/receive) IP multicast.&#xA;     * @exception  NullPointerException if the address argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @since      JDK1.1&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="host">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../net/InetAddress.class.xmi#//@classifiers.0/@members.35"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="["/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
                <children xsi:type="references:StringReference" value="]"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="["/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.45"/>
                <arguments xsi:type="literals:CharacterLiteral" value="58"/>
              </next>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkMulticast">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maddr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../net/InetAddress.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ttl">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to use&#xA;     * (join/leave/send/receive) IP multicast.&#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>java.net.SocketPermission(maddr.getHostAddress(), &#xA;     * &quot;accept,connect&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkMulticast&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception. &#xA;     *&#xA;     * @param      maddr  Internet group address to be used.&#xA;     * @param      ttl        value in use, if it is multicast send.&#xA;     * Note: this particular implementation does not use the ttl&#xA;     * parameter. &#xA;     * @exception  SecurityException  if the calling thread is not allowed to &#xA;     *  use (join/leave/send/receive) IP multicast.&#xA;     * @exception  NullPointerException if the address argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @since      JDK1.1&#xA;     * @deprecated Use #checkPermission(java.security.Permission) instead&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="host">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../net/InetAddress.class.xmi#//@classifiers.0/@members.35"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="["/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
                <children xsi:type="references:StringReference" value="]"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
                <arguments xsi:type="references:StringReference" value="["/>
              </next>
            </child>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.45"/>
                <arguments xsi:type="literals:CharacterLiteral" value="58"/>
              </next>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../net/SocketPermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.8"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkPropertiesAccess">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to access or modify the system &#xA;     * properties. &#xA;     * &lt;p>&#xA;     * This method is used by the &lt;code>getProperties&lt;/code> and &#xA;     * &lt;code>setProperties&lt;/code> methods of class &lt;code>System&lt;/code>. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>PropertyPermission(&quot;*&quot;, &quot;read,write&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkPropertiesAccess&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to access or modify the system properties.&#xA;     * @see        java.lang.System#getProperties()&#xA;     * @see        java.lang.System#setProperties(java.util.Properties)&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../util/PropertyPermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="*"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.9"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkPropertyAccess">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to access the system property with &#xA;     * the specified &lt;code>key&lt;/code> name. &#xA;     * &lt;p>&#xA;     * This method is used by the &lt;code>getProperty&lt;/code> method of &#xA;     * class &lt;code>System&lt;/code>. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>PropertyPermission(key, &quot;read&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkPropertyAccess&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param      key   a system property key.&#xA;     *&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to access the specified system property.&#xA;     * @exception  NullPointerException if the &lt;code>key&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @exception  IllegalArgumentException if &lt;code>key&lt;/code> is empty.&#xA;     *&#xA;     * @see        java.lang.System#getProperty(java.lang.String)&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../util/PropertyPermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.10"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkTopLevelWindow">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="window">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>false&lt;/code> if the calling &#xA;     * thread is not trusted to bring up the top-level window indicated &#xA;     * by the &lt;code>window&lt;/code> argument. In this case, the caller can &#xA;     * still decide to show the window, but the window should include &#xA;     * some sort of visual warning. If the method returns &#xA;     * &lt;code>true&lt;/code>, then the window can be shown without any &#xA;     * special restrictions. &#xA;     * &lt;p>&#xA;     * See class &lt;code>Window&lt;/code> for more information on trusted and &#xA;     * untrusted windows. &#xA;     * &lt;p>&#xA;     * This method calls&#xA;     * &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code> permission,&#xA;     * and returns &lt;code>true&lt;/code> if a SecurityException is not thrown,&#xA;     * otherwise it returns &lt;code>false&lt;/code>.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkTopLevelWindow&lt;/code>&#xA;     * at the point the overridden method would normally return &#xA;     * &lt;code>false&lt;/code>, and the value of &#xA;     * &lt;code>super.checkTopLevelWindow&lt;/code> should&#xA;     * be returned.&#xA;     *&#xA;     * @param      window   the new window that is being created.&#xA;     * @return     &lt;code>true&lt;/code> if the calling thread is trusted to put up&#xA;     *             top-level windows; &lt;code>false&lt;/code> otherwise.&#xA;     * @exception  NullPointerException if the &lt;code>window&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.awt.Window&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="window can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.13"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
        <catcheBlocks>
          <comments>// just return false</comments>
          <parameter name="se">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="SecurityException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkPrintJobAccess">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to initiate a print job request.&#xA;     * &lt;p>&#xA;     * This method calls&#xA;     * &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;queuePrintJob&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkPrintJobAccess&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to initiate a print job request.&#xA;     * @since   JDK1.1&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="queuePrintJob"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkSystemClipboardAccess">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to access the system clipboard.&#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>AWTPermission(&quot;accessClipboard&quot;)&lt;/code> &#xA;     * permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkSystemClipboardAccess&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @since   JDK1.1&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to access the system clipboard.&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.14"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkAwtEventQueueAccess">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to access the AWT event queue.&#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>AWTPermission(&quot;accessEventQueue&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkAwtEventQueueAccess&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @since   JDK1.1&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to access the AWT event queue.&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.15"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Field" name="packageAccessValid">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * We have an initial invalid bit (initially false) for the class&#xA;     * variables which tell if the cache is valid.  If the underlying&#xA;     * java.security.Security property changes via setProperty(), the&#xA;     * Security class uses reflection to change the variable and thus&#xA;     * invalidate the cache.&#xA;     *&#xA;     * Locking is handled by synchronization to the&#xA;     * packageAccessLock/packageDefinitionLock objects.  They are only&#xA;     * used in this class.&#xA;     *&#xA;     * Note that cache invalidation as a result of the property change&#xA;     * happens without using these locks, so there may be a delay between&#xA;     * when a thread updates the property and when other threads updates&#xA;     * the cache.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="packageAccess">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="packageAccessLock">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="packageDefinitionValid">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="packageDefinition">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="packageDefinitionLock">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getPackages">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="packages">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="tok">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>java</namespaces>
                <namespaces>util</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../util/StringTokenizer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>java</namespaces>
                  <namespaces>util</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../util/StringTokenizer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                <arguments xsi:type="references:StringReference" value=","/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="n">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../util/StringTokenizer.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@statement/@statements.1/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </variable>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="s">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.71"/>
                          </next>
                          <target xsi:type="members:ClassMethod" href="../util/StringTokenizer.class.xmi#//@classifiers.0/@members.18"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable">
                        <arraySelectors>
                          <position xsi:type="expressions:SuffixUnaryModificationExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@statement/@statements.2/@statement/@statements.1/@variable"/>
                            <operator xsi:type="operators:PlusPlus"/>
                          </position>
                        </arraySelectors>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@statement/@statements.2/@statement/@statements.2/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../util/StringTokenizer.class.xmi#//@classifiers.0/@members.20"/>
                  </next>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@statement/@statements.1/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value=""/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkPackageAccess">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pkg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the&#xA;     * calling thread is not allowed to access the package specified by&#xA;     * the argument.&#xA;     * &lt;p>&#xA;     * This method is used by the &lt;code>loadClass&lt;/code> method of class&#xA;     * loaders.&#xA;     * &lt;p>&#xA;     * This method first gets a list of&#xA;     * restricted packages by obtaining a comma-separated list from&#xA;     * a call to&#xA;     * &lt;code>java.security.Security.getProperty(&quot;package.access&quot;)&lt;/code>,&#xA;     * and checks to see if &lt;code>pkg&lt;/code> starts with or equals&#xA;     * any of the restricted packages. If it does, then&#xA;     * &lt;code>checkPermission&lt;/code> gets called with the&#xA;     * &lt;code>RuntimePermission(&quot;accessClassInPackage.&quot;+pkg)&lt;/code>&#xA;     * permission.&#xA;     * &lt;p>&#xA;     * If this method is overridden, then&#xA;     * &lt;code>super.checkPackageAccess&lt;/code> should be called&#xA;     * as the first line in the overridden method.&#xA;     *&#xA;     * @param      pkg   the package name.&#xA;     * @exception  SecurityException  if the calling thread does not have&#xA;     *             permission to access the specified package.&#xA;     * @exception  NullPointerException if the package name argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.ClassLoader#loadClass(java.lang.String, boolean)&#xA;     *  loadClass&#xA;     * @see        java.security.Security#getProperty getProperty&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="package name can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pkgs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
        </variable>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <comments>/*&#xA;&#x9;     * Do we need to update our property array?&#xA;&#x9;     */</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="tmpPropertyStr">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                      <arguments xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <anonymousClass>
                          <members xsi:type="members:ClassMethod" name="run">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <annotationsAndModifiers xsi:type="modifiers:Public"/>
                            <statements xsi:type="statements:Return">
                              <returnValue xsi:type="references:IdentifierReference">
                                <next xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../security/Security.class.xmi#//@classifiers.0/@members.22"/>
                                      <arguments xsi:type="references:StringReference" value="package.access"/>
                                    </next>
                                    <target xsi:type="classifiers:Class" href="../security/Security.class.xmi#//@classifiers.0"/>
                                  </next>
                                </next>
                              </returnValue>
                            </statements>
                          </members>
                        </anonymousClass>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable">
              <comments>// Using a snapshot of packageAccess -- don't care if static field</comments>
              <comments>// changes afterwards; array contents won't change.</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45"/>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>/*&#xA;         * Traverse the list of packages, check for any matches.&#xA;&#x9; */</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <comments>// No need to continue; only need to check this once</comments>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="accessClassInPackage."/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@init"/>
                    </arraySelectors>
                  </arguments>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                    <children xsi:type="references:StringReference" value="."/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@init"/>
                </arraySelectors>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.3/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkPackageDefinition">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pkg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the&#xA;     * calling thread is not allowed to define classes in the package&#xA;     * specified by the argument.&#xA;     * &lt;p>&#xA;     * This method is used by the &lt;code>loadClass&lt;/code> method of some&#xA;     * class loaders.&#xA;     * &lt;p>&#xA;     * This method first gets a list of restricted packages by&#xA;     * obtaining a comma-separated list from a call to&#xA;     * &lt;code>java.security.Security.getProperty(&quot;package.definition&quot;)&lt;/code>,&#xA;     * and checks to see if &lt;code>pkg&lt;/code> starts with or equals&#xA;     * any of the restricted packages. If it does, then&#xA;     * &lt;code>checkPermission&lt;/code> gets called with the&#xA;     * &lt;code>RuntimePermission(&quot;defineClassInPackage.&quot;+pkg)&lt;/code>&#xA;     * permission.&#xA;     * &lt;p>&#xA;     * If this method is overridden, then&#xA;     * &lt;code>super.checkPackageDefinition&lt;/code> should be called&#xA;     * as the first line in the overridden method.&#xA;     *&#xA;     * @param      pkg   the package name.&#xA;     * @exception  SecurityException  if the calling thread does not have&#xA;     *             permission to define classes in the specified package.&#xA;     * @see        java.lang.ClassLoader#loadClass(java.lang.String, boolean)&#xA;     * @see        java.security.Security#getProperty getProperty&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="package name can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pkgs">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
        </variable>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <comments>/*&#xA;&#x9;     * Do we need to update our property array?&#xA;&#x9;     */</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="tmpPropertyStr">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                      <arguments xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <anonymousClass>
                          <members xsi:type="members:ClassMethod" name="run">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="Object.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <annotationsAndModifiers xsi:type="modifiers:Public"/>
                            <statements xsi:type="statements:Return">
                              <returnValue xsi:type="references:IdentifierReference">
                                <next xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../security/Security.class.xmi#//@classifiers.0/@members.22"/>
                                      <arguments xsi:type="references:StringReference" value="package.definition"/>
                                    </next>
                                    <target xsi:type="classifiers:Class" href="../security/Security.class.xmi#//@classifiers.0"/>
                                  </next>
                                </next>
                              </returnValue>
                            </statements>
                          </members>
                        </anonymousClass>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.1/@variable">
              <comments>// Using a snapshot of packageDefinition -- don't care if static</comments>
              <comments>// field changes afterwards; array contents won't change.</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48"/>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>/*&#xA;&#x9; * Traverse the list of packages, check for any matches.&#xA;&#x9; */</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <comments>// No need to continue; only need to check this once</comments>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:StringReference" value="defineClassInPackage."/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </arguments>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.42"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.1/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.3/@init"/>
                    </arraySelectors>
                  </arguments>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                    <children xsi:type="references:StringReference" value="."/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </next>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.3/@init"/>
                </arraySelectors>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.3/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.3/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkSetFactory">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to set the socket factory used by &#xA;     * &lt;code>ServerSocket&lt;/code> or &lt;code>Socket&lt;/code>, or the stream &#xA;     * handler factory used by &lt;code>URL&lt;/code>. &#xA;     * &lt;p>&#xA;     * This method calls &lt;code>checkPermission&lt;/code> with the&#xA;     * &lt;code>RuntimePermission(&quot;setFactory&quot;)&lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkSetFactory&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     * &lt;p>&#xA;     *&#xA;     * @exception  SecurityException  if the calling thread does not have &#xA;     *             permission to specify a socket factory or a stream &#xA;     *             handler factory.&#xA;     *&#xA;     * @see        java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory) setSocketFactory&#xA;     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory) setSocketImplFactory&#xA;     * @see        java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory) setURLStreamHandlerFactory&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="setFactory"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkMemberAccess">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clazz">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="which">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws a &lt;code>SecurityException&lt;/code> if the &#xA;     * calling thread is not allowed to access members. &#xA;     * &lt;p>&#xA;     * The default policy is to allow access to PUBLIC members, as well&#xA;     * as access to classes that have the same class loader as the caller.&#xA;     * In all other cases, this method calls &lt;code>checkPermission&lt;/code> &#xA;     * with the &lt;code>RuntimePermission(&quot;accessDeclaredMembers&quot;)&#xA;     * &lt;/code> permission.&#xA;     * &lt;p>&#xA;     * If this method is overridden, then a call to &#xA;     * &lt;code>super.checkMemberAccess&lt;/code> cannot be made,&#xA;     * as the default implementation of &lt;code>checkMemberAccess&lt;/code>&#xA;     * relies on the code being checked being at a stack depth of&#xA;     * 4.&#xA;     * &#xA;     * @param clazz the class that reflection is to be performed on.&#xA;     *&#xA;     * @param which type of access, PUBLIC or DECLARED.&#xA;     *&#xA;     * @exception  SecurityException if the caller does not have&#xA;     *             permission to access members.&#xA;     * @exception  NullPointerException if the &lt;code>clazz&lt;/code> argument is&#xA;     *             &lt;code>null&lt;/code>.&#xA;     * @see java.lang.reflect.Member&#xA;     * @since JDK1.1&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="class can't be null"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="stack">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>/*&#xA;&#x9;     * stack depth of 4 should be the caller of one of the&#xA;&#x9;     * methods in java.lang.Class that invoke checkMember&#xA;&#x9;     * access. The stack should look like:&#xA;&#x9;     * &#xA;&#x9;     * someCaller                        [3]&#xA;&#x9;     * java.lang.Class.someReflectionAPI [2]&#xA;&#x9;     * java.lang.Class.checkMemberAccess [1]&#xA;&#x9;     * SecurityManager.checkMemberAccess [0]&#xA;&#x9;     *&#xA;&#x9;     */</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0/@members.29"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../sun/security/util/SecurityConstants.class.xmi#//@classifiers.0"/>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.1/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.1/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.46"/>
                    </next>
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Class.class.xmi#//@classifiers.0/@members.46"/>
                    </next>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.1"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="reflect/Member.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Interface" href="reflect/Member.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkSecurityAccess">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether the permission with the specified permission target&#xA;     * name should be granted or denied.&#xA;     *&#xA;     * &lt;p> If the requested permission is allowed, this method returns&#xA;     * quietly. If denied, a SecurityException is raised. &#xA;     *&#xA;     * &lt;p> This method creates a &lt;code>SecurityPermission&lt;/code> object for&#xA;     * the given permission target name and calls &lt;code>checkPermission&lt;/code>&#xA;     * with it.&#xA;     *&#xA;     * &lt;p> See the documentation for&#xA;     * &lt;code>{@link java.security.SecurityPermission}&lt;/code> for&#xA;     * a list of possible permission target names.&#xA;     * &#xA;     * &lt;p> If you override this method, then you should make a call to &#xA;     * &lt;code>super.checkSecurityAccess&lt;/code>&#xA;     * at the point the overridden method would normally throw an&#xA;     * exception.&#xA;     *&#xA;     * @param target the target name of the &lt;code>SecurityPermission&lt;/code>.&#xA;     *&#xA;     * @exception SecurityException if the calling thread does not have&#xA;     * permission for the requested access.&#xA;     * @exception NullPointerException if &lt;code>target&lt;/code> is null.&#xA;     * @exception IllegalArgumentException if &lt;code>target&lt;/code> is empty.&#xA;     *&#xA;     * @since   JDK1.1&#xA;     * @see        #checkPermission(java.security.Permission) checkPermission&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../security/SecurityPermission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="currentLoadedClass0">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getThreadGroup">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ThreadGroup.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the thread group into which to instantiate any new&#xA;     * thread being created at the time this is being called.&#xA;     * By default, it returns the thread group of the current&#xA;     * thread. This should be overridden by a specific security&#xA;     * manager to return the appropriate thread group.&#xA;     *&#xA;     * @return  ThreadGroup that new threads are instantiated into&#xA;     * @since   JDK1.1&#xA;     * @see     java.lang.ThreadGroup&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.64"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Thread.class.xmi#//@classifiers.0/@members.33"/>
          </next>
          <target xsi:type="classifiers:Class" href="Thread.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The security manager is a class that allows &#xA; * applications to implement a security policy. It allows an &#xA; * application to determine, before performing a possibly unsafe or &#xA; * sensitive operation, what the operation is and whether &#xA; * it is being attempted in a security context that allows the&#xA; * operation to be performed. The &#xA; * application can allow or disallow the operation. &#xA; * &lt;p>&#xA; * The &lt;code>SecurityManager&lt;/code> class contains many methods with &#xA; * names that begin with the word &lt;code>check&lt;/code>. These methods &#xA; * are called by various methods in the Java libraries before those &#xA; * methods perform certain potentially sensitive operations. The &#xA; * invocation of such a &lt;code>check&lt;/code> method typically looks like this: &#xA; * &lt;p>&lt;blockquote>&lt;pre>&#xA; *     SecurityManager security = System.getSecurityManager();&#xA; *     if (security != null) {&#xA; *         security.check&lt;i>XXX&lt;/i>(argument, &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;);&#xA; *     }&#xA; * &lt;/pre>&lt;/blockquote>&#xA; * &lt;p>&#xA; * The security manager is thereby given an opportunity to prevent &#xA; * completion of the operation by throwing an exception. A security &#xA; * manager routine simply returns if the operation is permitted, but &#xA; * throws a &lt;code>SecurityException&lt;/code> if the operation is not &#xA; * permitted. The only exception to this convention is &#xA; * &lt;code>checkTopLevelWindow&lt;/code>, which returns a &#xA; * &lt;code>boolean&lt;/code> value. &#xA; * &lt;p>&#xA; * The current security manager is set by the &#xA; * &lt;code>setSecurityManager&lt;/code> method in class &#xA; * &lt;code>System&lt;/code>. The current security manager is obtained &#xA; * by the &lt;code>getSecurityManager&lt;/code> method. &#xA; * &lt;p> &#xA; * The special method &#xA; * {@link SecurityManager#checkPermission(java.security.Permission)}&#xA; * determines whether an access request indicated by a specified&#xA; * permission should be granted or denied. The &#xA; * default implementation calls&#xA; * &#xA; * &lt;pre>&#xA; *   AccessController.checkPermission(perm);&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p> &#xA; * If a requested access is allowed, &#xA; * &lt;code>checkPermission&lt;/code> returns quietly. If denied, a &#xA; * &lt;code>SecurityException&lt;/code> is thrown. &#xA; * &lt;p>&#xA; * As of Java 2 SDK v1.2, the default implementation of each of the other&#xA; * &lt;code>check&lt;/code> methods in &lt;code>SecurityManager&lt;/code> is to &#xA; * call the &lt;code>SecurityManager checkPermission&lt;/code> method&#xA; * to determine if the calling thread has permission to perform the requested&#xA; * operation.&#xA; * &lt;p> &#xA; * Note that the &lt;code>checkPermission&lt;/code> method with&#xA; * just a single permission argument always performs security checks&#xA; * within the context of the currently executing thread.&#xA; * Sometimes a security check that should be made within a given context&#xA; * will actually need to be done from within a&#xA; * &lt;i>different&lt;/i> context (for example, from within a worker thread).&#xA; * The {@link SecurityManager#getSecurityContext getSecurityContext} method &#xA; * and the {@link SecurityManager#checkPermission(java.security.Permission, &#xA; * java.lang.Object) checkPermission}&#xA; * method that includes a context argument are provided &#xA; * for this situation. The &#xA; * &lt;code>getSecurityContext&lt;/code> method returns a &quot;snapshot&quot;&#xA; * of the current calling context. (The default implementation &#xA; * returns an AccessControlContext object.) A sample call is&#xA; * the following:&#xA; * &#xA; * &lt;pre>&#xA; *   Object context = null;&#xA; *   SecurityManager sm = System.getSecurityManager();&#xA; *   if (sm != null) context = sm.getSecurityContext(); &#xA; * &lt;/pre>&#xA; * &#xA; * &lt;p>&#xA; * The &lt;code>checkPermission&lt;/code> method&#xA; * that takes a context object in addition to a permission &#xA; * makes access decisions based on that context,&#xA; * rather than on that of the current execution thread.&#xA; * Code within a different context can thus call that method,&#xA; * passing the permission and the&#xA; * previously-saved context object. A sample call, using the&#xA; * SecurityManager &lt;code>sm&lt;/code> obtained as in the previous example, &#xA; * is the following:&#xA; * &#xA; * &lt;pre>&#xA; *   if (sm != null) sm.checkPermission(permission, context);&#xA; * &lt;/pre> &#xA; *&#xA; * &lt;p>Permissions fall into these categories: File, Socket, Net, &#xA; * Security, Runtime, Property, AWT, Reflect, and Serializable. &#xA; * The classes managing these various&#xA; * permission categories are &lt;code>java.io.FilePermission&lt;/code>,&#xA; * &lt;code>java.net.SocketPermission&lt;/code>, &#xA; * &lt;code>java.net.NetPermission&lt;/code>, &#xA; * &lt;code>java.security.SecurityPermission&lt;/code>,&#xA; * &lt;code>java.lang.RuntimePermission&lt;/code>, &#xA; * &lt;code>java.util.PropertyPermission&lt;/code>, &#xA; * &lt;code>java.awt.AWTPermission&lt;/code>,&#xA; * &lt;code>java.lang.reflect.ReflectPermission&lt;/code>, and&#xA; * &lt;code>java.io.SerializablePermission&lt;/code>. &#xA; * &#xA; * &lt;p>All but the first two (FilePermission and SocketPermission) are &#xA; * subclasses of &lt;code>java.security.BasicPermission&lt;/code>, which itself &#xA; * is an abstract subclass of the&#xA; * top-level class for permissions, which is &#xA; * &lt;code>java.security.Permission&lt;/code>. BasicPermission defines the &#xA; * functionality needed for all permissions that contain a name &#xA; * that follows the hierarchical property naming convention &#xA; * (for example, &quot;exitVM&quot;, &quot;setFactory&quot;, &quot;queuePrintJob&quot;, etc). &#xA; * An asterisk &#xA; * may appear at the end of the name, following a &quot;.&quot;, or by itself, to &#xA; * signify a wildcard match. For example: &quot;a.*&quot; or &quot;*&quot; is valid, &#xA; * &quot;*a&quot; or &quot;a*b&quot; is not valid.&#xA; *&#xA; * &lt;p>FilePermission and SocketPermission are subclasses of the&#xA; * top-level class for permissions &#xA; * (&lt;code>java.security.Permission&lt;/code>). Classes like these&#xA; * that have a more complicated name syntax than that used by&#xA; * BasicPermission subclass directly from Permission rather than from&#xA; * BasicPermission. For example, &#xA; * for a &lt;code>java.io.FilePermission&lt;/code> object, the permission name is&#xA; * the path name of a file (or directory).&#xA; *&#xA; * &lt;p>Some of the permission classes have an &quot;actions&quot; list that tells &#xA; * the actions that are permitted for the object.  For example, &#xA; * for a &lt;code>java.io.FilePermission&lt;/code> object, the actions list&#xA; * (such as &quot;read, write&quot;) specifies which actions are granted for the&#xA; * specified file (or for files in the specified directory).&#xA; * &#xA; * &lt;p>Other permission classes are for &quot;named&quot; permissions - &#xA; * ones that contain a name but no actions list; you either have the&#xA; * named permission or you don't.&#xA; * &#xA; * &lt;p>Note: There is also a &lt;code>java.security.AllPermission&lt;/code>&#xA; * permission that implies all permissions. It exists to simplify the work&#xA; * of system administrators who might need to perform multiple&#xA; * tasks that require all (or numerous) permissions.&#xA; * &lt;p>&#xA; * See &lt;a href =&quot;../../../guide/security/permissions.html&quot;>&#xA; * Permissions in the JDK&lt;/a> for permission-related information.&#xA; * This document includes, for example, a table listing the various SecurityManager&#xA; * &lt;code>check&lt;/code> methods and the permission(s) the default &#xA; * implementation of each such method requires. &#xA; * It also contains a table of all the version 1.2 methods&#xA; * that require permissions, and for each such method tells &#xA; * which permission it requires.&#xA; * &lt;p>&#xA; * For more information about &lt;code>SecurityManager&lt;/code> changes made in &#xA; * the JDK and advice regarding porting of 1.1-style security managers,&#xA; * see the &lt;a href=&quot;../../../guide/security/index.html&quot;>security documentation&lt;/a>.&#xA; *&#xA; * @author  Arthur van Hoff&#xA; * @author  Roland Schemers&#xA; *&#xA; * @version 1.136, 06/28/04&#xA; * @see     java.lang.ClassLoader&#xA; * @see     java.lang.SecurityException&#xA; * @see     java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)&#xA; *  checkTopLevelWindow&#xA; * @see     java.lang.System#getSecurityManager() getSecurityManager&#xA; * @see     java.lang.System#setSecurityManager(java.lang.SecurityManager)&#xA; *  setSecurityManager&#xA; * @see     java.security.AccessController AccessController&#xA; * @see     java.security.AccessControlContext AccessControlContext&#xA; * @see     java.security.AccessControlException AccessControlException&#xA; * @see     java.security.Permission &#xA; * @see     java.security.BasicPermission&#xA; * @see     java.io.FilePermission&#xA; * @see     java.net.SocketPermission&#xA; * @see     java.util.PropertyPermission&#xA; * @see     java.lang.RuntimePermission&#xA; * @see     java.awt.AWTPermission&#xA; * @see     java.security.Policy Policy&#xA; * @see     java.security.SecurityPermission SecurityPermission&#xA; * @see     java.security.ProtectionDomain&#xA; *&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
