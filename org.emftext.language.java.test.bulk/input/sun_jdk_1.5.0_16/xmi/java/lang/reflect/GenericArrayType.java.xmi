<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="GenericArrayType.java">
  <comments>/*&#xA; * @(#)GenericArrayType.java&#x9;1.3 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="GenericArrayType">
    <members xsi:type="members:InterfaceMethod" name="getGenericComponentType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a &lt;tt>Type&lt;/tt> object representing the component type&#xA;     * of this array. This method creates the component type of the&#xA;     * array.  See the declaration of {@link&#xA;     * java.lang.reflect.ParameterizedType ParameterizedType} for the&#xA;     * semantics of the creation process for parameterized types and&#xA;     * see {@link java.lang.reflect.TypeVariable TypeVariable} for the&#xA;     * creation process for type variables.&#xA;     *&#xA;     * @return  a &lt;tt>Type&lt;/tt> object representing the component type&#xA;     *     of this array&#xA;     * @throws TypeNotPresentException if the underlying array type's&#xA;     *     component type refers to a non-existent type declaration&#xA;     * @throws MalformedParameterizedTypeException if  the&#xA;     *     underlying array type's component type refers to a&#xA;     *     parameterized type that cannot be instantiated for any reason&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;tt>GenericArrayType&lt;/tt> represents an array type whose component&#xA; * type is either a parameterized type or a type variable.&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
