<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="Field.java">
  <comments>/*&#xA; * @(#)Field.java&#x9;1.42 04/05/11&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/reflect/Reflection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <namespaces>generics</namespaces>
    <namespaces>repository</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/reflect/generics/repository/FieldRepository.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <namespaces>generics</namespaces>
    <namespaces>factory</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/reflect/generics/factory/CoreReflectionFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <namespaces>generics</namespaces>
    <namespaces>factory</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../sun/reflect/generics/factory/GenericsFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <namespaces>generics</namespaces>
    <namespaces>scope</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/reflect/generics/scope/ClassScope.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>annotation</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>reflect</namespaces>
    <namespaces>annotation</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/reflect/annotation/AnnotationParser.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Field">
    <members xsi:type="members:Field" name="clazz">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="slot">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// This is guaranteed to be interned by the VM in the 1.4</comments>
        <comments>// reflection implementation</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="type">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="modifiers">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="signature">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Generics and annotations support</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="genericInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../sun/reflect/generics/repository/FieldRepository.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// generic info repository; lazily initialized</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="annotations">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="fieldAccessor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Cached field accessor created without override</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="overrideFieldAccessor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Cached field accessor created with override</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="root">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// For sharing of FieldAccessors. This branching structure is</comments>
        <comments>// currently only two levels deep (i.e., one root Field and</comments>
        <comments>// potentially many Field objects pointing to it.)</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="securityCheckTargetClassCache">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// More complicated security check cache needed here than for</comments>
        <comments>// Class.newInstance() and Constructor.newInstance()</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getGenericSignature">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Generics infrastructure</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFactory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../sun/reflect/generics/factory/GenericsFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Accessor for factory</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:UnknownTypeArgument"/>
              <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// create scope and factory</comments>
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../sun/reflect/generics/factory/CoreReflectionFactory.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/reflect/generics/scope/ClassScope.class.xmi#//@classifiers.0/@members.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/reflect/generics/scope/ClassScope.class.xmi#//@classifiers.0"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../../sun/reflect/generics/factory/CoreReflectionFactory.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getGenericInfo">
      <comments>//return cached repository</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../sun/reflect/generics/repository/FieldRepository.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Accessor for generic info repository</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// lazily initialize repository if necessary</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6">
                <comments>// create and cache generic info repository</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/reflect/generics/repository/FieldRepository.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.13"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/reflect/generics/repository/FieldRepository.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="Field">
      <comments>/**&#xA;     * Package-private constructor used by ReflectAccess to enable&#xA;     * instantiation of these objects in Java code from the java.lang&#xA;     * package via sun.reflect.LangReflectAccess.&#xA;     */</comments>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.5"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.6"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="declaringClass">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="modifiers">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="slot">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="signature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="annotations">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
    </members>
    <members xsi:type="members:ClassMethod" name="copy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Package-private routine (exposed to java.lang.Class via&#xA;     * ReflectAccess) which returns a copy of this Field. The copy's&#xA;     * &quot;root&quot; field points to this Field.&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="res">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0">
              <comments>// This routine enables sharing of FieldAccessor objects</comments>
              <comments>// among Field objects which refer to the same underlying</comments>
              <comments>// method in the VM. (All of this contortion is only necessary</comments>
              <comments>// because of the &quot;accessibility&quot; bit in AccessibleObject,</comments>
              <comments>// which implicitly requires that new java.lang.reflect</comments>
              <comments>// objects be fabricated for each reflective call on Class</comments>
              <comments>// objects.)</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.0/@variable">
            <comments>// Might as well eagerly propagate this if already present</comments>
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDeclaringClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>Class&lt;/code> object representing the class or interface&#xA;     * that declares the field represented by this &lt;code>Field&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the field represented by this &lt;code>Field&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getModifiers">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Java language modifiers for the field represented&#xA;     * by this &lt;code>Field&lt;/code> object, as an integer. The &lt;code>Modifier&lt;/code> class should&#xA;     * be used to decode the modifiers.&#xA;     *&#xA;     * @see Modifier&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isEnumConstant">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this field represents an element of&#xA;     * an enumerated type; returns &lt;tt>false&lt;/tt> otherwise.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if and only if this field represents an element of&#xA;     * an enumerated type.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AndExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Modifier.class.xmi#//@classifiers.0/@members.16"/>
                </next>
                <target xsi:type="classifiers:Class" href="Modifier.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isSynthetic">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this field is a synthetic&#xA;     * field; returns &lt;tt>false&lt;/tt> otherwise.&#xA;     *&#xA;     * @return true if and only if this field is a synthetic&#xA;     * field as defined by the Java Language Specification.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Modifier.class.xmi#//@classifiers.0/@members.31"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
          </next>
          <target xsi:type="classifiers:Class" href="Modifier.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>Class&lt;/code> object that identifies the&#xA;     * declared type for the field represented by this&#xA;     * &lt;code>Field&lt;/code> object.&#xA;     *&#xA;     * @return a &lt;code>Class&lt;/code> object identifying the declared&#xA;     * type of the field represented by this object&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getGenericType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;tt>Type&lt;/tt> object that represents the declared type for&#xA;     * the field represented by this &lt;tt>Field&lt;/tt> object.&#xA;     * &#xA;     * &lt;p>If the &lt;tt>Type&lt;/tt> is a parameterized type, the&#xA;     * &lt;tt>Type&lt;/tt> object returned must accurately reflect the&#xA;     * actual type parameters used in the source code.&#xA;     * &#xA;     * &lt;p>If an the  type of the underlying field is a type variable or a&#xA;     * parameterized type, it is created. Otherwise, it is resolved.&#xA;     *&#xA;     * @return a &lt;tt>Type&lt;/tt> object that represents the declared type for&#xA;     *     the field represented by this &lt;tt>Field&lt;/tt> object&#xA;     * @throws GenericSignatureFormatError if the generic field&#xA;     *     signature does not conform to the format specified in the Java&#xA;     *     Virtual Machine Specification, 3rd edition&#xA;     * @throws TypeNotPresentException if the generic type&#xA;     *     signature of the underlying field refers to a non-existent&#xA;     *     type declaration&#xA;     * @throws MalformedParameterizedTypeException if the generic&#xA;     *     signature of the underlying field refers to a parameterized type&#xA;     *     that cannot be instantiated for any reason&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/reflect/generics/repository/FieldRepository.class.xmi#//@classifiers.0/@members.4"/>
            </next>
          </returnValue>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares this &lt;code>Field&lt;/code> against the specified object.  Returns&#xA;     * true if the objects are the same.  Two &lt;code>Field&lt;/code> objects are the same if&#xA;     * they were declared by the same class and have the same name&#xA;     * and type.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="other">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
                  </children>
                </expression>
              </children>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hashcode for this &lt;code>Field&lt;/code>.  This is computed as the&#xA;     * exclusive-or of the hashcodes for the underlying field's&#xA;     * declaring class name and its name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ExclusiveOrExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../String.class.xmi#//@classifiers.0/@members.44"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.44"/>
            </next>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../String.class.xmi#//@classifiers.0/@members.44"/>
            </next>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string describing this &lt;code>Field&lt;/code>.  The format is&#xA;     * the access modifiers for the field, if any, followed&#xA;     * by the field type, followed by a space, followed by&#xA;     * the fully-qualified name of the class declaring the field,&#xA;     * followed by a period, followed by the name of the field.&#xA;     * For example:&#xA;     * &lt;pre>&#xA;     *    public static final int java.lang.Thread.MIN_PRIORITY&#xA;     *    private int java.io.FileDescriptor.fd&#xA;     * &lt;/pre>&#xA;     *&#xA;     * &lt;p>The modifiers are placed in canonical order as specified by&#xA;     * &quot;The Java Language Specification&quot;.  This is &lt;tt>public&lt;/tt>,&#xA;     * &lt;tt>protected&lt;/tt> or &lt;tt>private&lt;/tt> first, and then other&#xA;     * modifiers in the following order: &lt;tt>static&lt;/tt>, &lt;tt>final&lt;/tt>,&#xA;     * &lt;tt>transient&lt;/tt>, &lt;tt>volatile&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mod">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:StringReference" value=""/>
                <expressionElse xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Modifier.class.xmi#//@classifiers.0/@members.30"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="Modifier.class.xmi#//@classifiers.0"/>
                    </children>
                    <children xsi:type="references:StringReference" value=" "/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </expressionElse>
              </expression>
            </children>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
            </children>
            <children xsi:type="references:StringReference" value=" "/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
            </children>
            <children xsi:type="references:StringReference" value="."/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toGenericString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string describing this &lt;code>Field&lt;/code>, including&#xA;     * its generic type.  The format is the access modifiers for the&#xA;     * field, if any, followed by the generic field type, followed by&#xA;     * a space, followed by the fully-qualified name of the class&#xA;     * declaring the field, followed by a period, followed by the name&#xA;     * of the field.&#xA;     *&#xA;     * &lt;p>The modifiers are placed in canonical order as specified by&#xA;     * &quot;The Java Language Specification&quot;.  This is &lt;tt>public&lt;/tt>,&#xA;     * &lt;tt>protected&lt;/tt> or &lt;tt>private&lt;/tt> first, and then other&#xA;     * modifiers in the following order: &lt;tt>static&lt;/tt>, &lt;tt>final&lt;/tt>,&#xA;     * &lt;tt>transient&lt;/tt>, &lt;tt>volatile&lt;/tt>.&#xA;     *&#xA;     * @return a string describing this &lt;code>Field&lt;/code>, including&#xA;     * its generic type&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mod">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fieldType">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:StringReference" value=""/>
                <expressionElse xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Modifier.class.xmi#//@classifiers.0/@members.30"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="Modifier.class.xmi#//@classifiers.0"/>
                    </children>
                    <children xsi:type="references:StringReference" value=" "/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </expression>
                </expressionElse>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                  <arguments xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable"/>
                  </arguments>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Object.class.xmi#//@classifiers.0/@members.6"/>
                  </next>
                </expressionElse>
              </expression>
            </children>
            <children xsi:type="references:StringReference" value=" "/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
            </children>
            <children xsi:type="references:StringReference" value="."/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of the field represented by this &lt;code>Field&lt;/code>, on&#xA;     * the specified object. The value is automatically wrapped in an&#xA;     * object if it has a primitive type.&#xA;     *&#xA;     * &lt;p>The underlying field's value is obtained as follows:&#xA;     *&#xA;     * &lt;p>If the underlying field is a static field, the &lt;code>obj&lt;/code> argument&#xA;     * is ignored; it may be null.&#xA;     *&#xA;     * &lt;p>Otherwise, the underlying field is an instance field.  If the&#xA;     * specified &lt;code>obj&lt;/code> argument is null, the method throws a&#xA;     * &lt;code>NullPointerException.&lt;/code> If the specified object is not an&#xA;     * instance of the class or interface declaring the underlying&#xA;     * field, the method throws an &lt;code>IllegalArgumentException&lt;/code>.&#xA;     *&#xA;     * &lt;p>If this &lt;code>Field&lt;/code> object enforces Java language access control, and&#xA;     * the underlying field is inaccessible, the method throws an&#xA;     * &lt;code>IllegalAccessException&lt;/code>.&#xA;     * If the underlying field is static, the class that declared the&#xA;     * field is initialized if it has not already been initialized. &#xA;     *&#xA;     * &lt;p>Otherwise, the value is retrieved from the underlying instance&#xA;     * or static field.  If the field has a primitive type, the value&#xA;     * is wrapped in an object before being returned, otherwise it is&#xA;     * returned as is.&#xA;     *&#xA;     * &lt;p>If the field is hidden in the type of &lt;code>obj&lt;/code>,&#xA;     * the field's value is obtained according to the preceding rules.&#xA;     *&#xA;     * @param obj object from which the represented field's value is&#xA;     * to be extracted&#xA;     * @return the value of the represented field in object&#xA;     * &lt;tt>obj&lt;/tt>; primitive values are wrapped in an appropriate&#xA;     * object before being returned&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof).&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBoolean">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance &lt;code>boolean&lt;/code> field.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>boolean&lt;/code> value&#xA;     * from&#xA;     * @return the value of the &lt;code>boolean&lt;/code> field&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>boolean&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getByte">
      <typeReference xsi:type="types:Byte"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance &lt;code>byte&lt;/code> field.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>byte&lt;/code> value&#xA;     * from&#xA;     * @return the value of the &lt;code>byte&lt;/code> field&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>byte&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getChar">
      <typeReference xsi:type="types:Char"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance field of type&#xA;     * &lt;code>char&lt;/code> or of another primitive type convertible to&#xA;     * type &lt;code>char&lt;/code> via a widening conversion.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>char&lt;/code> value&#xA;     * from&#xA;     * @return the value of the field converted to type &lt;code>char&lt;/code>&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>char&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getShort">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance field of type&#xA;     * &lt;code>short&lt;/code> or of another primitive type convertible to&#xA;     * type &lt;code>short&lt;/code> via a widening conversion.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>short&lt;/code> value&#xA;     * from&#xA;     * @return the value of the field converted to type &lt;code>short&lt;/code>&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>short&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getInt">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance field of type&#xA;     * &lt;code>int&lt;/code> or of another primitive type convertible to&#xA;     * type &lt;code>int&lt;/code> via a widening conversion.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>int&lt;/code> value&#xA;     * from&#xA;     * @return the value of the field converted to type &lt;code>int&lt;/code>&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>int&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLong">
      <typeReference xsi:type="types:Long"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance field of type&#xA;     * &lt;code>long&lt;/code> or of another primitive type convertible to&#xA;     * type &lt;code>long&lt;/code> via a widening conversion.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>long&lt;/code> value&#xA;     * from&#xA;     * @return the value of the field converted to type &lt;code>long&lt;/code>&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>long&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFloat">
      <typeReference xsi:type="types:Float"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance field of type&#xA;     * &lt;code>float&lt;/code> or of another primitive type convertible to&#xA;     * type &lt;code>float&lt;/code> via a widening conversion.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>float&lt;/code> value&#xA;     * from&#xA;     * @return the value of the field converted to type &lt;code>float&lt;/code>&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>float&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDouble">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the value of a static or instance field of type&#xA;     * &lt;code>double&lt;/code> or of another primitive type convertible to&#xA;     * type &lt;code>double&lt;/code> via a widening conversion.&#xA;     *&#xA;     * @param obj the object to extract the &lt;code>double&lt;/code> value&#xA;     * from&#xA;     * @return the value of the field converted to type &lt;code>double&lt;/code>&#xA;     *&#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not &#xA;     *              an instance of the class or interface declaring the&#xA;     *              underlying field (or a subclass or implementor &#xA;     *              thereof), or if the field value cannot be&#xA;     *              converted to the type &lt;code>double&lt;/code> by a &#xA;     *              widening conversion.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#get&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="set">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the field represented by this &lt;code>Field&lt;/code> object on the&#xA;     * specified object argument to the specified new value. The new&#xA;     * value is automatically unwrapped if the underlying field has a&#xA;     * primitive type.&#xA;     *&#xA;     * &lt;p>The operation proceeds as follows:&#xA;     *&#xA;     * &lt;p>If the underlying field is static, the &lt;code>obj&lt;/code> argument is&#xA;     * ignored; it may be null.&#xA;     *&#xA;     * &lt;p>Otherwise the underlying field is an instance field.  If the&#xA;     * specified object argument is null, the method throws a&#xA;     * &lt;code>NullPointerException&lt;/code>.  If the specified object argument is not&#xA;     * an instance of the class or interface declaring the underlying&#xA;     * field, the method throws an &lt;code>IllegalArgumentException&lt;/code>.&#xA;     *&#xA;     * &lt;p>If this &lt;code>Field&lt;/code> object enforces Java language access control, and&#xA;     * the underlying field is inaccessible, the method throws an&#xA;     * &lt;code>IllegalAccessException&lt;/code>.&#xA;     *&#xA;     * &lt;p>If the underlying field is final, the method throws an&#xA;     * &lt;code>IllegalAccessException&lt;/code> unless&#xA;     * &lt;code>setAccessible(true)&lt;/code> has succeeded for this field&#xA;     * and this field is non-static. Setting a final field in this way&#xA;     * is meaningful only during deserialization or reconstruction of&#xA;     * instances of classes with blank final fields, before they are&#xA;     * made available for access by other parts of a program. Use in&#xA;     * any other context may have unpredictable effects, including cases&#xA;     * in which other parts of a program continue to use the original&#xA;     * value of this field.&#xA;     *&#xA;     * &lt;p>If the underlying field is of a primitive type, an unwrapping&#xA;     * conversion is attempted to convert the new value to a value of&#xA;     * a primitive type.  If this attempt fails, the method throws an&#xA;     * &lt;code>IllegalArgumentException&lt;/code>.&#xA;     *&#xA;     * &lt;p>If, after possible unwrapping, the new value cannot be&#xA;     * converted to the type of the underlying field by an identity or&#xA;     * widening conversion, the method throws an&#xA;     * &lt;code>IllegalArgumentException&lt;/code>.&#xA;     *&#xA;     * &lt;p>If the underlying field is static, the class that declared the&#xA;     * field is initialized if it has not already been initialized.&#xA;     *&#xA;     * &lt;p>The field is set to the possibly unwrapped and widened new value.&#xA;     *&#xA;     * &lt;p>If the field is hidden in the type of &lt;code>obj&lt;/code>,&#xA;     * the field's value is set according to the preceding rules.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param value the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.9"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBoolean">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="z">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as a &lt;code>boolean&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, zObj)&lt;/code>,&#xA;     * where &lt;code>zObj&lt;/code> is a &lt;code>Boolean&lt;/code> object and &#xA;     * &lt;code>zObj.booleanValue() == z&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param z   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.10"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setByte">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as a &lt;code>byte&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, bObj)&lt;/code>,&#xA;     * where &lt;code>bObj&lt;/code> is a &lt;code>Byte&lt;/code> object and &#xA;     * &lt;code>bObj.byteValue() == b&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param b   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.11"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setChar">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as a &lt;code>char&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, cObj)&lt;/code>,&#xA;     * where &lt;code>cObj&lt;/code> is a &lt;code>Character&lt;/code> object and &#xA;     * &lt;code>cObj.charValue() == c&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param c   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.12"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setShort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as a &lt;code>short&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, sObj)&lt;/code>,&#xA;     * where &lt;code>sObj&lt;/code> is a &lt;code>Short&lt;/code> object and &#xA;     * &lt;code>sObj.shortValue() == s&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param s   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.13"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setInt">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as an &lt;code>int&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, iObj)&lt;/code>,&#xA;     * where &lt;code>iObj&lt;/code> is a &lt;code>Integer&lt;/code> object and &#xA;     * &lt;code>iObj.intValue() == i&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param i   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.14"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setLong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as a &lt;code>long&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, lObj)&lt;/code>,&#xA;     * where &lt;code>lObj&lt;/code> is a &lt;code>Long&lt;/code> object and &#xA;     * &lt;code>lObj.longValue() == l&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param l   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFloat">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="f">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as a &lt;code>float&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, fObj)&lt;/code>,&#xA;     * where &lt;code>fObj&lt;/code> is a &lt;code>Float&lt;/code> object and &#xA;     * &lt;code>fObj.floatValue() == f&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param f   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.16"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDouble">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="d">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of a field as a &lt;code>double&lt;/code> on the specified object.&#xA;     * This method is equivalent to&#xA;     * &lt;code>set(obj, dObj)&lt;/code>,&#xA;     * where &lt;code>dObj&lt;/code> is a &lt;code>Double&lt;/code> object and &#xA;     * &lt;code>dObj.doubleValue() == d&lt;/code>.&#xA;     *&#xA;     * @param obj the object whose field should be modified&#xA;     * @param d   the new value for the field of &lt;code>obj&lt;/code>&#xA;     * being modified&#xA;     * &#xA;     * @exception IllegalAccessException    if the underlying field&#xA;     *              is inaccessible.&#xA;     * @exception IllegalArgumentException  if the specified object is not an&#xA;     *              instance of the class or interface declaring the underlying&#xA;     *              field (or a subclass or implementor thereof), &#xA;     *              or if an unwrapping conversion fails.&#xA;     * @exception NullPointerException      if the specified object is null&#xA;     *              and the field is an instance field.&#xA;     * @exception ExceptionInInitializerError if the initialization provoked&#xA;     *              by this method fails.&#xA;     * @see       Field#set&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0/@members.17"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.1"/>
          </next>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFieldAccessor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Convenience routine which performs security checks</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ov">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="AccessibleObject.class.xmi#//@classifiers.0/@members.2"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="a">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.1/@variable"/>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.2/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.2/@variable"/>
          <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.1/@variable"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="acquireFieldAccessor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="overrideFinalCheck">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// NOTE that there is no synchronization used here. It is correct</comments>
        <comments>// (though not efficient) to generate more than one FieldAccessor</comments>
        <comments>// for a given Field. However, avoiding synchronization will</comments>
        <comments>// probably make the implementation more scalable.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tmp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// First check to see if one has been created yet, and take it</comments>
              <comments>// if so</comments>
              <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
              </expression>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable">
                <comments>// Otherwise fabricate one and propagate it up to the root</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/reflect/ReflectionFactory.class.xmi#//@classifiers.0/@members.9"/>
                  <arguments xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
                </next>
                <target xsi:type="members:Field" href="AccessibleObject.class.xmi#//@classifiers.0/@members.3"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFieldAccessor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="overrideFinalCheck">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Returns FieldAccessor for this Field object, not looking up</comments>
        <comments>// the chain to the root</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFieldAccessor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="accessor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../sun/reflect/FieldAccessor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="overrideFinalCheck">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Sets the FieldAccessor for this Field object and</comments>
        <comments>// (recursively) its root</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
          </expression>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.1"/>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Propagate up</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.1"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doSecurityCheck">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IllegalAccessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// NOTE: be very careful if you change the stack depth of this</comments>
        <comments>// routine. The depth of the &quot;getCallerClass&quot; call is hardwired so</comments>
        <comments>// that the compiler can have an easier time if this gets inlined.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="caller">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../sun/reflect/Reflection.class.xmi#//@classifiers.0/@members.2"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../sun/reflect/Reflection.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="targetClass">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </children>
                          <children xsi:type="expressions:UnaryExpression">
                            <operators xsi:type="operators:Negate"/>
                            <child xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="Modifier.class.xmi#//@classifiers.0/@members.20"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="Modifier.class.xmi#//@classifiers.0"/>
                            </child>
                          </children>
                        </expression>
                      </child>
                      <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../Object.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                      </expressionElse>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../sun/reflect/Reflection.class.xmi#//@classifiers.0/@members.5"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../sun/reflect/Reflection.class.xmi#//@classifiers.0"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="AccessibleObject.class.xmi#//@classifiers.0/@members.1"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.0/@statement/@statements.0/@statement/@statements.1/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="AccessibleObject.class.xmi#//@classifiers.0/@members.1"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.0/@statement/@statements.0/@statement/@statements.1/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/reflect/Reflection.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/reflect/Reflection.class.xmi#//@classifiers.0"/>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="AccessibleObject.class.xmi#//@classifiers.0/@members.2"/>
          </child>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTypeName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/*&#xA;     * Utility routine to paper over array type names&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="cl">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="dimensions">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.1/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.54"/>
                      </next>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.40"/>
                </next>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="sb">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../StringBuffer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../StringBuffer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.44"/>
                    </next>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="references:StringReference" value="[]"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.5/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.1/@variable"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.5/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statement/@statements.0/@statements.3/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
                </next>
              </returnValue>
            </statements>
            <catcheBlocks>
              <comments>/*FALLTHRU*/</comments>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../Throwable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.40"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../Class.class.xmi#//@classifiers.0/@members.44"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAnnotation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.52/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="T">
        <extendTypes xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </extendTypes>
      </typeParameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="annotationClass">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.52/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.52/@typeParameters.0"/>
          </typeReference>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../util/Map.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="EMPTY_ANNOTATION_ARRAY">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getDeclaredAnnotations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../../util/Collection.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53"/>
            </next>
            <target xsi:type="members:InterfaceMethod" href="../../util/Map.class.xmi#//@classifiers.0/@members.10"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="declaredAnnotations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:ClassMethod" name="declaredAnnotations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/reflect/annotation/AnnotationParser.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="../../../sun/misc/JavaLangAccess.class.xmi#//@classifiers.0/@members.0"/>
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
                          </next>
                          <target xsi:type="members:ClassMethod" href="../../../sun/misc/SharedSecrets.class.xmi#//@classifiers.0/@members.7"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../sun/misc/SharedSecrets.class.xmi#//@classifiers.0"/>
                      </next>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/reflect/annotation/AnnotationParser.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>Field&lt;/code> provides information about, and dynamic access to, a&#xA; * single field of a class or an interface.  The reflected field may&#xA; * be a class (static) field or an instance field.&#xA; *&#xA; * &lt;p>A &lt;code>Field&lt;/code> permits widening conversions to occur during a get or&#xA; * set access operation, but throws an &lt;code>IllegalArgumentException&lt;/code> if a&#xA; * narrowing conversion would occur.&#xA; *&#xA; * @see Member&#xA; * @see java.lang.Class&#xA; * @see java.lang.Class#getFields()&#xA; * @see java.lang.Class#getField(String)&#xA; * @see java.lang.Class#getDeclaredFields()&#xA; * @see java.lang.Class#getDeclaredField(String)&#xA; *&#xA; * @author Kenneth Russell&#xA; * @author Nakul Saraiya&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Member.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="AccessibleObject.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
