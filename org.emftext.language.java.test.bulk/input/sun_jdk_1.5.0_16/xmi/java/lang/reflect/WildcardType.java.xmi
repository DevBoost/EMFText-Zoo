<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="WildcardType.java">
  <comments>/*&#xA; * @(#)WildcardType.java&#x9;1.3 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="WildcardType">
    <comments>// one or many? Up to language spec; currently only one, but this API</comments>
    <comments>// allows for generalization. </comments>
    <members xsi:type="members:InterfaceMethod" name="getUpperBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an array of &lt;tt>Type&lt;/tt> objects representing the  upper&#xA;     * bound(s) of this type variable.  Note that if no upper bound is&#xA;     * explicitly declared, the upper bound is &lt;tt>Object&lt;/tt>.&#xA;     *&#xA;     * &lt;p>For each upper bound B :&#xA;     * &lt;ul>&#xA;     *  &lt;li>if B is a parameterized type or a type variable, it is created,&#xA;     *  (see {@link java.lang.reflect.ParameterizedType ParameterizedType} &#xA;     *  for the details of the creation process for parameterized types).&#xA;     *  &lt;li>Otherwise, B is resolved. &#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return an array of Types representing the upper bound(s) of this &#xA;     *     type variable&#xA;     * @throws TypeNotPresentException if any of the&#xA;     *     bounds refers to a non-existent type declaration&#xA;     * @throws MalformedParameterizedTypeException if any of the &#xA;     *     bounds refer to a parameterized type that cannot be instantiated &#xA;     *     for any reason&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLowerBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an array of &lt;tt>Type&lt;/tt> objects representing the &#xA;     * lower bound(s) of this type variable.  Note that if no lower bound is&#xA;     * explicitly declared, the lower bound is the type of &lt;tt>null&lt;/tt>.&#xA;     * In this case, a zero length array is returned.&#xA;     * &#xA;     * &lt;p>For each lower bound B :&#xA;     * &lt;ul>&#xA;     *   &lt;li>if B is a parameterized type or a type variable, it is created,&#xA;     *  (see {@link java.lang.reflect.ParameterizedType ParameterizedType} &#xA;     *  for the details of the creation process for parameterized types).&#xA;     *   &lt;li>Otherwise, B is resolved.&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return an array of Types representing the lower bound(s) of this &#xA;     *     type variable&#xA;     * @throws TypeNotPresentException if any of the&#xA;     *     bounds refers to a non-existent type declaration&#xA;     * @throws MalformedParameterizedTypeException if any of the &#xA;     *     bounds refer to a parameterized type that cannot be instantiated &#xA;     *     for any reason&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * WildcardType represents a wildcard type expression, such as&#xA; * &lt;tt>?&lt;/tt>, &lt;tt>? extends Number&lt;/tt>, or &lt;tt>? super Integer&lt;/tt>.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
