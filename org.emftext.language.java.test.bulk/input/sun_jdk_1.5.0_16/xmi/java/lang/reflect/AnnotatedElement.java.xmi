<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="AnnotatedElement.java">
  <comments>/*&#xA; * @(#)AnnotatedElement.java&#x9;1.3 04/02/03&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>annotation</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="AnnotatedElement">
    <members xsi:type="members:InterfaceMethod" name="isAnnotationPresent">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if an annotation for the specified type&#xA;     * is present on this element, else false.  This method&#xA;     * is designed primarily for convenient access to marker annotations.&#xA;     *&#xA;     * @param annotationType the Class object corresponding to the&#xA;     *        annotation type&#xA;     * @return true if an annotation for the specified annotation&#xA;     *     type is present on this element, else false&#xA;     * @throws NullPointerException if annotationType is null&#xA;     * @since 1.5&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="annotationType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAnnotation">
      <comments>/**&#xA;     * Returns this element's annotation for the specified type if&#xA;     * such an annotation is present, else null.&#xA;     *&#xA;     * @param annotationType the Class object corresponding to the &#xA;     *        annotation type&#xA;     * @return this element's annotation for the specified annotation type if&#xA;     *     present on this element, else null&#xA;     * @throws NullPointerException if annotationType is null&#xA;     * @since 1.5&#xA;     */</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.1/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="T">
        <extendTypes xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </extendTypes>
      </typeParameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="annotationType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.1/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAnnotations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns all annotations present on this element.  (Returns an array&#xA;     * of length zero if this element has no annotations.)  The caller of&#xA;     * this method is free to modify the returned array; it will have no&#xA;     * effect on the arrays returned to other callers.&#xA;     *&#xA;     * @return all annotations present on this element&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDeclaredAnnotations">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns all annotations that are directly present on this&#xA;     * element.  Unlike the other methods in this interface, this method&#xA;     * ignores inherited annotations.  (Returns an array of length zero if&#xA;     * no annotations are directly present on this element.)  The caller of&#xA;     * this method is free to modify the returned array; it will have no&#xA;     * effect on the arrays returned to other callers.&#xA;     *&#xA;     * @return All annotations directly present on this element&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../annotation/Annotation.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Represents an annotated element of the program currently running in this&#xA; * VM.  This interface allows annotations to be read reflectively.  All&#xA; * annotations returned by methods in this interface are immutable and&#xA; * serializable.  It is permissible for the caller to modify the&#xA; * arrays returned by accessors for array-valued enum members; it will&#xA; * have no affect on the arrays returned to other callers.&#xA; *&#xA; * &lt;p>If an annotation returned by a method in this interface contains&#xA; * (directly or indirectly) a {@link Class}-valued member referring to&#xA; * a class that is not accessible in this VM, attempting to read the class&#xA; * by calling the relevant Class-returning method on the returned annotation&#xA; * will result in a {@link TypeNotPresentException}.&#xA; *&#xA; * &lt;p>Similarly, attempting to read an enum-valued member will result in&#xA; * a {@link EnumConstantNotPresentException} if the enum constant in the&#xA; * annotation is no longer present in the enum type.&#xA; * &#xA; * &lt;p>Finally, Attempting to read a member whose definition has evolved&#xA; * incompatibly will result in a {@link&#xA; * java.lang.annotation.AnnotationTypeMismatchException} or an&#xA; * {@link java.lang.annotation.IncompleteAnnotationException}.&#xA; *&#xA; * @since 1.5&#xA; * @author Josh Bloch&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
