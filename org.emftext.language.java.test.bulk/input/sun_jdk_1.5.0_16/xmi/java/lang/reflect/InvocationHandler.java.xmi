<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="InvocationHandler.java">
  <comments>/*&#xA; * @(#)InvocationHandler.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="InvocationHandler">
    <members xsi:type="members:InterfaceMethod" name="invoke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="proxy">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="method">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Method.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="args">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Throwable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Processes a method invocation on a proxy instance and returns&#xA;     * the result.  This method will be invoked on an invocation handler&#xA;     * when a method is invoked on a proxy instance that it is&#xA;     * associated with.&#xA;     *&#xA;     * @param&#x9;proxy the proxy instance that the method was invoked on&#xA;     *&#xA;     * @param&#x9;method the &lt;code>Method&lt;/code> instance corresponding to&#xA;     * the interface method invoked on the proxy instance.  The declaring&#xA;     * class of the &lt;code>Method&lt;/code> object will be the interface that&#xA;     * the method was declared in, which may be a superinterface of the&#xA;     * proxy interface that the proxy class inherits the method through.&#xA;     *&#xA;     * @param&#x9;args an array of objects containing the values of the&#xA;     * arguments passed in the method invocation on the proxy instance,&#xA;     * or &lt;code>null&lt;/code> if interface method takes no arguments.&#xA;     * Arguments of primitive types are wrapped in instances of the&#xA;     * appropriate primitive wrapper class, such as&#xA;     * &lt;code>java.lang.Integer&lt;/code> or &lt;code>java.lang.Boolean&lt;/code>.&#xA;     *&#xA;     * @return&#x9;the value to return from the method invocation on the&#xA;     * proxy instance.  If the declared return type of the interface&#xA;     * method is a primitive type, then the value returned by&#xA;     * this method must be an instance of the corresponding primitive&#xA;     * wrapper class; otherwise, it must be a type assignable to the&#xA;     * declared return type.  If the value returned by this method is&#xA;     * &lt;code>null&lt;/code> and the interface method's return type is&#xA;     * primitive, then a &lt;code>NullPointerException&lt;/code> will be&#xA;     * thrown by the method invocation on the proxy instance.  If the&#xA;     * value returned by this method is otherwise not compatible with&#xA;     * the interface method's declared return type as described above,&#xA;     * a &lt;code>ClassCastException&lt;/code> will be thrown by the method&#xA;     * invocation on the proxy instance.&#xA;     *&#xA;     * @throws&#x9;Throwable the exception to throw from the method&#xA;     * invocation on the proxy instance.  The exception's type must be&#xA;     * assignable either to any of the exception types declared in the&#xA;     * &lt;code>throws&lt;/code> clause of the interface method or to the&#xA;     * unchecked exception types &lt;code>java.lang.RuntimeException&lt;/code>&#xA;     * or &lt;code>java.lang.Error&lt;/code>.  If a checked exception is&#xA;     * thrown by this method that is not assignable to any of the&#xA;     * exception types declared in the &lt;code>throws&lt;/code> clause of&#xA;     * the interface method, then an&#xA;     * {@link UndeclaredThrowableException} containing the&#xA;     * exception that was thrown by this method will be thrown by the&#xA;     * method invocation on the proxy instance.&#xA;     *&#xA;     * @see&#x9;UndeclaredThrowableException&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>InvocationHandler&lt;/code> is the interface implemented by&#xA; * the &lt;i>invocation handler&lt;/i> of a proxy instance.&#xA; *&#xA; * &lt;p>Each proxy instance has an associated invocation handler.&#xA; * When a method is invoked on a proxy instance, the method&#xA; * invocation is encoded and dispatched to the &lt;code>invoke&lt;/code>&#xA; * method of its invocation handler.&#xA; *&#xA; * @author&#x9;Peter Jones&#xA; * @version&#x9;1.9, 03/12/19&#xA; * @see&#x9;&#x9;Proxy&#xA; * @since&#x9;JDK1.3&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
