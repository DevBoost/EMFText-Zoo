<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="TypeVariable.java">
  <comments>/*&#xA; * @(#)TypeVariable.java&#x9;1.3 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="TypeVariable">
    <typeParameters name="D">
      <extendTypes xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="GenericDeclaration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extendTypes>
    </typeParameters>
    <members xsi:type="members:InterfaceMethod" name="getBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an array of &lt;tt>Type&lt;/tt> objects representing the &#xA;     * upper bound(s) of this type variable.  Note that if no upper bound is&#xA;     * explicitly declared, the upper bound is &lt;tt>Object&lt;/tt>.&#xA;     *&#xA;     * &lt;p>For each upper bound B: &lt;ul> &lt;li>if B is a parameterized&#xA;     * type or a type variable, it is created, (see {@link&#xA;     * java.lang.reflect.ParameterizedType ParameterizedType} for the&#xA;     * details of the creation process for parameterized types).&#xA;     * &lt;li>Otherwise, B is resolved.  &lt;/ul>&#xA;     *&#xA;     * @throws TypeNotPresentException  if any of the&#xA;     *     bounds refers to a non-existent type declaration&#xA;     * @throws MalformedParameterizedTypeException if any of the &#xA;     *     bounds refer to a parameterized type that cannot be instantiated &#xA;     *     for any reason&#xA;     * @return an array of &lt;tt>Type&lt;/tt>s representing the upper&#xA;     *     bound(s) of this type variable&#xA;    */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getGenericDeclaration">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0">
          <comments>/**&#xA;     * Returns the &lt;tt>GenericDeclaration&lt;/tt> object representing the &#xA;     * generic declaration declared this type variable.&#xA;     *&#xA;     * @return the generic declaration declared for this type variable.&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the name of this type variable, as it occurs in the source code.&#xA;     *&#xA;     * @return the name of this type variable, as it appears in the source code&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * TypeVariable is the common superinterface for type variables of kinds.&#xA; * A type variable is created the first time it is needed by a reflective&#xA; * method, as specified in this package.  If a type variable t is referenced&#xA; * by a type (i.e, class, interface or annotation type) T, and T is declared&#xA; * by the nth enclosing class of T (see JLS 8.1.2), then the creation of t&#xA; * requires the resolution (see JVMS 5) of the ith enclosing class of T,&#xA; * for i = 0 to n, inclusive. Creating a type variable must not cause the&#xA; * creation of its bounds. Repeated creation of a type variable has no effect.&#xA; * &#xA; * &lt;p>Multiple objects may be instantiated at run-time to&#xA; * represent a given type variable. Even though a type variable is&#xA; * created only once, this does not imply any requirement to cache&#xA; * instances representing the type variable. However, all instances&#xA; * representing a type variable must be equal() to each other.&#xA; * As a consequence, users of type variables must not rely on the identity &#xA; * of instances of classes implementing this interface.&#xA; *&#xA; * &lt;p>The type parameter D represents the type of generic declaration&#xA; * that declared the underlying type variable.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
