<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ParameterizedType.java">
  <comments>/*&#xA; * @(#)ParameterizedType.java&#x9;1.4 04/02/06&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ParameterizedType">
    <members xsi:type="members:InterfaceMethod" name="getActualTypeArguments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an array of &lt;tt>Type&lt;/tt> objects representing the actual type&#xA;     * arguments to this type.&#xA;     * &#xA;     * &lt;p>Note that in some cases, the returned array be empty. This can occur&#xA;     * if this type represents a non-parameterized type nested within&#xA;     * a parameterized type.&#xA;     *&#xA;     * @return an array of &lt;tt>Type&lt;/tt> objects representing the actual type&#xA;     *     arguments to this type&#xA;     * @throws &lt;tt>TypeNotPresentException&lt;/tt> if any of the&#xA;     *     actual type arguments refers to a non-existent type declaration&#xA;     * @throws &lt;tt>MalformedParameterizedTypeException&lt;/tt> if any of the &#xA;     *     actual type parameters refer to a parameterized type that cannot&#xA;     *     be instantiated for any reason&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRawType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the &lt;tt>Type&lt;/tt> object representing the class or interface&#xA;     * that declared this type.&#xA;     *&#xA;     * @return the &lt;tt>Type&lt;/tt> object representing the class or interface&#xA;     *     that declared this type&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOwnerType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a &lt;tt>Type&lt;/tt> object representing the type that this type&#xA;     * is a member of.  For example, if this type is {@code O&lt;T>.I&lt;S>},&#xA;     * return a representation of {@code O&lt;T>}.&#xA;     *&#xA;     * &lt;p>If this type is a top-level type, &lt;tt>null&lt;/tt> is returned.&#xA;     *&#xA;     * @return a &lt;tt>Type&lt;/tt> object representing the type that &#xA;     *     this type is a member of. If this type is a top-level type, &#xA;     *     &lt;tt>null&lt;/tt> is returned&#xA;     * @throws &lt;tt>TypeNotPresentException&lt;/tt> if the owner type&#xA;     *     refers to a non-existent type declaration&#xA;     * @throws &lt;tt>MalformedParameterizedTypeException&lt;/tt> if the owner type&#xA;     *     refers to a parameterized type that cannot be instantiated &#xA;     *     for any reason&#xA;     * @since 1.5&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * ParameterizedType represents a parameterized type such as&#xA; * Collection&amp;lt;String&amp;gt;.&#xA; *&#xA; * &lt;p>A parameterized type is created the first time it is needed by a&#xA; * reflective method, as specified in this package. When a&#xA; * parameterized type p is created, the generic type declaration that&#xA; * p instantiates is resolved, and all type arguments of p are created&#xA; * recursively. See {@link java.lang.reflect.TypeVariable&#xA; * TypeVariable} for details on the creation process for type&#xA; * variables. Repeated creation of a parameterized type has no effect.&#xA; *&#xA; * &lt;p>Instances of classes that implement this interface must implement&#xA; * an equals() method that equates any two instances that share the&#xA; * same generic type declaration and have equal type parameters.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Type.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
