<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ReflectPermission.java">
  <comments>/*&#xA; * @(#)ReflectPermission.java&#x9;1.21 04/03/01&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <namespaces>reflect</namespaces>
  <classifiers xsi:type="classifiers:Class" name="ReflectPermission">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="7412737110241507485"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="ReflectPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a ReflectPermission with the specified name.&#xA;     *&#xA;     * @param name the name of the ReflectPermission&#xA;     *&#xA;     * @throws  NullPointerException&#xA;     *          If &lt;tt>name&lt;/tt> is &lt;tt>null&lt;/tt>&#xA;     *&#xA;     * @throws  IllegalArgumentException&#xA;     *          If &lt;tt>name&lt;/tt> is empty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ReflectPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="actions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a ReflectPermission with the specified name and actions.&#xA;     * The actions should be null; they are ignored.&#xA;     *&#xA;     * @param name the name of the ReflectPermission&#xA;     *&#xA;     * @param actions should be null&#xA;     *&#xA;     * @throws  NullPointerException&#xA;     *          If &lt;tt>name&lt;/tt> is &lt;tt>null&lt;/tt>&#xA;     *&#xA;     * @throws  IllegalArgumentException&#xA;     *          If &lt;tt>name&lt;/tt> is empty&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The Permission class for reflective operations.  A&#xA; * ReflectPermission is a &lt;em>named permission&lt;/em> and has no&#xA; * actions.  The only name currently defined is &lt;tt>suppressAccessChecks&lt;/tt>,&#xA; * which allows suppressing the standard Java language access checks&#xA; * -- for public, default (package) access, protected, and private&#xA; * members -- performed by reflected objects at their point of use.&#xA; * &lt;P>&#xA; * The following table&#xA; * provides a summary description of what the permission allows,&#xA; * and discusses the risks of granting code the permission.&#xA; * &lt;P>&#xA; *&#xA; * &lt;table border=1 cellpadding=5 summary=&quot;Table shows permission target name, what the permission allows, and associated risks&quot;>&#xA; * &lt;tr>&#xA; * &lt;th>Permission Target Name&lt;/th>&#xA; * &lt;th>What the Permission Allows&lt;/th>&#xA; * &lt;th>Risks of Allowing this Permission&lt;/th>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>suppressAccessChecks&lt;/td>&#xA; *   &lt;td>ability to access&#xA; * fields and invoke methods in a class. Note that this includes&#xA; * not only public, but protected and private fields and methods as well.&lt;/td>&#xA; *   &lt;td>This is dangerous in that information (possibly confidential) and&#xA; * methods normally unavailable would be accessible to malicious code.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * @see java.security.Permission&#xA; * @see java.security.BasicPermission&#xA; * @see AccessibleObject&#xA; * @see Field#get&#xA; * @see Field#set&#xA; * @see Method#invoke&#xA; * @see Constructor#newInstance&#xA; *&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>security</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../security/BasicPermission.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
