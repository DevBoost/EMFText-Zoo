<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="RuntimePermission.java">
  <comments>/*&#xA; * @(#)RuntimePermission.java&#x9;1.53 04/04/20&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/StringTokenizer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="RuntimePermission">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="7399184964622342223"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="RuntimePermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new RuntimePermission with the specified name.&#xA;     * The name is the symbolic name of the RuntimePermission, such as&#xA;     * &quot;exit&quot;, &quot;setFactory&quot;, etc. An asterisk&#xA;     * may appear at the end of the name, following a &quot;.&quot;, or by itself, to&#xA;     * signify a wildcard match.&#xA;     *&#xA;     * @param name the name of the RuntimePermission.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="RuntimePermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="actions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new RuntimePermission object with the specified name.&#xA;     * The name is the symbolic name of the RuntimePermission, and the&#xA;     * actions String is currently unused and should be null.&#xA;     *&#xA;     * @param name the name of the RuntimePermission.&#xA;     * @param actions should be null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class is for runtime permissions. A RuntimePermission&#xA; * contains a name (also referred to as a &quot;target name&quot;) but&#xA; * no actions list; you either have the named permission&#xA; * or you don't.&#xA; *&#xA; * &lt;P>&#xA; * The target name is the name of the runtime permission (see below). The&#xA; * naming convention follows the  hierarchical property naming convention.&#xA; * Also, an asterisk&#xA; * may appear at the end of the name, following a &quot;.&quot;, or by itself, to&#xA; * signify a wildcard match. For example: &quot;loadLibrary.*&quot; or &quot;*&quot; is valid,&#xA; * &quot;*loadLibrary&quot; or &quot;a*b&quot; is not valid.&#xA; * &lt;P>&#xA; * The following table lists all the possible RuntimePermission target names,&#xA; * and for each provides a description of what the permission allows&#xA; * and a discussion of the risks of granting code the permission.&#xA; * &lt;P>&#xA; *&#xA; * &lt;table border=1 cellpadding=5 summary=&quot;permission target name, &#xA; *  what the target allows,and associated risks&quot;>&#xA; * &lt;tr>&#xA; * &lt;th>Permission Target Name&lt;/th>&#xA; * &lt;th>What the Permission Allows&lt;/th>&#xA; * &lt;th>Risks of Allowing this Permission&lt;/th>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>createClassLoader&lt;/td>&#xA; *   &lt;td>Creation of a class loader&lt;/td>&#xA; *   &lt;td>This is an extremely dangerous permission to grant.&#xA; * Malicious applications that can instantiate their own class&#xA; * loaders could then load their own rogue classes into the system.&#xA; * These newly loaded classes could be placed into any protection&#xA; * domain by the class loader, thereby automatically granting the&#xA; * classes the permissions for that domain.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>getClassLoader&lt;/td>&#xA; *   &lt;td>Retrieval of a class loader (e.g., the class loader for the calling&#xA; * class)&lt;/td>&#xA; *   &lt;td>This would grant an attacker permission to get the&#xA; * class loader for a particular class. This is dangerous because&#xA; * having access to a class's class loader allows the attacker to&#xA; * load other classes available to that class loader. The attacker&#xA; * would typically otherwise not have access to those classes.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setContextClassLoader&lt;/td>&#xA; *   &lt;td>Setting of the context class loader used by a thread&lt;/td>&#xA; *   &lt;td>The context class loader is used by system code and extensions&#xA; * when they need to lookup resources that might not exist in the system&#xA; * class loader. Granting setContextClassLoader permission would allow&#xA; * code to change which context class loader is used&#xA; * for a particular thread, including system threads.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>enableContextClassLoaderOverride&lt;/td>&#xA; *   &lt;td>Subclass implementation of the thread context class loader methods&lt;/td>&#xA; *   &lt;td>The context class loader is used by system code and extensions&#xA; * when they need to lookup resources that might not exist in the system&#xA; * class loader. Granting enableContextClassLoaderOverride permission would allow&#xA; * a subclass of Thread to override the methods that are used&#xA; * to get or set the context class loader for a particular thread.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setSecurityManager&lt;/td>&#xA; *   &lt;td>Setting of the security manager (possibly replacing an existing one)&#xA; * &lt;/td>&#xA; *   &lt;td>The security manager is a class that allows &#xA; * applications to implement a security policy. Granting the setSecurityManager&#xA; * permission would allow code to change which security manager is used by&#xA; * installing a different, possibly less restrictive security manager,&#xA; * thereby bypassing checks that would have been enforced by the original&#xA; * security manager.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>createSecurityManager&lt;/td>&#xA; *   &lt;td>Creation of a new security manager&lt;/td>&#xA; *   &lt;td>This gives code access to protected, sensitive methods that may&#xA; * disclose information about other classes or the execution stack.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>getenv.{variable name}&lt;/td>&#xA; *   &lt;td>Reading of the value of the specified environment variable&lt;/td>&#xA; *   &lt;td>This would allow code to read the value, or determine the&#xA; *       existence, of a particular environment variable.  This is&#xA; *       dangerous if the variable contains confidential data.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>exitVM&lt;/td>&#xA; *   &lt;td>Halting of the Java Virtual Machine&lt;/td>&#xA; *   &lt;td>This allows an attacker to mount a denial-of-service attack&#xA; * by automatically forcing the virtual machine to halt.&#xA; * Note: The &quot;exitVM&quot; permission is automatically granted to all code&#xA; * loaded from the application class path, thus enabling applications&#xA; * to terminate themselves.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>shutdownHooks&lt;/td>&#xA; *   &lt;td>Registration and cancellation of virtual-machine shutdown hooks&lt;/td>&#xA; *   &lt;td>This allows an attacker to register a malicious shutdown&#xA; * hook that interferes with the clean shutdown of the virtual machine.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setFactory&lt;/td>&#xA; *   &lt;td>Setting of the socket factory used by ServerSocket or Socket,&#xA; * or of the stream handler factory used by URL&lt;/td>&#xA; *   &lt;td>This allows code to set the actual implementation&#xA; * for the socket, server socket, stream handler, or RMI socket factory.&#xA; * An attacker may set a faulty implementation which mangles the data&#xA; * stream.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setIO&lt;/td>&#xA; *   &lt;td>Setting of System.out, System.in, and System.err&lt;/td>&#xA; *   &lt;td>This allows changing the value of the standard system streams.&#xA; * An attacker may change System.in to monitor and&#xA; * steal user input, or may set System.err to a &quot;null&quot; OutputStream,&#xA; * which would hide any error messages sent to System.err. &lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>modifyThread&lt;/td>&#xA; *   &lt;td>Modification of threads, e.g., via calls to Thread&#xA; * &lt;tt>interrupt&lt;/tt>, &lt;tt>stop&lt;/tt>, &lt;tt>suspend&lt;/tt>,&#xA; * &lt;tt>resume&lt;/tt>, &lt;tt>setDaemon&lt;/tt>, &lt;tt>setPriority&lt;/tt>,&#xA; * &lt;tt>setName&lt;/tt> and &lt;tt>setUncaughtExceptionHandler&lt;/tt>&#xA; * methods&lt;/td> &#xA; * &lt;td>This allows an attacker to modify the behaviour of&#xA; * any thread in the system.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>stopThread&lt;/td>&#xA; *   &lt;td>Stopping of threads via calls to the Thread &lt;code>stop&lt;/code>&#xA; * method&lt;/td>&#xA; *   &lt;td>This allows code to stop any thread in the system provided that it is&#xA; * already granted permission to access that thread.&#xA; * This poses as a threat, because that code may corrupt the system by&#xA; * killing existing threads.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>modifyThreadGroup&lt;/td>&#xA; *   &lt;td>modification of thread groups, e.g., via calls to ThreadGroup&#xA; * &lt;code>destroy&lt;/code>, &lt;code>getParent&lt;/code>, &lt;code>resume&lt;/code>, &#xA; * &lt;code>setDaemon&lt;/code>, &lt;code>setMaxPriority&lt;/code>, &lt;code>stop&lt;/code>, &#xA; * and &lt;code>suspend&lt;/code> methods&lt;/td>&#xA; *   &lt;td>This allows an attacker to create thread groups and&#xA; * set their run priority.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>getProtectionDomain&lt;/td>&#xA; *   &lt;td>Retrieval of the ProtectionDomain for a class&lt;/td>&#xA; *   &lt;td>This allows code to obtain policy information&#xA; * for a particular code source. While obtaining policy information&#xA; * does not compromise the security of the system, it does give&#xA; * attackers additional information, such as local file names for&#xA; * example, to better aim an attack.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>readFileDescriptor&lt;/td>&#xA; *   &lt;td>Reading of file descriptors&lt;/td>&#xA; *   &lt;td>This would allow code to read the particular file associated&#xA; *       with the file descriptor read. This is dangerous if the file&#xA; *       contains confidential data.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>writeFileDescriptor&lt;/td>&#xA; *   &lt;td>Writing to file descriptors&lt;/td>&#xA; *   &lt;td>This allows code to write to a particular file associated&#xA; *       with the descriptor. This is dangerous because it may allow&#xA; *       malicious code to plant viruses or at the very least, fill up&#xA; *       your entire disk.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>loadLibrary.{library name}&lt;/td>&#xA; *   &lt;td>Dynamic linking of the specified library&lt;/td>&#xA; *   &lt;td>It is dangerous to allow an applet permission to load native code&#xA; * libraries, because the Java security architecture is not designed to and&#xA; * does not prevent malicious behavior at the level of native code.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>accessClassInPackage.{package name}&lt;/td>&#xA; *   &lt;td>Access to the specified package via a class loader's&#xA; * &lt;code>loadClass&lt;/code> method when that class loader calls&#xA; * the SecurityManager &lt;code>checkPackageAccess&lt;/code> method&lt;/td>&#xA; *   &lt;td>This gives code access to classes in packages&#xA; * to which it normally does not have access. Malicious code&#xA; * may use these classes to help in its attempt to compromise&#xA; * security in the system.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>defineClassInPackage.{package name}&lt;/td>&#xA; *   &lt;td>Definition of classes in the specified package, via a class&#xA; * loader's &lt;code>defineClass&lt;/code> method when that class loader calls&#xA; * the SecurityManager &lt;code>checkPackageDefinition&lt;/code> method.&lt;/td>&#xA; *   &lt;td>This grants code permission to define a class&#xA; * in a particular package. This is dangerous because malicious&#xA; * code with this permission may define rogue classes in&#xA; * trusted packages like &lt;code>java.security&lt;/code> or &lt;code>java.lang&lt;/code>,&#xA; * for example.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>accessDeclaredMembers&lt;/td>&#xA; *   &lt;td>Access to the declared members of a class&lt;/td>&#xA; *   &lt;td>This grants code permission to query a class for its public,&#xA; * protected, default (package) access, and private fields and/or&#xA; * methods. Although the code would have&#xA; * access to the private and protected field and method names, it would not&#xA; * have access to the private/protected field data and would not be able&#xA; * to invoke any private methods. Nevertheless, malicious code&#xA; * may use this information to better aim an attack.&#xA; * Additionally, it may invoke any public methods and/or access public fields&#xA; * in the class.  This could be dangerous if&#xA; * the code would normally not be able to invoke those methods and/or&#xA; * access the fields  because&#xA; * it can't cast the object to the class/interface with those methods&#xA; * and fields.&#xA;&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;tr>&#xA; *   &lt;td>queuePrintJob&lt;/td>&#xA; *   &lt;td>Initiation of a print job request&lt;/td>&#xA; *   &lt;td>This could print sensitive information to a printer,&#xA; * or simply waste paper.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>getStackTrace&lt;/td>&#xA; *   &lt;td>Retrieval of the stack trace information of another thread.&lt;/td>&#xA; *   &lt;td>This allows retrieval of the stack trace information of &#xA; * another thread.  This might allow malicious code to monitor the &#xA; * execution of threads and discover vulnerabilities in applications.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setDefaultUncaughtExceptionHandler&lt;/td>&#xA; *   &lt;td>Setting the default handler to be used when a thread&#xA; *   terminates abruptly due to an uncaught exception&lt;/td>&#xA; *   &lt;td>This allows an attacker to register a malicious&#xA; *   uncaught exception handler that could interfere with termination&#xA; *   of a thread&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>preferences&lt;/td>&#xA; *   &lt;td>Represents the permission required to get access to the&#xA; *   java.util.prefs.Preferences implementations user or system root&#xA; *   which in turn allows retrieval or update operations within the&#xA; *   Preferences persistent backing store.) &lt;/td>&#xA; *   &lt;td>This permission allows the user to read from or write to the&#xA; *   preferences backing store if the user running the code has &#xA; *   sufficient OS privileges to read/write to that backing store.&#xA; *   The actual backing store may reside within a traditional filesystem&#xA; *   directory or within a registry depending on the platform OS&lt;/td>&#xA; * &lt;/tr>&#xA;&#xA; * &lt;/table>&#xA; *&#xA; * @see java.security.BasicPermission&#xA; * @see java.security.Permission&#xA; * @see java.security.Permissions&#xA; * @see java.security.PermissionCollection&#xA; * @see java.lang.SecurityManager&#xA; *&#xA; * @version 1.53 04/04/20&#xA; *&#xA; * @author Marianne Mueller&#xA; * @author Roland Schemers&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../security/BasicPermission.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
