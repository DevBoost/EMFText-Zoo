<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="CharSequence.java">
  <comments>/*&#xA; * @(#)CharSequence.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="CharSequence">
    <members xsi:type="members:InterfaceMethod" name="length">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the length of this character sequence.  The length is the number&#xA;     * of 16-bit &lt;code>char&lt;/code>s in the sequence.&lt;/p>&#xA;     *&#xA;     * @return  the number of &lt;code>char&lt;/code>s in this sequence&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="charAt">
      <typeReference xsi:type="types:Char">
        <comments>/**&#xA;     * Returns the &lt;code>char&lt;/code> value at the specified index.  An index ranges from zero&#xA;     * to &lt;tt>length() - 1&lt;/tt>.  The first &lt;code>char&lt;/code> value of the sequence is at&#xA;     * index zero, the next at index one, and so on, as for array&#xA;     * indexing. &lt;/p>&#xA;     *&#xA;     * &lt;p>If the &lt;code>char&lt;/code> value specified by the index is a&#xA;     * &lt;a href=&quot;Character.html#unicode&quot;>surrogate&lt;/a>, the surrogate&#xA;     * value is returned.&#xA;     *&#xA;     * @param   index   the index of the &lt;code>char&lt;/code> value to be returned&#xA;     *&#xA;     * @return  the specified &lt;code>char&lt;/code> value&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          if the &lt;tt>index&lt;/tt> argument is negative or not less than&#xA;     *          &lt;tt>length()&lt;/tt>&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="subSequence">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Returns a new &lt;code>CharSequence&lt;/code> that is a subsequence of this sequence.&#xA;     * The subsequence starts with the &lt;code>char&lt;/code> value at the specified index and&#xA;     * ends with the &lt;code>char&lt;/code> value at index &lt;tt>end - 1&lt;/tt>.  The length&#xA;     * (in &lt;code>char&lt;/code>s) of the&#xA;     * returned sequence is &lt;tt>end - start&lt;/tt>, so if &lt;tt>start == end&lt;/tt>&#xA;     * then an empty sequence is returned. &lt;/p>&#xA;     * &#xA;     * @param   start   the start index, inclusive&#xA;     * @param   end     the end index, exclusive&#xA;     *&#xA;     * @return  the specified subsequence&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          if &lt;tt>start&lt;/tt> or &lt;tt>end&lt;/tt> are negative,&#xA;     *          if &lt;tt>end&lt;/tt> is greater than &lt;tt>length()&lt;/tt>,&#xA;     *          or if &lt;tt>start&lt;/tt> is greater than &lt;tt>end&lt;/tt>&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="end">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string containing the characters in this sequence in the same&#xA;     * order as this sequence.  The length of the string will be the length of&#xA;     * this sequence. &lt;/p>&#xA;     *&#xA;     * @return  a string consisting of exactly this sequence of characters&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;tt>CharSequence&lt;/tt> is a readable sequence of &lt;code>char&lt;/code> values. This&#xA; * interface provides uniform, read-only access to many different kinds of&#xA; * &lt;code>char&lt;/code> sequences.&#xA; * A &lt;code>char&lt;/code> value represents a character in the &lt;i>Basic&#xA; * Multilingual Plane (BMP)&lt;/i> or a surrogate. Refer to &lt;a&#xA; * href=&quot;Character.html#unicode&quot;>Unicode Character Representation&lt;/a> for details.&#xA; *&#xA; * &lt;p> This interface does not refine the general contracts of the {@link&#xA; * java.lang.Object#equals(java.lang.Object) equals} and {@link&#xA; * java.lang.Object#hashCode() hashCode} methods.  The result of comparing two&#xA; * objects that implement &lt;tt>CharSequence&lt;/tt> is therefore, in general,&#xA; * undefined.  Each object may be implemented by a different class, and there&#xA; * is no guarantee that each class will be capable of testing its instances&#xA; * for equality with those of the other.  It is therefore inappropriate to use&#xA; * arbitrary &lt;tt>CharSequence&lt;/tt> instances as elements in a set or as keys in&#xA; * a map. &lt;/p>&#xA; *&#xA; * @author Mike McCloskey&#xA; * @version 1.8 03/12/19&#xA; * @since 1.4&#xA; * @spec JSR-51&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
