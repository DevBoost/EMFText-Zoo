<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="ProcessBuilder.java">
  <comments>/*&#xA; * @(#)ProcessBuilder.java&#x9;1.6 04/02/07&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; *&#xA; * @author  Martin Buchholz&#xA; * @version 1.6, 04/02/07&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/ArrayList.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/List.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ProcessBuilder">
    <members xsi:type="members:Field" name="command">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="directory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="environment">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="redirectErrorStream">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Constructor" name="ProcessBuilder">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../util/List.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a process builder with the specified operating&#xA;     * system program and arguments.  This constructor does &lt;i>not&lt;/i>&#xA;     * make a copy of the &lt;code>command&lt;/code> list.  Subsequent&#xA;     * updates to the list will be reflected in the state of the&#xA;     * process builder.  It is not checked whether&#xA;     * &lt;code>command&lt;/code> corresponds to a valid operating system&#xA;     * command.&lt;/p>&#xA;     *&#xA;     * @param   command  The list containing the program and its arguments&#xA;     *&#xA;     * @throws  NullPointerException&#xA;     *          If the argument is &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ProcessBuilder">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Class" href="../util/ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ForEachLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../util/List.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@next"/>
              </next>
            </next>
            <self xsi:type="literals:This"/>
          </expression>
        </statement>
        <next name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </next>
        <collection xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
      </statements>
      <parameters xsi:type="parameters:VariableLengthParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a process builder with the specified operating&#xA;     * system program and arguments.  This is a convenience&#xA;     * constructor that sets the process builder's command to a string&#xA;     * list containing the same strings as the &lt;code>command&lt;/code>&#xA;     * array, in the same order.  It is not checked whether&#xA;     * &lt;code>command&lt;/code> corresponds to a valid operating system&#xA;     * command.&lt;/p>&#xA;     *&#xA;     * @param   command  A string array containing the program and its arguments&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="command">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../util/List.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets this process builder's operating system program and&#xA;     * arguments.  This method does &lt;i>not&lt;/i> make a copy of the&#xA;     * &lt;code>command&lt;/code> list.  Subsequent updates to the list will&#xA;     * be reflected in the state of the process builder.  It is not&#xA;     * checked whether &lt;code>command&lt;/code> corresponds to a valid&#xA;     * operating system command.&lt;/p>&#xA;     *&#xA;     * @param   command  The list containing the program and its arguments&#xA;     * @return  This process builder&#xA;     *&#xA;     * @throws  NullPointerException&#xA;     *          If the argument is &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="command">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:VariableLengthParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets this process builder's operating system program and&#xA;     * arguments.  This is a convenience method that sets the command&#xA;     * to a string list containing the same strings as the&#xA;     * &lt;code>command&lt;/code> array, in the same order.  It is not&#xA;     * checked whether &lt;code>command&lt;/code> corresponds to a valid&#xA;     * operating system command.&lt;/p>&#xA;     *&#xA;     * @param   command  A string array containing the program and its arguments&#xA;     * @return  This process builder&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Class" href="../util/ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ForEachLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../util/List.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@next"/>
              </next>
            </next>
            <self xsi:type="literals:This"/>
          </expression>
        </statement>
        <next name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </next>
        <collection xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="command">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this process builder's operating system program and&#xA;     * arguments.  The returned list is &lt;i>not&lt;/i> a copy.  Subsequent&#xA;     * updates to the list will be reflected in the state of this&#xA;     * process builder.&lt;/p>&#xA;     *&#xA;     * @return  This process builder's program and its arguments&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="environment">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string map view of this process builder's environment.&#xA;     *&#xA;     * Whenever a process builder is created, the environment is&#xA;     * initialized to a copy of the current process environment (see&#xA;     * {@link System#getenv()}).  Subprocesses subsequently started by&#xA;     * this object's {@link #start()} method will use this map as&#xA;     * their environment.&#xA;     *&#xA;     * &lt;p>The returned object may be modified using ordinary {@link&#xA;     * java.util.Map Map} operations.  These modifications will be&#xA;     * visible to subprocesses started via the {@link #start()}&#xA;     * method.  Two &lt;code>ProcessBuilder&lt;/code> instances always&#xA;     * contain independent process environments, so changes to the&#xA;     * returned map will never be reflected in any other&#xA;     * &lt;code>ProcessBuilder&lt;/code> instance or the values returned by&#xA;     * {@link System#getenv System.getenv}.&#xA;     *&#xA;     * &lt;p>If the system does not support environment variables, an&#xA;     * empty map is returned.&#xA;     *&#xA;     * &lt;p>The returned map does not permit null keys or values.&#xA;     * Attempting to insert or query the presence of a null key or&#xA;     * value will throw a {@link NullPointerException}.&#xA;     * Attempting to query the presence of a key or value which is not&#xA;     * of type {@link String} will throw a {@link ClassCastException}.&#xA;     *&#xA;     * &lt;p>The behavior of the returned map is system-dependent.  A&#xA;     * system may not allow modifications to environment variables or&#xA;     * may forbid certain variable names or values.  For this reason,&#xA;     * attempts to modify the map may fail with&#xA;     * {@link UnsupportedOperationException} or&#xA;     * {@link IllegalArgumentException}&#xA;     * if the modification is not permitted by the operating system.&#xA;     *&#xA;     * &lt;p>Since the external format of environment variable names and&#xA;     * values is system-dependent, there may not be a one-to-one&#xA;     * mapping between them and Java's Unicode strings.  Nevertheless,&#xA;     * the map is implemented in such a way that environment variables&#xA;     * which are not modified by Java code will have an unmodified&#xA;     * native representation in the subprocess.&#xA;     *&#xA;     * &lt;p>The returned map and its collection views may not obey the&#xA;     * general contract of the {@link Object#equals} and&#xA;     * {@link Object#hashCode} methods.&#xA;     *&#xA;     * &lt;p>The returned map is typically case-sensitive on all platforms.&#xA;     *&#xA;     * &lt;p>If a security manager exists, its&#xA;     * {@link SecurityManager#checkPermission checkPermission}&#xA;     * method is called with a&#xA;     * &lt;code>{@link RuntimePermission}(&quot;getenv.*&quot;)&lt;/code>&#xA;     * permission.  This may result in a {@link SecurityException} being&#xA;     * thrown.&#xA;     *&#xA;     * &lt;p>When passing information to a Java subprocess,&#xA;     * &lt;a href=System.html#EnvironmentVSSystemProperties>system properties&lt;/a>&#xA;     * are generally preferred over environment variables.&lt;/p>&#xA;     *&#xA;     * @return  This process builder's environment&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager exists and its&#xA;     *          {@link SecurityManager#checkPermission checkPermission}&#xA;     *          method doesn't allow access to the process environment&#xA;     *&#xA;     * @see     Runtime#exec(String[],String[],java.io.File)&#xA;     * @see     System#getenv()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="security">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="RuntimePermission.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="getenv.*"/>
              </arguments>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ProcessEnvironment.class.xmi#//@classifiers.0/@members.21"/>
              </next>
              <target xsi:type="classifiers:Class" href="ProcessEnvironment.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Assert">
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="environment">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>// Only for use by Runtime.exec(...envp...)</comments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="envp">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <statements xsi:type="statements:Assert">
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ProcessEnvironment.class.xmi#//@classifiers.0/@members.22"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                    <next xsi:type="references:IdentifierReference"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="ProcessEnvironment.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Assert">
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ForEachLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// Before 1.5, we blindly passed invalid envstrings</comments>
                <comments>// to the child process.</comments>
                <comments>// We would like to throw an exception, but do not,</comments>
                <comments>// for compatibility with old broken code.</comments>
                <comments>// Silently discard any trailing junk.</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@next"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@next">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.62"/>
                        <arguments xsi:type="references:StringReference" value="\u0000.*"/>
                        <arguments xsi:type="references:StringReference" value=""/>
                      </next>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@next">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.45"/>
                      <arguments xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:Int"/>
                        <child xsi:type="literals:CharacterLiteral" value="92"/>
                      </arguments>
                    </next>
                  </children>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="eqlsign">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@next">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.46"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="61"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="ProcessEnvironment.class.xmi#//@classifiers.0/@members.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="ProcessEnvironment.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// Silently ignore envstrings lacking the required `='.</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../util/Map.class.xmi#//@classifiers.0/@members.5"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@next">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.56"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@statement/@statements.1/@variable"/>
                        </next>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@next">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="String.class.xmi#//@classifiers.0/@members.55"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@statement/@statements.1/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </next>
                      </arguments>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@statement/@statements.2/@statement/@statements.1/@variable"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </children>
                </condition>
              </statements>
            </statement>
            <next name="envstring">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </next>
            <collection xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="directory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns this process builder's working directory.&#xA;     *&#xA;     * Subprocesses subsequently started by this object's {@link&#xA;     * #start()} method will use this as their working directory.&#xA;     * The returned value may be &lt;code>null&lt;/code> -- this means to use&#xA;     * the working directory of the current Java process, usually the&#xA;     * directory named by the system property &lt;code>user.dir&lt;/code>,&#xA;     * as the working directory of the child process.&lt;/p>&#xA;     *&#xA;     * @return  This process builder's working directory&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="directory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="directory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets this process builder's working directory.&#xA;     *&#xA;     * Subprocesses subsequently started by this object's {@link&#xA;     * #start()} method will use this as their working directory.&#xA;     * The argument may be &lt;code>null&lt;/code> -- this means to use the&#xA;     * working directory of the current Java process, usually the&#xA;     * directory named by the system property &lt;code>user.dir&lt;/code>,&#xA;     * as the working directory of the child process.&lt;/p>&#xA;     *&#xA;     * @param   directory  The new working directory&#xA;     * @return  This process builder&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="redirectErrorStream">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tells whether this process builder merges standard error and&#xA;     * standard output.&#xA;     *&#xA;     * &lt;p>If this property is &lt;code>true&lt;/code>, then any error output&#xA;     * generated by subprocesses subsequently started by this object's&#xA;     * {@link #start()} method will be merged with the standard&#xA;     * output, so that both can be read using the&#xA;     * {@link Process#getInputStream()} method.  This makes it easier&#xA;     * to correlate error messages with the corresponding output.&#xA;     * The initial value is &lt;code>false&lt;/code>.&lt;/p>&#xA;     *&#xA;     * @return  This process builder's &lt;code>redirectErrorStream&lt;/code> property&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="redirectErrorStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="redirectErrorStream">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets this process builder's &lt;code>redirectErrorStream&lt;/code> property.&#xA;     *&#xA;     * &lt;p>If this property is &lt;code>true&lt;/code>, then any error output&#xA;     * generated by subprocesses subsequently started by this object's&#xA;     * {@link #start()} method will be merged with the standard&#xA;     * output, so that both can be read using the&#xA;     * {@link Process#getInputStream()} method.  This makes it easier&#xA;     * to correlate error messages with the corresponding output.&#xA;     * The initial value is &lt;code>false&lt;/code>.&lt;/p>&#xA;     *&#xA;     * @param   redirectErrorStream  The new property value&#xA;     * @return  This process builder&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="start">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Process.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Starts a new process using the attributes of this process builder.&#xA;     *&#xA;     * &lt;p>The new process will&#xA;     * invoke the command and arguments given by {@link #command()},&#xA;     * in a working directory as given by {@link #directory()},&#xA;     * with a process environment as given by {@link #environment()}.&#xA;     *&#xA;     * &lt;p>This method checks that the command is a valid operating&#xA;     * system command.  Which commands are valid is system-dependent,&#xA;     * but at the very least the command must be a non-empty list of&#xA;     * non-null strings.&#xA;     *&#xA;     * &lt;p>If there is a security manager, its&#xA;     * {@link SecurityManager#checkExec checkExec}&#xA;     * method is called with the first component of this object's&#xA;     * &lt;code>command&lt;/code> array as its argument. This may result in&#xA;     * a {@link SecurityException} being thrown.&#xA;     *&#xA;     * &lt;p>Starting an operating system process is highly system-dependent.&#xA;     * Among the many things that can go wrong are:&#xA;     * &lt;ul>&#xA;     * &lt;li>The operating system program file was not found.&#xA;     * &lt;li>Access to the program file was denied.&#xA;     * &lt;li>The working directory does not exist.&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>In such cases an exception will be thrown.  The exact nature&#xA;     * of the exception is system-dependent, but it will always be a&#xA;     * subclass of {@link IOException}.&#xA;     *&#xA;     * &lt;p>Subsequent modifications to this process builder will not&#xA;     * affect the returned {@link Process}.&lt;/p>&#xA;     *&#xA;     * @return  A new {@link Process} object for managing the subprocess&#xA;     *&#xA;     * @throws  NullPointerException&#xA;     *          If an element of the command list is null&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          If the command is an empty list (has size &lt;code>0&lt;/code>)&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager exists and its&#xA;     *          {@link SecurityManager#checkExec checkExec}&#xA;     *          method doesn't allow creation of the subprocess&#xA;     *&#xA;     * @throws  IOException&#xA;     *          If an I/O error occurs&#xA;     *&#xA;     * @see     Runtime#exec(String[], String[], java.io.File)&#xA;     * @see     SecurityManager#checkExec(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cmdarray">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Must convert to array first -- a malicious user-supplied</comments>
              <comments>// list might try to circumvent the security check.</comments>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../util/List.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../util/List.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </sizes>
              </arguments>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForEachLoop">
        <statement xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@next"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statement>
        <next name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </next>
        <collection xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="prog">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Throws IndexOutOfBoundsException if command is empty</comments>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="security">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SecurityManager.class.xmi#//@classifiers.0/@members.29"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.2/@variable"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dir">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="literals:NullLiteral"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../io/File.class.xmi#//@classifiers.0/@members.61"/>
              </next>
            </expressionElse>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ProcessImpl.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.5/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          </next>
          <target xsi:type="classifiers:Class" href="ProcessImpl.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class is used to create operating system processes.&#xA; *&#xA; * &lt;p>Each &lt;code>ProcessBuilder&lt;/code> instance manages a collection&#xA; * of process attributes.  The {@link #start()} method creates a new&#xA; * {@link Process} instance with those attributes.  The {@link&#xA; * #start()} method can be invoked repeatedly from the same instance&#xA; * to create new subprocesses with identical or related attributes.&#xA; *&#xA; * &lt;p>Each process builder manages these process attributes:&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li>a &lt;i>command&lt;/i>, a list of strings which signifies the&#xA; * external program file to be invoked and its arguments, if any.&#xA; * Which string lists represent a valid operating system command is&#xA; * system-dependent.  For example, it is common for each conceptual&#xA; * argument to be an element in this list, but there are operating&#xA; * systems where programs are expected to tokenize command line&#xA; * strings themselves - on such a system a Java implementation might&#xA; * require commands to contain exactly two elements.&#xA; *&#xA; * &lt;li>an &lt;i>environment&lt;/i>, which is a system-dependent mapping from&#xA; * &lt;i>variables&lt;/i> to &lt;i>values&lt;/i>.  The initial value is a copy of&#xA; * the environment of the current process (see {@link System#getenv()}).&#xA; *&#xA; * &lt;li>a &lt;i>working directory&lt;/i>.  The default value is the current&#xA; * working directory of the current process, usually the directory&#xA; * named by the system property &lt;code>user.dir&lt;/code>.&#xA; *&#xA; * &lt;li>a &lt;i>redirectErrorStream&lt;/i> property.  Initially, this property&#xA; * is &lt;code>false&lt;/code>, meaning that the standard output and error&#xA; * output of a subprocess are sent to two separate streams, which can&#xA; * be accessed using the {@link Process#getInputStream()} and {@link&#xA; * Process#getErrorStream()} methods.  If the value is set to&#xA; * &lt;code>true&lt;/code>, the standard error is merged with the standard&#xA; * output.  This makes it easier to correlate error messages with the&#xA; * corresponding output.  In this case, the merged data can be read&#xA; * from the stream returned by {@link Process#getInputStream()}, while&#xA; * reading from the stream returned by {@link&#xA; * Process#getErrorStream()} will get an immediate end of file.&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p>Modifying a process builder's attributes will affect processes&#xA; * subsequently started by that object's {@link #start()} method, but&#xA; * will never affect previously started processes or the Java process&#xA; * itself.&#xA; *&#xA; * &lt;p>Most error checking is performed by the {@link #start()} method.&#xA; * It is possible to modify the state of an object so that {@link&#xA; * #start()} will fail.  For example, setting the command attribute to&#xA; * an empty list will not throw an exception unless {@link #start()}&#xA; * is invoked.&#xA; *&#xA; * &lt;p>&lt;strong>Note that this class is not synchronized.&lt;/strong>&#xA; * If multiple threads access a &lt;code>ProcessBuilder&lt;/code> instance&#xA; * concurrently, and at least one of the threads modifies one of the&#xA; * attributes structurally, it &lt;i>must&lt;/i> be synchronized externally.&#xA; *&#xA; * &lt;p>Starting a new process which uses the default working directory&#xA; * and environment is easy:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; * Process p = new ProcessBuilder(&quot;myCommand&quot;, &quot;myArg&quot;).start();&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p>Here is an example that starts a process with a modified working&#xA; * directory and environment:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; * ProcessBuilder pb = new ProcessBuilder(&quot;myCommand&quot;, &quot;myArg1&quot;, &quot;myArg2&quot;);&#xA; * Map&amp;lt;String, String&amp;gt; env = pb.environment();&#xA; * env.put(&quot;VAR1&quot;, &quot;myValue&quot;);&#xA; * env.remove(&quot;OTHERVAR&quot;);&#xA; * env.put(&quot;VAR2&quot;, env.get(&quot;VAR1&quot;) + &quot;suffix&quot;);&#xA; * pb.directory(&quot;myDir&quot;);&#xA; * Process p = pb.start();&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p>To start a process with an explicit set of environment&#xA; * variables, first call {@link java.util.Map#clear() Map.clear()}&#xA; * before adding environment variables.&#xA; *&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
  </classifiers>
</containers:CompilationUnit>
