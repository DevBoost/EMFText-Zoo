<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="IllegalAccessException.java">
  <comments>/*&#xA; * @(#)IllegalAccessException.java&#x9;1.14 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>lang</namespaces>
  <classifiers xsi:type="classifiers:Class" name="IllegalAccessException">
    <members xsi:type="members:Constructor" name="IllegalAccessException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IllegalAccessException&lt;/code> without a &#xA;     * detail message. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IllegalAccessException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IllegalAccessException&lt;/code> with a detail message. &#xA;     *&#xA;     * @param   s   the detail message.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An IllegalAccessException is thrown when an application tries &#xA; * to reflectively create an instance (other than an array), &#xA; * set or get a field, or invoke a method, but the currently &#xA; * executing method does not have access to the definition of &#xA; * the specified class, field, method or constructor.&#xA; *&#xA; * @author  unascribed&#xA; * @version 1.14, 12/19/03&#xA; * @see     Class#newInstance()&#xA; * @see     java.lang.reflect.Field#set(Object, Object)&#xA; * @see     java.lang.reflect.Field#setBoolean(Object, boolean)&#xA; * @see     java.lang.reflect.Field#setByte(Object, byte)&#xA; * @see     java.lang.reflect.Field#setShort(Object, short)&#xA; * @see     java.lang.reflect.Field#setChar(Object, char)&#xA; * @see     java.lang.reflect.Field#setInt(Object, int)&#xA; * @see     java.lang.reflect.Field#setLong(Object, long)&#xA; * @see     java.lang.reflect.Field#setFloat(Object, float)&#xA; * @see     java.lang.reflect.Field#setDouble(Object, double)&#xA; * @see     java.lang.reflect.Field#get(Object)&#xA; * @see     java.lang.reflect.Field#getBoolean(Object)&#xA; * @see     java.lang.reflect.Field#getByte(Object)&#xA; * @see     java.lang.reflect.Field#getShort(Object)&#xA; * @see     java.lang.reflect.Field#getChar(Object)&#xA; * @see     java.lang.reflect.Field#getInt(Object)&#xA; * @see     java.lang.reflect.Field#getLong(Object)&#xA; * @see     java.lang.reflect.Field#getFloat(Object)&#xA; * @see     java.lang.reflect.Field#getDouble(Object)&#xA; * @see     java.lang.reflect.Method#invoke(Object, Object[])&#xA; * @see     java.lang.reflect.Constructor#newInstance(Object[])&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Exception.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
