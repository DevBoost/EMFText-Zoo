<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="AppletContext.java">
  <comments>/*&#xA; * @(#)AppletContext.java&#x9;1.31 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>applet</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../awt/Image.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../awt/Graphics.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="../awt/image/ColorModel.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="AppletContext">
    <members xsi:type="members:InterfaceMethod" name="getAudioClip">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates an audio clip.&#xA;     *&#xA;     * @param   url   an absolute URL giving the location of the audio clip.&#xA;     * @return  the audio clip at the specified URL.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="AudioClip.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getImage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an &lt;code>Image&lt;/code> object that can then be painted on&#xA;     * the screen. The &lt;code>url&lt;/code> argument&lt;code> &lt;/code>that is&#xA;     * passed as an argument must specify an absolute URL.&#xA;     * &lt;p>&#xA;     * This method always returns immediately, whether or not the image&#xA;     * exists. When the applet attempts to draw the image on the screen,&#xA;     * the data will be loaded. The graphics primitives that draw the&#xA;     * image will incrementally paint on the screen.&#xA;     *&#xA;     * @param   url   an absolute URL giving the location of the image.&#xA;     * @return  the image at the specified URL.&#xA;     * @see     java.awt.Image&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../awt/Image.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getApplet">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Finds and returns the applet in the document represented by this&#xA;     * applet context with the given name. The name can be set in the&#xA;     * HTML tag by setting the &lt;code>name&lt;/code> attribute.&#xA;     *&#xA;     * @param   name   an applet name.&#xA;     * @return  the applet with the given name, or &lt;code>null&lt;/code> if&#xA;     *          not found.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Applet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getApplets">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Finds all the applets in the document represented by this applet&#xA;     * context.&#xA;     *&#xA;     * @return  an enumeration of all applets in the document represented by&#xA;     *          this applet context.&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Applet.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="showDocument">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Replaces the Web page currently being viewed with the given URL.&#xA;     * This method may be ignored by applet contexts that are not&#xA;     * browsers.&#xA;     *&#xA;     * @param   url   an absolute URL giving the location of the document.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="showDocument">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="url">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Requests that the browser or applet viewer show the Web page&#xA;     * indicated by the &lt;code>url&lt;/code> argument. The&#xA;     * &lt;code>target&lt;/code> argument indicates in which HTML frame the&#xA;     * document is to be displayed.&#xA;     * The target argument is interpreted as follows:&#xA;     * &lt;p>&#xA;     * &lt;center>&lt;table border=&quot;3&quot; summary=&quot;Target arguments and their descriptions&quot;>&#xA;     * &lt;tr>&lt;th>Target Argument&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>&quot;_self&quot;&lt;/code>  &lt;td>Show in the window and frame that&#xA;     *                                   contain the applet.&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>&quot;_parent&quot;&lt;/code>&lt;td>Show in the applet's parent frame. If&#xA;     *                                   the applet's frame has no parent frame,&#xA;     *                                   acts the same as &quot;_self&quot;.&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>&quot;_top&quot;&lt;/code>   &lt;td>Show in the top-level frame of the applet's&#xA;     *                                   window. If the applet's frame is the&#xA;     *                                   top-level frame, acts the same as &quot;_self&quot;.&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;code>&quot;_blank&quot;&lt;/code> &lt;td>Show in a new, unnamed&#xA;     *                                   top-level window.&lt;/tr>&#xA;     * &lt;tr>&lt;td>&lt;i>name&lt;/i>&lt;td>Show in the frame or window named &lt;i>name&lt;/i>. If&#xA;     *                        a target named &lt;i>name&lt;/i> does not already exist, a&#xA;     *                        new top-level window with the specified name is created,&#xA;     *                        and the document is shown there.&lt;/tr>&#xA;     * &lt;/table> &lt;/center>&#xA;     * &lt;p>&#xA;     * An applet viewer or browser is free to ignore &lt;code>showDocument&lt;/code>.&#xA;     *&#xA;     * @param   url   an absolute URL giving the location of the document.&#xA;     * @param   target   a &lt;code>String&lt;/code> indicating where to display&#xA;     *                   the page.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="showStatus">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Requests that the argument string be displayed in the&#xA;     * &quot;status window&quot;. Many browsers and applet viewers&#xA;     * provide such a window, where the application can inform users of&#xA;     * its current state.&#xA;     *&#xA;     * @param   status   a string to display in the status window.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="status">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Associates the specified stream with the specified key in this&#xA;     * applet context. If the applet context previously contained a mapping &#xA;     * for this key, the old value is replaced. &#xA;     * &lt;p>&#xA;     * For security reasons, mapping of streams and keys exists for each &#xA;     * codebase. In other words, applet from one codebase cannot access &#xA;     * the streams created by an applet from a different codebase&#xA;     * &lt;p>&#xA;     * @param key key with which the specified value is to be associated.&#xA;     * @param stream stream to be associated with the specified key. If this&#xA;     *               parameter is &lt;code>null&lt;code>, the specified key is removed &#xA;     *               in this applet context.&#xA;     * @throws &lt;code>IOException&lt;/code> if the stream size exceeds a certain&#xA;     *         size limit. Size limit is decided by the implementor of this&#xA;     *         interface.&#xA;     * @since JDK1.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the stream to which specified key is associated within this &#xA;     * applet context. Returns &lt;tt>null&lt;/tt> if the applet context contains &#xA;     * no stream for this key.  &#xA;     * &lt;p>&#xA;     * For security reasons, mapping of streams and keys exists for each &#xA;     * codebase. In other words, applet from one codebase cannot access &#xA;     * the streams created by an applet from a different codebase&#xA;     * &lt;p>&#xA;     * @return the stream to which this applet context maps the key&#xA;     * @param key key whose associated stream is to be returned.&#xA;     * @since JDK1.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStreamKeys">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/Iterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Finds all the keys of the streams in this applet context.&#xA;     * &lt;p>&#xA;     * For security reasons, mapping of streams and keys exists for each &#xA;     * codebase. In other words, applet from one codebase cannot access &#xA;     * the streams created by an applet from a different codebase&#xA;     * &lt;p>&#xA;     * @return  an Iterator of all the names of the streams in this applet &#xA;     *          context.&#xA;     * @since JDK1.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface corresponds to an applet's environment: the&#xA; * document containing the applet and the other applets in the same&#xA; * document.&#xA; * &lt;p>&#xA; * The methods in this interface can be used by an applet to obtain&#xA; * information about its environment.&#xA; *&#xA; * @author &#x9;Arthur van Hoff&#xA; * @version     1.31, 05/05/04&#xA; * @since       JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
