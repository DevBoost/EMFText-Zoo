<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="AWTPermission.java">
  <comments>/*&#xA; * @(#)AWTPermission.java&#x9;1.28 04/04/21&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../security/BasicPermission.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="AWTPermission">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="8890392402588814465"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** use serialVersionUID from the Java 2 platform for interoperability */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="AWTPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>AWTPermission&lt;/code> with the specified name.&#xA;     * The name is the symbolic name of the &lt;code>AWTPermission&lt;/code>,&#xA;     * such as &quot;topLevelWindow&quot;, &quot;systemClipboard&quot;, etc. An asterisk&#xA;     * may be used to indicate all AWT permissions.&#xA;     *&#xA;     * @param name the name of the AWTPermission&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="AWTPermission">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="actions">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>AWTPermission&lt;/code> object with the specified name.&#xA;     * The name is the symbolic name of the &lt;code>AWTPermission&lt;/code>, and the&#xA;     * actions string is currently unused and should be &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @param name the name of the &lt;code>AWTPermission&lt;/code>&#xA;     * @param actions should be &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class is for AWT permissions.&#xA; * An &lt;code>AWTPermission&lt;/code> contains a target name but&#xA; * no actions list; you either have the named permission&#xA; * or you don't.&#xA; *&#xA; * &lt;P>&#xA; * The target name is the name of the AWT permission (see below). The naming&#xA; * convention follows the hierarchical property naming convention.&#xA; * Also, an asterisk could be used to represent all AWT permissions.&#xA; *&#xA; * &lt;P>&#xA; * The following table lists all the possible &lt;code>AWTPermission&lt;/code>&#xA; * target names, and for each provides a description of what the&#xA; * permission allows and a discussion of the risks of granting code&#xA; * the permission.&#xA; * &lt;P>&#xA; *&#xA; * &lt;table border=1 cellpadding=5 summary=&quot;AWTPermission target names, descriptions, and associated risks.&quot;>&#xA; * &lt;tr>&#xA; * &lt;th>Permission Target Name&lt;/th>&#xA; * &lt;th>What the Permission Allows&lt;/th>&#xA; * &lt;th>Risks of Allowing this Permission&lt;/th>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>accessClipboard&lt;/td>&#xA; *   &lt;td>Posting and retrieval of information to and from the AWT clipboard&lt;/td>&#xA; *   &lt;td>This would allow malfeasant code to share&#xA; * potentially sensitive or confidential information.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>accessEventQueue&lt;/td>&#xA; *   &lt;td>Access to the AWT event queue&lt;/td>&#xA; *   &lt;td>After retrieving the AWT event queue,&#xA; * malicious code may peek at and even remove existing events&#xA; * from its event queue, as well as post bogus events which may purposefully&#xA; * cause the application or applet to misbehave in an insecure manner.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>createRobot&lt;/td>&#xA; *   &lt;td>Create java.awt.Robot objects&lt;/td>&#xA; *   &lt;td>The java.awt.Robot object allows code to generate native-level&#xA; * mouse and keyboard events as well as read the screen. It could allow&#xA; * malicious code to control the system, run other programs, read the&#xA; * display, and deny mouse and keyboard access to the user.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>fullScreenExclusive&lt;/td>&#xA; *   &lt;td>Enter full-screen exclusive mode&lt;/td>&#xA; *   &lt;td>Entering full-screen exclusive mode allows direct access to&#xA; * low-level graphics card memory.  This could be used to spoof the&#xA; * system, since the program is in direct control of rendering.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>listenToAllAWTEvents&lt;/td>&#xA; *   &lt;td>Listen to all AWT events, system-wide&lt;/td>&#xA; *   &lt;td>After adding an AWT event listener,&#xA; * malicious code may scan all AWT events dispatched in the system,&#xA; * allowing it to read all user input (such as passwords).  Each&#xA; * AWT event listener is called from within the context of that&#xA; * event queue's EventDispatchThread, so if the accessEventQueue&#xA; * permission is also enabled, malicious code could modify the&#xA; * contents of AWT event queues system-wide, causing the application&#xA; * or applet to misbehave in an insecure manner.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>readDisplayPixels&lt;/td>&#xA; *   &lt;td>Readback of pixels from the display screen&lt;/td>&#xA; *   &lt;td>Interfaces such as the java.awt.Composite interface or the &#xA; * java.awt.Robot class allow arbitrary code to examine pixels on the &#xA; * display enable malicious code to snoop on the activities of the user.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>replaceKeyboardFocusManager&lt;/td>&#xA; *   &lt;td>Sets the &lt;code>KeyboardFocusManager&lt;/code> for&#xA; *       a particular thread.&#xA; *   &lt;td>When &lt;code>SecurityManager&lt;/code> is installed, the invoking&#xA; *       thread must be granted this permission in order to replace&#xA; *       the current &lt;code>KeyboardFocusManager&lt;/code>.  If permission&#xA; *       is not granted, a &lt;code>SecurityException&lt;/code> will be thrown.&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>showWindowWithoutWarningBanner&lt;/td>&#xA; *   &lt;td>Display of a window without also displaying a banner warning&#xA; * that the window was created by an applet&lt;/td>&#xA; *   &lt;td>Without this warning,&#xA; * an applet may pop up windows without the user knowing that they&#xA; * belong to an applet.  Since users may make security-sensitive&#xA; * decisions based on whether or not the window belongs to an applet&#xA; * (entering a username and password into a dialog box, for example),&#xA; * disabling this warning banner may allow applets to trick the user&#xA; * into entering such information.&lt;/td>&#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>watchMousePointer&lt;/td>&#xA; *   &lt;td>Getting the information about the mouse pointer position at any&#xA; * time&lt;/td>&#xA; *   &lt;td>Constantly watching the mouse pointer,&#xA; * an applet can make guesses about what the user is doing, i.e. moving&#xA; * the mouse to the lower left corner of the screen most likely means that&#xA; * the user is about to launch an application. If a virtual keypad is used&#xA; * so that keyboard is emulated using the mouse, an applet may guess what&#xA; * is being typed.&lt;/td>&#xA; * &lt;/tr>&#xA; * &#xA; * &lt;tr>&#xA; *   &lt;td>setWindowAlwaysOnTop&lt;/td>&#xA; *   &lt;td>Setting always-on-top property of the window: {@link Window#setAlwaysOnTop}&lt;/td>&#xA; *   &lt;td>The malicious window might make itself look and behave like a real full desktop, so that&#xA; * information entered by the unsuspecting user is captured and subsequently misused &lt;/td> &#xA; * &lt;/tr>&#xA; *&#xA; * &lt;tr>&#xA; *   &lt;td>setAppletStub&lt;/td>&#xA; *   &lt;td>Setting the stub which implements Applet container services&lt;/td>&#xA; *   &lt;td>Malicious code could set an applet's stub and result in unexpected&#xA; * behavior or denial of service to an applet.&lt;/td>&#xA; * &lt;/tr>&#xA; * &lt;/table>&#xA; *&#xA; * @see java.security.BasicPermission&#xA; * @see java.security.Permission&#xA; * @see java.security.Permissions&#xA; * @see java.security.PermissionCollection&#xA; * @see java.lang.SecurityManager&#xA; *&#xA; * @version &#x9;1.28, 04/21/04&#xA; *&#xA; * @author Marianne Mueller&#xA; * @author Roland Schemers&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../security/BasicPermission.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
