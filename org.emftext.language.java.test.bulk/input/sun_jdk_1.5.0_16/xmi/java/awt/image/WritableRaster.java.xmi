<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="WritableRaster.java">
  <comments>/*&#xA; * @(#)WritableRaster.java&#x9;1.48 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/* ****************************************************************&#xA; ******************************************************************&#xA; ******************************************************************&#xA; *** COPYRIGHT (c) Eastman Kodak Company, 1997&#xA; *** As  an unpublished  work pursuant to Title 17 of the United&#xA; *** States Code.  All rights reserved.&#xA; ******************************************************************&#xA; ******************************************************************&#xA; ******************************************************************/</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="WritableRaster">
    <members xsi:type="members:Constructor" name="WritableRaster">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.42"/>
            </next>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.1">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.1">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.6"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.7"/>
              </next>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.1"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sampleModel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SampleModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="origin">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     *  Constructs a WritableRaster with the given SampleModel.  The&#xA;     *  WritableRaster's upper left corner is origin and it is the&#xA;     *  same size as the  SampleModel.  A DataBuffer large enough to&#xA;     *  describe the WritableRaster is automatically created.&#xA;     *  @param sampleModel     The SampleModel that specifies the layout.&#xA;     *  @param origin          The Point that specifies the origin.&#xA;     *  @throws RasterFormatException if computing either&#xA;     *          &lt;code>origin.x + sampleModel.getWidth()&lt;/code> or&#xA;     *          &lt;code>origin.y + sampleModel.getHeight()&lt;/code> results&#xA;     *          in integer overflow&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="WritableRaster">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.6"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.7"/>
              </next>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sampleModel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SampleModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dataBuffer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="origin">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     *  Constructs a WritableRaster with the given SampleModel and DataBuffer.&#xA;     *  The WritableRaster's upper left corner is origin and it is the same&#xA;     *  size as the SampleModel.  The DataBuffer is not initialized and must&#xA;     *  be compatible with SampleModel.&#xA;     *  @param sampleModel     The SampleModel that specifies the layout.&#xA;     *  @param dataBuffer      The DataBuffer that contains the image data.&#xA;     *  @param origin          The Point that specifies the origin.&#xA;     *  @throws RasterFormatException if computing either&#xA;     *          &lt;code>origin.x + sampleModel.getWidth()&lt;/code> or&#xA;     *          &lt;code>origin.y + sampleModel.getHeight()&lt;/code> results&#xA;     *          in integer overflow&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="WritableRaster">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.4"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sampleModel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SampleModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dataBuffer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aRegion">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sampleModelTranslate">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a WritableRaster with the given SampleModel, DataBuffer,&#xA;     * and parent.  aRegion specifies the bounding rectangle of the new&#xA;     * Raster.  When translated into the base Raster's coordinate&#xA;     * system, aRegion must be contained by the base Raster.&#xA;     * (The base Raster is the Raster's ancestor which has no parent.)&#xA;     * sampleModelTranslate specifies the sampleModelTranslateX and&#xA;     * sampleModelTranslateY values of the new Raster.&#xA;     *&#xA;     * Note that this constructor should generally be called by other&#xA;     * constructors or create methods, it should not be used directly.&#xA;     * @param sampleModel     The SampleModel that specifies the layout.&#xA;     * @param dataBuffer      The DataBuffer that contains the image data.&#xA;     * @param aRegion         The Rectangle that specifies the image area.     &#xA;     * @param sampleModelTranslate  The Point that specifies the translation&#xA;     *                        from SampleModel to Raster coordinates.&#xA;     * @param parent          The parent (if any) of this raster.&#xA;     * @throws RasterFormatException if &lt;code>aRegion&lt;/code> has width&#xA;     *         or height less than or equal to zero, or computing either&#xA;     *         &lt;code>aRegion.x + aRegion.width&lt;/code> or&#xA;     *         &lt;code>aRegion.y + aRegion.height&lt;/code> results in integer&#xA;     *         overflow&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getWritableParent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Returns the parent WritableRaster (if any) of this WritableRaster,&#xA;     *  or else null.&#xA;     *  @return the parent of this &lt;code>WritableRaster&lt;/code>, or &#xA;     *          &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.10"/>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createWritableTranslatedChild">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="childMinX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="childMinY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a WritableRaster with the same size, SampleModel and DataBuffer&#xA;     * as this one, but with a different location.  The new WritableRaster&#xA;     * will possess a reference to the current WritableRaster, accessible&#xA;     * through its getParent() and getWritableParent() methods.&#xA;     *&#xA;     * @param childMinX X coord of the upper left corner of the new Raster.&#xA;     * @param childMinY Y coord of the upper left corner of the new Raster.&#xA;     * @return a &lt;code>WritableRaster&lt;/code> the same as this one except&#xA;     *         for the specified location.&#xA;     * @throws RasterFormatException if  computing either&#xA;     *         &lt;code>childMinX + this.getWidth()&lt;/code> or&#xA;     *         &lt;code>childMinY + this.getHeight()&lt;/code> results in integer&#xA;     *         overflow&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.4"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.5"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createWritableChild">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parentX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="parentY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="childMinX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="childMinY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bandList">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a new WritableRaster which shares all or part of this&#xA;     * WritableRaster's DataBuffer.  The new WritableRaster will&#xA;     * possess a reference to the current WritableRaster, accessible&#xA;     * through its getParent() and getWritableParent() methods.&#xA;     *&#xA;     * &lt;p> The parentX, parentY, width and height parameters form a&#xA;     * Rectangle in this WritableRaster's coordinate space, indicating&#xA;     * the area of pixels to be shared.  An error will be thrown if&#xA;     * this Rectangle is not contained with the bounds of the current&#xA;     * WritableRaster.&#xA;     *&#xA;     * &lt;p> The new WritableRaster may additionally be translated to a&#xA;     * different coordinate system for the plane than that used by the current&#xA;     * WritableRaster.  The childMinX and childMinY parameters give&#xA;     * the new (x, y) coordinate of the upper-left pixel of the&#xA;     * returned WritableRaster; the coordinate (childMinX, childMinY)&#xA;     * in the new WritableRaster will map to the same pixel as the&#xA;     * coordinate (parentX, parentY) in the current WritableRaster.&#xA;     *&#xA;     * &lt;p> The new WritableRaster may be defined to contain only a&#xA;     * subset of the bands of the current WritableRaster, possibly&#xA;     * reordered, by means of the bandList parameter.  If bandList is&#xA;     * null, it is taken to include all of the bands of the current&#xA;     * WritableRaster in their current order.&#xA;     *&#xA;     * &lt;p> To create a new WritableRaster that contains a subregion of&#xA;     * the current WritableRaster, but shares its coordinate system&#xA;     * and bands, this method should be called with childMinX equal to&#xA;     * parentX, childMinY equal to parentY, and bandList equal to&#xA;     * null.&#xA;     *&#xA;     * @param parentX    X coordinate of the upper left corner in this&#xA;     *                   WritableRaster's coordinates.&#xA;     * @param parentY    Y coordinate of the upper left corner in this&#xA;     *                   WritableRaster's coordinates.&#xA;     * @param w          Width of the region starting at (parentX, parentY).&#xA;     * @param h          Height of the region starting at (parentX, parentY).&#xA;     * @param childMinX  X coordinate of the upper left corner of&#xA;     *                   the returned WritableRaster.&#xA;     * @param childMinY  Y coordinate of the upper left corner of&#xA;     *                   the returned WritableRaster.&#xA;     * @param bandList   Array of band indices, or null to use all bands.&#xA;     * @return a &lt;code>WritableRaster&lt;/code> sharing all or part of the&#xA;     *         &lt;code>DataBuffer&lt;/code> of this &lt;code>WritableRaster&lt;/code>.&#xA;     * @exception RasterFormatException if the subregion is outside of the&#xA;     *                               raster bounds.&#xA;     * @throws RasterFormatException if &lt;code>w&lt;/code> or&#xA;     *         &lt;code>h&lt;/code>&#xA;     *         is less than or equal to zero, or computing any of&#xA;     *         &lt;code>parentX + w&lt;/code>, &lt;code>parentY + h&lt;/code>,&#xA;     *         &lt;code>childMinX + w&lt;/code>, or&#xA;     *         &lt;code>childMinY + h&lt;/code> results in integer&#xA;     *         overflow&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="RasterFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="parentX lies outside raster"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <self xsi:type="literals:This"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="RasterFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="parentY lies outside raster"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <self xsi:type="literals:This"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="RasterFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="(parentX + width) is outside raster"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="RasterFormatException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="(parentY + height) is outside raster"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.3"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="SampleModel.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Note: the SampleModel for the child Raster should have the same</comments>
        <comments>// width and height as that for the parent, since it represents</comments>
        <comments>// the physical layout of the pixel data.  The child Raster's width</comments>
        <comments>// and height represent a &quot;virtual&quot; view of the pixel data, so</comments>
        <comments>// they may be different than those of the SampleModel.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.41"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.6"/>
                </next>
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.6"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="deltaX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="deltaY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// we use getDataBuffer() here, which will ensure that notifyStolen()</comments>
        <comments>// is invoked if this is a SunWritableRaster, thus disabling future</comments>
        <comments>// acceleration of this WritableRaster</comments>
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.4/@variable"/>
          <arguments xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.45"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.5"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.3"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.6/@variable"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.7/@variable"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </arguments>
          <arguments xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDataElements">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inData">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the data for a single pixel from a&#xA;     * primitive array of type TransferType.  For image data supported by&#xA;     * the Java 2D(tm) API, this will be one of DataBuffer.TYPE_BYTE,&#xA;     * DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,&#xA;     * DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array&#xA;     * may be in a packed format, thus increasing efficiency for data&#xA;     * transfers.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds, or if inData is not large enough to hold the pixel data.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * A ClassCastException will be thrown if the input object is not null&#xA;     * and references anything other than an array of TransferType.&#xA;     * @see java.awt.image.SampleModel#setDataElements(int, int, Object, DataBuffer)&#xA;     * @param x        The X coordinate of the pixel location.&#xA;     * @param y        The Y coordinate of the pixel location.&#xA;     * @param inData   An object reference to an array of type defined by&#xA;     *                 getTransferType() and length getNumDataElements()&#xA;     *                 containing the pixel data to place at x,y.&#xA;     *&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if inData is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.15"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDataElements">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inRaster">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the data for a rectangle of pixels from an input Raster.&#xA;     * The input Raster must be compatible with this WritableRaster&#xA;     * in that they must have the same number of bands, corresponding bands&#xA;     * must have the same number of bits per sample, the TransferTypes&#xA;     * and NumDataElements must be the same, and the packing used by&#xA;     * the getDataElements/setDataElements must be identical.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the pixel location.&#xA;     * @param y        The Y coordinate of the pixel location.&#xA;     * @param inRaster Raster containing data to place at x,y.&#xA;     *&#xA;     * @throws NullPointerException if inRaster is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dstOffX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.38"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dstOffY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.39"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="width">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.40"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="height">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.41"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/ArrayIndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Coordinate out of bounds!"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <self xsi:type="literals:This"/>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <self xsi:type="literals:This"/>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.3/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </children>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="srcOffX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.38"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="srcOffY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.39"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tdata">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.7/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.48"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.5/@variable"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.6/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.8/@init"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.7/@variable"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.8/@init"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.7/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.8/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.3/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="startY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.8/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDataElements">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="inData">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the data for a rectangle of pixels from a&#xA;     * primitive array of type TransferType.  For image data supported by&#xA;     * the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,&#xA;     * DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,&#xA;     * DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array&#xA;     * may be in a packed format, thus increasing efficiency for data&#xA;     * transfers.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds, or if inData is not large enough to hold the pixel data.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * A ClassCastException will be thrown if the input object is not null&#xA;     * and references anything other than an array of TransferType.&#xA;     * @see java.awt.image.SampleModel#setDataElements(int, int, int, int, Object, DataBuffer)&#xA;     * @param x        The X coordinate of the upper left pixel location.&#xA;     * @param y        The Y coordinate of the upper left pixel location.&#xA;     * @param w        Width of the pixel rectangle.&#xA;     * @param h        Height of the pixel rectangle.&#xA;     * @param inData   An object reference to an array of type defined by&#xA;     *                 getTransferType() and length w*h*getNumDataElements()&#xA;     *                 containing the pixel data to place between x,y and&#xA;     *                 x+w-1, y+h-1.&#xA;     *&#xA;     * @throws NullPointerException if inData is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if inData is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.16"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setRect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="srcRaster">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Copies pixels from Raster srcRaster to this WritableRaster.  Each pixel&#xA;     * in srcRaster is copied to the same x,y address in this raster, unless &#xA;     * the address falls outside the bounds of this raster.  srcRaster&#xA;     * must have the same number of bands as this WritableRaster.  The&#xA;     * copy is a simple copy of source samples to the corresponding destination&#xA;     * samples.&#xA;     * &lt;p>&#xA;     * If all samples of both source and destination Rasters are of&#xA;     * integral type and less than or equal to 32 bits in size, then calling&#xA;     * this method is equivalent to executing the following code for all&#xA;     * &lt;code>x,y&lt;/code> addresses valid in both Rasters.&#xA;     * &lt;pre>&#xA;     *       Raster srcRaster;&#xA;     *       WritableRaster dstRaster;&#xA;     *       for (int b = 0; b &lt; srcRaster.getNumBands(); b++) {&#xA;     *           dstRaster.setSample(x, y, b, srcRaster.getSample(x, y, b));&#xA;     *       }&#xA;     * &lt;/pre>&#xA;     * Thus, when copying an integral type source to an integral type&#xA;     * destination, if the source sample size is greater than the destination&#xA;     * sample size for a particular band, the high order bits of the source&#xA;     * sample are truncated.  If the source sample size is less than the&#xA;     * destination size for a particular band, the high order bits of the&#xA;     * destination are zero-extended or sign-extended depending on whether&#xA;     * srcRaster's SampleModel treats the sample as a signed or unsigned&#xA;     * quantity.&#xA;     * &lt;p>&#xA;     * When copying a float or double source to an integral type destination,&#xA;     * each source sample is cast to the destination type.  When copying an&#xA;     * integral type source to a float or double destination, the source&#xA;     * is first converted to a 32-bit int (if necessary), using the above&#xA;     * rules for integral types, and then the int is cast to float or&#xA;     * double.&#xA;     * &lt;p>&#xA;     * @param srcRaster  The  Raster from which to copy pixels.&#xA;     *&#xA;     * @throws NullPointerException if srcRaster is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setRect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dx">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dy">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="srcRaster">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Copies pixels from Raster srcRaster to this WritableRaster.&#xA;     * For each (x, y) address in srcRaster, the corresponding pixel&#xA;     * is copied to address (x+dx, y+dy) in this WritableRaster,&#xA;     * unless (x+dx, y+dy) falls outside the bounds of this raster.&#xA;     * srcRaster must have the same number of bands as this WritableRaster.&#xA;     * The copy is a simple copy of source samples to the corresponding&#xA;     * destination samples.  For details, see&#xA;     * {@link WritableRaster#setRect(Raster)}.&#xA;     *&#xA;     * @param dx        The X translation factor from src space to dst space&#xA;     *                  of the copy.&#xA;     * @param dy        The Y translation factor from src space to dst space&#xA;     *                  of the copy.&#xA;     * @param srcRaster The Raster from which to copy pixels.&#xA;     *&#xA;     * @throws NullPointerException if srcRaster is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="width">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.40"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="height">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.41"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="srcOffX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.38"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="srcOffY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.39"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dstOffX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dstOffY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Clip to this raster</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="skipX">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentMinus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.6/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.6/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <self xsi:type="literals:This"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <self xsi:type="literals:This"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="skipY">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentMinus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.7/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.7/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <self xsi:type="literals:This"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <self xsi:type="literals:This"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.4"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.4"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                  <self xsi:type="literals:This"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <children xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.3"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.5"/>
              </next>
              <self xsi:type="literals:This"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </children>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="iData">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.3/@statements.0/@variable">
                    <comments>// Grab one scanline at a time</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.52"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.3/@statements.1/@init"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.3/@statements.0/@variable"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.3/@statements.1/@init"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.3/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.3/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="startY">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.3/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="fData">
              <typeReference xsi:type="types:Float"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.4/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.53"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.4/@statements.1/@init"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.4/@statements.0/@variable"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.4/@statements.1/@init"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.4/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.4/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="startY">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.4/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.4"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="dData">
              <typeReference xsi:type="types:Double"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="literals:NullLiteral"/>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.5/@statements.0/@variable">
                    <comments>// Grab one scanline at a time</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.54"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.5/@statements.1/@init"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.5/@statements.0/@variable"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@variable"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.5/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.5/@statements.1/@init"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.5/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.5/@statements.1/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="startY">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.11/@cases.5/@statements.1/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.10"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.46"/>
          </next>
        </variable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPixel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="iArray">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets a pixel in the DataBuffer using an int array of samples for input.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x      The X coordinate of the pixel location.&#xA;     * @param y      The Y coordinate of the pixel location.&#xA;     * @param iArray The input samples in a int array.&#xA;     *&#xA;     * @throws NullPointerException if iArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if iArray is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.28"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPixel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fArray">
        <typeReference xsi:type="types:Float"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets a pixel in the DataBuffer using a float array of samples for input.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x      The X coordinate of the pixel location.&#xA;     * @param y      The Y coordinate of the pixel location.&#xA;     * @param fArray The input samples in a float array.&#xA;     *&#xA;     * @throws NullPointerException if fArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if fArray is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.29"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPixel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dArray">
        <typeReference xsi:type="types:Double"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets a pixel in the DataBuffer using a double array of samples for input.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x      The X coordinate of the pixel location.&#xA;     * @param y      The Y coordinate of the pixel location.&#xA;     * @param dArray The input samples in a double array.&#xA;     *&#xA;     * @throws NullPointerException if dArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if dArray is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.30"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPixels">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="iArray">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets all samples for a rectangle of pixels from an int array containing&#xA;     * one sample per array element.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the upper left pixel location.&#xA;     * @param y        The Y coordinate of the upper left pixel location.&#xA;     * @param w        Width of the pixel rectangle.&#xA;     * @param h        Height of the pixel rectangle.&#xA;     * @param iArray   The input int pixel array.&#xA;     *&#xA;     * @throws NullPointerException if iArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if iArray is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.31"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPixels">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fArray">
        <typeReference xsi:type="types:Float"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets all samples for a rectangle of pixels from a float array containing&#xA;     * one sample per array element.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the upper left pixel location.&#xA;     * @param y        The Y coordinate of the upper left pixel location.&#xA;     * @param w        Width of the pixel rectangle.&#xA;     * @param h        Height of the pixel rectangle.&#xA;     * @param fArray   The input float pixel array.&#xA;     *&#xA;     * @throws NullPointerException if fArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if fArray is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.32"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPixels">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dArray">
        <typeReference xsi:type="types:Double"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets all samples for a rectangle of pixels from a double array containing&#xA;     * one sample per array element.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the upper left pixel location.&#xA;     * @param y        The Y coordinate of the upper left pixel location.&#xA;     * @param w        Width of the pixel rectangle.&#xA;     * @param h        Height of the pixel rectangle.&#xA;     * @param dArray   The input double pixel array.&#xA;     *&#xA;     * @throws NullPointerException if dArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates are not&#xA;     * in bounds, or if dArray is too small to hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSample">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets a sample in the specified band for the pixel located at (x,y)&#xA;     * in the DataBuffer using an int for input.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the pixel location.&#xA;     * @param y        The Y coordinate of the pixel location.&#xA;     * @param b        The band to set.&#xA;     * @param s        The input sample.&#xA;     *&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates or&#xA;     * the band index are not in bounds.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.34"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSample">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets a sample in the specified band for the pixel located at (x,y)&#xA;     * in the DataBuffer using a float for input.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the pixel location.&#xA;     * @param y        The Y coordinate of the pixel location.&#xA;     * @param b        The band to set.&#xA;     * @param s        The input sample as a float.&#xA;     *&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates or&#xA;     * the band index are not in bounds.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.35"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSample">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets a sample in the specified band for the pixel located at (x,y)&#xA;     * in the DataBuffer using a double for input.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the pixel location.&#xA;     * @param y        The Y coordinate of the pixel location.&#xA;     * @param b        The band to set.&#xA;     * @param s        The input sample as a double.&#xA;     *&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates or&#xA;     * the band index are not in bounds.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.36"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSamples">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="iArray">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the samples in the specified band for the specified rectangle&#xA;     * of pixels from an int array containing one sample per array element.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the upper left pixel location.&#xA;     * @param y        The Y coordinate of the upper left pixel location.&#xA;     * @param w        Width of the pixel rectangle.&#xA;     * @param h        Height of the pixel rectangle.&#xA;     * @param b        The band to set.&#xA;     * @param iArray   The input int sample array.&#xA;     *&#xA;     * @throws NullPointerException if iArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates or&#xA;     * the band index are not in bounds, or if iArray is too small to&#xA;     * hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.37"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.5"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSamples">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fArray">
        <typeReference xsi:type="types:Float"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the samples in the specified band for the specified rectangle&#xA;     * of pixels from a float array containing one sample per array element.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the upper left pixel location.&#xA;     * @param y        The Y coordinate of the upper left pixel location.&#xA;     * @param w        Width of the pixel rectangle.&#xA;     * @param h        Height of the pixel rectangle.&#xA;     * @param b        The band to set.&#xA;     * @param fArray   The input float sample array.&#xA;     *&#xA;     * @throws NullPointerException if fArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates or&#xA;     * the band index are not in bounds, or if fArray is too small to&#xA;     * hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.38"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.5"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSamples">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dArray">
        <typeReference xsi:type="types:Double"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the samples in the specified band for the specified rectangle&#xA;     * of pixels from a double array containing one sample per array element.&#xA;     * An ArrayIndexOutOfBoundsException may be thrown if the coordinates are&#xA;     * not in bounds.&#xA;     * However, explicit bounds checking is not guaranteed.&#xA;     * @param x        The X coordinate of the upper left pixel location.&#xA;     * @param y        The Y coordinate of the upper left pixel location.&#xA;     * @param w        Width of the pixel rectangle.&#xA;     * @param h        Height of the pixel rectangle.&#xA;     * @param b        The band to set.&#xA;     * @param dArray   The input double sample array.&#xA;     *&#xA;     * @throws NullPointerException if dArray is null.&#xA;     * @throws ArrayIndexOutOfBoundsException if the coordinates or&#xA;     * the band index are not in bounds, or if dArray is too small to&#xA;     * hold the input.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.39"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.6"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.7"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.5"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.1"/>
            </arguments>
          </next>
          <target xsi:type="members:Field" href="Raster.class.xmi#//@classifiers.0/@members.0"/>
        </expression>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class extends Raster to provide pixel writing capabilities.&#xA; * Refer to the class comment for Raster for descriptions of how&#xA; * a Raster stores pixels.&#xA; *&#xA; * &lt;p> The constructors of this class are protected.  To instantiate&#xA; * a WritableRaster, use one of the createWritableRaster factory methods&#xA; * in the Raster class.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
