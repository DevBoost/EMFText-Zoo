<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RenderedImage.java">
  <comments>/*&#xA; * @(#)RenderedImage.java&#x9;1.22 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/* ****************************************************************&#xA; ******************************************************************&#xA; ******************************************************************&#xA; *** COPYRIGHT (c) Eastman Kodak Company, 1997&#xA; *** As  an unpublished  work pursuant to Title 17 of the United&#xA; *** States Code.  All rights reserved.&#xA; ******************************************************************&#xA; ******************************************************************&#xA; ******************************************************************/</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/Dictionary.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RenderedImage">
    <members xsi:type="members:InterfaceMethod" name="getSources">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Returns a vector of RenderedImages that are the immediate sources of &#xA;     * image data for this RenderedImage.  This method returns null if&#xA;     * the RenderedImage object has no information about its immediate&#xA;     * sources.  It returns an empty Vector if the RenderedImage object has&#xA;     * no immediate sources.&#xA;     * @return a Vector of &lt;code>RenderedImage&lt;/code> objects.&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../../util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Gets a property from the property set of this image.  The set of&#xA;     * properties and whether it is immutable is determined by the&#xA;     * implementing class.  This method returns&#xA;     * java.awt.Image.UndefinedProperty if the specified property is&#xA;     * not defined for this RenderedImage.&#xA;     * @param name the name of the property&#xA;     * @return the property indicated by the specified name.&#xA;     * @see java.awt.Image#UndefinedProperty&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPropertyNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;      * Returns an array of names recognized by &#xA;      * {@link #getProperty(String) getProperty(String)}&#xA;      * or &lt;code>null&lt;/code>, if no property names are recognized.&#xA;      * @return a &lt;code>String&lt;/code> array containing all of the&#xA;      * property names that &lt;code>getProperty(String)&lt;/code> recognizes;  &#xA;      * or &lt;code>null&lt;/code> if no property names are recognized.&#xA;      */</comments>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getColorModel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the ColorModel associated with this image.  All Rasters &#xA;     * returned from this image will have this as their ColorModel.  This &#xA;     * can return null.&#xA;     * @return the &lt;code>ColorModel&lt;/code> of this image.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSampleModel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the SampleModel associated with this image.  All Rasters &#xA;     * returned from this image will have this as their SampleModel.&#xA;     * @return the &lt;code>SampleModel&lt;/code> of this image.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="SampleModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWidth">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the width of the RenderedImage.  &#xA;     * @return the width of this &lt;code>RenderedImage&lt;/code>.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHeight">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the height of the RenderedImage.  &#xA;     * @return the height of this &lt;code>RenderedImage&lt;/code>.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinX">
      <typeReference xsi:type="types:Int">
        <comments>/** &#xA;     * Returns the minimum X coordinate (inclusive) of the RenderedImage.&#xA;     * @return the X coordinate of this &lt;code>RenderedImage&lt;/code>.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinY">
      <typeReference xsi:type="types:Int">
        <comments>/** &#xA;     * Returns the minimum Y coordinate (inclusive) of the RenderedImage.&#xA;     * @return the Y coordinate of this &lt;code>RenderedImage&lt;/code>.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNumXTiles">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the number of tiles in the X direction.&#xA;     * @return the number of tiles in the X direction.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNumYTiles">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the number of tiles in the Y direction.&#xA;     * @return the number of tiles in the Y direction.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinTileX">
      <typeReference xsi:type="types:Int">
        <comments>/** &#xA;     *  Returns the minimum tile index in the X direction.&#xA;     *  @return the minimum tile index in the X direction.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinTileY">
      <typeReference xsi:type="types:Int">
        <comments>/** &#xA;     *  Returns the minimum tile index in the Y direction. &#xA;     *  @return the minimum tile index in the X direction.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTileWidth">
      <typeReference xsi:type="types:Int">
        <comments>/** &#xA;     *  Returns the tile width in pixels.  All tiles must have the same &#xA;     *  width.&#xA;     *  @return the tile width in pixels.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTileHeight">
      <typeReference xsi:type="types:Int">
        <comments>/** &#xA;     *  Returns the tile height in pixels.  All tiles must have the same &#xA;     *  height.&#xA;     *  @return the tile height in pixels.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTileGridXOffset">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the X offset of the tile grid relative to the origin,&#xA;     * i.e., the X coordinate of the upper-left pixel of tile (0, 0).&#xA;     * (Note that tile (0, 0) may not actually exist.)&#xA;     * @return the X offset of the tile grid relative to the origin.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTileGridYOffset">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the Y offset of the tile grid relative to the origin,&#xA;     * i.e., the Y coordinate of the upper-left pixel of tile (0, 0).&#xA;     * (Note that tile (0, 0) may not actually exist.)&#xA;     * @return the Y offset of the tile grid relative to the origin.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Returns tile (tileX, tileY).  Note that tileX and tileY are indices&#xA;     * into the tile array, not pixel locations.  The Raster that is returned&#xA;     * is live and will be updated if the image is changed.&#xA;     * @param tileX the X index of the requested tile in the tile array&#xA;     * @param tileY the Y index of the requested tile in the tile array&#xA;     * @return the tile given the specified indices.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getData">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Returns the image as one large tile (for tile based &#xA;     * images this will require fetching the whole image &#xA;     * and copying the image data over).  The Raster returned is &#xA;     * a copy of the image data and will not be updated if the image&#xA;     * is changed.&#xA;     * @return the image as one large tile.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getData">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Computes and returns an arbitrary region of the RenderedImage. &#xA;     * The Raster returned is a copy of the image data and will not&#xA;     * be updated if the image is changed.&#xA;     * @param rect the region of the RenderedImage to be returned.&#xA;     * @return the region of the &lt;code>RenderedImage&lt;/code>&#xA;     * indicated by the specified &lt;code>Rectangle&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rect">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="copyData">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Computes an arbitrary rectangular region of the RenderedImage&#xA;     * and copies it into a caller-supplied WritableRaster.  The region&#xA;     * to be computed is determined from the bounds of the supplied&#xA;     * WritableRaster.  The supplied WritableRaster must have a&#xA;     * SampleModel that is compatible with this image.  If raster is null,&#xA;     * an appropriate WritableRaster is created.&#xA;     * @param raster a WritableRaster to hold the returned portion of the&#xA;     *               image, or null.&#xA;     * @return a reference to the supplied or created WritableRaster.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="raster">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &#xA; * RenderedImage is a common interface for objects which contain&#xA; * or can produce image data in the form of Rasters.  The image&#xA; * data may be stored/produced as a single tile or a regular array&#xA; * of tiles.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
