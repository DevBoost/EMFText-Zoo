<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="WritableRenderedImage.java">
  <comments>/*&#xA; * @(#)WritableRenderedImage.java&#x9;1.18 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/* ****************************************************************&#xA; ******************************************************************&#xA; ******************************************************************&#xA; *** COPYRIGHT (c) Eastman Kodak Company, 1997&#xA; *** As  an unpublished  work pursuant to Title 17 of the United&#xA; *** States Code.  All rights reserved.&#xA; ******************************************************************&#xA; ******************************************************************&#xA; ******************************************************************/</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="WritableRenderedImage">
    <members xsi:type="members:InterfaceMethod" name="addTileObserver">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="to">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="TileObserver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Adds an observer.  If the observer is already present,&#xA;   * it will receive multiple notifications.&#xA;   * @param to the specified &lt;code>TileObserver&lt;/code>&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeTileObserver">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="to">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="TileObserver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Removes an observer.  If the observer was not registered,&#xA;   * nothing happens.  If the observer was registered for multiple&#xA;   * notifications, it will now be registered for one fewer.&#xA;   * @param to the specified &lt;code>TileObserver&lt;/code>&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWritableTile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Checks out a tile for writing.  &#xA;   * &#xA;   * The WritableRenderedImage is responsible for notifying all&#xA;   * of its TileObservers when a tile goes from having&#xA;   * no writers to having one writer.&#xA;   *&#xA;   * @param tileX the X index of the tile.&#xA;   * @param tileY the Y index of the tile.&#xA;   * @return a writable tile.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="releaseWritableTile">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Relinquishes the right to write to a tile.  If the caller &#xA;   * continues to write to the tile, the results are undefined.&#xA;   * Calls to this method should only appear in matching pairs&#xA;   * with calls to getWritableTile; any other use will lead&#xA;   * to undefined results.&#xA;   *&#xA;   * The WritableRenderedImage is responsible for notifying all of&#xA;   * its TileObservers when a tile goes from having one writer&#xA;   * to having no writers.&#xA;   *&#xA;   * @param tileX the X index of the tile.&#xA;   * @param tileY the Y index of the tile.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isTileWritable">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tileY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Returns whether a tile is currently checked out for writing.&#xA;   *&#xA;   * @param tileX the X index of the tile.&#xA;   * @param tileY the Y index of the tile.&#xA;   * @return &lt;code>true&lt;/code> if specified tile is checked out &#xA;   *         for writing; &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWritableTileIndices">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Returns an array of Point objects indicating which tiles&#xA;   * are checked out for writing.  Returns null if none are&#xA;   * checked out.&#xA;   * @return an array containing the locations of tiles that are&#xA;   *         checked out for writing.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasTileWriters">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Returns whether any tile is checked out for writing.&#xA;   * Semantically equivalent to (getWritableTileIndices() != null).&#xA;   * @return &lt;code>true&lt;/code> if any tiles are checked out for &#xA;   *         writing; &lt;code>false&lt;/code> otherwise.&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setData">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;   * Sets a rect of the image to the contents of the Raster r, which is&#xA;   * assumed to be in the same coordinate space as the WritableRenderedImage.&#xA;   * The operation is clipped to the bounds of the WritableRenderedImage.&#xA;   * @param r the specified &lt;code>Raster&lt;/code>&#xA;   */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * WriteableRenderedImage is a common interface for objects which &#xA; * contain or can produce image data in the form of Rasters and&#xA; * which can be modified and/or written over.  The image&#xA; * data may be stored/produced as a single tile or a regular array&#xA; * of tiles.&#xA; * &lt;p>&#xA; * WritableRenderedImage provides notification to other interested&#xA; * objects when a tile is checked out for writing (via the&#xA; * getWritableTile method) and when the last writer of a particular&#xA; * tile relinquishes its access (via a call to releaseWritableTile).&#xA; * Additionally, it allows any caller to determine whether any tiles&#xA; * are currently checked out (via hasTileWriters), and to obtain a&#xA; * list of such tiles (via getWritableTileIndices, in the form of a Vector&#xA; * of Point objects).&#xA; * &lt;p>&#xA; * Objects wishing to be notified of changes in tile writability must&#xA; * implement the TileObserver interface, and are added by a&#xA; * call to addTileObserver.  Multiple calls to&#xA; * addTileObserver for the same object will result in multiple&#xA; * notifications.  An existing observer may reduce its notifications&#xA; * by calling removeTileObserver; if the observer had no&#xA; * notifications the operation is a no-op.&#xA; * &lt;p>&#xA; * It is necessary for a WritableRenderedImage to ensure that&#xA; * notifications occur only when the first writer acquires a tile and&#xA; * the last writer releases it.&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="RenderedImage.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
