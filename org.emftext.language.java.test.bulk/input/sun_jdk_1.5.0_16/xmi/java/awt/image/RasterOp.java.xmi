<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RasterOp.java">
  <comments>/*&#xA; * @(#)RasterOp.java&#x9;1.13 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../geom/Rectangle2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../RenderingHints.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RasterOp">
    <members xsi:type="members:InterfaceMethod" name="filter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dest">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Performs a single-input/single-output operation from a source Raster&#xA;     * to a destination Raster.  If the destination Raster is null, a&#xA;     * new Raster will be created.  The IllegalArgumentException may be thrown&#xA;     * if the source and/or destination Raster is incompatible with the types&#xA;     * of Rasters allowed by the class implementing this filter.&#xA;     * @param src the source &lt;code>Raster&lt;/code>&#xA;     * @param dest the destination &lt;code>WritableRaster&lt;/code>&#xA;     * @return a &lt;code>WritableRaster&lt;/code> that represents the result of&#xA;     *         the filtering operation.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBounds2D">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounding box of the filtered destination Raster.&#xA;     * The IllegalArgumentException may be thrown if the source Raster&#xA;     * is incompatible with the types of Rasters allowed&#xA;     * by the class implementing this filter.&#xA;     * @param src the source &lt;code>Raster&lt;/code>&#xA;     * @return a &lt;code>Rectangle2D&lt;/code> that is the bounding box of &#xA;     *         the &lt;code>Raster&lt;/code> resulting from the filtering&#xA;     *         operation.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createCompatibleDestRaster">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a zeroed destination Raster with the correct size and number of&#xA;     * bands.&#xA;     * The IllegalArgumentException may be thrown if the source Raster&#xA;     * is incompatible with the types of Rasters allowed&#xA;     * by the class implementing this filter.&#xA;     * @param src the source &lt;code>Raster&lt;/code>&#xA;     * @return a &lt;code>WritableRaster&lt;/code> that is compatible with &#xA;     *         &lt;code>src&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPoint2D">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="srcPt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dstPt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the location of the destination point given a&#xA;     * point in the source Raster.  If dstPt is non-null, it&#xA;     * will be used to hold the return value.&#xA;     * @param srcPt the source &lt;code>Point2D&lt;/code>&#xA;     * @param dstPt the destination &lt;code>Point2D&lt;/code>&#xA;     * @return the location of the destination point.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRenderingHints">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RenderingHints.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the rendering hints for this RasterOp.  Returns&#xA;     * null if no hints have been set.&#xA;     * @return the &lt;code>RenderingHints&lt;/code> object of this&#xA;     *         &lt;code>RasterOp&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface describes single-input/single-output&#xA; * operations performed on Raster objects.  It is implemented by such&#xA; * classes as AffineTransformOp, ConvolveOp, and LookupOp.  The Source&#xA; * and Destination objects must contain the appropriate number&#xA; * of bands for the particular classes implementing this interface.&#xA; * Otherwise, an exception is thrown.  This interface cannot be used to&#xA; * describe more sophisticated Ops such as ones that take multiple sources.&#xA; * Each class implementing this interface will specify whether or not it&#xA; * will allow an in-place filtering operation (i.e. source object equal&#xA; * to the destination object).  Note that the restriction to single-input&#xA; * operations means that the values of destination pixels prior to the&#xA; * operation are not used as input to the filter operation.&#xA; * @see AffineTransformOp&#xA; * @see BandCombineOp&#xA; * @see ColorConvertOp&#xA; * @see ConvolveOp&#xA; * @see LookupOp&#xA; * @see RescaleOp&#xA; * @version 10 Feb 1997&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
