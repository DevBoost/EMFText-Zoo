<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ImageObserver.java">
  <comments>/*&#xA; * @(#)ImageObserver.java&#x9;1.27 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Image.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ImageObserver">
    <members xsi:type="members:InterfaceMethod" name="imageUpdate">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="img">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Image.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="infoflags">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="width">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="height">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method is called when information about an image which was&#xA;     * previously requested using an asynchronous interface becomes&#xA;     * available.  Asynchronous interfaces are method calls such as&#xA;     * getWidth(ImageObserver) and drawImage(img, x, y, ImageObserver)&#xA;     * which take an ImageObserver object as an argument.  Those methods&#xA;     * register the caller as interested either in information about&#xA;     * the overall image itself (in the case of getWidth(ImageObserver))&#xA;     * or about an output version of an image (in the case of the&#xA;     * drawImage(img, x, y, [w, h,] ImageObserver) call).  &#xA;     *&#xA;     * &lt;p>This method&#xA;     * should return true if further updates are needed or false if the&#xA;     * required information has been acquired.  The image which was being&#xA;     * tracked is passed in using the img argument.  Various constants&#xA;     * are combined to form the infoflags argument which indicates what&#xA;     * information about the image is now available.  The interpretation&#xA;     * of the x, y, width, and height arguments depends on the contents&#xA;     * of the infoflags argument.&#xA;     * &lt;p>&#xA;     * The &lt;code>infoflags&lt;/code> argument should be the bitwise inclusive &#xA;     * &lt;b>OR&lt;/b> of the following flags: &lt;code>WIDTH&lt;/code>, &#xA;     * &lt;code>HEIGHT&lt;/code>, &lt;code>PROPERTIES&lt;/code>, &lt;code>SOMEBITS&lt;/code>, &#xA;     * &lt;code>FRAMEBITS&lt;/code>, &lt;code>ALLBITS&lt;/code>, &lt;code>ERROR&lt;/code>, &#xA;     * &lt;code>ABORT&lt;/code>.&#xA;     *&#xA;     * @param     img   the image being observed.&#xA;     * @param     infoflags   the bitwise inclusive OR of the following &#xA;     *               flags:  &lt;code>WIDTH&lt;/code>, &lt;code>HEIGHT&lt;/code>, &#xA;     *               &lt;code>PROPERTIES&lt;/code>, &lt;code>SOMEBITS&lt;/code>,&#xA;     *               &lt;code>FRAMEBITS&lt;/code>, &lt;code>ALLBITS&lt;/code>, &#xA;     *               &lt;code>ERROR&lt;/code>, &lt;code>ABORT&lt;/code>. &#xA;     * @param     x   the &lt;i>x&lt;/i> coordinate.&#xA;     * @param     y   the &lt;i>y&lt;/i> coordinate.&#xA;     * @param     width    the width.&#xA;     * @param     height   the height.&#xA;     * @return    &lt;code>false&lt;/code> if the infoflags indicate that the&#xA;     *            image is completely loaded; &lt;code>true&lt;/code> otherwise.&#xA;     * &#xA;     * @see #WIDTH&#xA;     * @see #HEIGHT&#xA;     * @see #PROPERTIES&#xA;     * @see #SOMEBITS&#xA;     * @see #FRAMEBITS&#xA;     * @see #ALLBITS&#xA;     * @see #ERROR&#xA;     * @see #ABORT&#xA;     * @see Image#getWidth&#xA;     * @see Image#getHeight&#xA;     * @see java.awt.Graphics#drawImage&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="WIDTH">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * the width of the base image is now available and can be taken&#xA;     * from the width argument to the imageUpdate callback method.&#xA;     * @see Image#getWidth&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="HEIGHT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * the height of the base image is now available and can be taken&#xA;     * from the height argument to the imageUpdate callback method.&#xA;     * @see Image#getHeight&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="PROPERTIES">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * the properties of the image are now available.&#xA;     * @see Image#getProperty&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SOMEBITS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * more pixels needed for drawing a scaled variation of the image&#xA;     * are available.  The bounding box of the new pixels can be taken&#xA;     * from the x, y, width, and height arguments to the imageUpdate&#xA;     * callback method.&#xA;     * @see java.awt.Graphics#drawImage&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FRAMEBITS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * another complete frame of a multi-frame image which was previously&#xA;     * drawn is now available to be drawn again.  The x, y, width, and height&#xA;     * arguments to the imageUpdate callback method should be ignored.&#xA;     * @see java.awt.Graphics#drawImage&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ALLBITS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * a static image which was previously drawn is now complete and can&#xA;     * be drawn again in its final form.  The x, y, width, and height&#xA;     * arguments to the imageUpdate callback method should be ignored.&#xA;     * @see java.awt.Graphics#drawImage&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ERROR">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="64"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * an image which was being tracked asynchronously has encountered&#xA;     * an error.  No further information will become available and&#xA;     * drawing the image will fail.&#xA;     * As a convenience, the ABORT flag will be indicated at the same&#xA;     * time to indicate that the image production was aborted.&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ABORT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This flag in the infoflags argument to imageUpdate indicates that &#xA;     * an image which was being tracked asynchronously was aborted before&#xA;     * production was complete.  No more information will become available&#xA;     * without further action to trigger another image production sequence.&#xA;     * If the ERROR flag was not also set in this image update, then&#xA;     * accessing any of the data in the image will restart the production&#xA;     * again, probably from the beginning.&#xA;     * @see #imageUpdate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An asynchronous update interface for receiving notifications about&#xA; * Image information as the Image is constructed.&#xA; *&#xA; * @version &#x9;1.27 12/19/03&#xA; * @author &#x9;Jim Graham&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
