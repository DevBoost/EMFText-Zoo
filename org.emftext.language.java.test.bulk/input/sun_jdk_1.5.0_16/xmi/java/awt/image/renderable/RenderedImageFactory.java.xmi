<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="RenderedImageFactory.java">
  <comments>/*&#xA; * @(#)RenderedImageFactory.java&#x9;1.10 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/* ********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************&#xA; *** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***&#xA; *** As  an unpublished  work pursuant to Title 17 of the United    ***&#xA; *** States Code.  All rights reserved.                             ***&#xA; **********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************/</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <namespaces>renderable</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../RenderedImage.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../RenderingHints.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RenderedImageFactory">
    <members xsi:type="members:InterfaceMethod" name="create">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;   * Creates a RenderedImage representing the results of an imaging&#xA;   * operation (or chain of operations) for a given ParameterBlock and&#xA;   * RenderingHints.  The RIF may also query any source images&#xA;   * referenced by the ParameterBlock for their dimensions,&#xA;   * SampleModels, properties, etc., as necessary.&#xA;   *&#xA;   * &lt;p> The create() method can return null if the&#xA;   * RenderedImageFactory is not capable of producing output for the&#xA;   * given set of source images and parameters.  For example, if a&#xA;   * RenderedImageFactory is only capable of performing a 3x3&#xA;   * convolution on single-banded image data, and the source image has&#xA;   * multiple bands or the convolution Kernel is 5x5, null should be&#xA;   * returned.&#xA;   *&#xA;   * &lt;p> Hints should be taken into account, but can be ignored.&#xA;   * The created RenderedImage may have a property identified&#xA;   * by the String HINTS_OBSERVED to indicate which RenderingHints&#xA;   * were used to create the image.  In addition any RenderedImages&#xA;   * that are obtained via the getSources() method on the created&#xA;   * RenderedImage may have such a property.&#xA;   *  &#xA;   * @param paramBlock a ParameterBlock containing sources and parameters&#xA;   *        for the RenderedImage to be created.&#xA;   * @param hints a RenderingHints object containing hints.&#xA;   * @return A RenderedImage containing the desired output.&#xA;   */</comments>
          <target xsi:type="classifiers:Interface" href="../RenderedImage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="paramBlock">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ParameterBlock.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hints">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../RenderingHints.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The RenderedImageFactory interface (often abbreviated RIF) is&#xA; * intended to be implemented by classes that wish to act as factories&#xA; * to produce different renderings, for example by executing a series&#xA; * of BufferedImageOps on a set of sources, depending on a specific&#xA; * set of parameters, properties, and rendering hints.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
