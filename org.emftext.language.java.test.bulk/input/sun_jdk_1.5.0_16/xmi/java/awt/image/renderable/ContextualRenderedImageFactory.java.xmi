<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="ContextualRenderedImageFactory.java">
  <comments>/*&#xA; * @(#)ContextualRenderedImageFactory.java&#x9;1.11 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/* ********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************&#xA; *** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***&#xA; *** As  an unpublished  work pursuant to Title 17 of the United    ***&#xA; *** States Code.  All rights reserved.                             ***&#xA; **********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************/</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <namespaces>renderable</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../geom/Rectangle2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../RenderedImage.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ContextualRenderedImageFactory">
    <members xsi:type="members:InterfaceMethod" name="mapRenderContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Maps the operation's output RenderContext into a RenderContext&#xA;     * for each of the operation's sources.  This is useful for&#xA;     * operations that can be expressed in whole or in part simply as&#xA;     * alterations in the RenderContext, such as an affine mapping, or&#xA;     * operations that wish to obtain lower quality renderings of&#xA;     * their sources in order to save processing effort or&#xA;     * transmission bandwith.  Some operations, such as blur, can also&#xA;     * use this mechanism to avoid obtaining sources of higher quality&#xA;     * than necessary.&#xA;     *&#xA;     * @param i the index of the source image.&#xA;     * @param renderContext the RenderContext being applied to the operation.&#xA;     * @param paramBlock a ParameterBlock containing the operation's&#xA;     *        sources and parameters.&#xA;     * @param image the RenderableImage being rendered.&#xA;     * @return a &lt;code>RenderContext&lt;/code> for &#xA;     *         the source at the specified index of the parameters&#xA;     *         Vector contained in the specified ParameterBlock.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="RenderContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="renderContext">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RenderContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="paramBlock">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ParameterBlock.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="image">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RenderableImage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a rendering, given a RenderContext and a ParameterBlock&#xA;     * containing the operation's sources and parameters.  The output&#xA;     * is a RenderedImage that takes the RenderContext into account to&#xA;     * determine its dimensions and placement on the image plane.&#xA;     * This method houses the &quot;intelligence&quot; that allows a&#xA;     * rendering-independent operation to adapt to a specific&#xA;     * RenderContext.&#xA;     *&#xA;     * @param renderContext The RenderContext specifying the rendering&#xA;     * @param paramBlock a ParameterBlock containing the operation's&#xA;     *        sources and parameters&#xA;     * @return a &lt;code>RenderedImage&lt;/code> from the sources and parameters&#xA;     *         in the specified ParameterBlock and according to the &#xA;     *         rendering instructions in the specified RenderContext.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../RenderedImage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="renderContext">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RenderContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="paramBlock">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ParameterBlock.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBounds2D">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the bounding box for the output of the operation,&#xA;     * performed on a given set of sources, in rendering-independent&#xA;     * space.  The bounds are returned as a Rectangle2D, that is, an&#xA;     * axis-aligned rectangle with floating-point corner coordinates.&#xA;     *&#xA;     * @param paramBlock a ParameterBlock containing the operation's&#xA;     *        sources and parameters.&#xA;     * @return a Rectangle2D specifying the rendering-independent &#xA;     *         bounding box of the output.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="paramBlock">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ParameterBlock.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the appropriate instance of the property specified by the name &#xA;     * parameter.  This method must determine which instance of a property to&#xA;     * return when there are multiple sources that each specify the property.&#xA;     *&#xA;     * @param paramBlock a ParameterBlock containing the operation's&#xA;     *        sources and parameters.&#xA;     * @param name a String naming the desired property.&#xA;     * @return an object reference to the value of the property requested.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="paramBlock">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ParameterBlock.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPropertyNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Returns a list of names recognized by getProperty. &#xA;     * @return the list of property names.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isDynamic">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns true if successive renderings (that is, calls to&#xA;     * create(RenderContext, ParameterBlock)) with the same arguments&#xA;     * may produce different results.  This method may be used to&#xA;     * determine whether an existing rendering may be cached and&#xA;     * reused.  It is always safe to return true.&#xA;     * @return &lt;code>true&lt;/code> if successive renderings with the&#xA;     *         same arguments might produce different results;&#xA;     *         &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * ContextualRenderedImageFactory provides an interface for the&#xA; * functionality that may differ between instances of&#xA; * RenderableImageOp.  Thus different operations on RenderableImages&#xA; * may be performed by a single class such as RenderedImageOp through&#xA; * the use of multiple instances of ContextualRenderedImageFactory.&#xA; * The name ContextualRenderedImageFactory is commonly shortened to&#xA; * &quot;CRIF.&quot;&#xA; *&#xA; * &lt;p> All operations that are to be used in a rendering-independent&#xA; * chain must implement ContextualRenderedImageFactory.&#xA; *&#xA; * &lt;p> Classes that implement this interface must provide a&#xA; * constructor with no arguments.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="RenderedImageFactory.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
