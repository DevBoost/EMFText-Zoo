<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="BufferedImageOp.java">
  <comments>/*&#xA; * @(#)BufferedImageOp.java&#x9;1.26 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../geom/Rectangle2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../RenderingHints.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="BufferedImageOp">
    <members xsi:type="members:InterfaceMethod" name="filter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dest">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Performs a single-input/single-output operation on a&#xA;     * &lt;CODE>BufferedImage&lt;/CODE>.&#xA;     * If the color models for the two images do not match, a color&#xA;     * conversion into the destination color model is performed.&#xA;     * If the destination image is null,&#xA;     * a &lt;CODE>BufferedImage&lt;/CODE> with an appropriate &lt;CODE>ColorModel&lt;/CODE>&#xA;     * is created.&#xA;     * &lt;p>&#xA;     * An &lt;CODE>IllegalArgumentException&lt;/CODE> may be thrown if the source&#xA;     * and/or destination image is incompatible with the types of images       $&#xA;     * allowed by the class implementing this filter.&#xA;     *&#xA;     * @param src The &lt;CODE>BufferedImage&lt;/CODE> to be filtered&#xA;     * @param dest The &lt;CODE>BufferedImage&lt;/CODE> in which to store the results$&#xA;     *&#xA;     * @return The filtered &lt;CODE>BufferedImage&lt;/CODE>.&#xA;     *&#xA;     * @throws IllegalArgumentException If the source and/or destination&#xA;     * image is not compatible with the types of images allowed by the class&#xA;     * implementing this filter.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBounds2D">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounding box of the filtered destination image.&#xA;     * An &lt;CODE>IllegalArgumentException&lt;/CODE> may be thrown if the source&#xA;     * image is incompatible with the types of images allowed&#xA;     * by the class implementing this filter.&#xA;     * &#xA;     * @param src The &lt;CODE>BufferedImage&lt;/CODE> to be filtered&#xA;     * &#xA;     * @return The &lt;CODE>Rectangle2D&lt;/CODE> representing the destination&#xA;     * image's bounding box.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createCompatibleDestImage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="src">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="destCM">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a zeroed destination image with the correct size and number of&#xA;     * bands.&#xA;     * An &lt;CODE>IllegalArgumentException&lt;/CODE> may be thrown if the source&#xA;     * image is incompatible with the types of images allowed&#xA;     * by the class implementing this filter.&#xA;     * &#xA;     * @param src The &lt;CODE>BufferedImage&lt;/CODE> to be filtered&#xA;     * @param destCM &lt;CODE>ColorModel&lt;/CODE> of the destination.  If null,&#xA;     * the &lt;CODE>ColorModel&lt;/CODE> of the source is used.&#xA;     * &#xA;     * @return The zeroed destination image.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPoint2D">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="srcPt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dstPt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../geom/Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the location of the corresponding destination point given a&#xA;     * point in the source image.  If &lt;CODE>dstPt&lt;/CODE> is specified, it  &#xA;     * is used to hold the return value.&#xA;     * @param srcPt the &lt;code>Point2D&lt;/code> that represents the point in&#xA;     * the source image&#xA;     * @param dstPt The &lt;CODE>Point2D&lt;/CODE> in which to store the result&#xA;     * &#xA;     * @return The &lt;CODE>Point2D&lt;/CODE> in the destination image that&#xA;     * corresponds to the specified point in the source image.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRenderingHints">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RenderingHints.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the rendering hints for this operation.&#xA;     * &#xA;     * @return The &lt;CODE>RenderingHints&lt;/CODE> object for this&#xA;     * &lt;CODE>BufferedImageOp&lt;/CODE.  Returns&#xA;     * null if no hints have been set.  &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface describes single-input/single-output&#xA; * operations performed on &lt;CODE>BufferedImage&lt;/CODE> objects.&#xA; * It is implemented by &lt;CODE>AffineTransformOp&lt;/CODE>,&#xA; * &lt;CODE>ConvolveOp&lt;/CODE>, &lt;CODE>ColorConvertOp&lt;/CODE>, &lt;CODE>RescaleOp&lt;/CODE>,&#xA; * and &lt;CODE>LookupOp&lt;/CODE>.  These objects can be passed into&#xA; * a &lt;CODE>BufferedImageFilter&lt;/CODE> to operate on a&#xA; * &lt;CODE>BufferedImage&lt;/CODE> in the&#xA; * ImageProducer-ImageFilter-ImageConsumer paradigm.&#xA; * &lt;p>&#xA; * Classes that implement this&#xA; * interface must specify whether or not they allow in-place filtering--&#xA; * filter operations where the source object is equal to the destination&#xA; * object.&#xA; * &lt;p>&#xA; * This interface cannot be used to describe more sophisticated operations&#xA; * such as those that take multiple sources. Note that this restriction also&#xA; * means that the values of the destination pixels prior to the operation are&#xA; * not used as input to the filter operation.&#xA;&#xA; * @see BufferedImage&#xA; * @see BufferedImageFilter&#xA; * @see AffineTransformOp&#xA; * @see BandCombineOp&#xA; * @see ColorConvertOp&#xA; * @see ConvolveOp&#xA; * @see LookupOp&#xA; * @see RescaleOp&#xA; * @version 10 Feb 1997&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
