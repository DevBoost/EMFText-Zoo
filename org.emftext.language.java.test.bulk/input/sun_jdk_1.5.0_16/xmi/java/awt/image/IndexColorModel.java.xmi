<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="IndexColorModel.java">
  <comments>/*&#xA; * @(#)IndexColorModel.java&#x9;1.96 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>image</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Transparency.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>color</namespaces>
    <classifier xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="IndexColorModel">
    <members xsi:type="members:Field" name="rgb">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="map_size">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="transparent_index">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="allgrayopaque">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="validBits">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="opaqueBits">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="alphaBits">
      <initialValue xsi:type="arrays:ArrayInstantiationByValues">
        <arrayInitializer>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
          <initialValues xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
        </arrayInitializer>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initIDs">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ColorModel.class.xmi#//@classifiers.0/@members.23"/>
          </next>
          <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="IndexColorModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.39"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ColorModel.class.xmi#//@classifiers.0/@members.68"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Number of bits must be between"/>
                <children xsi:type="references:StringReference" value=" 1 and 16."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.4"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IndexColorModel&lt;/code> from the specified &#xA;     * arrays of red, green, and blue components.  Pixels described &#xA;     * by this color model all have alpha components of 255 &#xA;     * unnormalized (1.0&amp;nbsp;normalized), which means they&#xA;     * are fully opaque.  All of the arrays specifying the color &#xA;     * components must have at least the specified number of entries.  &#xA;     * The &lt;code>ColorSpace&lt;/code> is the default sRGB space.&#xA;     * Since there is no alpha information in any of the arguments&#xA;     * to this constructor, the transparency value is always &#xA;     * &lt;code>Transparency.OPAQUE&lt;/code>.&#xA;     * The transfer type is the smallest of &lt;code>DataBuffer.TYPE_BYTE&lt;/code>&#xA;     * or &lt;code>DataBuffer.TYPE_USHORT&lt;/code> that can hold a single pixel.&#xA;     * @param bits&#x9;the number of bits each pixel occupies&#xA;     * @param size&#x9;the size of the color component arrays&#xA;     * @param r&#x9;&#x9;the array of red color components&#xA;     * @param g&#x9;&#x9;the array of green color components&#xA;     * @param b&#x9;&#x9;the array of blue color components&#xA;     * @throws IllegalArgumentException if &lt;code>bits&lt;/code> is less&#xA;     *         than 1 or greater than 16&#xA;     * @throws IllegalArgumentException if &lt;code>size&lt;/code> is less&#xA;     *         than 1&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IndexColorModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.39"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ColorModel.class.xmi#//@classifiers.0/@members.68"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Number of bits must be between"/>
                <children xsi:type="references:StringReference" value=" 1 and 16."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.4"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.5"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trans">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IndexColorModel&lt;/code> from the given arrays &#xA;     * of red, green, and blue components.  Pixels described by this color&#xA;     * model all have alpha components of 255 unnormalized &#xA;     * (1.0&amp;nbsp;normalized), which means they are fully opaque, except &#xA;     * for the indicated pixel to be made transparent.  All of the arrays&#xA;     * specifying the color components must have at least the specified&#xA;     * number of entries.&#xA;     * The &lt;code>ColorSpace&lt;/code> is the default sRGB space.&#xA;     * The transparency value may be &lt;code>Transparency.OPAQUE&lt;/code> or&#xA;     * &lt;code>Transparency.BITMASK&lt;/code> depending on the arguments, as&#xA;     * specified in the &lt;a href=&quot;#transparency&quot;>class description&lt;/a> above.&#xA;     * The transfer type is the smallest of &lt;code>DataBuffer.TYPE_BYTE&lt;/code>&#xA;     * or &lt;code>DataBuffer.TYPE_USHORT&lt;/code> that can hold a&#xA;     * single pixel.&#xA;     * @param bits&#x9;the number of bits each pixel occupies&#xA;     * @param size&#x9;the size of the color component arrays&#xA;     * @param r&#x9;&#x9;the array of red color components&#xA;     * @param g&#x9;&#x9;the array of green color components&#xA;     * @param b&#x9;&#x9;the array of blue color components&#xA;     * @param trans&#x9;the index of the transparent pixel&#xA;     * @throws IllegalArgumentException if &lt;code>bits&lt;/code> is less than&#xA;     *          1 or greater than 16&#xA;     * @throws IllegalArgumentException if &lt;code>size&lt;/code> is less than&#xA;     *          1&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IndexColorModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.39"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.2"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ColorModel.class.xmi#//@classifiers.0/@members.68"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Number of bits must be between"/>
                <children xsi:type="references:StringReference" value=" 1 and 16."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.5"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IndexColorModel&lt;/code> from the given &#xA;     * arrays of red, green, blue and alpha components.  All of the &#xA;     * arrays specifying the components must have at least the specified &#xA;     * number of entries.&#xA;     * The &lt;code>ColorSpace&lt;/code> is the default sRGB space.&#xA;     * The transparency value may be any of &lt;code>Transparency.OPAQUE&lt;/code>,&#xA;     * &lt;code>Transparency.BITMASK&lt;/code>,&#xA;     * or &lt;code>Transparency.TRANSLUCENT&lt;/code>&#xA;     * depending on the arguments, as specified&#xA;     * in the &lt;a href=&quot;#transparency&quot;>class description&lt;/a> above.&#xA;     * The transfer type is the smallest of &lt;code>DataBuffer.TYPE_BYTE&lt;/code>&#xA;     * or &lt;code>DataBuffer.TYPE_USHORT&lt;/code> that can hold a single pixel.&#xA;     * @param bits&#x9;the number of bits each pixel occupies&#xA;     * @param size&#x9;the size of the color component arrays&#xA;     * @param r&#x9;&#x9;the array of red color components&#xA;     * @param g&#x9;&#x9;the array of green color components&#xA;     * @param b&#x9;&#x9;the array of blue color components&#xA;     * @param a&#x9;&#x9;the array of alpha value components&#xA;     * @throws IllegalArgumentException if &lt;code>bits&lt;/code> is less&#xA;     *           than 1 or greater than 16&#xA;     * @throws IllegalArgumentException if &lt;code>size&lt;/code> is less&#xA;     *           than 1&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IndexColorModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.4"/>
          <arguments xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Number of bits must be between"/>
                <children xsi:type="references:StringReference" value=" 1 and 16."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cmap">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hasalpha">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IndexColorModel&lt;/code> from a single &#xA;     * array of interleaved red, green, blue and optional alpha &#xA;     * components.  The array must have enough values in it to &#xA;     * fill all of the needed component arrays of the specified &#xA;     * size.  The &lt;code>ColorSpace&lt;/code> is the default sRGB space.&#xA;     * The transparency value may be any of &lt;code>Transparency.OPAQUE&lt;/code>,&#xA;     * &lt;code>Transparency.BITMASK&lt;/code>,&#xA;     * or &lt;code>Transparency.TRANSLUCENT&lt;/code>&#xA;     * depending on the arguments, as specified&#xA;     * in the &lt;a href=&quot;#transparency&quot;>class description&lt;/a> above.&#xA;     * The transfer type is the smallest of&#xA;     * &lt;code>DataBuffer.TYPE_BYTE&lt;/code> or &lt;code>DataBuffer.TYPE_USHORT&lt;/code> &#xA;     * that can hold a single pixel.&#xA;     * &#xA;     * @param bits&#x9;the number of bits each pixel occupies&#xA;     * @param size&#x9;the size of the color component arrays&#xA;     * @param cmap&#x9;the array of color components&#xA;     * @param start&#x9;the starting offset of the first color component&#xA;     * @param hasalpha&#x9;indicates whether alpha values are contained in&#xA;     *&#x9;&#x9;&#x9;the &lt;code>cmap&lt;/code> array&#xA;     * @throws IllegalArgumentException if &lt;code>bits&lt;/code> is less&#xA;     *           than 1 or greater than 16&#xA;     * @throws IllegalArgumentException if &lt;code>size&lt;/code> is less&#xA;     *           than 1&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IndexColorModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.39"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ColorModel.class.xmi#//@classifiers.0/@members.68"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:Super">
            <comments>// REMIND: This assumes the ordering: RGB[A]</comments>
          </callTarget>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Number of bits must be between"/>
                <children xsi:type="references:StringReference" value=" 1 and 16."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Map size ("/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
                <children xsi:type="references:StringReference" value=") must be >= 1"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
            </sizes>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="j">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.3"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="alpha">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="allgray">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="transparency">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="r">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.5/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="g">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.5/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="b">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2">
                  <arraySelectors>
                    <position xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.5/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </position>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.7/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.7/@variable"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@statement/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@statement/@statements.1/@variable"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@statement/@statements.1/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@statement/@statements.2/@variable"/>
                  </expression>
                </children>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.6/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2">
                      <arraySelectors>
                        <position xsi:type="expressions:SuffixUnaryModificationExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.5/@variable"/>
                          <operator xsi:type="operators:PlusPlus"/>
                        </position>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.1"/>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable"/>
                          <children xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
                          </children>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@init"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.6/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="0"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.2"/>
                          </value>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.7/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.6/@variable"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.4"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.6/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@statement/@statements.2/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.9/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.7/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.8/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.5"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cmap">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hasalpha">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trans">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IndexColorModel&lt;/code> from a single array of &#xA;     * interleaved red, green, blue and optional alpha components.  The &#xA;     * specified transparent index represents a pixel that is made&#xA;     * entirely transparent regardless of any alpha value specified&#xA;     * for it.  The array must have enough values in it to fill all&#xA;     * of the needed component arrays of the specified size.&#xA;     * The &lt;code>ColorSpace&lt;/code> is the default sRGB space.&#xA;     * The transparency value may be any of &lt;code>Transparency.OPAQUE&lt;/code>,&#xA;     * &lt;code>Transparency.BITMASK&lt;/code>,&#xA;     * or &lt;code>Transparency.TRANSLUCENT&lt;/code>&#xA;     * depending on the arguments, as specified&#xA;     * in the &lt;a href=&quot;#transparency&quot;>class description&lt;/a> above.&#xA;     * The transfer type is the smallest of&#xA;     * &lt;code>DataBuffer.TYPE_BYTE&lt;/code> or &lt;code>DataBuffer.TYPE_USHORT&lt;/code>&#xA;     * that can hold a single pixel.&#xA;     * @param bits&#x9;the number of bits each pixel occupies&#xA;     * @param size&#x9;the size of the color component arrays&#xA;     * @param cmap&#x9;the array of color components&#xA;     * @param start&#x9;the starting offset of the first color component&#xA;     * @param hasalpha&#x9;indicates whether alpha values are contained in&#xA;     *&#x9;&#x9;&#x9;the &lt;code>cmap&lt;/code> array&#xA;     * @param trans&#x9;the index of the fully transparent pixel&#xA;     * @throws IllegalArgumentException if &lt;code>bits&lt;/code> is less than&#xA;     *               1 or greater than 16&#xA;     * @throws IllegalArgumentException if &lt;code>size&lt;/code> is less than&#xA;     *               1&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IndexColorModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.39"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.6"/>
          <callTarget xsi:type="literals:Super">
            <comments>// REMIND: This assumes the ordering: RGB[A]</comments>
          </callTarget>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Number of bits must be between"/>
                <children xsi:type="references:StringReference" value=" 1 and 16."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Map size ("/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
                <children xsi:type="references:StringReference" value=") must be >= 1"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="transferType must be either"/>
                <children xsi:type="references:StringReference" value="DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.6"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.6"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.4"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.5"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cmap">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hasalpha">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trans">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="transferType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IndexColorModel&lt;/code> from an array of &#xA;     * ints where each int is comprised of red, green, blue, and &#xA;     * optional alpha components in the default RGB color model format.  &#xA;     * The specified transparent index represents a pixel that is made&#xA;     * entirely transparent regardless of any alpha value specified&#xA;     * for it.  The array must have enough values in it to fill all&#xA;     * of the needed component arrays of the specified size.&#xA;     * The &lt;code>ColorSpace&lt;/code> is the default sRGB space.&#xA;     * The transparency value may be any of &lt;code>Transparency.OPAQUE&lt;/code>,&#xA;     * &lt;code>Transparency.BITMASK&lt;/code>,&#xA;     * or &lt;code>Transparency.TRANSLUCENT&lt;/code>&#xA;     * depending on the arguments, as specified&#xA;     * in the &lt;a href=&quot;#transparency&quot;>class description&lt;/a> above.&#xA;     * @param bits&#x9;the number of bits each pixel occupies&#xA;     * @param size&#x9;the size of the color component arrays&#xA;     * @param cmap&#x9;the array of color components&#xA;     * @param start&#x9;the starting offset of the first color component&#xA;     * @param hasalpha&#x9;indicates whether alpha values are contained in&#xA;     *&#x9;&#x9;&#x9;the &lt;code>cmap&lt;/code> array&#xA;     * @param trans&#x9;the index of the fully transparent pixel&#xA;     * @param transferType the data type of the array used to represent&#xA;     *           pixel values.  The data type must be either &#xA;     *           &lt;code>DataBuffer.TYPE_BYTE&lt;/code> or&#xA;     *           &lt;code>DataBuffer.TYPE_USHORT&lt;/code>.&#xA;     * @throws IllegalArgumentException if &lt;code>bits&lt;/code> is less&#xA;     *           than 1 or greater than 16&#xA;     * @throws IllegalArgumentException if &lt;code>size&lt;/code> is less&#xA;     *           than 1&#xA;     * @throws IllegalArgumentException if &lt;code>transferType&lt;/code> is not&#xA;     *           one of &lt;code>DataBuffer.TYPE_BYTE&lt;/code> or&#xA;     *           &lt;code>DataBuffer.TYPE_USHORT&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="IndexColorModel">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.39"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../color/ColorSpace.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../color/ColorSpace.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.2"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Number of bits must be between"/>
                <children xsi:type="references:StringReference" value=" 1 and 16."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Map size ("/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                <children xsi:type="references:StringReference" value=") must be >= 1"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="transferType must be either"/>
                <children xsi:type="references:StringReference" value="DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.1"/>
                </next>
                <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
              </children>
            </expression>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <comments>// Check to see if it is all valid</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:SelfReference">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                        <self xsi:type="literals:This"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.5"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                </statement>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.5">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../math/BigInteger.class.xmi#//@classifiers.0/@members.95"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@statement/@statements.0/@init"/>
                    </next>
                  </child>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.5"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.17">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cmap">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="transferType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="validBits">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs an &lt;code>IndexColorModel&lt;/code> from an &#xA;     * &lt;code>int&lt;/code> array where each &lt;code>int&lt;/code> is &#xA;     * comprised of red, green, blue, and alpha            &#xA;     * components in the default RGB color model format.  &#xA;     * The array must have enough values in it to fill all&#xA;     * of the needed component arrays of the specified size.&#xA;     * The &lt;code>ColorSpace&lt;/code> is the default sRGB space.  &#xA;     * The transparency value may be any of &lt;code>Transparency.OPAQUE&lt;/code>,&#xA;     * &lt;code>Transparency.BITMASK&lt;/code>,&#xA;     * or &lt;code>Transparency.TRANSLUCENT&lt;/code>&#xA;     * depending on the arguments, as specified&#xA;     * in the &lt;a href=&quot;#transparency&quot;>class description&lt;/a> above.&#xA;     * The transfer type must be one of &lt;code>DataBuffer.TYPE_BYTE&lt;/code>&#xA;     * &lt;code>DataBuffer.TYPE_USHORT&lt;/code>.&#xA;     * The &lt;code>BigInteger&lt;/code> object specifies the valid/invalid pixels&#xA;     * in the &lt;code>cmap&lt;/code> array.  A pixel is valid if the &#xA;     * &lt;code>BigInteger&lt;/code> value at that index is set, and is invalid&#xA;     * if the &lt;code>BigInteger&lt;/code> bit  at that index is not set.&#xA;     * @param bits the number of bits each pixel occupies&#xA;     * @param size the size of the color component array&#xA;     * @param cmap the array of color components&#xA;     * @param start the starting offset of the first color component&#xA;     * @param transferType the specified data type&#xA;     * @param validBits a &lt;code>BigInteger&lt;/code> object.  If a bit is&#xA;     *    set in the BigInteger, the pixel at that index is valid.&#xA;     *    If a bit is not set, the pixel at that index&#xA;     *    is considered invalid.  If null, all pixels are valid.&#xA;     *    Only bits from 0 to the map size are considered.&#xA;     * @throws IllegalArgumentException if &lt;code>bits&lt;/code> is less&#xA;     *           than 1 or greater than 16&#xA;     * @throws IllegalArgumentException if &lt;code>size&lt;/code> is less&#xA;     *           than 1&#xA;     * @throws IllegalArgumentException if &lt;code>transferType&lt;/code> is not&#xA;     *           one of &lt;code>DataBuffer.TYPE_BYTE&lt;/code> or&#xA;     *           &lt;code>DataBuffer.TYPE_USHORT&lt;/code>&#xA;     *    &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setRGBs">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Map size ("/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
                <children xsi:type="references:StringReference" value=") must be >= 1"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
            </sizes>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="alpha">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="transparency">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="allgray">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="rc">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="gc">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="bc">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.3">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.5/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.5/@variable"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@statement/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@statement/@statements.1/@variable"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@statement/@statements.1/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@statement/@statements.2/@variable"/>
                  </expression>
                </children>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.4">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.4/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.1"/>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.4/@variable"/>
                          <children xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
                          </children>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.3/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="0"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.4/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.2"/>
                          </value>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.5/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.3/@variable"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.4"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.3/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@statement/@statements.2/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.6/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.5/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.4/@variable"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setRGBs">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cmap">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hasalpha">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
            </sizes>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="j">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.2"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="transparency">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="allgray">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="validBits">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.5/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.5/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../math/BigInteger.class.xmi#//@classifiers.0/@members.95"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@init"/>
                  </next>
                </child>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cmaprgb">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.2/@variable"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="r">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                    <shiftOperators xsi:type="operators:RightShift"/>
                  </expression>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="g">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                    <shiftOperators xsi:type="operators:RightShift"/>
                  </expression>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="b">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:AndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.1/@variable"/>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.4/@variable"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.2/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.3/@variable"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.3/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.4/@variable"/>
                  </expression>
                </children>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="alpha">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                    <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.3/@variable"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.1"/>
                              </value>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.3/@variable"/>
                          <children xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
                          </children>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="expressions:AssignmentExpression">
                              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                              <assignmentOperator xsi:type="operators:Assignment"/>
                              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@init"/>
                            </expression>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.6/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:HexIntegerLiteral" hexValue="0"/>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.3/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.2"/>
                          </value>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.4/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.6/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.3"/>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentOr"/>
                  <value xsi:type="literals:HexIntegerLiteral" hexValue="4278190080"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@statement/@statements.1/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.6/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.2/@variable"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.4/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@statements.3/@variable"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="calcRealMapSize">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bits">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="newSize">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.33"/>
              <arguments xsi:type="expressions:ShiftExpression">
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.33"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAllValid">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="numbytes">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            <multiplicativeOperators xsi:type="operators:Division"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="valid">
          <typeReference xsi:type="types:Byte"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Byte"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../util/Arrays.class.xmi#//@classifiers.0/@members.83"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@variable"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Byte"/>
                  <child xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../util/Arrays.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Byte"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                      <multiplicativeOperators xsi:type="operators:Multiplication"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </expression>
                </children>
                <shiftOperators xsi:type="operators:UnsignedRightShift"/>
              </expression>
            </child>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTransparency">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the transparency.  Returns either OPAQUE, BITMASK,&#xA;     * or TRANSLUCENT&#xA;     * @return the transparency of this &lt;code>IndexColorModel&lt;/code> &#xA;     * @see Transparency#OPAQUE&#xA;     * @see Transparency#BITMASK&#xA;     * @see Transparency#TRANSLUCENT&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.3"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getComponentSize">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of the number of bits for each color/alpha component.&#xA;     * The array contains the color components in the order red, green,&#xA;     * blue, followed by the alpha component, if present.&#xA;     * @return an array containing the number of bits of each color &#xA;     *         and alpha component of this &lt;code>IndexColorModel&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:Int"/>
                    <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                    </arraySelectors>
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.4"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:Int"/>
                    <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
                <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference">
                  <arraySelectors>
                    <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </arraySelectors>
                  <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    </arraySelectors>
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                </value>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMapSize">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the size of the color/alpha component arrays in this&#xA;     * &lt;code>IndexColorModel&lt;/code>.&#xA;     * @return the size of the color and alpha component arrays.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTransparentPixel">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the index of a transparent pixel in this&#xA;     * &lt;code>IndexColorModel&lt;/code> or -1 if there is no pixel&#xA;     * with an alpha value of 0.  If a transparent pixel was&#xA;     * explicitly specified in one of the constructors by its&#xA;     * index, then that index will be preferred, otherwise,&#xA;     * the index of any pixel which happens to be fully transparent&#xA;     * may be returned.&#xA;     * @return the index of a transparent pixel in this&#xA;     *         &lt;code>IndexColorModel&lt;/code> object, or -1 if there&#xA;     *         is no such pixel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getReds">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Copies the array of red color components into the specified array.  &#xA;     * Only the initial entries of the array as specified by &#xA;     * {@link #getMapSize() getMapSize} are written.&#xA;     * @param r the specified array into which the elements of the &#xA;     *      array of red color components are copied &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@init"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                    <shiftOperators xsi:type="operators:RightShift"/>
                  </expression>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getGreens">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="g">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Copies the array of green color components into the specified array.  &#xA;     * Only the initial entries of the array as specified by &#xA;     * &lt;code>getMapSize&lt;/code> are written.&#xA;     * @param g the specified array into which the elements of the &#xA;     *      array of green color components are copied &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@init"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                    <shiftOperators xsi:type="operators:RightShift"/>
                  </expression>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBlues">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Copies the array of blue color components into the specified array.  &#xA;     * Only the initial entries of the array as specified by &#xA;     * &lt;code>getMapSize&lt;/code> are written.&#xA;     * @param b the specified array into which the elements of the &#xA;     *      array of blue color components are copied &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@init"/>
                  </arraySelectors>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAlphas">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Copies the array of alpha transparency components into the &#xA;     * specified array.  Only the initial entries of the array as specified &#xA;     * by &lt;code>getMapSize&lt;/code> are written.&#xA;     * @param a the specified array into which the elements of the &#xA;     *      array of alpha components are copied &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@init"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                    <shiftOperators xsi:type="operators:RightShift"/>
                  </expression>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRGBs">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rgb">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Converts data for each index from the color and alpha component&#xA;     * arrays to an int in the default RGB ColorModel format and copies&#xA;     * the resulting 32-bit ARGB values into the specified array.  Only&#xA;     * the initial entries of the array as specified by &#xA;     * &lt;code>getMapSize&lt;/code> are&#xA;     * written.&#xA;     * @param rgb the specified array into which the converted ARGB &#xA;     *        values from this array of color and alpha components&#xA;     *        are copied.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTransparentPixel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trans">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentAnd"/>
              <value xsi:type="literals:HexIntegerLiteral" hexValue="16777215"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.1"/>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <self xsi:type="literals:This"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTransparency">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="transparency">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.4"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.6"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.4"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.6"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.2"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <self xsi:type="literals:This"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRed">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the red color component for the specified pixel, scaled&#xA;     * from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value&#xA;     * is specified as an int.  The returned value is a&#xA;     * non pre-multiplied value.&#xA;     * @param pixel the specified pixel &#xA;     * @return the value of the red color component for the specified pixel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
                </arraySelectors>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </children>
          <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getGreen">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the green color component for the specified pixel, scaled&#xA;     * from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value&#xA;     * is specified as an int.  The returned value is a&#xA;     * non pre-multiplied value.&#xA;     * @param pixel the specified pixel &#xA;     * @return the value of the green color component for the specified pixel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
                </arraySelectors>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </children>
          <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBlue">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the blue color component for the specified pixel, scaled&#xA;     * from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value&#xA;     * is specified as an int.  The returned value is a&#xA;     * non pre-multiplied value.&#xA;     * @param pixel the specified pixel &#xA;     * @return the value of the blue color component for the specified pixel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
            </arraySelectors>
          </children>
          <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAlpha">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the alpha component for the specified pixel, scaled&#xA;     * from 0 to 255.  The pixel value is specified as an int.&#xA;     * @param pixel the specified pixel &#xA;     * @return the value of the alpha component for the specified pixel&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
                </arraySelectors>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <shiftOperators xsi:type="operators:RightShift"/>
            </expression>
          </children>
          <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getRGB">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the color/alpha components of the pixel in the default&#xA;     * RGB color model format.  The pixel value is specified as an int.&#xA;     * The returned value is in a non pre-multiplied format.&#xA;     * @param pixel the specified pixel &#xA;     * @return the color and alpha components of the specified pixel&#xA;     * @see ColorModel#getRGBdefault&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <arraySelectors>
            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          </arraySelectors>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="CACHESIZE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="40"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="lookupcache">
      <initialValue xsi:type="arrays:ArrayInstantiationBySize">
        <typeReference xsi:type="types:Int"/>
        <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getDataElements">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="rgb">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a data element array representation of a pixel in this&#xA;     * ColorModel, given an integer pixel representation in the&#xA;     * default RGB color model.  This array can then be passed to the &#xA;     * {@link WritableRaster#setDataElements(int, int, java.lang.Object) setDataElements}&#xA;     * method of a {@link WritableRaster} object.  If the pixel variable is &#xA;     * &lt;code>null&lt;/code>, a new array is allocated.  If &lt;code>pixel&lt;/code>&#xA;     * is not &lt;code>null&lt;/code>, it must be&#xA;     * a primitive array of type &lt;code>transferType&lt;/code>; otherwise, a&#xA;     * &lt;code>ClassCastException&lt;/code> is thrown.  An &#xA;     * &lt;code>ArrayIndexOutOfBoundsException&lt;/code> is&#xA;     * thrown if &lt;code>pixel&lt;/code> is not large enough to hold a pixel &#xA;     * value for this &lt;code>ColorModel&lt;/code>.  The pixel array is returned.&#xA;     * &lt;p>&#xA;     * Since &lt;code>IndexColorModel&lt;/code> can be subclassed, subclasses &#xA;     * inherit the implementation of this method and if they don't &#xA;     * override it then they throw an exception if they use an &#xA;     * unsupported &lt;code>transferType&lt;/code>.&#xA;     *&#xA;     * @param rgb the integer pixel representation in the default RGB&#xA;     * color model&#xA;     * @param pixel the specified pixel&#xA;     * @return an array representation of the specified pixel in this&#xA;     *  &lt;code>IndexColorModel&lt;/code>.&#xA;     * @throws ClassCastException if &lt;code>pixel&lt;/code>&#xA;     *  is not a primitive array of type &lt;code>transferType&lt;/code>&#xA;     * @throws ArrayIndexOutOfBoundsException if&#xA;     *  &lt;code>pixel&lt;/code> is not large enough to hold a pixel value&#xA;     *  for this &lt;code>ColorModel&lt;/code>&#xA;     * @throws UnsupportedOperationException if &lt;code>transferType&lt;/code>&#xA;     *         is invalid&#xA;     * @see WritableRaster#setDataElements&#xA;     * @see SampleModel#setDataElements&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="red">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                <shiftOperators xsi:type="operators:RightShift"/>
              </expression>
            </children>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="green">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <shiftOperators xsi:type="operators:RightShift"/>
              </expression>
            </children>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="blue">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AndExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
            <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="alpha">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ShiftExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
              <shiftOperators xsi:type="operators:UnsignedRightShift"/>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pix">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Break"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.5/@init"/>
                    </arraySelectors>
                  </value>
                </expression>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.1"/>
                  <arguments xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Complement"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
                  </arguments>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.5/@init"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.5/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.5/@init"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="minDist">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="d">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="gray">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Int"/>
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="expressions:MultiplicativeExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="77"/>
                        <multiplicativeOperators xsi:type="operators:Multiplication"/>
                      </children>
                      <children xsi:type="expressions:MultiplicativeExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="150"/>
                        <multiplicativeOperators xsi:type="operators:Multiplication"/>
                      </children>
                      <children xsi:type="expressions:MultiplicativeExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.2/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="29"/>
                        <multiplicativeOperators xsi:type="operators:Multiplication"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="128"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </expression>
                  </child>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Continue">
                    <comments>// For allgrayopaque colormaps, entries are 0</comments>
                    <comments>// iff they are an invalid color and should be</comments>
                    <comments>// ignored during color searches.</comments>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:SelfReference">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.3/@init"/>
                      </arraySelectors>
                    </next>
                    <self xsi:type="literals:This"/>
                  </children>
                  <children xsi:type="literals:HexIntegerLiteral" hexValue="0"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="references:SelfReference">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                            <arraySelectors>
                              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.3/@init"/>
                            </arraySelectors>
                          </next>
                          <self xsi:type="literals:This"/>
                        </children>
                        <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                      </expression>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.2/@variable"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.1/@variable"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.1/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.3/@init"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:Break"/>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.1/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.1/@variable"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.0/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.3/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@statement/@statements.3/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <comments>// Return transparent pixel if we have one</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="smallestAlpha">
                    <typeReference xsi:type="types:Int">
                      <comments>// Search for smallest alpha</comments>
                    </typeReference>
                    <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:ForLoop">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="a">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:ShiftExpression">
                          <children xsi:type="references:SelfReference">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                              <arraySelectors>
                                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@statement/@statements.0/@elseStatement/@statements.1/@init"/>
                              </arraySelectors>
                            </next>
                            <self xsi:type="literals:This"/>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                          <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.3/@variable"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@statement/@statements.0/@elseStatement/@statements.1/@init"/>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.3/@variable"/>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </children>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:ConditionalOrExpression">
                            <children xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:Equal"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </children>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../math/BigInteger.class.xmi#//@classifiers.0/@members.95"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@statement/@statements.0/@elseStatement/@statements.1/@init"/>
                              </next>
                            </children>
                          </expression>
                        </children>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@statement/@statements.0/@elseStatement/@statements.1/@init"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </condition>
                  <init xsi:type="variables:LocalVariable" name="i">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </init>
                  <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@statement/@statements.0/@elseStatement/@statements.1/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </updates>
                </statements>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.3/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="smallestError">
                <typeReference xsi:type="types:Int">
                  <comments>// a heuristic which says find the closest color,</comments>
                  <comments>// after finding the closest alpha</comments>
                  <comments>// if user wants different behavior, they can derive</comments>
                  <comments>// a class and override this method</comments>
                  <comments>// SLOW --- but accurate</comments>
                  <comments>// REMIND - need a native implementation, and inverse color-map</comments>
                </typeReference>
                <initialValue xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="255"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="255"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="255"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="smallestAlphaError">
                <typeReference xsi:type="types:Int">
                  <comments>// largest possible</comments>
                </typeReference>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="255"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <comments>// Grayscale</comments>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="literals:BooleanLiteral"/>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable"/>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.2/@variable"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="lutrgb">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:SelfReference">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@init"/>
                        </arraySelectors>
                      </next>
                      <self xsi:type="literals:This"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@init"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Break"/>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.0/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="tmp">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ShiftExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                          <shiftOperators xsi:type="operators:UnsignedRightShift"/>
                        </expression>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.3/@variable"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AndExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:ShiftExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.0/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                                  <shiftOperators xsi:type="operators:RightShift"/>
                                </expression>
                              </children>
                              <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                            </expression>
                          </children>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="currentError">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                          <multiplicativeOperators xsi:type="operators:Multiplication"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:AndExpression">
                                  <children xsi:type="expressions:NestedExpression">
                                    <expression xsi:type="expressions:ShiftExpression">
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.0/@variable"/>
                                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                                      <shiftOperators xsi:type="operators:RightShift"/>
                                    </expression>
                                  </children>
                                  <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                                </expression>
                              </children>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.1/@variable"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </value>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.4/@statement/@statements.2/@variable"/>
                            <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                            <value xsi:type="expressions:MultiplicativeExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                              <multiplicativeOperators xsi:type="operators:Multiplication"/>
                            </value>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                                <assignmentOperator xsi:type="operators:Assignment"/>
                                <value xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="expressions:NestedExpression">
                                    <expression xsi:type="expressions:AndExpression">
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.0/@variable"/>
                                      <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                                    </expression>
                                  </children>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.2/@variable"/>
                                  <additiveOperators xsi:type="operators:Subtraction"/>
                                </value>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="expressions:AssignmentExpression">
                                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.4/@statement/@statements.2/@variable"/>
                                <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                                <value xsi:type="expressions:MultiplicativeExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                                </value>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@init"/>
                                  </expression>
                                </statements>
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.0/@variable"/>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.4/@statement/@statements.2/@variable"/>
                                  </expression>
                                </statements>
                              </statement>
                              <condition xsi:type="expressions:ConditionalAndExpression">
                                <children xsi:type="expressions:RelationExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.4/@statement/@statements.2/@variable"/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.0/@variable"/>
                                  <relationOperators xsi:type="operators:LessThan"/>
                                </children>
                                <children xsi:type="expressions:NestedExpression">
                                  <expression xsi:type="expressions:ConditionalOrExpression">
                                    <children xsi:type="expressions:EqualityExpression">
                                      <equalityOperators xsi:type="operators:Equal"/>
                                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                                      <children xsi:type="literals:NullLiteral"/>
                                    </children>
                                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="../../math/BigInteger.class.xmi#//@classifiers.0/@members.95"/>
                                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@init"/>
                                      </next>
                                    </children>
                                  </expression>
                                </children>
                              </condition>
                            </statements>
                          </statement>
                          <condition xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.4/@statement/@statements.2/@variable"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.0/@variable"/>
                            <relationOperators xsi:type="operators:LessThan"/>
                          </condition>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.4/@statement/@statements.2/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.0/@variable"/>
                        <relationOperators xsi:type="operators:LessThan"/>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@statement/@statements.2/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.1/@variable"/>
                    <relationOperators xsi:type="operators:LessThanOrEqual"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.6/@elseStatement/@elseStatement/@statements.3/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Complement"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.4/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="installpixel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pix">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="intObj">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsBefore/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:Int"/>
                      <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </value>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.0/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Int"/>
                    <arrayDimensionsBefore/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.0/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.1"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="byteObj">
              <typeReference xsi:type="types:Byte"/>
              <arrayDimensionsBefore/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.1/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:Byte"/>
                      <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </value>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.1/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Byte"/>
                    <arrayDimensionsBefore/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.1/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="shortObj">
              <typeReference xsi:type="types:Short"/>
              <arrayDimensionsBefore/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.2/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:Short"/>
                      <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </value>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.2/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Short"/>
                    <arrayDimensionsBefore/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@statements.0/@cases.2/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Short"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="This method has not been "/>
                <children xsi:type="references:StringReference" value="implemented for transferType "/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@parameters.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getComponents">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="components">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of unnormalized color/alpha components for a &#xA;     * specified pixel in this &lt;code>ColorModel&lt;/code>.  The pixel value &#xA;     * is specified as an int.  If the &lt;code>components&lt;/code> array is &lt;code>null&lt;/code>, &#xA;     * a new array is allocated that contains &#xA;     * &lt;code>offset + getNumComponents()&lt;/code> elements. &#xA;     * The &lt;code>components&lt;/code> array is returned, &#xA;     * with the alpha component included &#xA;     * only if &lt;code>hasAlpha&lt;/code> returns true.  &#xA;     * Color/alpha components are stored in the &lt;code>components&lt;/code> array starting &#xA;     * at &lt;code>offset&lt;/code> even if the array is allocated by this method.  &#xA;     * An &lt;code>ArrayIndexOutOfBoundsException&lt;/code>&#xA;     * is thrown if  the &lt;code>components&lt;/code> array is not &lt;code>null&lt;/code> and is &#xA;     * not large enough to hold all the color and alpha components &#xA;     * starting at &lt;code>offset&lt;/code>.&#xA;     * @param pixel the specified pixel&#xA;     * @param components the array to receive the color and alpha&#xA;     * components of the specified pixel&#xA;     * @param offset the offset into the &lt;code>components&lt;/code> array at&#xA;     * which to start storing the color and alpha components&#xA;     * @return an array containing the color and alpha components of the&#xA;     * specified pixel starting at the specified offset.&#xA;     * @see ColorModel#hasAlpha&#xA;     * @see ColorModel#getNumComponents&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <sizes xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                  <children xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.6"/>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                </sizes>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1">
            <comments>// REMIND: Needs to change if different color space</comments>
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </position>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </position>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </position>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.4"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getComponents">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="components">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of unnormalized color/alpha components for&#xA;     * a specified pixel in this &lt;code>ColorModel&lt;/code>.  The pixel &#xA;     * value is specified by an array of data elements of type &#xA;     * &lt;code>transferType&lt;/code> passed in as an object reference.&#xA;     * If &lt;code>pixel&lt;/code> is not a primitive array of type &#xA;     * &lt;code>transferType&lt;/code>, a &lt;code>ClassCastException&lt;/code>&#xA;     * is thrown.  An &lt;code>ArrayIndexOutOfBoundsException&lt;/code>&#xA;     * is thrown if &lt;code>pixel&lt;/code> is not large enough to hold &#xA;     * a pixel value for this &lt;code>ColorModel&lt;/code>.  If the &#xA;     * &lt;code>components&lt;/code> array is &lt;code>null&lt;/code>, a new array &#xA;     * is allocated that contains &#xA;     * &lt;code>offset + getNumComponents()&lt;/code> elements. &#xA;     * The &lt;code>components&lt;/code> array is returned, &#xA;     * with the alpha component included &#xA;     * only if &lt;code>hasAlpha&lt;/code> returns true.  &#xA;     * Color/alpha components are stored in the &lt;code>components&lt;/code> &#xA;     * array starting at &lt;code>offset&lt;/code> even if the array is&#xA;     * allocated by this method.  An &#xA;     * &lt;code>ArrayIndexOutOfBoundsException&lt;/code> is also&#xA;     * thrown if  the &lt;code>components&lt;/code> array is not &#xA;     * &lt;code>null&lt;/code> and is not large enough to hold all the color &#xA;     * and alpha components starting at &lt;code>offset&lt;/code>.  &#xA;     * &lt;p>&#xA;     * Since &lt;code>IndexColorModel&lt;/code> can be subclassed, subclasses &#xA;     * inherit the implementation of this method and if they don't&#xA;     * override it then they throw an exception if they use an &#xA;     * unsupported &lt;code>transferType&lt;/code>.&#xA;     *&#xA;     * @param pixel the specified pixel&#xA;     * @param components an array that receives the color and alpha  &#xA;     * components of the specified pixel&#xA;     * @param offset the index into the &lt;code>components&lt;/code> array at&#xA;     * which to begin storing the color and alpha components of the&#xA;     * specified pixel&#xA;     * @return an array containing the color and alpha components of the&#xA;     * specified pixel starting at the specified offset.&#xA;     * @throws ArrayIndexOutOfBoundsException if &lt;code>pixel&lt;/code>&#xA;     *            is not large enough to hold a pixel value for this&#xA;     *            &lt;code>ColorModel&lt;/code> or if the &#xA;     *            &lt;code>components&lt;/code> array is not &lt;code>null&lt;/code> &#xA;     *            and is not large enough to hold all the color &#xA;     *            and alpha components starting at &lt;code>offset&lt;/code>&#xA;     * @throws ClassCastException if &lt;code>pixel&lt;/code> is not a &#xA;     *            primitive array of type &lt;code>transferType&lt;/code>&#xA;     * @throws UnsupportedOperationException if &lt;code>transferType&lt;/code>&#xA;     *         is not one of the supported transer types&#xA;     * @see ColorModel#hasAlpha&#xA;     * @see ColorModel#getNumComponents&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="intpixel">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="bdata">
              <typeReference xsi:type="types:Byte"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@cases.0/@statements.0/@variable">
                  <arraySelectors>
                    <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sdata">
              <typeReference xsi:type="types:Short"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Short"/>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@cases.1/@statements.0/@variable">
                  <arraySelectors>
                    <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="65535"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="idata">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Int"/>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@cases.2/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="This method has not been "/>
                <children xsi:type="references:StringReference" value="implemented for transferType "/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.2"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDataElement">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="components">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a pixel value represented as an int in this &#xA;     * &lt;code>ColorModel&lt;/code> given an array of unnormalized &#xA;     * color/alpha components.  An &#xA;     * &lt;code>ArrayIndexOutOfBoundsException&lt;/code> &#xA;     * is thrown if the &lt;code>components&lt;/code> array is not large &#xA;     * enough to hold all of the color and alpha components starting&#xA;     * at &lt;code>offset&lt;/code>.  Since&#xA;     * &lt;code>ColorModel&lt;/code> can be subclassed, subclasses inherit the&#xA;     * implementation of this method and if they don't override it then&#xA;     * they throw an exception if they use an unsupported transferType.&#xA;     * @param components an array of unnormalized color and alpha&#xA;     * components&#xA;     * @param offset the index into &lt;code>components&lt;/code> at which to&#xA;     * begin retrieving the color and alpha components&#xA;     * @return an &lt;code>int&lt;/code> pixel value in this&#xA;     * &lt;code>ColorModel&lt;/code> corresponding to the specified components.&#xA;     * @throws ArrayIndexOutOfBoundsException if&#xA;     *  the &lt;code>components&lt;/code> array is not large enough to&#xA;     *  hold all of the color and alpha components starting at&#xA;     *  &lt;code>offset&lt;/code>&#xA;     * @throws UnsupportedOperationException if &lt;code>transferType&lt;/code>&#xA;     *         is invalid&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rgb">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </position>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </position>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </expression>
            </children>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                  <shiftOperators xsi:type="operators:LeftShift"/>
                </expression>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.4"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="literals:HexIntegerLiteral" hexValue="4278190080"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="inData">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pixel">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="bdata">
              <typeReference xsi:type="types:Byte"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Byte"/>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.4/@cases.0/@statements.0/@variable">
                  <arraySelectors>
                    <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sdata">
              <typeReference xsi:type="types:Short"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Short"/>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.4/@cases.1/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="idata">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Int"/>
                <arrayDimensionsBefore/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.4/@cases.2/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
          </condition>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="This method has not been "/>
                <children xsi:type="references:StringReference" value="implemented for transferType "/>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.3/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDataElements">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="components">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a data element array representation of a pixel in this&#xA;     * &lt;code>ColorModel&lt;/code> given an array of unnormalized color/alpha &#xA;     * components.  This array can then be passed to the &#xA;     * &lt;code>setDataElements&lt;/code> method of a &lt;code>WritableRaster&lt;/code> &#xA;     * object.  An &lt;code>ArrayIndexOutOfBoundsException&lt;/code> is &#xA;     * thrown if the &#xA;     * &lt;code>components&lt;/code> array is not large enough to hold all of the &#xA;     * color and alpha components starting at &lt;code>offset&lt;/code>.  &#xA;     * If the pixel variable is &lt;code>null&lt;/code>, a new array&#xA;     * is allocated.  If &lt;code>pixel&lt;/code> is not &lt;code>null&lt;/code>, &#xA;     * it must be a primitive array of type &lt;code>transferType&lt;/code>; &#xA;     * otherwise, a &lt;code>ClassCastException&lt;/code> is thrown.&#xA;     * An &lt;code>ArrayIndexOutOfBoundsException&lt;/code> is thrown if pixel &#xA;     * is not large enough to hold a pixel value for this&#xA;     * &lt;code>ColorModel&lt;/code>.&#xA;     * &lt;p>&#xA;     * Since &lt;code>IndexColorModel&lt;/code> can be subclassed, subclasses&#xA;     * inherit the implementation of this method and if they don't&#xA;     * override it then they throw an exception if they use an&#xA;     * unsupported &lt;code>transferType&lt;/code>&#xA;     *&#xA;     * @param components an array of unnormalized color and alpha&#xA;     * components&#xA;     * @param offset the index into &lt;code>components&lt;/code> at which to&#xA;     * begin retrieving color and alpha components&#xA;     * @param pixel the &lt;code>Object&lt;/code> representing an array of color&#xA;     * and alpha components&#xA;     * @return an &lt;code>Object&lt;/code> representing an array of color and&#xA;     * alpha components.&#xA;     * @throws ClassCastException if &lt;code>pixel&lt;/code>&#xA;     *  is not a primitive array of type &lt;code>transferType&lt;/code>&#xA;     * @throws ArrayIndexOutOfBoundsException if &#xA;     *  &lt;code>pixel&lt;/code> is not large enough to hold a pixel value&#xA;     *  for this &lt;code>ColorModel&lt;/code> or the &lt;code>components&lt;/code>&#xA;     *  array is not large enough to hold all of the color and alpha&#xA;     *  components starting at &lt;code>offset&lt;/code>&#xA;     * @throws UnsupportedOperationException if &lt;code>transferType&lt;/code>&#xA;     *         is not one of the supported transer types&#xA;     * @see WritableRaster#setDataElements&#xA;     * @see SampleModel#setDataElements&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rgb">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:InclusiveOrExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </position>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ShiftExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </position>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                <shiftOperators xsi:type="operators:LeftShift"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0">
                <arraySelectors>
                  <position xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </position>
                </arraySelectors>
              </expression>
            </children>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentOr"/>
              <value xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ShiftExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0">
                    <arraySelectors>
                      <position xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.1"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </position>
                    </arraySelectors>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                  <shiftOperators xsi:type="operators:LeftShift"/>
                </expression>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.4"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentAnd"/>
              <value xsi:type="literals:HexIntegerLiteral" hexValue="4278190080"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.38">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.2"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createCompatibleWritableRaster">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>WritableRaster&lt;/code> with the specified width &#xA;     * and height that has a data layout (&lt;code>SampleModel&lt;/code>) &#xA;     * compatible with this &lt;code>ColorModel&lt;/code>.  This method&#xA;     * only works for color models with 16 or fewer bits per pixel.&#xA;     * &lt;p>&#xA;     * Since &lt;code>IndexColorModel&lt;/code> can be subclassed, any &#xA;     * subclass that supports greater than 16 bits per pixel must&#xA;     * override this method.&#xA;     *&#xA;     * @param w the width to apply to the new &lt;code>WritableRaster&lt;/code>&#xA;     * @param h the height to apply to the new &lt;code>WritableRaster&lt;/code>&#xA;     * @return a &lt;code>WritableRaster&lt;/code> object with the specified&#xA;     * width and height.&#xA;     * @throws UnsupportedOperationException if the number of bits in a&#xA;     *         pixel is greater than 16&#xA;     * @see WritableRaster&#xA;     * @see SampleModel&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="raster">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
                <comments>// TYPE_BINARY</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.17"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.1"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
                  </arguments>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.12"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.1"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.12"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="DataBuffer.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.1"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <arguments xsi:type="literals:NullLiteral"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="This method is not supported "/>
                    <children xsi:type="references:StringReference" value=" for pixel bits > 16."/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </throwable>
              </statements>
            </elseStatement>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isCompatibleRaster">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="raster">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;      * Returns &lt;code>true&lt;/code> if &lt;code>raster&lt;/code> is compatible &#xA;      * with this &lt;code>ColorModel&lt;/code> or &lt;code>false&lt;/code> if it &#xA;      * is not compatible with this &lt;code>ColorModel&lt;/code>.&#xA;      * @param raster the {@link Raster} object to test for compatibility&#xA;      * @return &lt;code>true&lt;/code> if &lt;code>raster&lt;/code> is compatible&#xA;      * with this &lt;code>ColorModel&lt;/code>; &lt;code>false&lt;/code> otherwise.&#xA;      * &#xA;      */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="size">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.44"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </next>
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.46"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.44"/>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
                </children>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.42"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.0/@variable"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </expression>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createCompatibleSampleModel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SampleModel.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>SampleModel&lt;/code> with the specified &#xA;     * width and height that has a data layout compatible with &#xA;     * this &lt;code>ColorModel&lt;/code>.  &#xA;     * @param w the width to apply to the new &lt;code>SampleModel&lt;/code>&#xA;     * @param h the height to apply to the new &lt;code>SampleModel&lt;/code> &#xA;     * @return a &lt;code>SampleModel&lt;/code> object with the specified&#xA;     * width and height.&#xA;     * @throws IllegalArgumentException if &lt;code>w&lt;/code> or&#xA;     *         &lt;code>h&lt;/code> is not greater than 0&#xA;     * @see SampleModel&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="off">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable">
            <arraySelectors>
              <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="MultiPixelPackedSampleModel.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
              </arguments>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="ComponentSampleModel.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.1"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isCompatibleSampleModel">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SampleModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Checks if the specified &lt;code>SampleModel&lt;/code> is compatible &#xA;     * with this &lt;code>ColorModel&lt;/code>.  If &lt;code>sm&lt;/code> is&#xA;     * &lt;code>null&lt;/code>, this method returns &lt;code>false&lt;/code>.  &#xA;     * @param sm the specified &lt;code>SampleModel&lt;/code>, &#xA;     *           or &lt;code>null&lt;/code>&#xA;     * @return &lt;code>true&lt;/code> if the specified &lt;code>SampleModel&lt;/code>&#xA;     * is compatible with this &lt;code>ColorModel&lt;/code>; &lt;code>false&lt;/code>&#xA;     * otherwise.&#xA;     * @see SampleModel &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// fix 4238629</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="ComponentSampleModel.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
              </expression>
            </child>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="MultiPixelPackedSampleModel.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
              </expression>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Transfer type must be the same</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.11"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.12"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="SampleModel.class.xmi#//@classifiers.0/@members.8"/>
            </next>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="convertToIntDiscrete">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="raster">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Raster.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="forceARGB">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a new &lt;code>BufferedImage&lt;/code> of TYPE_INT_ARGB or &#xA;     * TYPE_INT_RGB that has a &lt;code>Raster&lt;/code> with pixel data &#xA;     * computed by expanding the indices in the source &lt;code>Raster&lt;/code>&#xA;     * using the color/alpha component arrays of this &lt;code>ColorModel&lt;/code>.&#xA;     * If &lt;code>forceARGB&lt;/code> is &lt;code>true&lt;/code>, a TYPE_INT_ARGB image is&#xA;     * returned regardless of whether or not this &lt;code>ColorModel&lt;/code>&#xA;     * has an alpha component array or a transparent pixel.&#xA;     * @param raster the specified &lt;code>Raster&lt;/code>&#xA;     * @param forceARGB if &lt;code>true&lt;/code>, the returned &#xA;     *     &lt;code>BufferedImage&lt;/code> is TYPE_INT_ARGB; otherwise it is&#xA;     *     TYPE_INT_RGB&#xA;     * @return a &lt;code>BufferedImage&lt;/code> created with the specified&#xA;     *     &lt;code>Raster&lt;/code>&#xA;     * @throws IllegalArgumentException if the raster argument is not&#xA;     *           compatible with this IndexColorModel&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="This raster is not compatible"/>
                <children xsi:type="references:StringReference" value="with this IndexColorModel."/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.45">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="ColorModel.class.xmi#//@classifiers.0/@members.25"/>
                </next>
                <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.1"/>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.3"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.2"/>
            </children>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="DirectColorModel.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="25"/>
                  <arguments xsi:type="literals:HexIntegerLiteral" hexValue="16711680"/>
                  <arguments xsi:type="literals:HexIntegerLiteral" hexValue="65280"/>
                  <arguments xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                  <arguments xsi:type="literals:HexIntegerLiteral" hexValue="16777216"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.3"/>
            </children>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../Transparency.class.xmi#//@classifiers.0/@members.1"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="DirectColorModel.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
                  <arguments xsi:type="literals:HexIntegerLiteral" hexValue="16711680"/>
                  <arguments xsi:type="literals:HexIntegerLiteral" hexValue="65280"/>
                  <arguments xsi:type="literals:HexIntegerLiteral" hexValue="255"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="w">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.40"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="h">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.41"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="discreteRaster">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="WritableRaster.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ColorModel.class.xmi#//@classifiers.0/@members.62"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.4/@variable"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="obj">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="data">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.38"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="rY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.39"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.6/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Raster.class.xmi#//@classifiers.0/@members.48"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.8/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.9/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.6/@variable"/>
                </next>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.7/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Int"/>
                    <arrayDimensionsBefore/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.6/@variable"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <arrayDimensionsBefore/>
              <typeReference xsi:type="types:Int"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.6/@variable"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.7/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="DataBuffer.class.xmi#//@classifiers.0/@members.35"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.6/@variable"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DataBuffer.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.7/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.10/@statement/@statements.2/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.7/@variable">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.10/@statement/@statements.2/@init"/>
                        </arraySelectors>
                      </position>
                    </arraySelectors>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.10/@statement/@statements.2/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="x">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.10/@statement/@statements.2/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.5/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="WritableRaster.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.10/@init"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.3/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.7/@variable"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.10/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.4/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="y">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.10/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.9/@variable"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="BufferedImage.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.5/@variable"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValid">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pixel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether or not the pixel is valid.  &#xA;     * @param pixel the specified pixel value&#xA;     * @return &lt;code>true&lt;/code> if &lt;code>pixel&lt;/code>&#xA;     * is valid; &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </children>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </children>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../math/BigInteger.class.xmi#//@classifiers.0/@members.95"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
                  </next>
                </children>
              </expression>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isValid">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether or not all of the pixels are valid.&#xA;     * @return &lt;code>true&lt;/code> if all pixels are valid;&#xA;     * &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <children xsi:type="literals:NullLiteral"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValidPixels">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>BigInteger&lt;/code> that indicates the valid/invalid&#xA;     * pixels in the colormap.  A bit is valid if the &#xA;     * &lt;code>BigInteger&lt;/code> value at that index is set, and is invalid&#xA;     * if the &lt;code>BigInteger&lt;/code> value at that index is not set.&#xA;     * The only valid ranges to query in the &lt;code>BigInteger&lt;/code> are&#xA;     * between 0 and the map size.&#xA;     * @return a &lt;code>BigInteger&lt;/code> indicating the valid/invalid pixels.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="finalize">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Disposes of system resources associated with this&#xA;     * &lt;code>ColorModel&lt;/code> once this &lt;code>ColorModel&lt;/code> is no&#xA;     * longer referenced.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/awt/image/BufImgSurfaceData.class.xmi#//@classifiers.0/@members.39"/>
                  <arguments xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/awt/image/BufImgSurfaceData.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>String&lt;/code> representation of the contents of&#xA;     * this &lt;code>ColorModel&lt;/code>object.&#xA;     * @return a &lt;code>String&lt;/code> representing the contents of this&#xA;     * &lt;code>ColorModel&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="IndexColorModel: #pixelBits = "/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.1"/>
            </children>
            <children xsi:type="references:StringReference" value=" numComponents = "/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.6"/>
            </children>
            <children xsi:type="references:StringReference" value=" color space = "/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.8"/>
            </children>
            <children xsi:type="references:StringReference" value=" transparency = "/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.3"/>
            </children>
            <children xsi:type="references:StringReference" value=" transIndex   = "/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:StringReference" value=" has alpha = "/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.4"/>
            </children>
            <children xsi:type="references:StringReference" value=" isAlphaPre = "/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="ColorModel.class.xmi#//@classifiers.0/@members.5"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>IndexColorModel&lt;/code> class is a &lt;code>ColorModel&lt;/code>&#xA; * class that works with pixel values consisting of a&#xA; * single sample that is an index into a fixed colormap in the default&#xA; * sRGB color space.  The colormap specifies red, green, blue, and&#xA; * optional alpha components corresponding to each index.  All components&#xA; * are represented in the colormap as 8-bit unsigned integral values.&#xA; * Some constructors allow the caller to specify &quot;holes&quot; in the colormap&#xA; * by indicating which colormap entries are valid and which represent&#xA; * unusable colors via the bits set in a &lt;code>BigInteger&lt;/code> object.&#xA; * This color model is similar to an X11 PseudoColor visual.&#xA; * &lt;p>&#xA; * Some constructors provide a means to specify an alpha component&#xA; * for each pixel in the colormap, while others either provide no&#xA; * such means or, in some cases, a flag to indicate whether the&#xA; * colormap data contains alpha values.  If no alpha is supplied to&#xA; * the constructor, an opaque alpha component (alpha = 1.0) is&#xA; * assumed for each entry.&#xA; * An optional transparent pixel value can be supplied that indicates a&#xA; * pixel to be made completely transparent, regardless of any alpha&#xA; * component supplied or assumed for that pixel value.&#xA; * Note that the color components in the colormap of an&#xA; * &lt;code>IndexColorModel&lt;/code> objects are never pre-multiplied with&#xA; * the alpha components.&#xA; * &lt;p>&#xA; * &lt;a name=&quot;transparency&quot;>&#xA; * The transparency of an &lt;code>IndexColorModel&lt;/code> object is&#xA; * determined by examining the alpha components of the colors in the&#xA; * colormap and choosing the most specific value after considering&#xA; * the optional alpha values and any transparent index specified.&#xA; * The transparency value is &lt;code>Transparency.OPAQUE&lt;/code>&#xA; * only if all valid colors in&#xA; * the colormap are opaque and there is no valid transparent pixel.&#xA; * If all valid colors&#xA; * in the colormap are either completely opaque (alpha = 1.0) or&#xA; * completely transparent (alpha = 0.0), which typically occurs when&#xA; * a valid transparent pixel is specified,&#xA; * the value is &lt;code>Transparency.BITMASK&lt;/code>.&#xA; * Otherwise, the value is &lt;code>Transparency.TRANSLUCENT&lt;/code>, indicating&#xA; * that some valid color has an alpha component that is&#xA; * neither completely transparent nor completely opaque (0.0 &lt; alpha &lt; 1.0).&#xA; * &lt;/a>&#xA; *&#xA; * &lt;p>&#xA; * If an &lt;code>IndexColorModel&lt;/code> object has &#xA; * a transparency value of &lt;code>Transparency.OPAQUE&lt;/code>,&#xA; * then the &lt;code>hasAlpha&lt;/code> &#xA; * and &lt;code>getNumComponents&lt;/code> methods&#xA; * (both inherited from &lt;code>ColorModel&lt;/code>) &#xA; * return false and 3, respectively.&#xA; * For any other transparency value,&#xA; * &lt;code>hasAlpha&lt;/code> returns true&#xA; * and &lt;code>getNumComponents&lt;/code> returns 4.&#xA; *&#xA; * &lt;p>&#xA; * The index represented by a pixel value is stored in the least&#xA; * significant &lt;em>n&lt;/em> bits of the pixel representations passed to the&#xA; * methods of this class, where &lt;em>n&lt;/em> is the pixel size specified to the&#xA; * constructor for a particular &lt;code>IndexColorModel&lt;/code> object;&#xA; * &lt;em>n&lt;/em> must be between 1 and 16, inclusive.  &#xA; * Higher order bits in pixel representations are assumed to be zero.&#xA; * For those methods that use a primitive array pixel representation of&#xA; * type &lt;code>transferType&lt;/code>, the array length is always one.  &#xA; * The transfer types supported are &lt;code>DataBuffer.TYPE_BYTE&lt;/code> and &#xA; * &lt;code>DataBuffer.TYPE_USHORT&lt;/code>.  A single int pixel &#xA; * representation is valid for all objects of this class, since it is &#xA; * always possible to represent pixel values used with this class in a &#xA; * single int.  Therefore, methods that use this representation do &#xA; * not throw an &lt;code>IllegalArgumentException&lt;/code> due to an invalid &#xA; * pixel value.&#xA; * &lt;p>&#xA; * Many of the methods in this class are final.  The reason for&#xA; * this is that the underlying native graphics code makes assumptions&#xA; * about the layout and operation of this class and those assumptions&#xA; * are reflected in the implementations of the methods here that are&#xA; * marked final.  You can subclass this class for other reasons, but&#xA; * you cannot override or modify the behaviour of those methods.&#xA; *&#xA; * @see ColorModel&#xA; * @see ColorSpace&#xA; * @see DataBuffer&#xA; *&#xA; * @version 10 Feb 1997&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="ColorModel.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
