<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Pageable.java">
  <comments>/*&#xA; * @(#)Pageable.java&#x9;1.14 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>print</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Pageable">
    <members xsi:type="members:Field" name="UNKNOWN_NUMBER_OF_PAGES">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * This constant is returned from the &#xA;     * {@link #getNumberOfPages() getNumberOfPages}&#xA;     * method if a &lt;code>Pageable&lt;/code> implementation does not know&#xA;     * the number of pages in its set.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNumberOfPages">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the number of pages in the set.&#xA;     * To enable advanced printing features,&#xA;     * it is recommended that &lt;code>Pageable&lt;/code>&#xA;     * implementations return the true number of pages &#xA;     * rather than the&#xA;     * UNKNOWN_NUMBER_OF_PAGES constant.&#xA;     * @return the number of pages in this &lt;code>Pageable&lt;/code>.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPageFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the &lt;code>PageFormat&lt;/code> of the page specified by&#xA;     * &lt;code>pageIndex&lt;/code>.&#xA;     * @param pageIndex the zero based index of the page whose&#xA;     *            &lt;code>PageFormat&lt;/code> is being requested&#xA;     * @return the &lt;code>PageFormat&lt;/code> describing the size and&#xA;     *&#x9;&#x9;orientation.&#xA;     * @throws IndexOutOfBoundsException if&#xA;     *          the &lt;code>Pageable&lt;/code> does not contain the requested&#xA;     *&#x9;&#x9;page.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pageIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrintable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the &lt;code>Printable&lt;/code> instance responsible for&#xA;     * rendering the page specified by &lt;code>pageIndex&lt;/code>.&#xA;     * @param pageIndex the zero based index of the page whose&#xA;     *            &lt;code>Printable&lt;/code> is being requested&#xA;     * @return the &lt;code>Printable&lt;/code> that renders the page.&#xA;     * @throws IndexOutOfBoundsException if&#xA;     *            the &lt;code>Pageable&lt;/code> does not contain the requested&#xA;     *&#x9;&#x9;  page.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Printable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pageIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Pageable&lt;/code> implementation represents a set of&#xA; * pages to be printed. The &lt;code>Pageable&lt;/code> object returns&#xA; * the total number of pages in the set as well as the &#xA; * {@link PageFormat} and {@link Printable} for a specified page.&#xA; * @see java.awt.print.PageFormat&#xA; * @see java.awt.print.Printable&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
