<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="PrinterJob.java">
  <comments>/*&#xA; * @(#)PrinterJob.java&#x9;1.36 04/01/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>print</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../AWTError.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/print/DocFlavor.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/print/PrintService.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/print/PrintServiceLookup.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/print/StreamPrintServiceFactory.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>print</namespaces>
    <namespaces>attribute</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../javax/print/attribute/PrintRequestAttributeSet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>action</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/security/action/GetPropertyAction.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="PrinterJob">
    <members xsi:type="members:ClassMethod" name="getPrinterJob">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* Public Class Methods */</comments>
        <comments>/**&#xA;     * Creates and returns a &lt;code>PrinterJob&lt;/code> which is initially&#xA;     * associated with the default printer.&#xA;     * If no printers are available on the system, a PrinterJob will still&#xA;     * be returned from this method, but &lt;code>getPrintService()&lt;/code> &#xA;     * will return &lt;code>null&lt;/code>, and calling &#xA;     * {@link #print() print} with this &lt;code>PrinterJob&lt;/code> might &#xA;     * generate an exception.  Applications that need to determine if&#xA;     * there are suitable printers before creating a &lt;code>PrinterJob&lt;/code> &#xA;     * should ensure that the array returned from &#xA;     * {@link #lookupPrintServices() lookupPrintServices} is not empty.&#xA;     * @return a new &lt;code>PrinterJob&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="security">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/SecurityManager.class.xmi#//@classifiers.0/@members.46"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                  <arguments xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>java</namespaces>
                      <namespaces>security</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <anonymousClass>
                      <members xsi:type="members:ClassMethod" name="run">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <annotationsAndModifiers xsi:type="modifiers:Public"/>
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="nm">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <initialValue xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.26"/>
                                <arguments xsi:type="references:StringReference" value="java.awt.printerjob"/>
                                <arguments xsi:type="literals:NullLiteral"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:TryBlock">
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="expressions:CastExpression">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0"/>
                              </typeReference>
                              <child xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <next xsi:type="references:MethodCall">
                                    <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                                  </next>
                                  <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.32"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.2/@returnValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
                              </child>
                            </returnValue>
                          </statements>
                          <catcheBlocks>
                            <statements xsi:type="statements:Throw">
                              <throwable xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../AWTError.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:StringReference" value="PrinterJob not found: "/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.2/@returnValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </throwable>
                            </statements>
                            <parameter name="e">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                            </parameter>
                          </catcheBlocks>
                          <catcheBlocks>
                            <statements xsi:type="statements:Throw">
                              <throwable xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../AWTError.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:StringReference" value="Could not instantiate PrinterJob: "/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.2/@returnValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </throwable>
                            </statements>
                            <parameter name="e">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../lang/InstantiationException.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                            </parameter>
                          </catcheBlocks>
                          <catcheBlocks>
                            <statements xsi:type="statements:Throw">
                              <throwable xsi:type="instantiations:NewConstructorCall">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../AWTError.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:StringReference" value="Could not access PrinterJob: "/>
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@statements.2/@returnValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </throwable>
                            </statements>
                            <parameter name="e">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                            </parameter>
                          </catcheBlocks>
                        </statements>
                      </members>
                    </anonymousClass>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../security/AccessController.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="lookupPrintServices">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/print/PrintService.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A convenience method which looks up 2D print services.&#xA;     * Services returned from this method may be installed on&#xA;     * &lt;code>PrinterJob&lt;/code>s which support print services.&#xA;     * Calling this method is equivalent to calling&#xA;     * {@link javax.print.PrintServiceLookup#lookupPrintServices(&#xA;     * DocFlavor, AttributeSet) &#xA;     * &lt;code>PrintServiceLookup.lookupPrintServices()&lt;/code>}&#xA;     * and specifying a Pageable DocFlavor.&#xA;     * @return a possibly empty array of 2D print services.&#xA;     * @since     1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../javax/print/PrintServiceLookup.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../javax/print/DocFlavor$SERVICE_FORMATTED.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../javax/print/DocFlavor$SERVICE_FORMATTED.class.xmi#//@classifiers.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../javax/print/DocFlavor.class.xmi#//@classifiers.0"/>
            </arguments>
            <arguments xsi:type="literals:NullLiteral"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../javax/print/PrintServiceLookup.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="lookupStreamPrintServices">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/print/StreamPrintServiceFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mimeType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A convenience method which locates factories for stream print&#xA;     * services which can image 2D graphics.&#xA;     * Sample usage :&#xA;     * &lt;pre>&#xA;     * FileOutputStream outstream;&#xA;     * StreamPrintService psPrinter;&#xA;     * String psMimeType = &quot;application/postscript&quot;;&#xA;     *&#xA;     * StreamPrintServiceFactory[] factories =&#xA;     *     PrinterJob.lookupStreamPrintServices(psMimeType);&#xA;     * if (factories.length > 0) {&#xA;     *     try {&#xA;     *         outstream = new File(&quot;out.ps&quot;);&#xA;     *         psPrinter =  factories[0].getPrintService(fos);&#xA;     *         // psPrinter can now be set as the service on a PrinterJob &#xA;     *     } catch (FileNotFoundException e) {&#xA;     *     }&#xA;     * }            &#xA;     * &lt;/pre>&#xA;     * Services returned from this method may be installed on&#xA;     * &lt;code>PrinterJob&lt;/code> instances which support print services.&#xA;     * Calling this method is equivalent to calling&#xA;     * {@link javax.print.StreamPrintServiceFactory#lookupStreamPrintServiceFactories(DocFlavor, String)&#xA;     * &lt;code>StreamPrintServiceFactory.lookupStreamPrintServiceFactories()&#xA;     * &lt;/code>} and specifying a Pageable DocFlavor.&#xA;     * &#xA;     * @param mimeType the required output format, or null to mean any format.&#xA;     * @return a possibly empty array of 2D stream print service factories.&#xA;     * @since     1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../javax/print/StreamPrintServiceFactory.class.xmi#//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../../../javax/print/DocFlavor$SERVICE_FORMATTED.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../javax/print/DocFlavor$SERVICE_FORMATTED.class.xmi#//@classifiers.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../javax/print/DocFlavor.class.xmi#//@classifiers.0"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../javax/print/StreamPrintServiceFactory.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="PrinterJob">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/* Public Methods */</comments>
        <comments>/**&#xA;     * A &lt;code>PrinterJob&lt;/code> object should be created using the&#xA;     * static {@link #getPrinterJob() &lt;code>getPrinterJob&lt;/code>} method.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getPrintService">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../javax/print/PrintService.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the service (printer) for this printer job.&#xA;     * Implementations of this class which do not support print services&#xA;     * may return null;&#xA;     * @return the service for this printer job.&#xA;     * @see #setPrintService(PrintService)&#xA;     * @since     1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPrintService">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="service">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/print/PrintService.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PrinterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Associate this PrinterJob with a new PrintService.&#xA;     * This method is overridden by subclasses which support&#xA;     * specifying a Print Service.&#xA;     *&#xA;     * Throws &lt;code>PrinterException&lt;/code> if the specified service&#xA;     * cannot support the &lt;code>Pageable&lt;/code> and&#xA;     * &lt;code>Printable&lt;/code> interfaces necessary to support 2D printing.&#xA;     * @param service a print service that supports 2D printing&#xA;     * @exception PrinterException if the specified service does not support&#xA;     * 2D printing, or this PrinterJob class does not support&#xA;     * setting a 2D print service, or the specified service is&#xA;     * otherwise not a valid print service.&#xA;     * @see #getPrintService&#xA;     * @since     1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="PrinterException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:StringReference" value="Setting a service is not supported on this class"/>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPrintable">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="painter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Printable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calls &lt;code>painter&lt;/code> to render the pages.  The pages in the&#xA;     * document to be printed by this &#xA;     * &lt;code>PrinterJob&lt;/code> are rendered by the {@link Printable}&#xA;     * object, &lt;code>painter&lt;/code>.  The {@link PageFormat} for each page&#xA;     * is the default page format.&#xA;     * @param painter the &lt;code>Printable&lt;/code> that renders each page of&#xA;     * the document.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPrintable">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="painter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Printable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calls &lt;code>painter&lt;/code> to render the pages in the specified&#xA;     * &lt;code>format&lt;/code>.  The pages in the document to be printed by&#xA;     * this &lt;code>PrinterJob&lt;/code> are rendered by the&#xA;     * &lt;code>Printable&lt;/code> object, &lt;code>painter&lt;/code>. The&#xA;     * &lt;code>PageFormat&lt;/code> of each page is &lt;code>format&lt;/code>.&#xA;     * @param painter the &lt;code>Printable&lt;/code> called to render&#xA;     *&#x9;&#x9;each page of the document&#xA;     * @param format the size and orientation of each page to&#xA;     *                   be printed&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPageable">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="document">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Pageable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Queries &lt;code>document&lt;/code> for the number of pages and &#xA;     * the &lt;code>PageFormat&lt;/code> and &lt;code>Printable&lt;/code> for each&#xA;     * page held in the &lt;code>Pageable&lt;/code> instance,  &#xA;     * &lt;code>document&lt;/code>.&#xA;     * @param document the pages to be printed. It can not be&#xA;     * &lt;code>null&lt;/code>.&#xA;     * @exception NullPointerException the &lt;code>Pageable&lt;/code> passed in&#xA;     * was &lt;code>null&lt;/code>.&#xA;     * @see PageFormat&#xA;     * @see Printable&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="printDialog">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Presents a dialog to the user for changing the properties of&#xA;     * the print job.&#xA;     * This method will display a native dialog if a native print&#xA;     * service is selected, and user choice of printers will be restricted&#xA;     * to these native print services.&#xA;     * To present the cross platform print dialog for all services,&#xA;     * including native ones instead use&#xA;     * &lt;code>printDialog(PrintRequestAttributeSet)&lt;/code>.&#xA;     * &lt;p>&#xA;     * PrinterJob implementations which can use PrintService's will update&#xA;     * the PrintService for this PrinterJob to reflect the new service&#xA;     * selected by the user.&#xA;     * @return &lt;code>true&lt;/code> if the user does not cancel the dialog;&#xA;     * &lt;code>false&lt;/code> otherwise.&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     * returns true.&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="printDialog">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/print/attribute/PrintRequestAttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A convenience method which displays a cross-platform print dialog&#xA;     * for all services which are capable of printing 2D graphics using the&#xA;     * &lt;code>Pageable&lt;/code> interface. The selected printer when the&#xA;     * dialog is initially displayed will reflect the print service currently&#xA;     * attached to this print job.&#xA;     * If the user changes the print service, the PrinterJob will be&#xA;     * updated to reflect this, unless the user cancels the dialog.&#xA;     * As well as allowing the user to select the destination printer,&#xA;     * the user can also select values of various print request attributes.&#xA;     * &lt;p>&#xA;     * The attributes parameter on input will reflect the applications&#xA;     * required initial selections in the user dialog. Attributes not&#xA;     * specified display using the default for the service. On return it&#xA;     * will reflect the user's choices. Selections may be updated by&#xA;     * the implementation to be consistent with the supported values&#xA;     * for the currently selected print service.&#xA;     * &lt;p>&#xA;     * As the user scrolls to a new print service selection, the values&#xA;     * copied are based on the settings for the previous service, together&#xA;     * with any user changes. The values are not based on the original&#xA;     * settings supplied by the client.&#xA;     * &lt;p>&#xA;     * With the exception of selected printer, the PrinterJob state is&#xA;     * not updated to reflect the user's changes.&#xA;     * For the selections to affect a printer job, the attributes must&#xA;     * be specified in the call to the&#xA;     * &lt;code>print(PrintRequestAttributeSet)&lt;/code> method. If using&#xA;     * the Pageable interface, clients which intend to use media selected&#xA;     * by the user must create a PageFormat derived from the user's&#xA;     * selections.&#xA;     * If the user cancels the dialog, the attributes will not reflect&#xA;     * any changes made by the user.&#xA;     * @param attributes on input is application supplied attributes,&#xA;     * on output the contents are updated to reflect user choices.&#xA;     * This parameter may not be null.&#xA;     * @return &lt;code>true&lt;/code> if the user does not cancel the dialog;&#xA;     * &lt;code>false&lt;/code> otherwise.&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     * returns true.&#xA;     * @exception NullPointerException if &lt;code>attributes&lt;/code> parameter&#xA;     * is null.&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     * @since     1.4&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="attributes"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="pageDialog">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="page">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Displays a dialog that allows modification of a&#xA;     * &lt;code>PageFormat&lt;/code> instance.&#xA;     * The &lt;code>page&lt;/code> argument is used to initialize controls&#xA;     * in the page setup dialog.&#xA;     * If the user cancels the dialog then this method returns the&#xA;     * original &lt;code>page&lt;/code> object unmodified.&#xA;     * If the user okays the dialog then this method returns a new&#xA;     * &lt;code>PageFormat&lt;/code> object with the indicated changes.&#xA;     * In either case, the original &lt;code>page&lt;/code> object is&#xA;     * not modified.&#xA;     * @param page the default &lt;code>PageFormat&lt;/code> presented to the&#xA;     *&#x9;&#x9;&#x9;user for modification&#xA;     * @return    the original &lt;code>page&lt;/code> object if the dialog&#xA;     *            is cancelled; a new &lt;code>PageFormat&lt;/code> object&#xA;     *&#x9;&#x9;  containing the format indicated by the user if the&#xA;     *&#x9;&#x9;  dialog is acknowledged.&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     * returns true.&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     * @since     1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="pageDialog">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/print/attribute/PrintRequestAttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A convenience method which displays a cross-platform page setup dialog.&#xA;     * The choices available will reflect the print service currently&#xA;     * set on this PrinterJob.&#xA;     * &lt;p>&#xA;     * The attributes parameter on input will reflect the client's&#xA;     * required initial selections in the user dialog. Attributes which are&#xA;     * not specified display using the default for the service. On return it&#xA;     * will reflect the user's choices. Selections may be updated by&#xA;     * the implementation to be consistent with the supported values&#xA;     * for the currently selected print service.&#xA;     * &lt;p>&#xA;     * The return value will be a PageFormat equivalent to the&#xA;     * selections in the PrintRequestAttributeSet.&#xA;     * If the user cancels the dialog, the attributes will not reflect&#xA;     * any changes made by the user, and the return value will be null.&#xA;     * @param attributes on input is application supplied attributes,&#xA;     * on output the contents are updated to reflect user choices.&#xA;     * This parameter may not be null.&#xA;     * @return a page format if the user does not cancel the dialog;&#xA;     * &lt;code>null&lt;/code> otherwise.&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     * returns true.&#xA;     * @exception NullPointerException if &lt;code>attributes&lt;/code> parameter&#xA;     * is null.&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     * @since     1.4&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="attributes"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.14"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="defaultPage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="page">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Clones the &lt;code>PageFormat&lt;/code> argument and alters the&#xA;     * clone to describe a default page size and orientation.&#xA;     * @param page the &lt;code>PageFormat&lt;/code> to be cloned and altered&#xA;     * @return clone of &lt;code>page&lt;/code>, altered to describe a default&#xA;     *                      &lt;code>PageFormat&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="defaultPage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>PageFormat&lt;/code> instance and&#xA;     * sets it to a default size and orientation.&#xA;     * @return a &lt;code>PageFormat&lt;/code> set to a default size and&#xA;     *&#x9;&#x9;orientation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="validatePage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="page">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="PageFormat.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the clone of &lt;code>page&lt;/code> with its settings&#xA;     * adjusted to be compatible with the current printer of this&#xA;     * &lt;code>PrinterJob&lt;/code>.  For example, the returned &#xA;     * &lt;code>PageFormat&lt;/code> could have its imageable area &#xA;     * adjusted to fit within the physical area of the paper that&#xA;     * is used by the current printer.&#xA;     * @param page the &lt;code>PageFormat&lt;/code> that is cloned and &#xA;     *&#x9;&#x9;whose settings are changed to be compatible with&#xA;     *&#x9;&#x9;the current printer&#xA;     * @return a &lt;code>PageFormat&lt;/code> that is cloned from&#xA;     *&#x9;&#x9;&lt;code>page&lt;/code> and whose settings are changed &#xA;     *&#x9;&#x9;to conform with this &lt;code>PrinterJob&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PrinterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Prints a set of pages.&#xA;     * @exception PrinterException an error in the print system&#xA;     *            caused the job to be aborted.&#xA;     * @see Book&#xA;     * @see Pageable&#xA;     * @see Printable&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="print">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../javax/print/attribute/PrintRequestAttributeSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PrinterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Prints a set of pages using the settings in the attribute&#xA;     * set. The default implementation ignores the attribute set.&#xA;     * &lt;p>&#xA;     * Note that some attributes may be set directly on the PrinterJob&#xA;     * by equivalent method calls, (for example), copies:&#xA;     * &lt;code>setcopies(int)&lt;/code>, job name: &lt;code>setJobName(String)&lt;/code>&#xA;     * and specifying media size and orientation though the&#xA;     * &lt;code>PageFormat&lt;/code> object.&#xA;     * &lt;p>&#xA;     * If a supported attribute-value is specified in this attribute set,&#xA;     * it will take precedence over the API settings for this print()&#xA;     * operation only.&#xA;     * The following behaviour is specified for PageFormat:&#xA;     * If a client uses the Printable interface, then the&#xA;     * &lt;code>attributes&lt;/code> parameter to this method is examined&#xA;     * for attributes which specify media (by size), orientation, and&#xA;     * imageable area, and those are used to construct a new PageFormat&#xA;     * which is passed to the Printable object's print() method.&#xA;     * See {@link Printable} for an explanation of the required&#xA;     * behaviour of a Printable to ensure optimal printing via PrinterJob.&#xA;     * For clients of the Pageable interface, the PageFormat will always&#xA;     * be as supplied by that interface, on a per page basis.&#xA;     * &lt;p>&#xA;     * These behaviours allow an application to directly pass the&#xA;     * user settings returned from&#xA;     * &lt;code>printDialog(PrintRequestAttributeSet attributes&lt;/code> to&#xA;     * this print() method.&#xA;     * &lt;p>&#xA;     * &#xA;     * @param attributes a set of attributes for the job&#xA;     * @exception PrinterException an error in the print system&#xA;     *            caused the job to be aborted.&#xA;     * @see Book&#xA;     * @see Pageable&#xA;     * @see Printable&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCopies">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="copies">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the number of copies to be printed.&#xA;     * @param copies the number of copies to be printed&#xA;     * @see #getCopies&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCopies">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the number of copies to be printed.&#xA;     * @return the number of copies to be printed.&#xA;     * @see #setCopies&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUserName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the name of the printing user.&#xA;     * @return the name of the printing user&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setJobName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="jobName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the name of the document to be printed.&#xA;     * The document name can not be &lt;code>null&lt;/code>.&#xA;     * @param jobName the name of the document to be printed&#xA;     * @see #getJobName&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getJobName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the name of the document to be printed.&#xA;     * @return the name of the document to be printed.&#xA;     * @see #setJobName&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="cancel">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Cancels a print job that is in progress.  If &#xA;     * {@link #print() print} has been called but has not &#xA;     * returned then this method signals&#xA;     * that the job should be cancelled at the next&#xA;     * chance. If there is no print job in progress then&#xA;     * this call does nothing.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCancelled">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if a print job is &#xA;     * in progress, but is going to be cancelled&#xA;     * at the next opportunity; otherwise returns&#xA;     * &lt;code>false&lt;/code>.&#xA;     * @return &lt;code>true&lt;/code> if the job in progress&#xA;     * is going to be cancelled; &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>PrinterJob&lt;/code> class is the principal class that controls&#xA; * printing. An application calls methods in this class to set up a job,&#xA; * optionally to invoke a print dialog with the user, and then to print&#xA; * the pages of the job.&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
