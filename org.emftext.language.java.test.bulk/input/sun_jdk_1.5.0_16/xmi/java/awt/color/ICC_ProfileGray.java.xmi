<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ICC_ProfileGray.java">
  <comments>/*&#xA; * @(#)ICC_ProfileGray.java&#x9;1.21 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/**********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************&#xA; *** COPYRIGHT (c) Eastman Kodak Company, 1997                      ***&#xA; *** As  an unpublished  work pursuant to Title 17 of the United    ***&#xA; *** States Code.  All rights reserved.                             ***&#xA; **********************************************************************&#xA; **********************************************************************&#xA; **********************************************************************/</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>color</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="../image/LookupTable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>color</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/awt/color/ProfileDeferralInfo.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ICC_ProfileGray">
    <members xsi:type="members:Constructor" name="ICC_ProfileGray">
      <comments>/**&#xA;     * Constructs a new ICC_ProfileGray from a CMM ID.&#xA;     */</comments>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ID">
        <typeReference xsi:type="types:Long"/>
      </parameters>
    </members>
    <members xsi:type="members:Constructor" name="ICC_ProfileGray">
      <comments>/**&#xA;     * Constructs a new ICC_ProfileGray from a ProfileDeferralInfo object.&#xA;     */</comments>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pdi">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../sun/awt/color/ProfileDeferralInfo.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:ClassMethod" name="getMediaWhitePoint">
      <typeReference xsi:type="types:Float"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a float array of length 3 containing the X, Y, and Z&#xA;     * components of the mediaWhitePointTag in the ICC profile.&#xA;     * @return an array containing the components of the&#xA;     * mediaWhitePointTag in the ICC profile.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ICC_Profile.class.xmi#//@classifiers.0/@members.157"/>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getGamma">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a gamma value representing the tone reproduction&#xA;     * curve (TRC).  If the profile represents the TRC as a table rather&#xA;     * than a single gamma value, then an exception is thrown.  In this&#xA;     * case the actual table can be obtained via getTRC().  When&#xA;     * using a gamma value, the PCS Y component is computed as follows:&#xA;&lt;pre>&#xA;&#xA;&amp;nbsp;                         gamma&#xA;&amp;nbsp;        PCSY = deviceGray&#xA;&#xA;&lt;/pre>&#xA;     * @return the gamma value as a float.&#xA;     * @exception ProfileDataException if the profile does not specify&#xA;     *            the TRC as a single gamma value.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="theGamma">
          <typeReference xsi:type="types:Float"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ICC_Profile.class.xmi#//@classifiers.0/@members.159"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ICC_Profile.class.xmi#//@classifiers.0/@members.72"/>
                </next>
                <target xsi:type="classifiers:Class" href="ICC_Profile.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <self xsi:type="literals:Super"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTRC">
      <typeReference xsi:type="types:Short"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the TRC as an array of shorts.  If the profile has&#xA;     * specified the TRC as linear (gamma = 1.0) or as a simple gamma&#xA;     * value, this method throws an exception, and the getGamma() method&#xA;     * should be used to get the gamma value.  Otherwise the short array&#xA;     * returned here represents a lookup table where the input Gray value&#xA;     * is conceptually in the range [0.0, 1.0].  Value 0.0 maps&#xA;     * to array index 0 and value 1.0 maps to array index length-1.&#xA;     * Interpolation may be used to generate output values for&#xA;     * input values which do not map exactly to an index in the&#xA;     * array.  Output values also map linearly to the range [0.0, 1.0].&#xA;     * Value 0.0 is represented by an array value of 0x0000 and&#xA;     * value 1.0 by 0xFFFF, i.e. the values are really unsigned&#xA;     * short values, although they are returned in a short array.&#xA;     * @return a short array representing the TRC.&#xA;     * @exception ProfileDataException if the profile does not specify&#xA;     *            the TRC as a table.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="theTRC">
          <typeReference xsi:type="types:Short"/>
          <arrayDimensionsBefore/>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ICC_Profile.class.xmi#//@classifiers.0/@members.160"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="ICC_Profile.class.xmi#//@classifiers.0/@members.72"/>
                </next>
                <target xsi:type="classifiers:Class" href="ICC_Profile.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <self xsi:type="literals:Super"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@variable"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * A subclass of the ICC_Profile class which represents profiles&#xA; * which meet the following criteria: the color space type of the&#xA; * profile is TYPE_GRAY and the profile includes the grayTRCTag and&#xA; * mediaWhitePointTag tags.  Examples of this kind of profile are&#xA; * monochrome input profiles, monochrome display profiles, and&#xA; * monochrome output profiles.  The getInstance methods in the&#xA; * ICC_Profile class will&#xA; * return an ICC_ProfileGray object when the above conditions are&#xA; * met.  The advantage of this class is that it provides a lookup&#xA; * table that Java or native methods may be able to use directly to&#xA; * optimize color conversion in some cases.&#xA; * &lt;p>&#xA; * To transform from a GRAY device profile color space to the CIEXYZ Profile&#xA; * Connection Space, the device gray component is transformed by&#xA; * a lookup through the tone reproduction curve (TRC).  The result is&#xA; * treated as the achromatic component of the PCS.&#xA;&lt;pre>&#xA;&#xA;&amp;nbsp;               PCSY = grayTRC[deviceGray]&#xA;&#xA;&lt;/pre>&#xA; * The inverse transform is done by converting the PCS Y components to&#xA; * device Gray via the inverse of the grayTRC.&#xA; * &lt;p>&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="ICC_Profile.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
