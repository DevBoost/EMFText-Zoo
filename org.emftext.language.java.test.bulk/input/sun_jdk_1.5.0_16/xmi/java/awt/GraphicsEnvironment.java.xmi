<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="GraphicsEnvironment.java">
  <comments>/*&#xA; * @(#)GraphicsEnvironment.java&#x9;1.62 04/04/13&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="image/BufferedImage.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Hashtable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Locale.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>java2d</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/java2d/HeadlessGraphicsEnvironment.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>java2d</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/java2d/SunGraphicsEnvironment.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="GraphicsEnvironment">
    <members xsi:type="members:Field" name="localEnv">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="headless">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The headless state of the Toolkit and GraphicsEnvironment&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="defaultHeadless">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The headless state assumed by default&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="GraphicsEnvironment">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * This is an abstract class and cannot be instantiated directly.&#xA;     * Instances must be obtained from a suitable factory or query method.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getLocalGraphicsEnvironment">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the local &lt;code>GraphicsEnvironment&lt;/code>.&#xA;     * @return the local &lt;code>GraphicsEnvironment&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="nm">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <namespaces>sun</namespaces>
                            <namespaces>security</namespaces>
                            <namespaces>action</namespaces>
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../sun/security/action/GetPropertyAction.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:StringReference" value="java.awt.graphicsenv"/>
                          <arguments xsi:type="literals:NullLiteral"/>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
                    </next>
                  </next>
                </child>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <comments>// &#x9;&#x9;&#x9;long t0 = System.currentTimeMillis();</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                      </next>
                      <target xsi:type="members:ClassMethod" href="../lang/Class.class.xmi#//@classifiers.0/@members.32"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
                  </child>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// &#x9;&#x9;long t1 = System.currentTimeMillis();</comments>
              <comments>// &#x9;&#x9;System.out.println(&quot;GE creation took &quot; + (t1-t0)+ &quot;ms.&quot;);</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../sun/java2d/HeadlessGraphicsEnvironment.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.5"/>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/Error.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Could not find class: "/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.0/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/Error.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Could not instantiate Graphics Environment: "/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.0/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/InstantiationException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/Error.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:StringReference" value="Could not access Graphics Environment: "/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@statement/@statements.0/@variable"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </arguments>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isHeadless">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests whether or not a display, keyboard, and mouse can be&#xA;     * supported in this environment.  If this method returns true,&#xA;     * a HeadlessException is thrown from areas of the Toolkit&#xA;     * and GraphicsEnvironment that are dependent on a display,&#xA;     * keyboard, or mouse.&#xA;     * @return &lt;code>true&lt;/code> if this environment cannot support &#xA;     * a display, keyboard, and mouse; &lt;code>false&lt;/code> &#xA;     * otherwise&#xA;     * @see java.awt.HeadlessException&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getHeadlessMessage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * @return warning message if headless state is assumed by default;&#xA;     * null otherwise&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>// initialize the values </comments>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
            </children>
          </child>
          <expressionIf xsi:type="literals:NullLiteral"/>
          <expressionElse xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:StringReference" value="&#xA;No X11 DISPLAY variable was set, "/>
            <children xsi:type="references:StringReference" value="but this program performed an operation which requires it."/>
            <additiveOperators xsi:type="operators:Addition"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getHeadlessProperty">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * @return the value of the property &quot;java.awt.headless&quot;&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>java</namespaces>
                        <namespaces>security</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <anonymousClass>
                        <members xsi:type="members:ClassMethod" name="run">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <annotationsAndModifiers xsi:type="modifiers:Public"/>
                          <statements xsi:type="statements:LocalVariableStatement">
                            <variable name="nm">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                              <initialValue xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.25"/>
                                  <arguments xsi:type="references:StringReference" value="java.awt.headless"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
                              </initialValue>
                            </variable>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Block">
                              <statements xsi:type="statements:Condition">
                                <comments>/* No need to ask for DISPLAY when run in a browser */</comments>
                                <statement xsi:type="statements:Block">
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="expressions:AssignmentExpression">
                                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                      <assignmentOperator xsi:type="operators:Assignment"/>
                                      <value xsi:type="expressions:AssignmentExpression">
                                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                                        <assignmentOperator xsi:type="operators:Assignment"/>
                                        <value xsi:type="references:IdentifierReference">
                                          <next xsi:type="references:IdentifierReference">
                                            <target xsi:type="members:Field" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.1"/>
                                          </next>
                                          <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
                                        </value>
                                      </value>
                                    </expression>
                                  </statements>
                                </statement>
                                <condition xsi:type="expressions:EqualityExpression">
                                  <equalityOperators xsi:type="operators:NotEqual"/>
                                  <children xsi:type="references:IdentifierReference">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.25"/>
                                      <arguments xsi:type="references:StringReference" value="javaplugin.version"/>
                                    </next>
                                    <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
                                  </children>
                                  <children xsi:type="literals:NullLiteral"/>
                                </condition>
                                <elseStatement xsi:type="statements:Block">
                                  <statements xsi:type="statements:LocalVariableStatement">
                                    <variable name="osName">
                                      <typeReference xsi:type="types:NamespaceClassifierReference">
                                        <classifierReferences>
                                          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                                        </classifierReferences>
                                      </typeReference>
                                      <initialValue xsi:type="references:IdentifierReference">
                                        <next xsi:type="references:MethodCall">
                                          <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.25"/>
                                          <arguments xsi:type="references:StringReference" value="os.name"/>
                                        </next>
                                        <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
                                      </initialValue>
                                    </variable>
                                  </statements>
                                  <statements xsi:type="statements:ExpressionStatement">
                                    <expression xsi:type="expressions:AssignmentExpression">
                                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                      <assignmentOperator xsi:type="operators:Assignment"/>
                                      <value xsi:type="expressions:AssignmentExpression">
                                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                                        <assignmentOperator xsi:type="operators:Assignment"/>
                                        <value xsi:type="references:IdentifierReference">
                                          <next xsi:type="references:MethodCall">
                                            <target xsi:type="members:ClassMethod" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.9"/>
                                            <arguments xsi:type="expressions:ConditionalAndExpression">
                                              <children xsi:type="expressions:NestedExpression">
                                                <expression xsi:type="expressions:ConditionalOrExpression">
                                                  <children xsi:type="references:StringReference" value="Linux">
                                                    <next xsi:type="references:MethodCall">
                                                      <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                                                    </next>
                                                  </children>
                                                  <children xsi:type="references:StringReference" value="SunOS">
                                                    <next xsi:type="references:MethodCall">
                                                      <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.1/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                                                    </next>
                                                  </children>
                                                </expression>
                                              </children>
                                              <children xsi:type="expressions:NestedExpression">
                                                <expression xsi:type="expressions:EqualityExpression">
                                                  <equalityOperators xsi:type="operators:Equal"/>
                                                  <children xsi:type="references:IdentifierReference">
                                                    <next xsi:type="references:MethodCall">
                                                      <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.30"/>
                                                      <arguments xsi:type="references:StringReference" value="DISPLAY"/>
                                                    </next>
                                                    <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
                                                  </children>
                                                  <children xsi:type="literals:NullLiteral"/>
                                                </expression>
                                              </children>
                                            </arguments>
                                          </next>
                                          <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
                                        </value>
                                      </value>
                                    </expression>
                                  </statements>
                                </elseStatement>
                              </statements>
                            </statement>
                            <condition xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:Equal"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </condition>
                            <elseStatement xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.0"/>
                                      </next>
                                      <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
                                    </value>
                                  </expression>
                                </statements>
                              </statement>
                              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@expression/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                                  <arguments xsi:type="references:StringReference" value="true"/>
                                </next>
                              </condition>
                              <elseStatement xsi:type="statements:Block">
                                <statements xsi:type="statements:ExpressionStatement">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="references:IdentifierReference">
                                      <next xsi:type="references:IdentifierReference">
                                        <target xsi:type="members:Field" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.1"/>
                                      </next>
                                      <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
                                    </value>
                                  </expression>
                                </statements>
                              </elseStatement>
                            </elseStatement>
                          </statements>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="literals:NullLiteral"/>
                          </statements>
                        </members>
                      </anonymousClass>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
                </next>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.8"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkHeadless">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Check for headless state and throw HeadlessException if headless&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isHeadlessInstance">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether or not a display, keyboard, and mouse can be &#xA;     * supported in this graphics environment.  If this returns true,&#xA;     * &lt;code>HeadlessException&lt;/code> will be thrown from areas of the&#xA;     * graphics environment that are dependent on a display, keyboard, or&#xA;     * mouse.&#xA;     * @return &lt;code>true&lt;/code> if a display, keyboard, and mouse &#xA;     * can be supported in this environment; &lt;code>false&lt;/code>&#xA;     * otherwise&#xA;     * @see java.awt.HeadlessException&#xA;     * @see #isHeadless&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// By default (local graphics environment), simply check the</comments>
        <comments>// headless property.</comments>
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScreenDevices">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GraphicsDevice.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of all of the screen &lt;code>GraphicsDevice&lt;/code>&#xA;     * objects.&#xA;     * @return an array containing all the &lt;code>GraphicsDevice&lt;/code>&#xA;     * objects that represent screen devices&#xA;     * @exception HeadlessException if isHeadless() returns true&#xA;     * @see #isHeadless()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDefaultScreenDevice">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GraphicsDevice.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the default screen &lt;code>GraphicsDevice&lt;/code>.&#xA;     * @return the &lt;code>GraphicsDevice&lt;/code> that represents the&#xA;     * default screen device&#xA;     * @exception HeadlessException if isHeadless() returns true&#xA;     * @see #isHeadless()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createGraphics">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Graphics2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="img">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="image/BufferedImage.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>Graphics2D&lt;/code> object for rendering into the&#xA;     * specified {@link BufferedImage}.&#xA;     * @param img the specified &lt;code>BufferedImage&lt;/code>&#xA;     * @return a &lt;code>Graphics2D&lt;/code> to be used for rendering into&#xA;     * the specified &lt;code>BufferedImage&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAllFonts">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array containing a one-point size instance of all fonts&#xA;     * available in this &lt;code>GraphicsEnvironment&lt;/code>.  Typical usage&#xA;     * would be to allow a user to select a particular font.  Then, the&#xA;     * application can size the font and set various font attributes by&#xA;     * calling the &lt;code>deriveFont&lt;/code> method on the choosen instance.&#xA;     * &lt;p>&#xA;     * This method provides for the application the most precise control&#xA;     * over which &lt;code>Font&lt;/code> instance is used to render text.&#xA;     * If a font in this &lt;code>GraphicsEnvironment&lt;/code> has multiple&#xA;     * programmable variations, only one&#xA;     * instance of that &lt;code>Font&lt;/code> is returned in the array, and&#xA;     * other variations must be derived by the application.&#xA;     * &lt;p>&#xA;     * If a font in this environment has multiple programmable variations,&#xA;     * such as Multiple-Master fonts, only one instance of that font is&#xA;     * returned in the &lt;code>Font&lt;/code> array.  The other variations&#xA;     * must be derived by the application.&#xA;     *&#xA;     * @return an array of &lt;code>Font&lt;/code> objects&#xA;     * @see #getAvailableFontFamilyNames&#xA;     * @see java.awt.Font&#xA;     * @see java.awt.Font#deriveFont&#xA;     * @see java.awt.Font#getFontName&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAvailableFontFamilyNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array containing the names of all font families in this&#xA;     * &lt;code>GraphicsEnvironment&lt;/code> localized for the default locale,&#xA;     * as returned by &lt;code>Locale.getDefault()&lt;/code>.&#xA;     * &lt;p>&#xA;     * Typical usage would be for presentation to a user for selection of&#xA;     * a particular family name. An application can then specify this name&#xA;     * when creating a font, in conjunction with a style, such as bold or&#xA;     * italic, giving the font system flexibility in choosing its own best&#xA;     * match among multiple fonts in the same font family.&#xA;     *&#xA;     * @return an array of &lt;code>String&lt;/code> containing font family names&#xA;     * localized for the default locale, or a suitable alternative&#xA;     * name if no name exists for this locale.&#xA;     * @see #getAllFonts&#xA;     * @see java.awt.Font&#xA;     * @see java.awt.Font#getFamily&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAvailableFontFamilyNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array containing the names of all font families in this&#xA;     * &lt;code>GraphicsEnvironment&lt;/code> localized for the specified locale.&#xA;     * &lt;p>&#xA;     * Typical usage would be for presentation to a user for selection of&#xA;     * a particular family name. An application can then specify this name&#xA;     * when creating a font, in conjunction with a style, such as bold or&#xA;     * italic, giving the font system flexibility in choosing its own best&#xA;     * match among multiple fonts in the same font family.&#xA;     *&#xA;     * @param l a {@link Locale} object that represents a&#xA;     * particular geographical, political, or cultural region.&#xA;     * Specifying &lt;code>null&lt;/code> is equivalent to&#xA;     * specifying &lt;code>Locale.getDefault()&lt;/code>.&#xA;     * @return an array of &lt;code>String&lt;/code> containing font family names&#xA;     * localized for the specified &lt;code>Locale&lt;/code>, or a&#xA;     * suitable alternative name if no name exists for the specified locale.&#xA;     * @see #getAllFonts&#xA;     * @see java.awt.Font&#xA;     * @see java.awt.Font#getFamily&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="preferLocaleFonts">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates a preference for locale-specific fonts in the mapping of&#xA;     * logical fonts to physical fonts. Calling this method indicates that font&#xA;     * rendering should primarily use fonts specific to the primary writing&#xA;     * system (the one indicated by the default encoding and the initial&#xA;     * default locale). For example, if the primary writing system is&#xA;     * Japanese, then characters should be rendered using a Japanese font&#xA;     * if possible, and other fonts should only be used for characters for&#xA;     * which the Japanese font doesn't have glyphs.&#xA;     * &lt;p>&#xA;     * The actual change in font rendering behavior resulting from a call&#xA;     * to this method is implementation dependent; it may have no effect at&#xA;     * all, or the requested behavior may already match the default behavior.&#xA;     * The behavior may differ between font rendering in lightweight&#xA;     * and peered components.  Since calling this method requests a&#xA;     * different font, clients should expect different metrics, and may need&#xA;     * to recalculate window sizes and layout. Therefore this method should&#xA;     * be called before user interface initialisation.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/font/FontManager.class.xmi#//@classifiers.0/@members.100"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/font/FontManager.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="preferProportionalFonts">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates a preference for proportional over non-proportional (e.g.&#xA;     * dual-spaced CJK fonts) fonts in the mapping of logical fonts to&#xA;     * physical fonts. If the default mapping contains fonts for which&#xA;     * proportional and non-proportional variants exist, then calling&#xA;     * this method indicates the mapping should use a proportional variant.&#xA;     * &lt;p>&#xA;     * The actual change in font rendering behavior resulting from a call to&#xA;     * this method is implementation dependent; it may have no effect at all.&#xA;     * The behavior may differ between font rendering in lightweight and&#xA;     * peered components. Since calling this method requests a&#xA;     * different font, clients should expect different metrics, and may need&#xA;     * to recalculate window sizes and layout. Therefore this method should&#xA;     * be called before user interface initialisation.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/font/FontManager.class.xmi#//@classifiers.0/@members.101"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../sun/font/FontManager.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCenterPoint">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Point where Windows should be centered.&#xA;     * It is recommended that centered Windows be checked to ensure they fit&#xA;     * within the available display area using getMaximumWindowBounds().&#xA;     * @return the point where Windows should be centered&#xA;     *&#xA;     * @exception HeadlessException if isHeadless() returns true&#xA;     * @see #getMaximumWindowBounds&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="usableBounds">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// Default implementation: return the center of the usable bounds of the</comments>
              <comments>// default screen device.</comments>
              <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../sun/java2d/SunGraphicsEnvironment.class.xmi#//@classifiers.0/@members.55"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.11"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../sun/java2d/SunGraphicsEnvironment.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
          <arguments xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:MultiplicativeExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                <multiplicativeOperators xsi:type="operators:Division"/>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaximumWindowBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the maximum bounds for centered Windows.&#xA;     * These bounds account for objects in the native windowing system such as&#xA;     * task bars and menu bars.  The returned bounds will reside on a single&#xA;     * display with one exception: on multi-screen systems where Windows should&#xA;     * be centered across all displays, this method returns the bounds of the&#xA;     * entire display area.&#xA;     * &lt;p>&#xA;     * To get the usable bounds of a single display, use &#xA;     * &lt;code>GraphicsConfiguration.getBounds()&lt;/code> and&#xA;     * &lt;code>Toolkit.getScreenInsets()&lt;/code>.&#xA;     * @return  the maximum bounds for centered Windows&#xA;     *&#xA;     * @exception HeadlessException if isHeadless() returns true&#xA;     * @see #getCenterPoint&#xA;     * @see GraphicsConfiguration#getBounds&#xA;     * @see Toolkit#getScreenInsets&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// Default implementation: return the usable bounds of the default screen</comments>
        <comments>// device.  This is correct for Microsoft Windows and non-Xinerama X11.</comments>
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../sun/java2d/SunGraphicsEnvironment.class.xmi#//@classifiers.0/@members.55"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.11"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../sun/java2d/SunGraphicsEnvironment.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *&#xA; * The &lt;code>GraphicsEnvironment&lt;/code> class describes the collection&#xA; * of {@link GraphicsDevice} objects and {@link java.awt.Font} objects&#xA; * available to a Java(tm) application on a particular platform.&#xA; * The resources in this &lt;code>GraphicsEnvironment&lt;/code> might be local&#xA; * or on a remote machine.  &lt;code>GraphicsDevice&lt;/code> objects can be&#xA; * screens, printers or image buffers and are the destination of&#xA; * {@link Graphics2D} drawing methods.  Each &lt;code>GraphicsDevice&lt;/code>&#xA; * has a number of {@link GraphicsConfiguration} objects associated with&#xA; * it.  These objects specify the different configurations in which the&#xA; * &lt;code>GraphicsDevice&lt;/code> can be used.  &#xA; * @see GraphicsDevice&#xA; * @see GraphicsConfiguration&#xA; * @version &#x9;1.62, 04/13/04&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
