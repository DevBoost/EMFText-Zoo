<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Line2D.java">
  <comments>/*&#xA; * @(#)Line2D.java&#x9;1.28 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>geom</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Shape.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Line2D">
    <members xsi:type="classifiers:Class" name="Float">
      <members xsi:type="members:Field" name="x1">
        <typeReference xsi:type="types:Float"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The X coordinate of the start point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="y1">
        <typeReference xsi:type="types:Float"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The Y coordinate of the start point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="x2">
        <typeReference xsi:type="types:Float"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The X coordinate of the end point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="y2">
        <typeReference xsi:type="types:Float"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The Y coordinate of the end point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Float">
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Constructs and initializes a Line with coordinates (0, 0) -> (0, 0).&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Float">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.0/@members.14">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.5/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.5/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.5/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.5/@parameters.3"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Constructs and initializes a Line from the specified coordinates.&#xA;&#x9; * @param X1,&amp;nbsp;Y1 the first specified coordinates&#xA;&#x9; * @param X2,&amp;nbsp;Y2 the second specified coordinates&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Float">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.6/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.6/@parameters.1"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p1">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p2">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Constructs and initializes a &lt;code>Line2D&lt;/code> from the&#xA;&#x9; * specified {@link Point2D} objects.&#xA;&#x9; * @param p1 the first specified &lt;code>Point2D&lt;/code>&#xA;&#x9; * @param p2 the second specified &lt;code>Point2D&lt;/code>&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getX1">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the X coordinate of the start point in double precision.&#xA;&#x9; * @return the x coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; * &#x9;starting point in double precision. &#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getY1">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the Y coordinate of the start point in double precision.&#xA;         * @return the x coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; *&#x9;starting point in double precision.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getP1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the start point.&#xA;&#x9; * @return the starting &lt;code>Point2D&lt;/code> object of this&#xA;&#x9; * &#x9;&lt;code>Line2D&lt;/code>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Point2D</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Point2D$Float.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getX2">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the X coordinate of the end point in double precision.&#xA;         * @return the x coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; * &#x9;ending point in double precision.&#x9;&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getY2">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the Y coordinate of the end point in double precision.&#xA;         * @return the Y coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; *&#x9;ending point in double precision.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getP2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the end point.&#xA;         * @return the ending &lt;code>Point2D&lt;/code> object of this&#xA;         *      &lt;code>Line2D&lt;/code>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Point2D</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Point2D$Float.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setLine">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Sets the location of the endpoints of this &lt;code>Line2D&lt;/code> &#xA;&#x9; * to the specified double coordinates.&#xA;&#x9; * @param X1,&amp;nbsp;Y1 the first specified coordinate&#xA;&#x9; * @param X2,&amp;nbsp;Y2 the second specified coordinate&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Float"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.13/@parameters.0"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Float"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.13/@parameters.1"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Float"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.13/@parameters.2"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Float"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.13/@parameters.3"/>
            </value>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setLine">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Sets the location of the endpoints of this &lt;code>Line2D&lt;/code> &#xA;&#x9; * to the specified float coordinates.&#xA;&#x9; * @param X1,&amp;nbsp;Y1 the first specified coordinate&#xA;&#x9; * @param X2,&amp;nbsp;Y2 the second specified coordinate&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.14/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.14/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.14/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.14/@parameters.3"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getBounds2D">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Rectangle2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the high-precision bounding box of this&#xA;&#x9; * &lt;code>Line2D&lt;/code>.&#xA;&#x9; * @return a {@link Rectangle2D} that is the high-precision&#xA;&#x9; * &#x9;bounding box of this &lt;code>Line2D&lt;/code>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="x">
            <typeReference xsi:type="types:Float"/>
            <additionalLocalVariables name="y"/>
            <additionalLocalVariables name="w"/>
            <additionalLocalVariables name="h"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.2"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.3"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Rectangle2D</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Rectangle2D$Float.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@members.15/@statements.0/@variable/@additionalLocalVariables.2"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A line segment specified with float coordinates.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="Double">
      <members xsi:type="members:Field" name="x1">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The X coordinate of the start point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="y1">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The Y coordinate of the start point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="x2">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The X coordinate of the end point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="y2">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * The Y coordinate of the end point of the line segment.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Double">
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Constructs and initializes a Line with coordinates (0, 0) -> (0, 0).&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Double">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.1/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.5/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.5/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.5/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.5/@parameters.3"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Constructs and initializes a &lt;code>Line2D&lt;/code> from the&#xA;         * specified coordinates.&#xA;&#x9; * @param X1,&amp;nbsp;Y1 the first specified coordinate&#xA;&#x9; * @param X2,&amp;nbsp;Y2 the second specified coordinate&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Constructor" name="Double">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.6/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.6/@parameters.1"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p1">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p2">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Constructs and initializes a &lt;code>Line2D&lt;/code> from the&#xA;&#x9; * specified &lt;code>Point2D&lt;/code> objects.&#xA;&#x9; * @param p1,&amp;nbsp;p2 the specified &lt;code>Point2D&lt;/code> objects&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getX1">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the X coordinate of the start point in double precision.&#xA;         * @return the X coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; * &#x9;starting point.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getY1">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the Y coordinate of the start point in double precision.&#xA;         * @return the X coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; *&#x9;starting point.&#x9;&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getP1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the starting &lt;code>Point2D&lt;/code> of this&#xA;&#x9; * &lt;code>Line2D&lt;/code>.&#xA;&#x9; * @return the starting &lt;code>Point2D&lt;/code> of this&#xA;&#x9; * &#x9;&lt;code>Line2D&lt;/code>&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Point2D</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Point2D$Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getX2">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the X coordinate of the end point in double precision.&#xA;         * @return the X coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; * &#x9;ending point.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getY2">
        <typeReference xsi:type="types:Double"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the Y coordinate of the end point in double precision.&#xA;         * @return the Y coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;&#x9; * &#x9;starting point.&#x9;&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.3"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getP2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the end &lt;code>Point2D&lt;/code> of this&#xA;&#x9; * &lt;code>Line2D&lt;/code>.&#xA;&#x9; * @return the ending &lt;code>Point2D&lt;/code> of this &#xA;&#x9; * &#x9;&lt;code>Line2D&lt;/code>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Point2D</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Point2D$Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.3"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setLine">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Sets the location of the endpoints of this &lt;code>Line2D&lt;/code> &#xA;&#x9; * to the specified double coordinates.&#xA;&#x9; * @param X1,&amp;nbsp;Y1 the first specified coordinate&#xA;&#x9; * @param X2,&amp;nbsp;Y2 the second specified coordinate&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.13/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.13/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.13/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.13/@parameters.3"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getBounds2D">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Rectangle2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the high-precision bounding box of this&#xA;&#x9; * &lt;code>Line2D&lt;/code>.&#xA;&#x9; * @return a &lt;code>Rectangle2D&lt;/code> that is the high-precision&#xA;&#x9; * &#x9;bounding box of this &lt;code>Line2D&lt;/code>.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="x">
            <typeReference xsi:type="types:Double"/>
            <additionalLocalVariables name="y"/>
            <additionalLocalVariables name="w"/>
            <additionalLocalVariables name="h"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.2"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.3"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.3"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.3"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.3"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Rectangle2D</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Rectangle2D$Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@members.14/@statements.0/@variable/@additionalLocalVariables.2"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A line segment specified with double coordinates.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </extends>
    </members>
    <members xsi:type="members:Constructor" name="Line2D">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * This is an abstract class that cannot be instantiated directly.&#xA;     * Type-specific implementation subclasses are available for&#xA;     * instantiation and provide a number of formats for storing&#xA;     * the information necessary to satisfy the various accessory&#xA;     * methods below.&#xA;     *&#xA;     * @see java.awt.geom.Line2D.Float&#xA;     * @see java.awt.geom.Line2D.Double&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getX1">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the X coordinate of the start point in double precision.&#xA;     * @return the X coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;     *&#x9;    starting point.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getY1">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Y coordinate of the start point in double precision.&#xA;     * @return the Y coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;     *&#x9;    starting point. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getP1">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the starting &lt;code>Point2D&lt;/code> of this&#xA;     * &lt;code>Line2D&lt;/code>.&#xA;     * @return the starting &lt;code>Point2D&lt;/code> of this&#xA;     *&#x9;&#x9;&lt;code>Line2D&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getX2">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the X coordinate of the end point in double precision.&#xA;     * @return the X coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;     *&#x9;    starting point.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getY2">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the Y coordinate of the end point in double precision.&#xA;     * @return the Y coordinate of this &lt;code>Line2D&lt;/code> object's &#xA;     *      starting point.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getP2">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the end &lt;code>Point2D&lt;/code> of this &lt;code>Line2D&lt;/code>.&#xA;     * @return a &lt;code>Point2D&lt;/code> that is the endpoint of this&#xA;     * &#x9;&#x9;&lt;code>Line2D&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLine">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the location of the endpoints of this &lt;code>Line2D&lt;/code> to&#xA;     * the specified double coordinates.&#xA;     * @param X1,&amp;nbsp;Y1 the first specified coordinate&#xA;     * @param X2,&amp;nbsp;Y2 the second specified coordinate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setLine">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the location of the endpoints of this &lt;code>Line2D&lt;/code> to&#xA;     * the specified &lt;code>Point2D&lt;/code> coordinates.&#xA;     * @param p1,&amp;nbsp;p2 the specified &lt;code>Point2D&lt;/code> objects&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setLine">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the location of the endpoints of this &lt;code>Line2D&lt;/code> to&#xA;     * the same as those endpoints of the specified &lt;code>Line2D&lt;/code>.&#xA;     * @param l the specified &lt;code>Line2D&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="relativeCCW">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an indicator of where the specified point &#xA;     * (PX,&amp;nbsp;PY) lies with respect to the line segment from &#xA;     * (X1,&amp;nbsp;Y1) to (X2,&amp;nbsp;Y2).&#xA;     * The return value can be either 1, -1, or 0 and indicates&#xA;     * in which direction the specified line must pivot around its&#xA;     * first endpoint, (X1,&amp;nbsp;Y1), in order to point at the&#xA;     * specified point (PX,&amp;nbsp;PY).&#xA;     * &lt;p>A return value of 1 indicates that the line segment must&#xA;     * turn in the direction that takes the positive X axis towards&#xA;     * the negative Y axis.  In the default coordinate system used by&#xA;     * Java 2D, this direction is counterclockwise.  &#xA;     * &lt;p>A return value of -1 indicates that the line segment must&#xA;     * turn in the direction that takes the positive X axis towards&#xA;     * the positive Y axis.  In the default coordinate system, this &#xA;     * direction is clockwise.&#xA;     * &lt;p>A return value of 0 indicates that the point lies&#xA;     * exactly on the line segment.  Note that an indicator value &#xA;     * of 0 is rare and not useful for determining colinearity &#xA;     * because of floating point rounding issues. &#xA;     * &lt;p>If the point is colinear with the line segment, but &#xA;     * not between the endpoints, then the value will be -1 if the point&#xA;     * lies &quot;beyond (X1,&amp;nbsp;Y1)&quot; or 1 if the point lies &#xA;     * &quot;beyond (X2,&amp;nbsp;Y2)&quot;.&#xA;     * @param X1,&amp;nbsp;Y1 the coordinates of the beginning of the&#xA;     *&#x9;&#x9;specified line segment&#xA;     * @param X2,&amp;nbsp;Y2 the coordinates of the end of the specified&#xA;     *&#x9;&#x9;line segment&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point to be&#xA;     * &#x9;&#x9;compared with the specified line segment&#xA;     * @return an integer that indicates the position of the third specified&#xA;     *&#x9;&#x9;&#x9;coordinates with respect to the line segment formed&#xA;     *&#x9;&#x9;&#x9;by the first two specified coordinates.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.4"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.5"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="ccw">
          <typeReference xsi:type="types:Double"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.4"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable">
                <comments>// The point is colinear, classify based on which side of</comments>
                <comments>// the segment the point falls on.  We can calculate a</comments>
                <comments>// relative value using the projection of PX,PY onto the</comments>
                <comments>// segment - a negative value indicates the point projects</comments>
                <comments>// outside of the segment in the direction of the particular</comments>
                <comments>// endpoint used as the origin for the projection.</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.4"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.4">
                    <comments>// Reverse the projection to be relative to the original X2,Y2</comments>
                    <comments>// X2 and Y2 are simply negated.</comments>
                    <comments>// PX and PY need to have (X2 - X1) or (Y2 - Y1) subtracted</comments>
                    <comments>//    from them (based on the original values)</comments>
                    <comments>// Since we really want to get a positive answer when the</comments>
                    <comments>//    point is &quot;beyond (X2,Y2)&quot;, then we want to calculate</comments>
                    <comments>//    the inverse anyway - thus we leave X2 &amp; Y2 negated.</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.5"/>
                  <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.4"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
                      <multiplicativeOperators xsi:type="operators:Multiplication"/>
                    </children>
                    <children xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.5"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.3"/>
                      <multiplicativeOperators xsi:type="operators:Multiplication"/>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:DecimalDoubleLiteral"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable"/>
                  <children xsi:type="literals:DecimalDoubleLiteral"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable"/>
              <children xsi:type="literals:DecimalDoubleLiteral"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable"/>
          <children xsi:type="literals:DecimalDoubleLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable"/>
              <children xsi:type="literals:DecimalDoubleLiteral"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </expression>
          </child>
          <expressionIf xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </expressionIf>
          <expressionElse xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.4/@variable"/>
                  <children xsi:type="literals:DecimalDoubleLiteral"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </expression>
              </child>
              <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="relativeCCW">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an indicator of where the specified point &#xA;     * (PX,&amp;nbsp;PY) lies with respect to this line segment.&#xA;     * See the method comments of &#xA;     * {@link #relativeCCW(double, double, double, double, double, double)}&#xA;     * to interpret the return value.&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point&#xA;     *&#x9;&#x9;&#x9;to be compared with the current line segment&#xA;     * @return an integer that indicates the position of the specified&#xA;     *&#x9;&#x9;&#x9;coordinates with respect to the current line segment.&#xA;     * @see #relativeCCW(double, double, double, double, double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="relativeCCW">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an indicator of where the specified &lt;code>Point2D&lt;/code>&#xA;     * lies with respect to this line segment.&#xA;     * See the method comments of&#xA;     * {@link #relativeCCW(double, double, double, double, double, double)}&#xA;     * to interpret the return value.&#xA;     * @param p the specified &lt;code>Point2D&lt;/code> to be compared &#xA;     *&#x9;&#x9;&#x9;with the current line segment&#xA;     * @return an integer that indicates the position of the &#xA;     *&#x9;&#x9;&#x9;&lt;code>Point2D&lt;/code> with respect to the current &#xA;     *&#x9;&#x9;&#x9;line segment.&#xA;     * @see #relativeCCW(double, double, double, double, double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="linesIntersect">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X3">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y3">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X4">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y4">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the line segment from (X1,&amp;nbsp;Y1) to &#xA;     * (X2,&amp;nbsp;Y2) intersects the line segment from (X3,&amp;nbsp;Y3) &#xA;     * to (X4,&amp;nbsp;Y4).&#xA;     * @param X1,&amp;nbsp;Y1 the coordinates of the beginning of the first &#xA;     *&#x9;&#x9;&#x9;specified line segment&#xA;     * @param X2,&amp;nbsp;Y2 the coordinates of the end of the first &#xA;     *&#x9;&#x9;&#x9;specified line segment&#xA;     * @param X3,&amp;nbsp;Y3 the coordinates of the beginning of the second&#xA;     *&#x9;&#x9;&#x9; specified line segment&#xA;     * @param X4,&amp;nbsp;Y4 the coordinates of the end of the second &#xA;     *&#x9;&#x9;&#x9;specified line segment&#xA;     * @return &lt;code>true&lt;/code> if the first specified line segment &#xA;     *&#x9;&#x9;&#x9;and the second specified line segment intersect  &#xA;     *&#x9;&#x9;&#x9;each other; &lt;code>false&lt;/code> otherwise.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.5"/>
                  </children>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.7"/>
                  </children>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.5"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.7"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
                  </children>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.5"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.7"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
                  </children>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </expression>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intersectsLine">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the line segment from (X1,&amp;nbsp;Y1) to &#xA;     * (X2,&amp;nbsp;Y2) intersects this line segment.&#xA;     * @param X1,&amp;nbsp;Y1 the coordinates of the beginning of the &#xA;     *&#x9;&#x9;&#x9;specified line segment&#xA;     * @param X2,&amp;nbsp;Y2 the coordinates of the end of the specified&#xA;     *&#x9;&#x9;&#x9;line segment&#x9;&#x9;&#x9;&#xA;     * @return &lt;true> if this line segment and the specified line segment&#xA;     *&#x9;&#x9;&#x9;intersect each other; &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intersectsLine">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the specified line segment intersects this line segment.&#xA;     * @param l the specified &lt;code>Line2D&lt;/code>&#xA;     * @return &lt;code>true&lt;/code> if this line segment and the specified line&#xA;     *&#x9;&#x9;&#x9;segment intersect each other; &#xA;     *&#x9;&#x9;&#x9;&lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          </arguments>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptSegDistSq">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the square of the distance from a point to a line segment.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point between the specified endpoints.  &#xA;     * If the specified point intersects the line segment in between the&#xA;     * endpoints, this method returns 0.0.     &#xA;     * @param X1,&amp;nbsp;Y1 the coordinates of the beginning of the &#xA;     *&#x9;&#x9;&#x9;specified line segment&#xA;     * @param X2,&amp;nbsp;Y2 the coordinates of the end of the specified &#xA;     *&#x9;&#x9;line segment&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point being&#xA;     *&#x9;&#x9;measured against the specified line segment&#xA;     * @return a double value that is the square of the distance from the&#xA;     *&#x9;&#x9;&#x9;specified point to the specified line segment.&#xA;     * @see #ptLineDistSq(double, double, double, double, double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2">
            <comments>// Adjust vectors relative to X1,Y1</comments>
            <comments>// X2,Y2 becomes relative vector from X1,Y1 to end of segment</comments>
          </child>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4">
            <comments>// PX,PY becomes relative vector from X1,Y1 to test point</comments>
          </child>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.5"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dotprod">
          <typeReference xsi:type="types:Double"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="projlenSq">
          <typeReference xsi:type="types:Double"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@variable">
                <comments>// PX,PY is on the side of X1,Y1 away from X2,Y2</comments>
                <comments>// distance to segment is length of PX,PY vector</comments>
                <comments>// &quot;length of its (clipped) projection&quot; is now 0.0</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalDoubleLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
          <children xsi:type="literals:DecimalDoubleLiteral"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4">
                <comments>// switch to backwards vectors relative to X2,Y2</comments>
                <comments>// X2,Y2 are already the negative of X1,Y1=>X2,Y2</comments>
                <comments>// to get PX,PY to be the negative of PX,PY=>X2,Y2</comments>
                <comments>// the dot product of two negated vectors is the same</comments>
                <comments>// as the dot product of the two normal vectors</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.5"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.5"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@variable">
                    <comments>// PX,PY is on the side of X2,Y2 away from X1,Y1</comments>
                    <comments>// distance to segment is length of (backwards) PX,PY vector</comments>
                    <comments>// &quot;length of its (clipped) projection&quot; is now 0.0</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalDoubleLiteral"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
              <children xsi:type="literals:DecimalDoubleLiteral"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@variable">
                    <comments>// PX,PY is between X1,Y1 and X2,Y2</comments>
                    <comments>// dotprod is the length of the PX,PY vector</comments>
                    <comments>// projected on the X2,Y2=>X1,Y1 vector times the</comments>
                    <comments>// length of the X2,Y2=>X1,Y1 vector</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.4/@variable"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2"/>
                          <multiplicativeOperators xsi:type="operators:Multiplication"/>
                        </children>
                        <children xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
                          <multiplicativeOperators xsi:type="operators:Multiplication"/>
                        </children>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </expression>
                    </children>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                    <multiplicativeOperators xsi:type="operators:Division"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lenSq">
          <typeReference xsi:type="types:Double">
            <comments>// Distance to line is now the length of the relative point</comments>
            <comments>// vector minus the length of its projection onto the line</comments>
            <comments>// (which is zero if the projection falls outside the range</comments>
            <comments>//  of the line segment).</comments>
          </typeReference>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.5"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.5/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.7/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.7/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.7/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptSegDist">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the distance from a point to a line segment.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point between the specified endpoints.  &#xA;     * If the specified point intersects the line segment in between the&#xA;     * endpoints, this method returns 0.0.&#xA;     * @param X1,&amp;nbsp;Y1 the coordinates of the beginning of the&#xA;     *&#x9;&#x9;specified line segment&#xA;     * @param X2,&amp;nbsp;Y2 the coordinates of the end of the specified line&#xA;     * &#x9;&#x9;segment&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point being&#xA;     *&#x9;&#x9;measured against the specified line segment&#xA;     * @return a double value that is the distance from the specified point&#xA;     *&#x9;&#x9;&#x9;&#x9;to the specified line segment.&#xA;     * @see #ptLineDist(double, double, double, double, double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.17"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.3"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.5"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptSegDistSq">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the square of the distance from a point to this line segment.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point between the current line's endpoints.  &#xA;     * If the specified point intersects the line segment in between the&#xA;     * endpoints, this method returns 0.0.&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point being&#xA;     * &#x9;&#x9;measured against this line segment&#xA;     * @return a double value that is the square of the distance from the&#xA;     *&#x9;&#x9;&#x9;specified point to the current line segment.&#xA;     * @see #ptLineDistSq(double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptSegDistSq">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the square of the distance from a &lt;code>Point2D&lt;/code> to &#xA;     * this line segment.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point between the current line's endpoints.  &#xA;     * If the specified point intersects the line segment in between the&#xA;     * endpoints, this method returns 0.0.&#xA;     * @param pt the specified &lt;code>Point2D&lt;/code> being measured against&#xA;     *&#x9;         this line segment.&#xA;     * @return a double value that is the square of the distance from the&#xA;     *&#x9;&#x9;&#x9;specified &lt;code>Point2D&lt;/code> to the current &#xA;     *&#x9;&#x9;&#x9;line segment.&#xA;     * @see #ptLineDistSq(Point2D)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptSegDist">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the distance from a point to this line segment.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point between the current line's endpoints.  &#xA;     * If the specified point intersects the line segment in between the&#xA;     * endpoints, this method returns 0.0.&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point&#xA;     *&#x9;&#x9;&#x9;  being measured against this line segment&#xA;     * @return a double value that is the distance from the specified &#xA;     *&#x9;&#x9;&#x9;point to the current line segment.&#xA;     * @see #ptLineDist(double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptSegDist">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the distance from a &lt;code>Point2D&lt;/code> to this line&#xA;     * segment.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point between the current line's endpoints.  &#xA;     * If the specified point intersects the line segment in between the&#xA;     * endpoints, this method returns 0.0.&#xA;     * @param pt the specified &lt;code>Point2D&lt;/code> being measured&#xA;     *&#x9;&#x9;against this line segment&#xA;     * @return a double value that is the distance from the specified&#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>Point2D&lt;/code> to the current line&#xA;     *&#x9;&#x9;&#x9;&#x9;segment.&#xA;     * @see #ptLineDist(Point2D)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptLineDistSq">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the square of the distance from a point to a line.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point on the infinitely-extended line&#xA;     * defined by the specified coordinates.  If the specified point &#xA;     * intersects the line, this method returns 0.0.&#xA;     * @param X1,&amp;nbsp;Y1 the coordinates of one point on the&#xA;     * &#x9;&#x9;specified line&#xA;     * @param X2,&amp;nbsp;Y2 the coordinates of another point on &#xA;     *&#x9;&#x9;the specified line&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point being&#xA;     * &#x9;&#x9;measured against the specified line&#xA;     * @return a double value that is the square of the distance from the&#xA;     *&#x9;&#x9;&#x9;specified point to the specified line.&#xA;     * @see #ptSegDistSq(double, double, double, double, double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.2">
            <comments>// Adjust vectors relative to X1,Y1</comments>
            <comments>// X2,Y2 becomes relative vector from X1,Y1 to end of segment</comments>
          </child>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.3"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.4">
            <comments>// PX,PY becomes relative vector from X1,Y1 to test point</comments>
          </child>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.5"/>
          <assignmentOperator xsi:type="operators:AssignmentMinus"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="dotprod">
          <typeReference xsi:type="types:Double"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.4"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.2"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.3"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="projlenSq">
          <typeReference xsi:type="types:Double">
            <comments>// dotprod is the length of the PX,PY vector</comments>
            <comments>// projected on the X1,Y1=>X2,Y2 vector times the</comments>
            <comments>// length of the X1,Y1=>X2,Y2 vector</comments>
          </typeReference>
          <initialValue xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.4/@variable"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.2"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.2"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <children xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.3"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.3"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </expression>
            </children>
            <multiplicativeOperators xsi:type="operators:Multiplication"/>
            <multiplicativeOperators xsi:type="operators:Division"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lenSq">
          <typeReference xsi:type="types:Double">
            <comments>// Distance to line is now the length of the relative point</comments>
            <comments>// vector minus the length of its projection onto the line</comments>
          </typeReference>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.4"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.4"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.5"/>
              <multiplicativeOperators xsi:type="operators:Multiplication"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.5/@variable"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.6/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.6/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.6/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptLineDist">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y1">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="X2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Y2">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the distance from a point to a line.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point on the infinitely-extended line&#xA;     * defined by the specified coordinates.  If the specified point &#xA;     * intersects the line, this method returns 0.0.&#xA;     * @param X1,&amp;nbsp;Y1 the coordinates of one point on the&#xA;     *&#x9;&#x9;specified line&#xA;     * @param X2,&amp;nbsp;Y2 the coordinates of another point on the&#xA;     *&#x9;&#x9;specified line&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point being&#xA;     *&#x9;&#x9;measured against the specified line&#xA;     * @return a double value that is the distance from the specified&#xA;     *&#x9;&#x9;&#x9; point to the specified line.&#xA;     * @see #ptSegDist(double, double, double, double, double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.17"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.3"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.5"/>
            </arguments>
          </next>
          <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptLineDistSq">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the square of the distance from a point to this line.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point on the infinitely-extended line&#xA;     * defined by this &lt;code>Line2D&lt;/code>.  If the specified point &#xA;     * intersects the line, this method returns 0.0.&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point being&#xA;     *&#x9;&#x9;measured against this line&#xA;     * @return a double value that is the square of the distance from a &#xA;     *&#x9;&#x9;&#x9;specified point to the current line.&#xA;     * @see #ptSegDistSq(double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptLineDistSq">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the square of the distance from a specified &#xA;     * &lt;code>Point2D&lt;/code> to this line.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point on the infinitely-extended line&#xA;     * defined by this &lt;code>Line2D&lt;/code>.  If the specified point &#xA;     * intersects the line, this method returns 0.0.&#xA;     * @param pt the specified &lt;code>Point2D&lt;/code> being measured&#xA;     *           against this line&#xA;     * @return a double value that is the square of the distance from a&#xA;     *&#x9;&#x9;&#x9;specified &lt;code>Point2D&lt;/code> to the current&#xA;     *&#x9;&#x9;&#x9;line.&#xA;     * @see #ptSegDistSq(Point2D)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptLineDist">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PX">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="PY">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the distance from a point to this line.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point on the infinitely-extended line&#xA;     * defined by this &lt;code>Line2D&lt;/code>.  If the specified point &#xA;     * intersects the line, this method returns 0.0.&#xA;     * @param PX,&amp;nbsp;PY the coordinates of the specified point being&#xA;     *&#x9;&#x9;measured against this line&#xA;     * @return a double value that is the distance from a specified point&#xA;     *&#x9;&#x9;&#x9;to the current line.&#xA;     * @see #ptSegDist(double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ptLineDist">
      <typeReference xsi:type="types:Double"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the distance from a &lt;code>Point2D&lt;/code> to this line.&#xA;     * The distance measured is the distance between the specified&#xA;     * point and the closest point on the infinitely-extended line&#xA;     * defined by this &lt;code>Line2D&lt;/code>.  If the specified point &#xA;     * intersects the line, this method returns 0.0.&#xA;     * @param pt the specified &lt;code>Point2D&lt;/code> being measured&#xA;     * @return a double value that is the distance from a specified &#xA;     *&#x9;&#x9;&#x9;&lt;code>Point2D&lt;/code> to the current line.&#xA;     * @see #ptSegDist(Point2D)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if a specified coordinate is inside the boundary of this&#xA;     * &lt;code>Line2D&lt;/code>.  This method is required to implement the &#xA;     * {@link Shape} interface, but in the case of &lt;code>Line2D&lt;/code> &#xA;     * objects it always returns &lt;code>false&lt;/code> since a line contains&#xA;     * no area.&#xA;     * @param x,&amp;nbsp;y the coordinates of the specified point&#xA;     * @return &lt;code>false&lt;/code> because a &lt;code>Line2D&lt;/code> contains&#xA;     * no area.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if a given &lt;code>Point2D&lt;/code> is inside the boundary of&#xA;     * this &lt;code>Line2D&lt;/code>.&#xA;     * This method is required to implement the &lt;code>Shape&lt;/code> interface, &#xA;     * but in the case of &lt;code>Line2D&lt;/code> objects it always returns &#xA;     * &lt;code>false&lt;/code> since a line contains no area.&#xA;     * @param p the specified &lt;code>Point2D&lt;/code> to be tested&#xA;     * @return &lt;code>false&lt;/code> because a &lt;code>Line2D&lt;/code> contains&#xA;     * no area.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intersects">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if this &lt;code>Line2D&lt;/code> intersects the interior of a&#xA;     * specified set of rectangular coordinates.&#xA;     * @param x,&amp;nbsp;y the coordinates of the top-left corner of the&#xA;     *&#x9;&#x9;specified rectangular area&#xA;     * @param w the width of the specified rectangular area&#xA;     * @param h the height of the specified rectangular area&#xA;     * @return &lt;code>true&lt;/code> if this &lt;code>Line2D&lt;/code> intersects &#xA;     *&#x9;&#x9;the interior of the specified set of rectangular&#xA;     *&#x9;&#x9;coordinates; &lt;code>false&lt;/code> otherwise.&#x9;&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Rectangle2D</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Rectangle2D$Double.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.3"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intersects">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Rectangle2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if this &lt;code>Line2D&lt;/code> intersects the interior of a&#xA;     * specified &lt;code>Rectangle2D&lt;/code>.&#xA;     * @param r the specified &lt;code>Rectangle2D&lt;/code> to be tested&#xA;     * @return &lt;code>true&lt;/code> if this &lt;code>Line2D&lt;/code> intersects&#xA;     *&#x9;&#x9;the interior of the specified &lt;code>Rectangle2D&lt;/code>;&#xA;     *&#x9;&#x9;&lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Rectangle2D.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the interior of this &lt;code>Line2D&lt;/code> entirely contains&#xA;     * the specified set of rectangular coordinates.&#xA;     * This method is required to implement the &lt;code>Shape&lt;/code> interface, &#xA;     * but in the case of &lt;code>Line2D&lt;/code> objects it always returns &#xA;     * false since a line contains no area.&#xA;     * @param x,&amp;nbsp;y the coordinates of the top-left corner of the&#xA;     *&#x9;&#x9;specified rectangular area&#xA;     * @param w the width of the specified rectangular area&#xA;     * @param h the height of the specified rectangular area&#xA;     * @return &lt;code>false&lt;/code> because a &lt;code>Line2D&lt;/code> contains&#xA;     * no area.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Rectangle2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the interior of this &lt;code>Line2D&lt;/code> entirely contains&#xA;     * the specified &lt;code>Rectangle2D&lt;/code>.&#xA;     * This method is required to implement the &lt;code>Shape&lt;/code> interface, &#xA;     * but in the case of &lt;code>Line2D&lt;/code> objects it always returns &#xA;     * &lt;code>false&lt;/code> since a line contains no area.&#xA;     * @param r the specified &lt;code>Rectangle2D&lt;/code> to be tested&#xA;     * @return &lt;code>false&lt;/code> because a &lt;code>Line2D&lt;/code> contains&#xA;     * no area.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounding box of this &lt;code>Line2D&lt;/code>.&#xA;     * @return a {@link Rectangle} that is the bounding box of the&#xA;     *&#x9;&#x9;&lt;code>Line2D&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="RectangularShape.class.xmi#//@classifiers.0/@members.23"/>
          </next>
          <target xsi:type="members:InterfaceMethod" href="../Shape.class.xmi#//@classifiers.0/@members.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPathIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PathIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="at">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AffineTransform.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an iteration object that defines the boundary of this&#xA;     * &lt;code>Line2D&lt;/code>.&#xA;     * The iterator for this class is not multi-threaded safe, &#xA;     * which means that this &lt;code>Line2D&lt;/code> class does not &#xA;     * guarantee that modifications to the geometry of this&#xA;     * &lt;code>Line2D&lt;/code> object do not affect any iterations of that&#xA;     * geometry that are already in process.&#xA;     * @param at the specified {@link AffineTransform}&#xA;     * @return a {@link PathIterator} that defines the boundary of this&#xA;     *&#x9;&#x9;&lt;code>Line2D&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="LineIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPathIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PathIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="at">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AffineTransform.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flatness">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an iteration object that defines the boundary of this&#xA;     * flattened &lt;code>Line2D&lt;/code>.&#xA;     * The iterator for this class is not multi-threaded safe,&#xA;     * which means that this &lt;code>Line2D&lt;/code> class does not&#xA;     * guarantee that modifications to the geometry of this&#xA;     * &lt;code>Line2D&lt;/code> object do not affect any iterations of that&#xA;     * geometry that are already in process. &#xA;     * @param at the specified &lt;code>AffineTransform&lt;/code>&#xA;     * @param flatness the maximum amount that the control points for a &#xA;     *&#x9;&#x9;given curve can vary from colinear before a subdivided&#xA;     *&#x9;&#x9;curve is replaced by a straight line connecting the&#xA;     *&#x9;&#x9;endpoints.  Since a &lt;code>Line2D&lt;/code> object is &#xA;     *&#x9;        always flat, this parameter is ignored.&#xA;     * @return a &lt;code>PathIterator&lt;/code> that defines the boundary of the&#xA;     *&#x9;&#x9;&#x9;flattened &lt;code>Line2D&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="LineIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new object of the same class as this object.&#xA;     *&#xA;     * @return     a clone of this instance.&#xA;     * @exception  OutOfMemoryError            if there is not enough memory.&#xA;     * @see        java.lang.Cloneable&#xA;     * @since      1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <self xsi:type="literals:Super"/>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <comments>// this shouldn't happen, since we are Cloneable</comments>
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/InternalError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/CloneNotSupportedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This &lt;code>Line2D&lt;/code> represents a line segment in (x,&amp;nbsp;y)&#xA; * coordinate space.  This class, like all of the Java 2D API, uses a&#xA; * default coordinate system called &lt;i>user space&lt;/i> in which the y-axis&#xA; * values increase downward and x-axis values increase to the right.  For&#xA; * more information on the user space coordinate system, see the &#xA; * &lt;a href=&quot;http://java.sun.com/j2se/1.3/docs/guide/2d/spec/j2d-intro.fm2.html#61857&quot;>&#xA; * Coordinate Systems&lt;/a> section of the Java 2D Programmer's Guide.  &#xA; * &lt;p>&#xA; * This class is only the abstract superclass for all objects that&#xA; * store a 2D line segment.&#xA; * The actual storage representation of the coordinates is left to&#xA; * the subclass.&#xA; *&#xA; * @version &#x9;1.28, 12/19/03&#xA; * @author&#x9;Jim Graham&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../Shape.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
