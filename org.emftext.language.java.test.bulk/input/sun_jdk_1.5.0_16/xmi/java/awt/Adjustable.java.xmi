<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Adjustable.java">
  <comments>/*&#xA; * @(#)Adjustable.java&#x9;1.18 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Adjustable">
    <members xsi:type="members:Field" name="HORIZONTAL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates that the &lt;code>Adjustable&lt;/code> has horizontal orientation.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="VERTICAL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates that the &lt;code>Adjustable&lt;/code> has vertical orientation.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NO_ORIENTATION">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates that the &lt;code>Adjustable&lt;/code> has no orientation.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getOrientation">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the orientation of the adjustable object.&#xA;     * @return the orientation of the adjustable object;&#xA;     *   either &lt;code>HORIZONTAL&lt;/code>, &lt;code>VERTICAL&lt;/code>,&#xA;     *   or &lt;code>NO_ORIENTATION&lt;/code>&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMinimum">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the minimum value of the adjustable object.&#xA;     * @param min the minimum value&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="min">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMinimum">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the minimum value of the adjustable object.&#xA;     * @return the minimum value of the adjustable object&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setMaximum">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the maximum value of the adjustable object.&#xA;     * @param max the maximum value&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="max">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMaximum">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the maximum value of the adjustable object.&#xA;     * @return the maximum value of the adjustable object&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setUnitIncrement">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the unit value increment for the adjustable object.&#xA;     * @param u the unit increment&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="u">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnitIncrement">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the unit value increment for the adjustable object.&#xA;     * @return the unit value increment for the adjustable object&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBlockIncrement">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the block value increment for the adjustable object.&#xA;     * @param b the block increment&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBlockIncrement">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the block value increment for the adjustable object.&#xA;     * @return the block value increment for the adjustable object&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setVisibleAmount">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the length of the proportional indicator of the&#xA;     * adjustable object.&#xA;     * @param v the length of the indicator&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVisibleAmount">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the length of the proportional indicator.&#xA;     * @return the length of the proportional indicator&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setValue">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Sets the current value of the adjustable object. If&#xA;     * the value supplied is less than &lt;code>minimum&lt;/code>&#xA;     * or greater than &lt;code>maximum&lt;/code> - &lt;code>visibleAmount&lt;/code>,&#xA;     * then one of those values is substituted, as appropriate.&#xA;     * &lt;p>&#xA;     * Calling this method does not fire an&#xA;     * &lt;code>AdjustmentEvent&lt;/code>. &#xA;     *&#xA;     * @param v the current value, between &lt;code>minimum&lt;/code>&#xA;     *    and &lt;code>maximum&lt;/code> - &lt;code>visibleAmount&lt;/code>&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the current value of the adjustable object.&#xA;     * @return the current value of the adjustable object&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addAdjustmentListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a listener to receive adjustment events when the value of&#xA;     * the adjustable object changes.&#xA;     * @param l the listener to receive events&#xA;     * @see AdjustmentEvent&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAdjustmentListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes an adjustment listener.&#xA;     * @param l the listener being removed&#xA;     * @see AdjustmentEvent&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The interface for objects which have an adjustable numeric value&#xA; * contained within a bounded range of values.&#xA; *&#xA; * @version 1.18 12/19/03&#xA; * @author Amy Fowler&#xA; * @author Tim Prinzing&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
