<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DropTargetListener.java">
  <comments>/*&#xA; * @(#)DropTargetListener.java&#x9;1.22 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>dnd</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/EventListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>dnd</namespaces>
    <classifier xsi:type="classifiers:Class" href="DropTargetContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>dnd</namespaces>
    <classifier xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>dnd</namespaces>
    <classifier xsi:type="classifiers:Class" href="DropTargetDropEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DropTargetListener">
    <members xsi:type="members:InterfaceMethod" name="dragEnter">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called while a drag operation is ongoing, when the mouse pointer enters&#xA;     * the operable part of the drop site for the &lt;code>DropTarget&lt;/code>&#xA;     * registered with this listener. &#xA;     * &#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code> &#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dragOver">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called when a drag operation is ongoing, while the mouse pointer is still&#xA;     * over the operable part of the drop site for the &lt;code>DropTarget&lt;/code>&#xA;     * registered with this listener.&#xA;     * &#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code> &#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dropActionChanged">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called if the user has modified &#xA;     * the current drop gesture.&#xA;     * &lt;P>&#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code>&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dragExit">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called while a drag operation is ongoing, when the mouse pointer has&#xA;     * exited the operable part of the drop site for the&#xA;     * &lt;code>DropTarget&lt;/code> registered with this listener.&#xA;     * &#xA;     * @param dte the &lt;code>DropTargetEvent&lt;/code> &#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dte">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="drop">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Called when the drag operation has terminated with a drop on&#xA;     * the operable part of the drop site for the &lt;code>DropTarget&lt;/code>&#xA;     * registered with this listener.  &#xA;     * &lt;p>&#xA;     * This method is responsible for undertaking&#xA;     * the transfer of the data associated with the&#xA;     * gesture. The &lt;code>DropTargetDropEvent&lt;/code> &#xA;     * provides a means to obtain a &lt;code>Transferable&lt;/code>&#xA;     * object that represents the data object(s) to &#xA;     * be transfered.&lt;P>&#xA;     * From this method, the &lt;code>DropTargetListener&lt;/code>&#xA;     * shall accept or reject the drop via the   &#xA;     * acceptDrop(int dropAction) or rejectDrop() methods of the &#xA;     * &lt;code>DropTargetDropEvent&lt;/code> parameter.&#xA;     * &lt;P>&#xA;     * Subsequent to acceptDrop(), but not before,&#xA;     * &lt;code>DropTargetDropEvent&lt;/code>'s getTransferable()&#xA;     * method may be invoked, and data transfer may be &#xA;     * performed via the returned &lt;code>Transferable&lt;/code>'s &#xA;     * getTransferData() method.&#xA;     * &lt;P>&#xA;     * At the completion of a drop, an implementation&#xA;     * of this method is required to signal the success/failure&#xA;     * of the drop by passing an appropriate&#xA;     * &lt;code>boolean&lt;/code> to the &lt;code>DropTargetDropEvent&lt;/code>'s&#xA;     * dropComplete(boolean success) method.&#xA;     * &lt;P>&#xA;     * Note: The data transfer should be completed before the call  to the&#xA;     * &lt;code>DropTargetDropEvent&lt;/code>'s dropComplete(boolean success) method.&#xA;     * After that, a call to the getTransferData() method of the&#xA;     * &lt;code>Transferable&lt;/code> returned by&#xA;     * &lt;code>DropTargetDropEvent.getTransferable()&lt;/code> is guaranteed to&#xA;     * succeed only if the data transfer is local; that is, only if&#xA;     * &lt;code>DropTargetDropEvent.isLocalTransfer()&lt;/code> returns&#xA;     * &lt;code>true&lt;/code>. Otherwise, the behavior of the call is&#xA;     * implementation-dependent.&#xA;     * &lt;P>&#xA;     * @param dtde the &lt;code>DropTargetDropEvent&lt;/code> &#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDropEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>DropTargetListener&lt;/code> interface &#xA; * is the callback interface used by the&#xA; * &lt;code>DropTarget&lt;/code> class to provide &#xA; * notification of DnD operations that involve&#xA; * the subject &lt;code>DropTarget&lt;/code>. Methods of&#xA; * this interface may be implemented to provide&#xA; * &quot;drag under&quot; visual feedback to the user throughout&#xA; * the Drag and Drop operation.&#xA; * &lt;p>&#xA; * Create a listener object by implementing the interface and then register it&#xA; * with a &lt;code>DropTarget&lt;/code>. When the drag enters, moves over, or exits&#xA; * the operable part of the drop site for that &lt;code>DropTarget&lt;/code>, when &#xA; * the drop action changes, and when the drop occurs, the relevant method in &#xA; * the listener object is invoked, and the &lt;code>DropTargetEvent&lt;/code> is &#xA; * passed to it.&#xA; * &lt;p>&#xA; * The operable part of the drop site for the &lt;code>DropTarget&lt;/code> is &#xA; * the part of the associated &lt;code>Component&lt;/code>'s geometry that is not &#xA; * obscured by an overlapping top-level window or by another &#xA; * &lt;code>Component&lt;/code> higher in the Z-order that has an associated active &#xA; * &lt;code>DropTarget&lt;/code>.&#xA; * &lt;p>&#xA; * During the drag, the data associated with the current drag operation can be&#xA; * retrieved by calling &lt;code>getTransferable()&lt;/code> on &#xA; * &lt;code>DropTargetDragEvent&lt;/code> instances passed to the listener's&#xA; * methods. &#xA; * &lt;p>&#xA; * Note that &lt;code>getTransferable()&lt;/code> on the &#xA; * &lt;code>DropTargetDragEvent&lt;/code> instance should only be called within the&#xA; * respective listener's method and all the necessary data should be retrieved&#xA; * from the returned &lt;code>Transferable&lt;/code> before that method returns.&#xA; *&#xA; * @version &#x9;1.22, 12/19/03&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../util/EventListener.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
