<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="DropTarget.java">
  <comments>/*&#xA; * @(#)DropTarget.java&#x9;1.48 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>dnd</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/TooManyListenersException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../AWTEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Dimension.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../GraphicsEnvironment.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Insets.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Toolkit.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Class" href="../event/ActionEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../event/ActionListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>datatransfer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../datatransfer/FlavorMap.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>datatransfer</namespaces>
    <classifier xsi:type="classifiers:Class" href="../datatransfer/SystemFlavorMap.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>swing</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>peer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../peer/ComponentPeer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>peer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../peer/LightweightPeer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>dnd</namespaces>
    <namespaces>peer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="peer/DropTargetPeer.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="DropTarget">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="6283860791671019047"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="DropTarget">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../GraphicsEnvironment.class.xmi#//@classifiers.0/@members.5"/>
          </next>
          <target xsi:type="classifiers:Class" href="../GraphicsEnvironment.class.xmi#//@classifiers.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2"/>
            </expression>
          </statements>
          <catcheBlocks>
            <comments>// do nothing!</comments>
            <parameter name="tmle">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../util/TooManyListenersException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.2"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Component.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.3"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.4"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.4"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ops">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="act">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../datatransfer/FlavorMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new DropTarget given the &lt;code>Component&lt;/code> &#xA;     * to associate itself with, an &lt;code>int&lt;/code> representing&#xA;     * the default acceptable action(s) to &#xA;     * support, a &lt;code>DropTargetListener&lt;/code>&#xA;     * to handle event processing, a &lt;code>boolean&lt;/code> indicating &#xA;     * if the &lt;code>DropTarget&lt;/code> is currently accepting drops, and &#xA;     * a &lt;code>FlavorMap&lt;/code> to use (or null for the default &lt;CODE>FlavorMap&lt;/CODE>).&#xA;     * &lt;P>&#xA;     * The Component will receive drops only if it is enabled.&#xA;     * @param c &#x9;The &lt;code>Component&lt;/code> with which this &lt;code>DropTarget&lt;/code> is associated&#xA;     * @param ops&#x9;The default acceptable actions for this &lt;code>DropTarget&lt;/code>&#xA;     * @param dtl&#x9;The &lt;code>DropTargetListener&lt;/code> for this &lt;code>DropTarget&lt;/code>&#xA;     * @param act&#x9;Is the &lt;code>DropTarget&lt;/code> accepting drops.&#xA;     * @param fm&#x9;The &lt;code>FlavorMap&lt;/code> to use, or null for the default &lt;CODE>FlavorMap&lt;/CODE> &#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     *            returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DropTarget">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.3"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ops">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="act">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>DropTarget&lt;/code> given the &lt;code>Component&lt;/code> &#xA;     * to associate itself with, an &lt;code>int&lt;/code> representing&#xA;     * the default acceptable action(s) &#xA;     * to support, a &lt;code>DropTargetListener&lt;/code>&#xA;     * to handle event processing, and a &lt;code>boolean&lt;/code> indicating &#xA;     * if the &lt;code>DropTarget&lt;/code> is currently accepting drops.&#xA;     * &lt;P>&#xA;     * The Component will receive drops only if it is enabled.&#xA;     * @param c &#x9;The &lt;code>Component&lt;/code> with which this &lt;code>DropTarget&lt;/code> is associated&#xA;     * @param ops&#x9;The default acceptable actions for this &lt;code>DropTarget&lt;/code>&#xA;     * @param dtl&#x9;The &lt;code>DropTargetListener&lt;/code> for this &lt;code>DropTarget&lt;/code>&#xA;     * @param act&#x9;Is the &lt;code>DropTarget&lt;/code> accepting drops.&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     *            returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DropTarget">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DnDConstants.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="DnDConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>DropTarget&lt;/code>.&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     *            returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DropTarget">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="DnDConstants.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <target xsi:type="classifiers:Class" href="DnDConstants.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>DropTarget&lt;/code> given the &lt;code>Component&lt;/code> &#xA;     * to associate itself with, and the &lt;code>DropTargetListener&lt;/code>&#xA;     * to handle event processing.&#xA;     * &lt;P>&#xA;     * The Component will receive drops only if it is enabled.&#xA;     * @param c &#x9;The &lt;code>Component&lt;/code> with which this &lt;code>DropTarget&lt;/code> is associated&#xA;     * @param dtl&#x9;The &lt;code>DropTargetListener&lt;/code> for this &lt;code>DropTarget&lt;/code>&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     *            returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="DropTarget">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.2"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ops">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>DropTarget&lt;/code> given the &lt;code>Component&lt;/code> &#xA;     * to associate itself with, an &lt;code>int&lt;/code> representing&#xA;     * the default acceptable action(s) to support, and a&#xA;     * &lt;code>DropTargetListener&lt;/code> to handle event processing.&#xA;     * &lt;P>&#xA;     * The Component will receive drops only if it is enabled.&#xA;     * @param c &#x9;The &lt;code>Component&lt;/code> with which this &lt;code>DropTarget&lt;/code> is associated&#xA;     * @param ops&#x9;The default acceptable actions for this &lt;code>DropTarget&lt;/code>&#xA;     * @param dtl&#x9;The &lt;code>DropTargetListener&lt;/code> for this &lt;code>DropTarget&lt;/code>&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     *            returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setComponent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Note: this interface is required to permit the safe association&#xA;     * of a DropTarget with a Component in one of two ways, either:&#xA;     * &lt;code> component.setDropTarget(droptarget); &lt;/code>&#xA;     * or &lt;code> droptarget.setComponent(component); &lt;/code>&#xA;     * &lt;P>&#xA;     * The Component will receive drops only if it is enabled.&#xA;     * @param c The new &lt;code>Component&lt;/code> this &lt;code>DropTarget&lt;/code> &#xA;     * is to be associated with.&lt;P>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          </children>
          <children xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
              </next>
            </children>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="old">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldPeer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../peer/ComponentPeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Component.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
            </expression>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Component.class.xmi#//@classifiers.0/@members.99"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </expression>
          </statements>
          <catcheBlocks>
            <statements xsi:type="statements:Condition">
              <comments>// undo the change</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../Component.class.xmi#//@classifiers.0/@members.99"/>
                      <arguments xsi:type="references:SelfReference">
                        <self xsi:type="literals:This"/>
                      </arguments>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.2/@variable"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </expression>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getComponent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>Component&lt;/code> associated &#xA;     * with this &lt;code>DropTarget&lt;/code>.&#xA;     * &lt;P>&#xA;     * @return the current &lt;/code>Component&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setDefaultActions">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ops">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the default acceptable actions for this &lt;code>DropTarget&lt;/code>&#xA;     * &lt;P>&#xA;     * @param ops the default actions&#xA;     * &lt;P>&#xA;     * @see java.awt.dnd.DnDConstants&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="DropTargetContext.class.xmi#//@classifiers.0/@members.9"/>
            <arguments xsi:type="expressions:AndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:InclusiveOrExpression">
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DnDConstants.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DnDConstants.class.xmi#//@classifiers.0"/>
                  </children>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="DnDConstants.class.xmi#//@classifiers.0/@members.5"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="DnDConstants.class.xmi#//@classifiers.0"/>
                  </children>
                </expression>
              </children>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doSetDefaultActions">
      <typeReference xsi:type="types:Void">
        <comments>/* &#xA;     * Called by DropTargetContext.setTargetActions() &#xA;     * with appropriate synchronization.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ops">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDefaultActions">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets an &lt;code>int&lt;/code> representing the&#xA;     * current action(s) supported by this &lt;code>DropTarget&lt;/code>.&#xA;     * &lt;P>&#xA;     * @return the current default actions&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setActive">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isActive">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the DropTarget active if &lt;code>true&lt;/code>, &#xA;     * inactive if &lt;code>false&lt;/code>.&#xA;     * &lt;P>&#xA;     * @param isActive sets the &lt;code>DropTarget&lt;/code> (in)active.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isActive">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reports whether or not &#xA;     * this &lt;code>DropTarget&lt;/code> &#xA;     * is currently active (ready to accept drops).&#xA;     * &lt;P>&#xA;     * @return &lt;CODE>true&lt;/CODE> if active, &lt;CODE>false&lt;/CODE> if not&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addDropTargetListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../util/TooManyListenersException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a new &lt;code>DropTargetListener&lt;/code> (UNICAST SOURCE).&#xA;     * &lt;P>&#xA;     * @param dtl The new &lt;code>DropTargetListener&lt;/code>&#xA;     * &lt;P>&#xA;     * @throws &lt;code>TooManyListenersException&lt;/code> if a &#xA;     * &lt;code>DropTargetListener&lt;/code> is already added to this&#xA;     * &lt;code>DropTarget&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="DropTarget may not be its own Listener"/>
          </throwable>
        </statement>
        <condition xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../util/TooManyListenersException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeDropTargetListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the current &lt;code>DropTargetListener&lt;/code> (UNICAST SOURCE).&#xA;     * &lt;P>&#xA;     * @param dtl the DropTargetListener to deregister.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="listener mismatch"/>
              </throwable>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dragEnter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calls &lt;code>dragEnter&lt;/code> on the registered&#xA;     * &lt;code>DropTargetListener&lt;/code> and passes it&#xA;     * the specified &lt;code>DropTargetDragEvent&lt;/code>.&#xA;     * Has no effect if this &lt;code>DropTarget&lt;/code>&#xA;     * is not active.&#xA;     *&#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code>&#xA;     *&#xA;     * @throws NullPointerException if this &lt;code>DropTarget&lt;/code>&#xA;     *         is active and &lt;code>dtde&lt;/code> is &lt;code>null&lt;/code>&#xA;     *&#xA;     * @see #isActive&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="DropTargetListener.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DropTargetContext.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="DnDConstants.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="DnDConstants.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
              <target xsi:type="members:ClassMethod" href="DropTargetEvent.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DropTargetDragEvent.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dragOver">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calls &lt;code>dragOver&lt;/code> on the registered&#xA;     * &lt;code>DropTargetListener&lt;/code> and passes it&#xA;     * the specified &lt;code>DropTargetDragEvent&lt;/code>.&#xA;     * Has no effect if this &lt;code>DropTarget&lt;/code>&#xA;     * is not active.&#xA;     *&#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code>&#xA;     *&#xA;     * @throws NullPointerException if this &lt;code>DropTarget&lt;/code>&#xA;     *         is active and &lt;code>dtde&lt;/code> is &lt;code>null&lt;/code>&#xA;     *&#xA;     * @see #isActive&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="DropTargetListener.class.xmi#//@classifiers.0/@members.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DropTargetDragEvent.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dropActionChanged">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calls &lt;code>dropActionChanged&lt;/code> on the registered&#xA;     * &lt;code>DropTargetListener&lt;/code> and passes it&#xA;     * the specified &lt;code>DropTargetDragEvent&lt;/code>.&#xA;     * Has no effect if this &lt;code>DropTarget&lt;/code>&#xA;     * is not active.&#xA;     *&#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code>&#xA;     *&#xA;     * @throws NullPointerException if this &lt;code>DropTarget&lt;/code>&#xA;     *         is active and &lt;code>dtde&lt;/code> is &lt;code>null&lt;/code>&#xA;     *&#xA;     * @see #isActive&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="DropTargetListener.class.xmi#//@classifiers.0/@members.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DropTargetDragEvent.class.xmi#//@classifiers.0/@members.5"/>
            </next>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dragExit">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dte">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calls &lt;code>dragExit&lt;/code> on the registered&#xA;     * &lt;code>DropTargetListener&lt;/code> and passes it&#xA;     * the specified &lt;code>DropTargetEvent&lt;/code>.&#xA;     * Has no effect if this &lt;code>DropTarget&lt;/code>&#xA;     * is not active.&#xA;     * &lt;p>&#xA;     * This method itself does not throw any exception&#xA;     * for null parameter but for exceptions thrown by&#xA;     * the respective method of the listener.&#xA;     *&#xA;     * @param dte the &lt;code>DropTargetEvent&lt;/code>&#xA;     *&#xA;     * @see #isActive&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="DropTargetListener.class.xmi#//@classifiers.0/@members.3"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="drop">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDropEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Calls &lt;code>drop&lt;/code> on the registered&#xA;     * &lt;code>DropTargetListener&lt;/code> and passes it&#xA;     * the specified &lt;code>DropTargetDropEvent&lt;/code>&#xA;     * if this &lt;code>DropTarget&lt;/code> is active.&#xA;     *&#xA;     * @param dtde the &lt;code>DropTargetDropEvent&lt;/code>&#xA;     *&#xA;     * @throws NullPointerException if &lt;code>dtde&lt;/code> is null&#xA;     *         and at least one of the following is true: this&#xA;     *         &lt;code>DropTarget&lt;/code> is not active, or there is&#xA;     *         no a &lt;code>DropTargetListener&lt;/code> registered.&#xA;     *&#xA;     * @see #isActive&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="DropTargetListener.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0">
              <comments>// we should'nt get here ...</comments>
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="DropTargetDropEvent.class.xmi#//@classifiers.0/@members.16"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFlavorMap">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../datatransfer/FlavorMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>FlavorMap&lt;/code>&#xA;     * associated with this &lt;code>DropTarget&lt;/code>.&#xA;     * If no &lt;code>FlavorMap&lt;/code> has been set for this&#xA;     * &lt;code>DropTarget&lt;/code>, it is associated with the default&#xA;     * &lt;code>FlavorMap&lt;/code>.&#xA;     * &lt;P>&#xA;     * @return the FlavorMap for this DropTarget&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFlavorMap">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../datatransfer/FlavorMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>FlavorMap&lt;/code> associated&#xA;     * with this &lt;code>DropTarget&lt;/code>.&#xA;     * &lt;P>&#xA;     * @param fm the new &lt;code>FlavorMap&lt;/code>, or null to &#xA;     * associate the default FlavorMap with this DropTarget.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../datatransfer/SystemFlavorMap.class.xmi#//@classifiers.0/@members.15"/>
              </next>
              <target xsi:type="classifiers:Class" href="../datatransfer/SystemFlavorMap.class.xmi#//@classifiers.0"/>
            </expressionIf>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addNotify">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="peer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../peer/ComponentPeer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Notify the DropTarget that it has been associated with a Component&#xA;     *&#xA;     **********************************************************************&#xA;     * This method is usually called from java.awt.Component.addNotify() of&#xA;     * the Component associated with this DropTarget to notify the DropTarget&#xA;     * that a ComponentPeer has been associated with that Component.&#xA;     *&#xA;     * Calling this method, other than to notify this DropTarget of the&#xA;     * association of the ComponentPeer with the Component may result in&#xA;     * a malfunction of the DnD system.&#xA;     **********************************************************************&#xA;     * &lt;P>&#xA;     * @param peer The Peer of the Component we are associated with!&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@init">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../Component.class.xmi#//@classifiers.0/@members.98"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@init"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../peer/LightweightPeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
          </children>
        </condition>
        <init xsi:type="variables:LocalVariable" name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@init">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../Component.class.xmi#//@classifiers.0/@members.96"/>
            </next>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="peer/DropTargetPeer.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="peer/DropTargetPeer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
              </expression>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="peer/DropTargetPeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeNotify">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="peer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../peer/ComponentPeer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Notify the DropTarget that it has been disassociated from a Component&#xA;     *&#xA;     **********************************************************************&#xA;     * This method is usually called from java.awt.Component.removeNotify() of&#xA;     * the Component associated with this DropTarget to notify the DropTarget&#xA;     * that a ComponentPeer has been disassociated with that Component.&#xA;     *&#xA;     * Calling this method, other than to notify this DropTarget of the&#xA;     * disassociation of the ComponentPeer from the Component may result in&#xA;     * a malfunction of the DnD system.&#xA;     **********************************************************************&#xA;     * &lt;P>&#xA;     * @param peer The Peer of the Component we are being disassociated from!&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:NestedExpression">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="peer/DropTargetPeer.class.xmi#//@classifiers.0/@members.1"/>
              <arguments xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
            <expression xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="peer/DropTargetPeer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
            </expression>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:NullLiteral"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDropTargetContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DropTargetContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>DropTargetContext&lt;/code> associated &#xA;     * with this &lt;code>DropTarget&lt;/code>.&#xA;     * &lt;P>&#xA;     * @return the &lt;code>DropTargetContext&lt;/code> associated with this &lt;code>DropTarget&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDropTargetContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DropTargetContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates the DropTargetContext associated with this DropTarget.&#xA;     * Subclasses may override this method to instantiate their own&#xA;     * DropTargetContext subclass.&#xA;     *&#xA;     * This call is typically *only* called by the platform's&#xA;     * DropTargetContextPeer as a drag operation encounters this&#xA;     * DropTarget. Accessing the Context while no Drag is current&#xA;     * has undefined results.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="DropTargetContext.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Serializes this &lt;code>DropTarget&lt;/code>. Performs default serialization,&#xA;     * and then writes out this object's &lt;code>DropTargetListener&lt;/code> if and&#xA;     * only if it can be serialized. If not, &lt;code>null&lt;/code> is written&#xA;     * instead.&#xA;     *&#xA;     * @serialData The default serializable fields, in alphabetical order,&#xA;     *             followed by either a &lt;code>DropTargetListener&lt;/code>&#xA;     *             instance, or &lt;code>null&lt;/code>.&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
            <arguments xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="SerializationTester.class.xmi#//@classifiers.0/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
                </next>
                <target xsi:type="classifiers:Class" href="SerializationTester.class.xmi#//@classifiers.0"/>
              </child>
              <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
              <expressionElse xsi:type="literals:NullLiteral"/>
            </arguments>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Deserializes this &lt;code>DropTarget&lt;/code>. This method first performs&#xA;     * default deserialization for all non-&lt;code>transient&lt;/code> fields. An&#xA;     * attempt is then made to deserialize this object's&#xA;     * &lt;code>DropTargetListener&lt;/code> as well. This is first attempted by&#xA;     * deserializing the field &lt;code>dtListener&lt;/code>, because, in releases&#xA;     * prior to 1.4, a non-&lt;code>transient&lt;/code> field of this name stored the&#xA;     * &lt;code>DropTargetListener&lt;/code>. If this fails, the next object in the&#xA;     * stream is used instead.&#xA;     *&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>ObjectInputStream</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../io/ObjectInputStream$GetField.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.20"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="DropTargetContext.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream$GetField.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:StringReference" value="dropTargetContext"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
              </child>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <comments>// Pre-1.4 support. 'dropTargetContext' was previoulsy transient</comments>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.25"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream$GetField.class.xmi#//@classifiers.0/@members.3"/>
                <arguments xsi:type="references:StringReference" value="component"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </child>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream$GetField.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:StringReference" value="actions"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="DnDConstants.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="DnDConstants.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream$GetField.class.xmi#//@classifiers.0/@members.3"/>
              <arguments xsi:type="references:StringReference" value="active"/>
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <comments>// Pre-1.4 support. 'dtListener' was previously non-transient</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream$GetField.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:StringReference" value="dtListener"/>
                  <arguments xsi:type="literals:NullLiteral"/>
                </next>
              </child>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                <comments>// 1.4-compatible byte stream. 'dtListener' was written explicitly</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="DropTargetAutoScroller">
      <members xsi:type="members:Constructor" name="DropTargetAutoScroller">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.5"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.6"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="Autoscroll.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.5"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="t">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Toolkit.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Toolkit.class.xmi#//@classifiers.0/@members.51"/>
              </next>
              <target xsi:type="classifiers:Class" href="../Toolkit.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="initial">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interval">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@statements.3/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Toolkit.class.xmi#//@classifiers.0/@members.82"/>
                    <arguments xsi:type="references:StringReference" value="DnD.Autoscroll.initialDelay"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <catcheBlocks>
            <comments>// ignore</comments>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@statements.5/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@statements.3/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../Toolkit.class.xmi#//@classifiers.0/@members.82"/>
                    <arguments xsi:type="references:StringReference" value="DnD.Autoscroll.interval"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <catcheBlocks>
            <comments>// ignore</comments>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@statements.5/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
                </next>
              </arguments>
              <arguments xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </arguments>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.26"/>
              <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@statements.4/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
                </next>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.9"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:TryBlock">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.12"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0/@statements.3/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../Toolkit.class.xmi#//@classifiers.0/@members.82"/>
                      <arguments xsi:type="references:StringReference" value="DnD.Autoscroll.cursorHysteresis"/>
                    </next>
                  </child>
                </expression>
              </value>
            </expression>
          </statements>
          <catcheBlocks>
            <comments>// ignore</comments>
            <parameter name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </parameter>
          </catcheBlocks>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.28"/>
            </next>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;         * construct a DropTargetAutoScroller&#xA;         * &lt;P>&#xA;         * @param c the &lt;code>Component&lt;/code>&#xA;         * @param p the &lt;code>Point&lt;/code>&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="updateRegion">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;&#x9; * update the geometry of the autoscroll region&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="i">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Insets.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.6">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="Autoscroll.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="size">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../Dimension.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.5">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Component.class.xmi#//@classifiers.0/@members.152"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.10">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Rectangle.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../Dimension.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../Dimension.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.1/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Dimension.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.10">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </children>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.1/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Dimension.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.10">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </children>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.11">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Rectangle.class.xmi#//@classifiers.0/@members.25"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Rectangle.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Rectangle.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </children>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="newWidth">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.1/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Dimension.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                </expression>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="newHeight">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.1/@variable">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Dimension.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../Insets.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                </expression>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.11">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Rectangle.class.xmi#//@classifiers.0/@members.30"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.4/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.5/@variable"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.4/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </children>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1/@statements.5/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.11">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </children>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="updateLocation">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="newLocn">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * cause autoscroll to occur&#xA;         * &lt;P>&#xA;         * @param newLocn the &lt;code>Point&lt;/code>&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.9"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.30"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.29"/>
                </next>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.29"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.9">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.12"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Math.class.xmi#//@classifiers.0/@members.29"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.9">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../Point.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../lang/Math.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.12"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.28"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.29"/>
                  </next>
                </child>
              </condition>
            </statements>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="stop">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * cause autoscrolling to stop&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0/@members.30"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="actionPerformed">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../event/ActionEvent.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * cause autoscroll to occur&#xA;         * &lt;P>&#xA;         * @param e the &lt;code>ActionEvent&lt;/code>&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.28/@members.1"/>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.6">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="Autoscroll.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.10">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../Rectangle.class.xmi#//@classifiers.0/@members.32"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8"/>
              </next>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.11">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../Rectangle.class.xmi#//@classifiers.0/@members.32"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8"/>
                </next>
              </child>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:Field" name="component">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/*&#xA;&#x9; * fields&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="autoScroll">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Autoscroll.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="timer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../javax/swing/Timer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="locn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="prev">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="outer">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="inner">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="hysteresis">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/*********************************************************************/</comments>
        <comments>/**&#xA;     * this protected nested class implements autoscrolling&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../event/ActionListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="members:ClassMethod" name="createDropTargetAutoScroller">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.28"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/*********************************************************************/</comments>
        <comments>/**&#xA;     * create an embedded autoscroller&#xA;     * &lt;P>&#xA;     * @param c the &lt;code>Component&lt;/code>&#xA;     * @param p the &lt;code>Point&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.28"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="initializeAutoscrolling">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * initialize autoscrolling&#xA;     * &lt;P>&#xA;     * @param p the &lt;code>Point&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="Autoscroll.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
              </expression>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateAutoscroll">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dragCursorLocn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * update autoscrolling with current cursor locn&#xA;     * &lt;P>&#xA;     * @param dragCursorLocn the &lt;code>Point&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.28/@members.2">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clearAutoscroll">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * clear autoscrolling&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.28/@members.3"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:Field" name="dropTargetContext">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.25"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DropTargetContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The DropTargetContext associated with this DropTarget.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="component">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The Component associated with this DropTarget.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="componentPeer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../peer/ComponentPeer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * That Component's  Peer&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="nativePeer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../peer/ComponentPeer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * That Component's &quot;native&quot; Peer&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="actions">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="DnDConstants.class.xmi#//@classifiers.0/@members.3"/>
        </next>
        <target xsi:type="classifiers:Class" href="DnDConstants.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Default permissible actions supported by this DropTarget.&#xA;     * &#xA;     * @see #setDefaultActions&#xA;     * @see #getDefaultActions&#xA;     * @serial&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="active">
      <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * &lt;code>true&lt;/code> if the DropTarget is accepting Drag &amp; Drop operations.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="autoScroller">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.28"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * the auto scrolling object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="dtListener">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * The delegate&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="flavorMap">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../datatransfer/SystemFlavorMap.class.xmi#//@classifiers.0/@members.15"/>
        </next>
        <target xsi:type="classifiers:Class" href="../datatransfer/SystemFlavorMap.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../datatransfer/FlavorMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * The FlavorMap&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>DropTarget&lt;/code> is associated &#xA; * with a &lt;code>Component&lt;/code> when that &lt;code>Component&lt;/code> &#xA; * wishes&#xA; * to accept drops during Drag and Drop operations.&#xA; * &lt;P>&#xA; *  Each&#xA; * &lt;code>DropTarget&lt;/code> is associated with a &lt;code>FlavorMap&lt;/code>.&#xA; * The default &lt;code>FlavorMap&lt;/code> hereafter designates the&#xA; * &lt;code>FlavorMap&lt;/code> returned by &lt;code>SystemFlavorMap.getDefaultFlavorMap()&lt;/code>. &#xA; * &#xA; * @version &#x9;1.48, 12/19/03&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
