<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DropTargetAdapter.java">
  <comments>/*&#xA; * @(#)DropTargetAdapter.java&#x9;1.7 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>dnd</namespaces>
  <classifiers xsi:type="classifiers:Class" name="DropTargetAdapter">
    <members xsi:type="members:ClassMethod" name="dragEnter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called while a drag operation is ongoing, when the mouse pointer enters&#xA;     * the operable part of the drop site for the &lt;code>DropTarget&lt;/code>&#xA;     * registered with this listener. &#xA;     * &#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code> &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="dragOver">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called when a drag operation is ongoing, while the mouse pointer is still&#xA;     * over the operable part of the drop site for the &lt;code>DropTarget&lt;/code>&#xA;     * registered with this listener.&#xA;     * &#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code> &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="dropActionChanged">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dtde">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetDragEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called if the user has modified &#xA;     * the current drop gesture.&#xA;     *&#xA;     * @param dtde the &lt;code>DropTargetDragEvent&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="dragExit">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dte">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DropTargetEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Called while a drag operation is ongoing, when the mouse pointer has&#xA;     * exited the operable part of the drop site for the&#xA;     * &lt;code>DropTarget&lt;/code> registered with this listener.&#xA;     * &#xA;     * @param dte the &lt;code>DropTargetEvent&lt;/code> &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An abstract adapter class for receiving drop target events. The methods in&#xA; * this class are empty. This class exists only as a convenience for creating&#xA; * listener objects.&#xA; * &lt;p>&#xA; * Extend this class to create a &lt;code>DropTargetEvent&lt;/code> listener &#xA; * and override the methods for the events of interest. (If you implement the &#xA; * &lt;code>DropTargetListener&lt;/code> interface, you have to define all of&#xA; * the methods in it. This abstract class defines a null implementation for&#xA; * every method except &lt;code>drop(DropTargetDropEvent)&lt;/code>, so you only have&#xA; * to define methods for events you care about.) You must provide an&#xA; * implementation for at least &lt;code>drop(DropTargetDropEvent)&lt;/code>. This&#xA; * method cannot have a null implementation because its specification requires&#xA; * that you either accept or reject the drop, and, if accepted, indicate&#xA; * whether the drop was successful.&#xA; * &lt;p>&#xA; * Create a listener object using the extended class and then register it with &#xA; * a &lt;code>DropTarget&lt;/code>. When the drag enters, moves over, or exits&#xA; * the operable part of the drop site for that &lt;code>DropTarget&lt;/code>, when &#xA; * the drop action changes, and when the drop occurs, the relevant method in &#xA; * the listener object is invoked, and the &lt;code>DropTargetEvent&lt;/code> is &#xA; * passed to it.&#xA; * &lt;p>&#xA; * The operable part of the drop site for the &lt;code>DropTarget&lt;/code> is &#xA; * the part of the associated &lt;code>Component&lt;/code>'s geometry that is not &#xA; * obscured by an overlapping top-level window or by another &#xA; * &lt;code>Component&lt;/code> higher in the Z-order that has an associated active &#xA; * &lt;code>DropTarget&lt;/code>.&#xA; * &lt;p>&#xA; * During the drag, the data associated with the current drag operation can be&#xA; * retrieved by calling &lt;code>getTransferable()&lt;/code> on &#xA; * &lt;code>DropTargetDragEvent&lt;/code> instances passed to the listener's&#xA; * methods. &#xA; * &lt;p>&#xA; * Note that &lt;code>getTransferable()&lt;/code> on the &#xA; * &lt;code>DropTargetDragEvent&lt;/code> instance should only be called within the&#xA; * respective listener's method and all the necessary data should be retrieved&#xA; * from the returned &lt;code>Transferable&lt;/code> before that method returns.&#xA; *&#xA; * @see DropTargetEvent&#xA; * @see DropTargetListener&#xA; *&#xA; * @author David Mendenhall&#xA; * @version 1.7, 12/19/03&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="DropTargetListener.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
