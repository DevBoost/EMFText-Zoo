<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="Image.java">
  <comments>/*&#xA; * @(#)Image.java&#x9;1.39 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Interface" href="image/ImageProducer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Interface" href="image/ImageObserver.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="image/ImageFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="image/FilteredImageSource.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="image/AreaAveragingScaleFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="image/ReplicateScaleFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Image">
    <members xsi:type="members:Field" name="defaultImageCaps">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ImageCapabilities.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:BooleanLiteral"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ImageCapabilities.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * convenience object; we can use this single static object for &#xA;     * all images that do not create their own image caps; it holds the&#xA;     * default (unaccelerated) properties.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="accelerationPriority">
      <initialValue xsi:type="literals:DecimalFloatLiteral" decimalValue="0.5"/>
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Priority for accelerating this image.  Subclasses are free to&#xA;     * set different default priorities and applications are free to&#xA;     * set the priority for specific images via the&#xA;     * &lt;code>setAccelerationPriority(float)&lt;/code> method.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWidth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="observer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="image/ImageObserver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the width of the image. If the width is not yet known, &#xA;     * this method returns &lt;code>-1&lt;/code> and the specified   &#xA;     * &lt;code>ImageObserver&lt;/code> object is notified later.&#xA;     * @param     observer   an object waiting for the image to be loaded.&#xA;     * @return    the width of this image, or &lt;code>-1&lt;/code> &#xA;     *                   if the width is not yet known.&#xA;     * @see       java.awt.Image#getHeight&#xA;     * @see       java.awt.image.ImageObserver&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHeight">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="observer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="image/ImageObserver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the height of the image. If the height is not yet known, &#xA;     * this method returns &lt;code>-1&lt;/code> and the specified  &#xA;     * &lt;code>ImageObserver&lt;/code> object is notified later.&#xA;     * @param     observer   an object waiting for the image to be loaded.&#xA;     * @return    the height of this image, or &lt;code>-1&lt;/code> &#xA;     *                   if the height is not yet known.&#xA;     * @see       java.awt.Image#getWidth&#xA;     * @see       java.awt.image.ImageObserver&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="image/ImageProducer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the object that produces the pixels for the image.&#xA;     * This method is called by the image filtering classes and by &#xA;     * methods that perform image conversion and scaling.&#xA;     * @return     the image producer that produces the pixels &#xA;     *                                  for this image.&#xA;     * @see        java.awt.image.ImageProducer&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getGraphics">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a graphics context for drawing to an off-screen image. &#xA;     * This method can only be called for off-screen images. &#xA;     * @return  a graphics context to draw to the off-screen image. &#xA;     * @exception UnsupportedOperationException if called for a &#xA;     *            non-off-screen image.&#xA;     * @see     java.awt.Graphics&#xA;     * @see     java.awt.Component#createImage(int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="observer">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="image/ImageObserver.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets a property of this image by name. &#xA;     * &lt;p>&#xA;     * Individual property names are defined by the various image &#xA;     * formats. If a property is not defined for a particular image, this &#xA;     * method returns the &lt;code>UndefinedProperty&lt;/code> object. &#xA;     * &lt;p>&#xA;     * If the properties for this image are not yet known, this method &#xA;     * returns &lt;code>null&lt;/code>, and the &lt;code>ImageObserver&lt;/code> &#xA;     * object is notified later. &#xA;     * &lt;p>&#xA;     * The property name &lt;code>&quot;comment&quot;&lt;/code> should be used to store &#xA;     * an optional comment which can be presented to the application as a &#xA;     * description of the image, its source, or its author. &#xA;     * @param       name   a property name.&#xA;     * @param       observer   an object waiting for this image to be loaded.&#xA;     * @return      the value of the named property.&#xA;     * @throws      &lt;code>NullPointerException&lt;code> if the property name is null.&#xA;     * @see         java.awt.image.ImageObserver&#xA;     * @see         java.awt.Image#UndefinedProperty&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:Field" name="UndefinedProperty">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>UndefinedProperty&lt;/code> object should be returned whenever a&#xA;     * property which was not defined for a particular image is fetched.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getScaledInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="width">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="height">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hints">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a scaled version of this image.&#xA;     * A new &lt;code>Image&lt;/code> object is returned which will render &#xA;     * the image at the specified &lt;code>width&lt;/code> and &#xA;     * &lt;code>height&lt;/code> by default.  The new &lt;code>Image&lt;/code> object&#xA;     * may be loaded asynchronously even if the original source image&#xA;     * has already been loaded completely.  &#xA;     *&#xA;     * &lt;p>&#xA;     * &#xA;     * If either &lt;code>width&lt;/code> &#xA;     * or &lt;code>height&lt;/code> is a negative number then a value is &#xA;     * substituted to maintain the aspect ratio of the original image &#xA;     * dimensions. If both &lt;code>width&lt;/code> and &lt;code>height&lt;/code>&#xA;     * are negative, then the original image dimensions are used.&#xA;     *&#xA;     * @param width the width to which to scale the image.&#xA;     * @param height the height to which to scale the image.&#xA;     * @param hints flags to indicate the type of algorithm to use&#xA;     * for image resampling.&#xA;     * @return     a scaled version of the image.&#xA;     * @exception IllegalArgumentException if &lt;code>width&lt;/code>&#xA;     *             or &lt;code>height&lt;/code> is zero.&#xA;     * @see        java.awt.Image#SCALE_DEFAULT&#xA;     * @see        java.awt.Image#SCALE_FAST &#xA;     * @see        java.awt.Image#SCALE_SMOOTH&#xA;     * @see        java.awt.Image#SCALE_REPLICATE&#xA;     * @see        java.awt.Image#SCALE_AREA_AVERAGING&#xA;     * @since      JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="filter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="image/ImageFilter.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="image/AreaAveragingScaleFilter.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AndExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.2"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:InclusiveOrExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
                </expression>
              </children>
            </expression>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="image/ReplicateScaleFilter.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="prod">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="image/ImageProducer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="image/FilteredImageSource.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.58"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@variable"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.51"/>
          </next>
          <target xsi:type="classifiers:Class" href="Toolkit.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="SCALE_DEFAULT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Use the default image-scaling algorithm.&#xA;     * @since JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCALE_FAST">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Choose an image-scaling algorithm that gives higher priority&#xA;     * to scaling speed than smoothness of the scaled image.&#xA;     * @since JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCALE_SMOOTH">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Choose an image-scaling algorithm that gives higher priority&#xA;     * to image smoothness than scaling speed.&#xA;     * @since JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCALE_REPLICATE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Use the image scaling algorithm embodied in the &#xA;     * &lt;code>ReplicateScaleFilter&lt;/code> class.  &#xA;     * The &lt;code>Image&lt;/code> object is free to substitute a different filter &#xA;     * that performs the same algorithm yet integrates more efficiently&#xA;     * into the imaging infrastructure supplied by the toolkit.&#xA;     * @see        java.awt.image.ReplicateScaleFilter&#xA;     * @since      JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCALE_AREA_AVERAGING">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Use the Area Averaging image scaling algorithm.  The&#xA;     * image object is free to substitute a different filter that&#xA;     * performs the same algorithm yet integrates more efficiently&#xA;     * into the image infrastructure supplied by the toolkit.&#xA;     * @see java.awt.image.AreaAveragingScaleFilter&#xA;     * @since JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="flush">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Flushes all resources being used by this Image object.  This&#xA;     * includes any pixel data that is being cached for rendering to&#xA;     * the screen as well as any system resources that are being used&#xA;     * to store data or pixels for the image.  The image is reset to&#xA;     * a state similar to when it was first created so that if it is&#xA;     * again rendered, the image data will have to be recreated or&#xA;     * fetched again from its source.&#xA;     * &lt;p>&#xA;     * This method always leaves the image in a state such that it can &#xA;     * be reconstructed.  This means the method applies only to cached &#xA;     * or other secondary representations of images such as those that &#xA;     * have been generated from an &lt;tt>ImageProducer&lt;/tt> (read from a &#xA;     * file, for example). It does nothing for off-screen images that &#xA;     * have only one copy of their data.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getCapabilities">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ImageCapabilities.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="gc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="GraphicsConfiguration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an ImageCapabilities object which can be&#xA;     * inquired as to the capabilities of this&#xA;     * Image on the specified GraphicsConfiguration.&#xA;     * This allows programmers to find&#xA;     * out more runtime information on the specific Image&#xA;     * object that they have created.  For example, the user&#xA;     * might create a BufferedImage but the system may have&#xA;     * no video memory left for creating an image of that&#xA;     * size on the given GraphicsConfiguration, so although the object&#xA;     * may be acceleratable in general, it is&#xA;     * does not have that capability on this GraphicsConfiguration.&#xA;     * @param gc a &lt;code>GraphicsConfiguration&lt;/code> object.  A value of null&#xA;     * for this parameter will result in getting the image capabilities&#xA;     * for the default &lt;code>GraphicsConfiguration&lt;/code>.&#xA;     * @return an &lt;code>ImageCapabilities&lt;/code> object that contains&#xA;     * the capabilities of this &lt;code>Image&lt;/code> on the specified&#xA;     * GraphicsConfiguration.&#xA;     * @see #java.awt.image.VolatileImage.getCapabilities()&#xA;     * VolatileImage.getCapabilities()&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <comments>// Note: this is just a default object that gets returned by the</comments>
        <comments>// base Image object.  Subclasses of Image should override this</comments>
        <comments>// method and return an ImageCapabilities object that is appropriate</comments>
        <comments>// for a given instance of that subclass.</comments>
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setAccelerationPriority">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="priority">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets a hint for this image about how important acceleration is.&#xA;     * This priority hint is used to compare to the priorities of other&#xA;     * Image objects when determining how to use scarce acceleration&#xA;     * resources such as video memory.  When and if it is possible to&#xA;     * accelerate this Image, if there are not enough resources available&#xA;     * to provide that acceleration but enough can be freed up by&#xA;     * de-acceleration some other image of lower priority, then that other&#xA;     * Image may be de-accelerated in deference to this one.  Images&#xA;     * that have the same priority take up resources on a first-come,&#xA;     * first-served basis.&#xA;     * @param priority a value between 0 and 1, inclusive, where higher&#xA;     * values indicate more importance for acceleration.  A value of 0&#xA;     * means that this Image should never be accelerated.  Other values&#xA;     * are used simply to determine acceleration priority relative to other&#xA;     * Images.&#xA;     * @throws IllegalArgumentException if &lt;code>priority&lt;/code> is less&#xA;     * than zero or greater than 1.&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="Priority must be a value "/>
                <children xsi:type="references:StringReference" value="between 0 and 1, inclusive"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccelerationPriority">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the current value of the acceleration priority hint.&#xA;     * @see #setAccelerationPriority(float priority) setAccelerationPriority&#xA;     * @return value between 0 and 1, inclusive, which represents the current&#xA;     * priority value&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The abstract class &lt;code>Image&lt;/code> is the superclass of all &#xA; * classes that represent graphical images. The image must be &#xA; * obtained in a platform-specific manner.&#xA; *&#xA; * @version &#x9;1.39, 12/19/03&#xA; * @author &#x9;Sami Shaio&#xA; * @author &#x9;Arthur van Hoff&#xA; * @since       JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
