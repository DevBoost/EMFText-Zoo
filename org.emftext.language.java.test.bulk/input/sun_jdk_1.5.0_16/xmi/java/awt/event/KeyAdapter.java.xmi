<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="KeyAdapter.java">
  <comments>/*&#xA; * @(#)KeyAdapter.java&#x9;1.17 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>event</namespaces>
  <classifiers xsi:type="classifiers:Class" name="KeyAdapter">
    <members xsi:type="members:ClassMethod" name="keyTyped">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="KeyEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked when a key has been typed.&#xA;     * This event occurs when a key press is followed by a key release.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="keyPressed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="KeyEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked when a key has been pressed.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="keyReleased">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="KeyEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invoked when a key has been released.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An abstract adapter class for receiving keyboard events.&#xA; * The methods in this class are empty. This class exists as&#xA; * convenience for creating listener objects.&#xA; * &lt;P>&#xA; * Extend this class to create a &lt;code>KeyEvent&lt;/code> listener &#xA; * and override the methods for the events of interest. (If you implement the &#xA; * &lt;code>KeyListener&lt;/code> interface, you have to define all of&#xA; * the methods in it. This abstract class defines null methods for them&#xA; * all, so you can only have to define methods for events you care about.)&#xA; * &lt;P>&#xA; * Create a listener object using the extended class and then register it with &#xA; * a component using the component's &lt;code>addKeyListener&lt;/code> &#xA; * method. When a key is pressed, released, or typed,  &#xA; * the relevant method in the listener object is invoked,&#xA; * and the &lt;code>KeyEvent&lt;/code> is passed to it.&#xA; *&#xA; * @author Carl Quinn&#xA; * @version 1.17 12/19/03&#xA; *&#xA; * @see KeyEvent&#xA; * @see KeyListener&#xA; * @see &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/post1.0/ui/keylistener.html&quot;>Tutorial: Writing a Key Listener&lt;/a>&#xA; * @see &lt;a href=&quot;http://www.awl.com/cp/javaseries/jcl1_2.html&quot;>Reference: The Java Class Libraries (update file)&lt;/a>&#xA; *&#xA; * @since 1.1&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="KeyListener.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
