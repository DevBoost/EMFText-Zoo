<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="MouseWheelEvent.java">
  <comments>/*&#xA; * @(#)MouseWheelEvent.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>event</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/awt/DebugHelper.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MouseWheelEvent">
    <members xsi:type="members:Field" name="dbg">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../sun/awt/DebugHelper.class.xmi#//@classifiers.0/@members.6"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:ReflectiveClassReference"/>
          </arguments>
        </next>
        <target xsi:type="classifiers:Class" href="../../../sun/awt/DebugHelper.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../sun/awt/DebugHelper.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WHEEL_UNIT_SCROLL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constant representing scrolling by &quot;units&quot; (like scrolling with the&#xA;     * arrow keys)&#xA;     * &#xA;     * @see #getScrollType&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WHEEL_BLOCK_SCROLL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constant representing scrolling by a &quot;block&quot; (like scrolling&#xA;     * with page-up, page-down keys) &#xA;     *&#xA;     * @see #getScrollType&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="scrollType">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Indicates what sort of scrolling should take place in response to this&#xA;     * event, based on platform settings.  Legal values are:&#xA;     * &lt;ul>&#xA;     * &lt;li> WHEEL_UNIT_SCROLL&#xA;     * &lt;li> WHEEL_BLOCK_SCROLL&#xA;     * &lt;/ul>&#xA;     * &#xA;     * @see #getScrollType&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="scrollAmount">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Only valid for scrollType WHEEL_UNIT_SCROLL.&#xA;     * Indicates number of units that should be scrolled per&#xA;     * click of mouse wheel rotation, based on platform settings.&#xA;     *&#xA;     * @see #getScrollAmount&#xA;     * @see #getScrollType&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="wheelRotation">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Indicates how far the mouse wheel was rotated.&#xA;     *&#xA;     * @see #getWheelRotation&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Constructor" name="MouseWheelEvent">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.6"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.7"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.8"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.9"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.10"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>// Thread.dumpStack();</comments>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/awt/DebugHelper.class.xmi#//@classifiers.0/@members.10"/>
                <arguments xsi:type="references:StringReference" value="MouseWheelEvent constructor"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../../sun/awt/DebugHelper.class.xmi#//@classifiers.0/@members.2"/>
          </next>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="source">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Component.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="when">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="modifiers">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clickCount">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="popupTrigger">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scrollType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scrollAmount">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="wheelRotation">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// serial version id?</comments>
        <comments>/**&#xA;     * Constructs a &lt;code>MouseWheelEvent&lt;/code> object with the&#xA;     * specified source component, type, modifiers, coordinates,&#xA;     * scroll type, scroll amount, and wheel rotation.&#xA;     * &lt;p>Note that passing in an invalid &lt;code>id&lt;/code> results in&#xA;     * unspecified behavior. This method throws an&#xA;     * &lt;code>IllegalArgumentException&lt;/code> if &lt;code>source&lt;/code>&#xA;     * is &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @param source         the &lt;code>Component&lt;/code> that originated&#xA;     *                       the event&#xA;     * @param id             the integer that identifies the event&#xA;     * @param when           a long that gives the time the event occurred&#xA;     * @param modifiers      the modifier keys down during event&#xA;     *                       (shift, ctrl, alt, meta)&#xA;     * @param x              the horizontal x coordinate for the mouse location&#xA;     * @param y              the vertical y coordinate for the mouse location&#xA;     * @param clickCount     the number of mouse clicks associated with event&#xA;     * @param popupTrigger   a boolean, true if this event is a trigger for a&#xA;     *                       popup-menu &#xA;     * @param scrollType     the type of scrolling which should take place in&#xA;     *                       response to this event;  valid values are&#xA;     *                       &lt;code>WHEEL_UNIT_SCROLL&lt;/code> and&#xA;     *                       &lt;code>WHEEL_BLOCK_SCROLL&lt;/code>&#xA;     * @param  scrollAmount  for scrollType &lt;code>WHEEL_UNIT_SCROLL&lt;/code>,&#xA;     *                       the number of units to be scrolled&#xA;     * @param wheelRotation  the amount that the mouse wheel was rotated (the&#xA;     *                       number of &quot;clicks&quot;)&#xA;     *&#xA;     * @throws IllegalArgumentException if &lt;code>source&lt;/code> is null&#xA;     * @see MouseEvent#MouseEvent(java.awt.Component, int, long, int, int, int, int, boolean)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getScrollType">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the type of scrolling that should take place in response to this&#xA;     * event.  This is determined by the native platform.  Legal values are:&#xA;     * &lt;ul>&#xA;     * &lt;li> MouseWheelEvent.WHEEL_UNIT_SCROLL&#xA;     * &lt;li> MouseWheelEvent.WHEEL_BLOCK_SCROLL&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return either MouseWheelEvent.WHEEL_UNIT_SCROLL or&#xA;     *  MouseWheelEvent.WHEEL_BLOCK_SCROLL, depending on the configuration of&#xA;     *  the native platform.&#xA;     * @see java.awt.Adjustable#getUnitIncrement&#xA;     * @see java.awt.Adjustable#getBlockIncrement&#xA;     * @see javax.swing.Scrollable#getScrollableUnitIncrement&#xA;     * @see javax.swing.Scrollable#getScrollableBlockIncrement&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getScrollAmount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of units that should be scrolled in response to this&#xA;     * event.  Only valid if &lt;code>getScrollType&lt;/code> returns &#xA;     * &lt;code>MouseWheelEvent.WHEEL_UNIT_SCROLL&lt;/code>&#xA;     *&#xA;     * @return number of units to scroll, or an undefined value if&#xA;     *  &lt;code>getScrollType&lt;/code> returns&#xA;     *  &lt;code>MouseWheelEvent.WHEEL_BLOCK_SCROLL&lt;/code>&#xA;     * @see #getScrollType&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getWheelRotation">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of &quot;clicks&quot; the mouse wheel was rotated.&#xA;     *&#xA;     * @return negative values if the mouse wheel was rotated up/away from&#xA;     * the user, and positive values if the mouse wheel was rotated down/&#xA;     * towards the user&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUnitsToScroll">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This is a convenience method to aid in the implementation of&#xA;     * the common-case MouseWheelListener - to scroll a ScrollPane or&#xA;     * JScrollPane by an amount which conforms to the platform settings.&#xA;     * (Note, however, that &lt;code>ScrollPane&lt;/code> and&#xA;     * &lt;code>JScrollPane&lt;/code> already have this functionality built in.)&#xA;     * &lt;P>&#xA;     * This method returns the number of units to scroll when scroll type is&#xA;     * MouseWheelEvent.WHEEL_UNIT_SCROLL, and should only be called if&#xA;     * &lt;code>getScrollType&lt;/code> returns MouseWheelEvent.WHEEL_UNIT_SCROLL.&#xA;     * &lt;P>&#xA;     * Direction of scroll, amount of wheel movement,&#xA;     * and platform settings for wheel scrolling are all accounted for.&#xA;     * This method does not and cannot take into account value of the&#xA;     * Adjustable/Scrollable unit increment, as this will vary among&#xA;     * scrolling components.&#xA;     * &lt;P>&#xA;     * A simplified example of how this method might be used in a&#xA;     * listener:&#xA;     * &lt;pre> &#xA;     *  mouseWheelMoved(MouseWheelEvent event) {&#xA;     *      ScrollPane sp = getScrollPaneFromSomewhere(); &#xA;     *      Adjustable adj = sp.getVAdjustable()&#xA;     *      if (MouseWheelEvent.getScrollType() == WHEEL_UNIT_SCROLL) {&#xA;     *          int totalScrollAmount =&#xA;     *              event.getUnitsToScroll() *&#xA;     *              adj.getUnitIncrement();&#xA;     *          adj.setValue(adj.getValue() + totalScrollAmount);&#xA;     *      }&#xA;     *  }&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @return the number of units to scroll based on the direction and amount&#xA;     *  of mouse wheel rotation, and on the wheel scrolling settings of the&#xA;     *  native platform&#xA;     * @see #getScrollType&#xA;     * @see #getScrollAmount&#xA;     * @see MouseWheelListener&#xA;     * @see java.awt.Adjustable&#xA;     * @see java.awt.Adjustable#getUnitIncrement&#xA;     * @see javax.swing.Scrollable&#xA;     * @see javax.swing.Scrollable#getScrollableUnitIncrement&#xA;     * @see java.awt.ScrollPane&#xA;     * @see java.awt.ScrollPane#setWheelScrollingEnabled&#xA;     * @see javax.swing.JScrollPane&#xA;     * @see javax.swing.JScrollPane#setWheelScrollingEnabled&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:MultiplicativeExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <multiplicativeOperators xsi:type="operators:Multiplication"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="paramString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a parameter string identifying this event.&#xA;     * This method is useful for event-logging and for debugging.&#xA;     *&#xA;     * @return a string identifying the event and its attributes&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="scrollTypeStr">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value="WHEEL_UNIT_SCROLL"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:StringReference" value="WHEEL_BLOCK_SCROLL"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:StringReference" value="unknown scroll type"/>
              </expression>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="MouseEvent.class.xmi#//@classifiers.0/@members.31"/>
            </next>
            <self xsi:type="literals:Super"/>
          </children>
          <children xsi:type="references:StringReference" value=",scrollType="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
          <children xsi:type="references:StringReference" value=",scrollAmount="/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.8"/>
          <children xsi:type="references:StringReference" value=",wheelRotation="/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An event which indicates that the mouse wheel was rotated in a component.&#xA; * &lt;P>&#xA; * A wheel mouse is a mouse which has a wheel in place of the middle button.&#xA; * This wheel can be rotated towards or away from the user.  Mouse wheels are&#xA; * most often used for scrolling, though other uses are possible.&#xA; * &lt;P>&#xA; * A MouseWheelEvent object is passed to every &lt;code>MouseWheelListener&lt;/code>&#xA; * object which registered to receive the &quot;interesting&quot; mouse events using the&#xA; * component's &lt;code>addMouseWheelListener&lt;/code> method.  Each such listener&#xA; * object gets a &lt;code>MouseEvent&lt;/code> containing the mouse event.&#xA; * &lt;P>&#xA; * Due to the mouse wheel's special relationship to scrolling Components,&#xA; * MouseWheelEvents are delivered somewhat differently than other MouseEvents.&#xA; * This is because while other MouseEvents usually affect a change on &#xA; * the Component directly under the mouse&#xA; * cursor (for instance, when clicking a button), MouseWheelEvents often have&#xA; * an effect away from the mouse cursor (moving the wheel while&#xA; * over a Component inside a ScrollPane should scroll one of the&#xA; * Scrollbars on the ScrollPane).&#xA; * &lt;P>&#xA; * MouseWheelEvents start delivery from the Component underneath the&#xA; * mouse cursor.  If MouseWheelEvents are not enabled on the&#xA; * Component, the event is delivered to the first ancestor &#xA; * Container with MouseWheelEvents enabled.  This will usually be&#xA; * a ScrollPane with wheel scrolling enabled.  The source&#xA; * Component and x,y coordinates will be relative to the event's&#xA; * final destination (the ScrollPane).  This allows a complex&#xA; * GUI to be installed without modification into a ScrollPane, and&#xA; * for all MouseWheelEvents to be delivered to the ScrollPane for&#xA; * scrolling.&#xA; * &lt;P>&#xA; * Some AWT Components are implemented using native widgets which&#xA; * display their own scrollbars and handle their own scrolling.  &#xA; * The particular Components for which this is true will vary from&#xA; * platform to platform.  When the mouse wheel is&#xA; * moved over one of these Components, the event is delivered straight to&#xA; * the native widget, and not propagated to ancestors.&#xA; * &lt;P>&#xA; * Platforms offer customization of the amount of scrolling that&#xA; * should take place when the mouse wheel is moved.  The two most&#xA; * common settings are to scroll a certain number of &quot;units&quot;&#xA; * (commonly lines of text in a text-based component) or an entire &quot;block&quot;&#xA; * (similar to page-up/page-down).  The MouseWheelEvent offers&#xA; * methods for conforming to the underlying platform settings.  These&#xA; * platform settings can be changed at any time by the user.  MouseWheelEvents&#xA; * reflect the most recent settings.&#xA; *&#xA; * @author Brent Christian&#xA; * @version 1.9 12/19/03&#xA; * @see MouseWheelListener&#xA; * @see java.awt.ScrollPane&#xA; * @see java.awt.ScrollPane#setWheelScrollingEnabled(boolean)&#xA; * @see javax.swing.JScrollPane&#xA; * @see javax.swing.JScrollPane#setWheelScrollingEnabled(boolean)&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="MouseEvent.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
