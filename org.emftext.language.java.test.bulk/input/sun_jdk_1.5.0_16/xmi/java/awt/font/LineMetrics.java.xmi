<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="LineMetrics.java">
  <comments>/*&#xA; * @(#)LineMetrics.java&#x9;1.20 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/*&#xA;* @(#)LineMetrics.java&#x9;1.4 98/09/21&#xA;*/</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>font</namespaces>
  <classifiers xsi:type="classifiers:Class" name="LineMetrics">
    <members xsi:type="members:InterfaceMethod" name="getNumChars">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of characters (&lt;code>char&lt;/code> values) in the text whose&#xA;     * metrics are encapsulated by this &lt;code>LineMetrics&lt;/code>&#xA;     * object.&#xA;     * @return the number of characters (&lt;code>char&lt;/code> values) in the text with which&#xA;     *         this &lt;code>LineMetrics&lt;/code> was created.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAscent">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the ascent of the text.  The ascent&#xA;     * is the distance from the baseline&#xA;     * to the ascender line.  The ascent usually represents the&#xA;     * the height of the capital letters of the text.  Some characters&#xA;     * can extend above the ascender line.&#xA;     * @return the ascent of the text.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDescent">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the descent of the text.  The descent&#xA;     * is the distance from the baseline &#xA;     * to the descender line.  The descent usually represents&#xA;     * the distance to the bottom of lower case letters like&#xA;     * 'p'.  Some characters can extend below the descender&#xA;     * line. &#xA;     * @return the descent of the text.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLeading">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the leading of the text. The&#xA;     * leading is the recommended &#xA;     * distance from the bottom of the descender line to the&#xA;     * top of the next line.&#xA;     * @return the leading of the text.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getHeight">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the height of the text.  The&#xA;     * height is equal to the sum of the ascent, the&#xA;     * descent and the leading.&#xA;     * @return the height of the text.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBaselineIndex">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the baseline index of the text.&#xA;     * The index is one of &#xA;     * {@link java.awt.Font#ROMAN_BASELINE ROMAN_BASELINE},&#xA;     * {@link java.awt.Font#CENTER_BASELINE CENTER_BASELINE}, &#xA;     * {@link java.awt.Font#HANGING_BASELINE HANGING_BASELINE}.&#xA;     * @return the baseline of the text.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBaselineOffsets">
      <typeReference xsi:type="types:Float"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the baseline offsets of the text, &#xA;     * relative to the baseline of the text.  The&#xA;     * offsets are indexed by baseline index.  For &#xA;     * example, if the baseline index is &#xA;     * &lt;code>CENTER_BASELINE&lt;/code> then &#xA;     * &lt;code>offsets[HANGING_BASELINE]&lt;/code> is usually&#xA;     * negative, &lt;code>offsets[CENTER_BASELINE]&lt;/code> &#xA;     * is zero, and &lt;code>offsets[ROMAN_BASELINE]&lt;/code> &#xA;     * is usually positive.&#xA;     * @return the baseline offsets of the text.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStrikethroughOffset">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the position of the strike-through line &#xA;     * relative to the baseline.&#xA;     * @return the position of the strike-through line.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStrikethroughThickness">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the thickness of the strike-through line.&#xA;     * @return the thickness of the strike-through line.         &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnderlineOffset">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the position of the underline relative to&#xA;     * the baseline.   &#xA;     * @return the position of the underline.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUnderlineThickness">
      <typeReference xsi:type="types:Float"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the thickness of the underline.&#xA;     * @return the thickness of the underline.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA;* The &lt;code>LineMetrics&lt;/code> class allows access to the&#xA;* metrics needed to layout characters along a line&#xA;* and to layout of a set of lines.  A &lt;code>LineMetrics&lt;/code>&#xA;* object encapsulates the measurement information associated&#xA;* with a run of text.&#xA;* &lt;p>&#xA;* Fonts can have different metrics for different ranges of&#xA;* characters.  The &lt;code>getLineMetrics&lt;/code> methods of&#xA;* {@link java.awt.Font Font} take some text as an argument&#xA;* and return a &lt;code>LineMetrics&lt;/code> object describing the&#xA;* metrics of the initial number of characters in that text, as&#xA;* returned by {@link #getNumChars}.&#xA;*/</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
