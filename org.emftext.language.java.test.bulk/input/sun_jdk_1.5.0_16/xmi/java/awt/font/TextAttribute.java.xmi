<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="TextAttribute.java">
  <comments>/*&#xA; * @(#)TextAttribute.java&#x9;1.46 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <comments>/*&#xA; * (C) Copyright Taligent, Inc. 1996 - 1997, All Rights Reserved&#xA; * (C) Copyright IBM Corp. 1996 - 1998, All Rights Reserved&#xA; *&#xA; * The original version of this source code and documentation is&#xA; * copyrighted and owned by Taligent, Inc., a wholly-owned subsidiary&#xA; * of IBM. These materials are provided under terms of a License&#xA; * Agreement between Taligent and Sun. This technology is protected&#xA; * by multiple US and International patents.&#xA; *&#xA; * This notice and attribution to Taligent may not be removed.&#xA; * Taligent is a registered trademark of Taligent, Inc.&#xA; *&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>font</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/InvalidObjectException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <namespaces>AttributedCharacterIterator</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../text/AttributedCharacterIterator$Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/HashMap.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="TextAttribute">
    <members xsi:type="members:Field" name="instanceMap">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../util/HashMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="29"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// table of all instances in this class, used by readResolve</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="TextAttribute">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../util/Map.class.xmi#//@classifiers.0/@members.5"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <self xsi:type="literals:This"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:ReflectiveClassReference"/>
          </children>
        </condition>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a &lt;code>TextAttribute&lt;/code> with the specified name.&#xA;     * @param name the attribute name to assign to this &#xA;     * &lt;code>TextAttribute&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="readResolve">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/InvalidObjectException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Resolves instances being deserialized to the predefined constants.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../io/InvalidObjectException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="subclass didn't correctly implement readResolve"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <self xsi:type="literals:This"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:ReflectiveClassReference"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="instance">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../util/Map.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../text/AttributedCharacterIterator$Attribute.class.xmi#//@classifiers.0/@members.10"/>
                </arguments>
              </next>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.1/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../io/InvalidObjectException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="unknown attribute name"/>
            </throwable>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="7744112784117861702"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>// Serialization compatibility with Java 2 platform v1.2.</comments>
        <comments>// 1.2 will throw an InvalidObjectException if ever asked to deserialize INPUT_METHOD_UNDERLINE.</comments>
        <comments>// This shouldn't happen in real life.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FAMILY">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="family"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// </comments>
        <comments>// For use with Font.</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Attribute key for the unlocalized font family name.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot; &#xA;     *     SUMMARY=&quot;Key, Value, Constants, Default, and Description &#xA;     *     for TextAttribute FAMILY&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>FAMILY&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>String&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>&amp;quot;Serif&amp;quot;, &amp;quot;SansSerif&amp;quot;&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Host default;&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>The name of the font family. If the family name is not &#xA;     * found, the default font is used. The name should not be the full&#xA;     * font name or specify other attributes (such as the name&#xA;     * &amp;quot;Helvetica Bold&amp;quot;). Such names might result in the default&#xA;     * font if the name does not match a known&#xA;     * family name.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="weight"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the weight of a font.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Constants, Description, Default, &#xA;     *     and Fallback for TextAttribute WEIGHT&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>WEIGHT&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Float&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>&#xA;     * WEIGHT_EXTRA_LIGHT = 0.5,&lt;BR>&#xA;     * WEIGHT_LIGHT = 0.75,&lt;BR>&#xA;     * WEIGHT_DEMILIGHT = 0.875,&lt;BR>&#xA;     * WEIGHT_REGULAR = 1.0,&lt;BR>&#xA;     * WEIGHT_SEMIBOLD = 1.25,&lt;BR>&#xA;     * WEIGHT_MEDIUM = 1.5,&lt;BR>&#xA;     * WEIGHT_DEMIBOLD = 1.75,&lt;BR>&#xA;     * WEIGHT_BOLD = 2.0,&lt;BR>&#xA;     * WEIGHT_HEAVY = 2.25,&lt;BR>&#xA;     * WEIGHT_EXTRABOLD = 2.5,&lt;BR>&#xA;     * WEIGHT_ULTRABOLD = 2.75&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>WEIGHT_REGULAR&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>The value is roughly the ratio of the stem width to &#xA;     * that of the regular weight. If the font has a different value for&#xA;     * specific constants, then the value is interpolated as described in&#xA;     * the class description.&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Fallback&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Currently none. However, in the future, shape &#xA;     * manipulations might be&lt;BR> available to simulate weight variations&#xA;     * for fonts that don't have them.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     * &lt;BR>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_EXTRA_LIGHT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.5"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The lightest predefined weight.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_LIGHT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.75"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The standard light weight.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_DEMILIGHT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.875"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * An intermediate weight between LIGHT and STANDARD.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_REGULAR">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The standard weight. This weight is used if WEIGHT is unspecified.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_SEMIBOLD">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.25"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A moderately heavier weight than REGULAR.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_MEDIUM">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.5"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * An intermediate weight between the REGULAR and BOLD weights.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_DEMIBOLD">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.75"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A moderately lighter weight than BOLD.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_BOLD">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="2.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The standard bold weight.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_HEAVY">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="2.25"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A moderately heavier weight than BOLD.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_EXTRABOLD">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="2.5"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * An extra heavy weight.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WEIGHT_ULTRABOLD">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="2.75"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The heaviest predefined weight.&#xA;     * @see #WEIGHT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WIDTH">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="width"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the width of a font.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Constants, Description, Default, &#xA;     *     and Fallback for TextAttribute WIDTH&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>WIDTH&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Float&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>WIDTH_CONDENSED = 0.75,&lt;BR>&#xA;     * WIDTH_SEMI_CONDENSED = 0.875,&lt;BR>&#xA;     * WIDTH_REGULAR = 1.0,&lt;BR>&#xA;     * WIDTH_SEMI_EXTENDED = 1.25,&lt;BR>&#xA;     * WIDTH_EXTENDED = 1.5&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>WIDTH_REGULAR&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>The value is roughly the ratio of the advance width &#xA;     * to that of the regular width. If the font has a different value for&#xA;     * specific constants, then the value is interpolated as described in&#xA;     * the class description.&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Fallback&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>If a Narrow font is available and matches, use that. &#xA;     * Otherwise scale with a transform based on the value.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WIDTH_CONDENSED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.75"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The most condensed predefined width.&#xA;     * @see #WIDTH&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WIDTH_SEMI_CONDENSED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.875"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A moderately condensed width.&#xA;     * @see #WIDTH&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WIDTH_REGULAR">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The standard width. This width is used if WIDTH is unspecified.&#xA;     * @see #WIDTH&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WIDTH_SEMI_EXTENDED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.25"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A moderately extended width.&#xA;     * @see #WIDTH&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WIDTH_EXTENDED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.5"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The most extended predefined width.&#xA;     * @see #WIDTH&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POSTURE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="posture"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the posture of a font.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Constants, Default, Description, &#xA;     *     and Fallback for TextAttribute POSTURE&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>POSTURE&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Float&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>POSTURE_REGULAR = 0, &lt;BR>&#xA;     * POSTURE_OBLIQUE = 0.20&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>POSTURE_REGULAR&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>The value is interpreted generally as a skew slope, &#xA;     * positive leans to the right. If the font has a different value for&#xA;     * specific constants, then the value is interpolated as described in&#xA;     * the class description. With fonts that have italic faces, not only&#xA;     * the skew of the character changes, but also the letter shapes&#xA;     * might change.&lt;BR>&#xA;     * &lt;B>Notes: &lt;/B>&lt;BR>&#xA;     * To set the value by angle, use:&lt;BR>&#xA;     * &lt;TT>value = new Float(Math.tan(Math.PI*degrees/180.0)&lt;/TT>&lt;BR>&#xA;     * To determine the angle from the value, use:&lt;BR>&#xA;     * &lt;TT>angle = Math.atan(value.floatValue())*180/Math.PI&lt;/TT>&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Fallback&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>If an Oblique font is available and matches, use that. &#xA;     * Otherwise skew with a transform using the posture value interpreted as &#xA;     * run/rise.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     *&#xA;     * @see java.awt.Font#getItalicAngle()&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POSTURE_REGULAR">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The standard posture, upright.&#xA;     * @see #POSTURE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="POSTURE_OBLIQUE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="0.2"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The standard italic posture.&#xA;     * @see #POSTURE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SIZE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="size"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the font size.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Default, Description, and Fallback &#xA;     *     for TextAttribute SIZE&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>SIZE&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Float&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>from System Properties&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Represents point size. Note that the appearance and &#xA;     * metrics of a 12pt font with a 2X transform might be different than&#xA;     * that of a 24 point font with no transform.&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Fallback&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Scale to provided size.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TRANSFORM">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="transform"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the transform of a font.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Default, and Description for &#xA;     *     TextAttribute TRANSFORM&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>TRANSFORM&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>TransformAttribute&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Identity transform&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>&lt;P>Used to transform glyphs rendered by this font. The &#xA;     * primary intent is to support scaling, skewing, and translation. In&#xA;     * general, large rotations do not produce very useful results. The&#xA;     * transform modifies both the glyph and the advance. The translations&#xA;     * in the transform are interpreted as a ratio of the point size. That&#xA;     * is, with a point size of 12, a translation of 0.5 results in a&#xA;     * movement of 6 points.&#xA;     * &lt;p>&#xA;     * The advance point of the transformed glyph is the transform of the &#xA;     * advance point projected onto the baseline. If the advance ends up&#xA;     * to the left (top) of the glyph origin, the two points are swapped.&#xA;     * &lt;p>&#xA;     * &lt;P>&lt;EM>Example one&lt;/EM>: The point &#xA;     * size is 20, the original advance is 10.0, and the transform is a 60 &#xA;     * degree counterclockwise rotation plus an offset up and to the right &#xA;     * of 0.1, -0.1. The translation results in an offset of &amp;lt;2.0, -2.0&amp;gt;.&#xA;     * The original advance point is &amp;lt;10.0, 0.0&amp;gt;; after the rotation it &#xA;     * is &amp;lt;6.0, -8.0&amp;gt;; when adding the offset this becomes &#xA;     * &amp;lt;8.0,-10.0&amp;gt;, when projecting on the (horizontal) baseline this&#xA;     * becomes the new advance point: &amp;lt;8.0, 0.0&amp;gt;. The advance width is&#xA;     * the distance from the origin to the advance point: 8.0. The rotated&#xA;     * glyph is rendered two points up and to the right of its origin and&#xA;     * rotated.  This does not affect the baseline for subsequent&#xA;     * glyphs.&lt;/P>&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SUPERSCRIPT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="superscript"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for super and subscripting.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Constants, Default, Description, &#xA;     *     and Fallback for TextAttribute SUPERSCRIPT&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>SUPERSCRIPT&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Integer&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>SUPERSCRIPT_NONE = 0,&lt;BR>&#xA;     * SUPERSCRIPT_SUPER = 1,&lt;BR>&#xA;     * SUPERSCRIPT_SUB = -1&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>SUPERSCRIPT_NONE&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Requests that the font display the characters with &#xA;     * glyphs at a particular superscript level: 0 = none, 1 =&#xA;     * superscript, 2 = superscript of superscript,...-1&#xA;     * = subscript, -2 = subscript of subscript,... Requests that the font &#xA;     * display text using default superscript (or subscript) glyphs and/or&#xA;     * scaling.&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Fallback&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Use transform with translation of +/-1/2 and scale &#xA;     * of 2/3, progressively for each level. That is, for the transform at&#xA;     * level N (with N != 0):&lt;BR>&#xA;     * &lt;TT>offset = sign(N)*1/2*(2/3)^(abs(N)-1)&lt;BR>&#xA;     * scale = (2/3)^abs(N)&lt;/TT>&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SUPERSCRIPT_SUPER">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Standard superscript.&#xA;     * @see #SUPERSCRIPT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SUPERSCRIPT_SUB">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </arguments>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Standard subscript.&#xA;     * @see #SUPERSCRIPT&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FONT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="font"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the font to use to render text.&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Default, and Description for TextAttribute FONT&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>FONT&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Font&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>None, perform default resolution&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>A way for users to override the resolution of font &#xA;     * attributes into a &lt;code>Font&lt;/code>, or force use of a particular&#xA;     * &lt;code>Font&lt;/code> instance.&#xA;     * This also allows users to specify subclasses of &lt;code>Font&lt;/code> in &#xA;     * cases where a &lt;code>Font&lt;/code> can be subclassed.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CHAR_REPLACEMENT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="char_replacement"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for a user_defined glyph to display in the text in lieu &#xA;     * of a character.&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, and Description for TextAttribute CHAR_REPLACEMENT&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>CHAR_REPLACEMENT&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>GraphicAttribute&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Allows the user to specify an empty position plus &#xA;     * metric information. This method is used to reserve space for a graphic&#xA;     * or other embedded component. Required for&#xA;     * correct BIDI position of 'inline' components within a line. An optional&#xA;     * convenience method allows drawing for simple cases. Follows the &#xA;     * Microsoft model: the character that this is applied to should be &#xA;     * &lt;code>&amp;#92;uFFFC&lt;/code>.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FOREGROUND">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="foreground"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Adornments added to text.</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Attribute key for the foreground paint&#xA;     *  adornment.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Default, and Description of TextAttribute FOREGROUND&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>FOREGROUND&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Paint&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Color.black&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Specify the foreground Paint (or Color) of the text.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="BACKGROUND">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="background"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the background Paint adornment.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Default, and Description of TextAttribute BACKGROUND&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>BACKGROUND&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Paint&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>null&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Specify the background Paint (or Color) of the text.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNDERLINE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="underline"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for underline adornments.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot; &#xA;     *     SUMMARY=&quot;Key, Value, Constants, Default, Description, &#xA;     *     and Fallback for TextAttribute UNDERLINE&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>UNDERLINE&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Integer&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>UNDERLINE_ON = 0&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>none&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>An embellishment added to the glyphs rendered by a &#xA;     * font.&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Fallback&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNDERLINE_ON">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:Byte"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </arguments>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Standard underline at the roman baseline for roman text, and below&#xA;     * the decenders for other text.&#xA;     *&#xA;     * @see #UNDERLINE&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="STRIKETHROUGH">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="strikethrough"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the strikethrough adornment.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Constants, Default, and Description&#xA;     *     for TextAttribute STRIKETHROUGH&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>STRIKETHROUGH&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Boolean&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>true = on, false = off&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>off&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>An embellishment added to the glyphs rendered by a &#xA;     * font.&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="STRIKETHROUGH_ON">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:BooleanLiteral" value="true"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A single strikethrough.&#xA;     *&#xA;     * @see #STRIKETHROUGH&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RUN_DIRECTION">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="run_direction"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// Attributes use to control layout of text on a line.</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Attribute key for the run direction of the line.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Constants, Default, and Description &#xA;     *     of TextAttribute RUN_DIRECTION&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>RUN_DIRECTION&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Boolean&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>RUN_DIRECTION_LTR = true, RUN_DIRECTION_RTL = false&#xA;     * &lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Use the default Unicode base direction from the BIDI &#xA;     * algorithm.&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>&lt;P>Specifies which base run direction to use when &#xA;     * positioning mixed directional runs within a paragraph. If this value is&#xA;     * RUN_DIRECTION_DEFAULT, &lt;code>TextLayout&lt;/code> uses the default Unicode&#xA;     * base direction from the BIDI algorithm.&lt;/P>&#xA;     * &lt;P>&lt;I>This attribute should have the same value over the whole &#xA;     * paragraph.&lt;/I>&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RUN_DIRECTION_LTR">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:BooleanLiteral"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Left-to-right run direction.&#xA;     * @see #RUN_DIRECTION&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="RUN_DIRECTION_RTL">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:BooleanLiteral" value="true"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Right-to-left run direction.&#xA;     * @see #RUN_DIRECTION&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="BIDI_EMBEDDING">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="bidi_embedding"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the embedding level for nested bidirectional runs.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Limits, Default, and Description &#xA;     *     of TextAttribute BIDI_EMBEDDING&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>BIDI_EMBEDDING&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Integer&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Limits&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Positive values 1 through 61 are &lt;I>embedding&lt;/I>&#xA;     * levels, negative values&lt;BR> through -61 are &lt;I>override&lt;/I> levels&#xA;     * &lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Use standard BIDI to compute levels from formatting&#xA;     * characters in the text.&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Specifies the bidi embedding level of the character.&#xA;     * When this attribute is present anywhere in a paragraph, then the &#xA;     * Unicode characters RLO, LRO, RLE, LRE, PDF are disregarded in the BIDI &#xA;     * analysis of that paragraph. &#xA;     * See the Unicode Standard v. 2.0, section 3-11.&#xA;     * &lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="JUSTIFICATION">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="justification"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for the justification of a paragraph.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Limits, Default, and Description&#xA;     *     of TextAttribute JUSTIFICATION&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>JUSTIFICATION&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Float&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Limits&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>0.0 through1.0&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>1.0&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Description&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>&lt;P>Specifies which fraction of the extra space to use &#xA;     * when justification is requested. For example, if the line is 50 points&#xA;     * wide and the margins are 70 points apart, a value of 0.5 means that the&#xA;     * line is padded to reach a width of 60 points.&lt;/P>&#xA;     * &lt;P>&lt;I>This attribute should have the same value over the whole&#xA;     * paragraph.&lt;/I>&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="JUSTIFICATION_FULL">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral" decimalValue="1.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Justify the line to the full requested width.&#xA;     * @see #JUSTIFICATION&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="JUSTIFICATION_NONE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalFloatLiteral"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Float.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Do not allow the line to be justified.&#xA;     * @see #JUSTIFICATION&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="INPUT_METHOD_HIGHLIGHT">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="input method highlight"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>//</comments>
        <comments>// For use by input method.</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Attribute key for input method highlight styles.&#xA;     * &lt;p>Values are instances of &#xA;     * {@link java.awt.im.InputMethodHighlight InputMethodHighlight}.&#xA;     * These instances should be wrapped in &#xA;     * {@link java.text.Annotation Annotation} instances&#xA;     * if segments need to be highlighted separately.&#xA;     * &lt;p>&#xA;     * Input method highlights are used while text is being composed&#xA;     * using an input method. Text editing components should retain them&#xA;     * even if they generally only deal with unstyled text, and make them&#xA;     * available to the drawing routines.&#xA;     * @see java.awt.im.InputMethodHighlight&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="INPUT_METHOD_UNDERLINE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="input method underline"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for input method underline adornments.&#xA;     *&#xA;     * &lt;P>&lt;TABLE BORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;1&quot;&#xA;     *     SUMMARY=&quot;Key, Value, Limits, Default and Description&#xA;     *     of TextAttribute INPUT_METHOD_UNDERLINE&quot;>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Key&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>INPUT_METHOD_UNDERLINE&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Value&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>Integer&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Constants&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>UNDERLINE_LOW_ONE_PIXEL, UNDERLINE_LOW_TWO_PIXEL,&#xA;     *     UNDERLINE_LOW_DOTTED, UNDERLINE_LOW_GRAY, UNDERLINE_LOW_DASHED&lt;/TD>&lt;/TR>&#xA;     * &lt;TR>&#xA;     * &lt;TH VALIGN=&quot;TOP&quot; ALIGN=&quot;RIGHT&quot;>&lt;P ALIGN=RIGHT>Default&lt;/TH>&#xA;     * &lt;TD VALIGN=&quot;TOP&quot;>no underline&lt;/TD>&lt;/TR>&#xA;     * &lt;/TABLE>&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNDERLINE_LOW_ONE_PIXEL">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Single pixel solid low underline.&#xA;     * @see #INPUT_METHOD_UNDERLINE&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNDERLINE_LOW_TWO_PIXEL">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Double pixel solid low underline.&#xA;     * @see #INPUT_METHOD_UNDERLINE&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNDERLINE_LOW_DOTTED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Single pixel dotted low underline.&#xA;     * @see #INPUT_METHOD_UNDERLINE&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNDERLINE_LOW_GRAY">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Double pixel gray low underline.&#xA;     * @see #INPUT_METHOD_UNDERLINE&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UNDERLINE_LOW_DASHED">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Single pixel dashed low underline.&#xA;     * @see #INPUT_METHOD_UNDERLINE&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SWAP_COLORS">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="swap_colors"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for swapping foreground and background Paints (or Colors).&#xA;     *&#xA;     * &lt;p>Values are instances of &lt;code>Boolean&lt;/code>.&#xA;     * The default is not to swap the foreground and background.&#xA;     * If the foreground and background attributes are both defined,&#xA;     * this causes them to be swapped when rendering text.  If either is&#xA;     * defaulted, the exact effect is undefined--generally it will produce&#xA;     * an 'inverted' appearance.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SWAP_COLORS_ON">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:BooleanLiteral" value="true"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** Swap foreground and background. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NUMERIC_SHAPING">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:StringReference" value="numeric_shaping"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attribute key for converting ASCII decimal digits to other decimal ranges.&#xA;     *&#xA;     * &lt;p>Values are instances of &lt;code>NumericShaping&lt;/code>.&#xA;     * The default is not to perform numeric shaping.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>TextAttribute&lt;/code> class defines attribute keys and&#xA; * attribute values used for text rendering. &#xA; * &lt;p>&#xA; * &lt;code>TextAttribute&lt;/code> instances are used as attribute keys to&#xA; * identify attributes in &#xA; * {@link java.text.AttributedCharacterIterator AttributedCharacterIterator}, &#xA; * {@link java.awt.Font Font}, and other classes handling text &#xA; * attributes. Other constants defined in this class are used &#xA; * as attribute values.&#xA; * &lt;p>&#xA; * For each text attribute, the documentation describes:&#xA; * &lt;UL>&#xA; *   &lt;LI>the type of their values,&#xA; *   &lt;LI>the valid values if there are limitations&#xA; *   &lt;LI>relevant constants&#xA; *   &lt;LI>the default effect if the attribute is absent (or has a&#xA; *&#x9;&lt;code>null&lt;/code> value).&#xA; *   &lt;LI>a description of the effect.&#xA; *   &lt;LI>the fallback behavior if the exact attribute requested is not &#xA; *&#x9;available.&#xA; * &lt;/UL>&#xA; * &lt;p>&#xA; * &lt;H4>Types of Values&lt;/H4>&#xA; * &lt;UL>&#xA; *   &lt;LI>The values of attributes must always be immutable.&#xA; *   &lt;LI>Where a list of limitations is given, any value outside of that&#xA; *   set is reserved for future use, and ignored at present.&#xA; *   &lt;LI>If the value is &lt;code>null&lt;/code> or not of the proper type&#xA; *&#x9;then it has the default effect. The effect of a particular value&#xA; *&#x9;can be interpolated, especially in the case of multiple master&#xA; *&#x9;fonts. This interpolation is done based on the nearest defined&#xA; * &#x9;constants above and below the request:&lt;BR>&#xA; *      &lt;BLOCKQUOTE>&lt;TT>&#xA; *&#x9;interpolation = (request - below)/(above - below);&#xA; *&#x9;&lt;/TT>&lt;/BLOCKQUOTE>&#xA; * &lt;/UL>&#xA; * &lt;p>&#xA; * &lt;H4>Interpolation&lt;/H4>&#xA; * &lt;UL>&#xA; *   &lt;LI>Fonts should interpolate values in certain circumstances. For example,&#xA; *   when the WEIGHT value is 2.13. If the nearest surrounding values&#xA; *   in the font are WEIGHT_BOLD = 2.0 and WEIGHT_HEAVY = 2.25 then font would&#xA; *   then interpret the WEIGHT request as being 52% of the way between what&#xA; *   it considers BOLD and what it considers HEAVY. If the nearest surrounding&#xA; *   values are WEIGHT_SEMIBOLD = 1.25 and WEIGHT_ULTRABOLD = 2.75 then the&#xA; *   WEIGHT request is interpreted as being 58.67% of the way between SEMIBOLD&#xA; *   and ULTRABOLD.&#xA; *   &lt;LI>Where a font does not have enough capability to handle a given &#xA; *   request, such as superscript, then it should simulate it to the best of &#xA; *   its ability.  To determine if simulation is being performed, the client&#xA; *   should query the font to see what actual attributes were used.&#xA; * &lt;/UL>&#xA; * &#xA; * @see java.text.AttributedCharacterIterator&#xA; * @see java.awt.Font &#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../../text/AttributedCharacterIterator$Attribute.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
