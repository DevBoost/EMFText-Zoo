<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="FlavorMap.java">
  <comments>/*&#xA; * @(#)FlavorMap.java&#x9;1.19 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>datatransfer</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="FlavorMap">
    <members xsi:type="members:InterfaceMethod" name="getNativesForFlavors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a &lt;code>Map&lt;/code> of the specified &lt;code>DataFlavor&lt;/code>s to&#xA;     * their corresponding &lt;code>String&lt;/code> native. The returned&#xA;     * &lt;code>Map&lt;/code> is a modifiable copy of this &lt;code>FlavorMap&lt;/code>'s&#xA;     * internal data. Client code is free to modify the &lt;code>Map&lt;/code>&#xA;     * without affecting this object.&#xA;     *&#xA;     * @param flavors an array of &lt;code>DataFlavor&lt;/code>s which will be the&#xA;     *        key set of the returned &lt;code>Map&lt;/code>. If &lt;code>null&lt;/code> is&#xA;     *        specified, a mapping of all &lt;code>DataFlavor&lt;/code>s currently&#xA;     *        known to this &lt;code>FlavorMap&lt;/code> to their corresponding &#xA;     *        &lt;code>String&lt;/code> natives will be returned.&#xA;     * @return a &lt;code>java.util.Map&lt;/code> of &lt;code>DataFlavor&lt;/code>s to&#xA;     *         &lt;code>String&lt;/code> natives&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="DataFlavor.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flavors">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DataFlavor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFlavorsForNatives">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a &lt;code>Map&lt;/code> of the specified &lt;code>String&lt;/code> natives&#xA;     * to their corresponding &lt;code>DataFlavor&lt;/code>. The returned&#xA;     * &lt;code>Map&lt;/code> is a modifiable copy of this &lt;code>FlavorMap&lt;/code>'s&#xA;     * internal data. Client code is free to modify the &lt;code>Map&lt;/code>&#xA;     * without affecting this object.&#xA;     *&#xA;     * @param natives an array of &lt;code>String&lt;/code>s which will be the&#xA;     *        key set of the returned &lt;code>Map&lt;/code>. If &lt;code>null&lt;/code> is&#xA;     *        specified, a mapping of all &lt;code>String&lt;/code> natives currently&#xA;     *        known to this &lt;code>FlavorMap&lt;/code> to their corresponding&#xA;     *        &lt;code>DataFlavor&lt;/code>s will be returned.&#xA;     * @return a &lt;code>java.util.Map&lt;/code> of &lt;code>String&lt;/code> natives to&#xA;     *         &lt;code>DataFlavor&lt;/code>s&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="DataFlavor.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Map.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="natives">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A two-way Map between &quot;natives&quot; (Strings), which correspond to platform-&#xA; * specfic data formats, and &quot;flavors&quot; (DataFlavors), which corerspond to&#xA; * platform-independent MIME types. FlavorMaps need not be symmetric, but&#xA; * typically are.&#xA; *&#xA; * @version 1.19, 05/05/04&#xA; *&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
