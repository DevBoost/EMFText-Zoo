<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="FlavorTable.java">
  <comments>/*&#xA; * @(#)FlavorTable.java&#x9;1.5 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>datatransfer</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="FlavorTable">
    <members xsi:type="members:InterfaceMethod" name="getNativesForFlavor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a &lt;code>List&lt;/code> of &lt;code>String&lt;/code> natives to which the&#xA;     * specified &lt;code>DataFlavor&lt;/code> corresponds. The &lt;code>List&lt;/code>&#xA;     * will be sorted from best native to worst. That is, the first native will&#xA;     * best reflect data in the specified flavor to the underlying native&#xA;     * platform. The returned &lt;code>List&lt;/code> is a modifiable copy of this&#xA;     * &lt;code>FlavorTable&lt;/code>'s internal data. Client code is free to modify&#xA;     * the &lt;code>List&lt;/code> without affecting this object.&#xA;     *&#xA;     * @param flav the &lt;code>DataFlavor&lt;/code> whose corresponding natives&#xA;     *        should be returned. If &lt;code>null&lt;/code> is specified, all&#xA;     *        natives currently known to this &lt;code>FlavorTable&lt;/code> are&#xA;     *        returned in a non-deterministic order.&#xA;     * @return a &lt;code>java.util.List&lt;/code> of &lt;code>java.lang.String&lt;/code>&#xA;     *         objects which are platform-specific representations of platform-&#xA;     *         specific data formats&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flav">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DataFlavor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFlavorsForNative">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a &lt;code>List&lt;/code> of &lt;code>DataFlavor&lt;/code>s to which the&#xA;     * specified &lt;code>String&lt;/code> corresponds. The &lt;code>List&lt;/code> will be&#xA;     * sorted from best &lt;code>DataFlavor&lt;/code> to worst. That is, the first&#xA;     * &lt;code>DataFlavor&lt;/code> will best reflect data in the specified&#xA;     * native to a Java application. The returned &lt;code>List&lt;/code> is a&#xA;     * modifiable copy of this &lt;code>FlavorTable&lt;/code>'s internal data.&#xA;     * Client code is free to modify the &lt;code>List&lt;/code> without affecting&#xA;     * this object.&#xA;     *&#xA;     * @param nat the native whose corresponding &lt;code>DataFlavor&lt;/code>s&#xA;     *        should be returned. If &lt;code>null&lt;/code> is specified, all&#xA;     *        &lt;code>DataFlavor&lt;/code>s currently known to this &#xA;     *        &lt;code>FlavorTable&lt;/code> are returned in a non-deterministic&#xA;     *        order.&#xA;     * @return a &lt;code>java.util.List&lt;/code> of &lt;code>DataFlavor&lt;/code>&#xA;     *         objects into which platform-specific data in the specified,&#xA;     *         platform-specific native can be translated&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="DataFlavor.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nat">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A FlavorMap which relaxes the traditional 1-to-1 restriction of a Map. A&#xA; * flavor is permitted to map to any number of natives, and likewise a native&#xA; * is permitted to map to any number of flavors. FlavorTables need not be&#xA; * symmetric, but typically are.&#xA; *&#xA; * @author David Mendenhall&#xA; * @version 1.5, 05/05/04&#xA; *&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="FlavorMap.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
