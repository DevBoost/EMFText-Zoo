<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="FontMetrics.java">
  <comments>/*&#xA; * @(#)FontMetrics.java&#x9;1.53 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="Graphics2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>font</namespaces>
    <classifier xsi:type="classifiers:Class" href="font/FontRenderContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>font</namespaces>
    <classifier xsi:type="classifiers:Class" href="font/LineMetrics.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../text/CharacterIterator.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="FontMetrics">
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>/* ensure that the necessary native libraries are loaded */</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.75"/>
          </next>
          <target xsi:type="classifiers:Class" href="Toolkit.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.31"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
          </child>
        </condition>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="font">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * The actual {@link Font} from which the font metrics are&#xA;     * created. &#xA;     * This cannot be null.&#xA;     *&#xA;     * @serial&#xA;     * @see #getFont()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="1681126225205050147"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * JDK 1.1 serialVersionUID&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="FontMetrics">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="font">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates a new &lt;code>FontMetrics&lt;/code> object for finding out&#xA;     * height and width information about the specified &lt;code>Font&lt;/code> &#xA;     * and specific character glyphs in that &lt;code>Font&lt;/code>.&#xA;     * @param     font the &lt;code>Font&lt;/code>&#xA;     * @see       java.awt.Font&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getFont">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>Font&lt;/code> described by this&#xA;     * &lt;code>FontMetrics&lt;/code> object.&#xA;     * @return    the &lt;code>Font&lt;/code> described by this &#xA;     * &lt;code>FontMetrics&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLeading">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the &lt;em>standard leading&lt;/em> of the &#xA;     * &lt;code>Font&lt;/code> described by this &lt;code>FontMetrics&lt;/code>&#xA;     * object.  The standard leading, or&#xA;     * interline spacing, is the logical amount of space to be reserved&#xA;     * between the descent of one line of text and the ascent of the next&#xA;     * line. The height metric is calculated to include this extra space.&#xA;     * @return    the standard leading of the &lt;code>Font&lt;/code>.&#xA;     * @see   #getHeight()&#xA;     * @see   #getAscent()&#xA;     * @see   #getDescent()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAscent">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the &lt;em>font ascent&lt;/em> of the &lt;code>Font&lt;/code> &#xA;     * described by this &lt;code>FontMetrics&lt;/code> object. The font ascent&#xA;     * is the distance from the font's baseline to the top of most&#xA;     * alphanumeric characters. Some characters in the &lt;code>Font&lt;/code> &#xA;     * might extend above the font ascent line.&#xA;     * @return     the font ascent of the &lt;code>Font&lt;/code>.&#xA;     * @see        #getMaxAscent()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.59"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDescent">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the &lt;em>font descent&lt;/em> of the &lt;code>Font&lt;/code> &#xA;     * described by this&#xA;     * &lt;code>FontMetrics&lt;/code> object. The font descent is the distance&#xA;     * from the font's baseline to the bottom of most alphanumeric&#xA;     * characters with descenders. Some characters in the&#xA;     * &lt;code>Font&lt;/code> might extend&#xA;     * below the font descent line.&#xA;     * @return     the font descent of the &lt;code>Font&lt;/code>.&#xA;     * @see        #getMaxDescent()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getHeight">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the standard height of a line of text in this font.  This&#xA;     * is the distance between the baseline of adjacent lines of text.&#xA;     * It is the sum of the leading + ascent + descent. Due to rounding&#xA;     * this may not be the same as getAscent() + getDescent() + getLeading().&#xA;     * There is no guarantee that lines of text spaced at this distance are&#xA;     * disjoint; such lines may overlap if some characters overshoot&#xA;     * either the standard ascent or the standard descent metric.&#xA;     * @return    the standard height of the font.&#xA;     * @see       #getLeading()&#xA;     * @see       #getAscent()&#xA;     * @see       #getDescent()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.5"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxAscent">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the maximum ascent of the &lt;code>Font&lt;/code> &#xA;     * described by this &lt;code>FontMetrics&lt;/code> object.  No character &#xA;     * extends further above the font's baseline than this height.&#xA;     * @return    the maximum ascent of any character in the &#xA;     * &lt;code>Font&lt;/code>.&#xA;     * @see       #getAscent()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxDescent">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines the maximum descent of the &lt;code>Font&lt;/code> &#xA;     * described by this &lt;code>FontMetrics&lt;/code> object.  No character &#xA;     * extends further below the font's baseline than this height.&#xA;     * @return    the maximum descent of any character in the&#xA;     * &lt;code>Font&lt;/code>.&#xA;     * @see       #getDescent()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxDecent">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * For backward compatibility only.&#xA;     * @return    the maximum descent of any character in the&#xA;     * &lt;code>Font&lt;/code>.&#xA;     * @see #getMaxDescent()&#xA;     * @deprecated As of JDK version 1.1.1,&#xA;     * replaced by &lt;code>getMaxDescent()&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxAdvance">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the maximum advance width of any character in this &#xA;     * &lt;code>Font&lt;/code>.  The advance is the&#xA;     * distance from the leftmost point to the rightmost point on the&#xA;     * string's baseline.  The advance of a &lt;code>String&lt;/code> is    &#xA;     * not necessarily the sum of the advances of its characters.&#xA;     * @return    the maximum advance width of any character&#xA;     *            in the &lt;code>Font&lt;/code>, or &lt;code>-1&lt;/code> if the&#xA;     *            maximum advance width is not known.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="charWidth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codePoint">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the advance width of the specified character in this &#xA;     * &lt;code>Font&lt;/code>.  The advance is the&#xA;     * distance from the leftmost point to the rightmost point on the&#xA;     * character's baseline.  Note that the advance of a&#xA;     * &lt;code>String&lt;/code> is not necessarily the sum of the advances &#xA;     * of its characters.&#xA;     * &#xA;     * &lt;p>This method doesn't validate the specified character to be a&#xA;     * valid Unicode code point. The caller must validate the&#xA;     * character value using {@link&#xA;     * java.lang.Character#isValidCodePoint(int)&#xA;     * Character.isValidCodePoint} if necessary.&#xA;     *&#xA;     * @param codePoint the character (Unicode code point) to be measured&#xA;     * @return    the advance width of the specified character&#xA;     *            in the &lt;code>Font&lt;/code> described by this&#xA;     *&#x9;&#x9;  &lt;code>FontMetrics&lt;/code> object.&#xA;     * @see   #charsWidth(char[], int, int)&#xA;     * @see   #stringWidth(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <comments>// substitute missing glyph width</comments>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:HexIntegerLiteral" hexValue="65535"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.78"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
              </arraySelectors>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="buffer">
              <typeReference xsi:type="types:Char"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="len">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.93"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@elseStatement/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@elseStatement/@statements.0/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@elseStatement/@statements.1/@variable"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="charWidth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the advance width of the specified character in this &#xA;     * &lt;code>Font&lt;/code>.  The advance is the&#xA;     * distance from the leftmost point to the rightmost point on the&#xA;     * character's baseline.  Note that the advance of a&#xA;     * &lt;code>String&lt;/code> is not necessarily the sum of the advances &#xA;     * of its characters.&#xA;     *&#xA;     * &lt;p>&lt;b>Note:&lt;/b> This method cannot handle &lt;a&#xA;     * href=&quot;../../lang/Character.html#supplementary&quot;> supplementary&#xA;     * characters&lt;/a>. To support all Unicode characters, including&#xA;     * supplementary characters, use the {@link #charWidth(int)} method.&#xA;     *&#xA;     * @param ch the character to be measured&#xA;     * @return     the advance width of the specified character&#xA;     *                  in the &lt;code>Font&lt;/code> described by this &#xA;     *&#x9;&#x9;&#x9;&lt;code>FontMetrics&lt;/code> object.&#xA;     * @see        #charsWidth(char[], int, int)&#xA;     * @see        #stringWidth(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </arraySelectors>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="data">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationByValues">
            <arrayInitializer>
              <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </arrayInitializer>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.1/@variable"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="stringWidth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the total advance width for showing the specified &#xA;     * &lt;code>String&lt;/code> in this &lt;code>Font&lt;/code>.  The advance&#xA;     * is the distance from the leftmost point to the rightmost point&#xA;     * on the string's baseline.  &#xA;     * &lt;p>&#xA;     * Note that the total advance width returned from this method&#xA;     * does not take into account the rendering context.  Therefore, &#xA;     * the anti-aliasing and fractional metrics hints can affect the&#xA;     * value of the advance.  When enabling the anti-aliasing and &#xA;     * fractional metrics hints, use &#xA;     * &lt;code>getStringBounds(String, Graphics)&lt;/code> &#xA;     * instead of this method.  The advance of a &lt;code>String&lt;/code> is&#xA;     * not necessarily the sum of the advances of its characters.&#xA;     * &lt;p>&#xA;     * @param str the &lt;code>String&lt;/code> to be measured&#xA;     * @return    the advance width of the specified &lt;code>String&lt;/code>&#xA;     *                  in the &lt;code>Font&lt;/code> described by this&#xA;     *&#x9;&#x9;&#x9;&lt;code>FontMetrics&lt;/code>.&#xA;     * @see       #bytesWidth(byte[], int, int)&#xA;     * @see       #charsWidth(char[], int, int)&#xA;     * @see       #getStringBounds(String, Graphics)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="len">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="data">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Char"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.29"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.1/@variable"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="charsWidth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the total advance width for showing the specified array&#xA;     * of characters in this &lt;code>Font&lt;/code>.  The advance is the&#xA;     * distance from the leftmost point to the rightmost point on the&#xA;     * string's baseline.  The advance of a &lt;code>String&lt;/code>&#xA;     * is not necessarily the sum of the advances of its characters.&#xA;     * This is equivalent to measuring a &lt;code>String&lt;/code> of the&#xA;     * characters in the specified range.&#xA;     * @param data the array of characters to be measured&#xA;     * @param off the start offset of the characters in the array&#xA;     * @param len the number of characters to be measured from the array&#xA;     * @return    the advance width of the subarray of the specified&#xA;     *               &lt;code>char&lt;/code> array in the font described by&#xA;     *               this &lt;code>FontMetrics&lt;/code> object.&#xA;     * @see       #charWidth(int)&#xA;     * @see       #charWidth(char)&#xA;     * @see       #bytesWidth(byte[], int, int)&#xA;     * @see       #stringWidth(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="bytesWidth">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="off">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="len">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the total advance width for showing the specified array&#xA;     * of bytes in this &lt;code>Font&lt;/code>.  The advance is the&#xA;     * distance from the leftmost point to the rightmost point on the&#xA;     * string's baseline.  The advance of a &lt;code>String&lt;/code>&#xA;     * is not necessarily the sum of the advances of its characters.  &#xA;     * This is equivalent to measuring a &lt;code>String&lt;/code> of the&#xA;     * characters in the specified range.&#xA;     * @param data the array of bytes to be measured&#xA;     * @param off the start offset of the bytes in the array&#xA;     * @param len the number of bytes to be measured from the array&#xA;     * @return    the advance width of the subarray of the specified&#xA;     *               &lt;code>byte&lt;/code> array in the &lt;code>Font&lt;/code> &#xA;     *&#x9;&#x9;&#x9;described by&#xA;     *               this &lt;code>FontMetrics&lt;/code> object.&#xA;     * @see       #charsWidth(char[], int, int)&#xA;     * @see       #stringWidth(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.2"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getWidths">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the advance widths of the first 256 characters in the &#xA;     * &lt;code>Font&lt;/code>.  The advance is the&#xA;     * distance from the leftmost point to the rightmost point on the&#xA;     * character's baseline.  Note that the advance of a&#xA;     * &lt;code>String&lt;/code> is not necessarily the sum of the advances &#xA;     * of its characters.&#xA;     * @return    an array storing the advance widths of the&#xA;     *                 characters in the &lt;code>Font&lt;/code>&#xA;     *                 described by this &lt;code>FontMetrics&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="widths">
          <typeReference xsi:type="types:Int"/>
          <arrayDimensionsAfter/>
          <initialValue xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@init"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="256"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="ch">
          <typeReference xsi:type="types:Char"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.1/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hasUniformLineMetrics">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks to see if the &lt;code>Font&lt;/code> has uniform line metrics.  A &#xA;     * composite font may consist of several different fonts to cover&#xA;     * various character sets.  In such cases, the &#xA;     * &lt;code>FontLineMetrics&lt;/code> objects are not uniform.  &#xA;     * Different fonts may have a different ascent, descent, metrics and&#xA;     * so on.  This information is sometimes necessary for line &#xA;     * measuring and line breaking.&#xA;     * @return &lt;code>true&lt;/code> if the font has uniform line metrics;&#xA;     * &lt;code>false&lt;/code> otherwise.&#xA;     * @see java.awt.Font#hasUniformLineMetrics()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.91"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLineMetrics">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="font/LineMetrics.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the {@link LineMetrics} object for the specified&#xA;     * &lt;code>String&lt;/code> in the specified {@link Graphics} context.&#xA;     * @param str the specified &lt;code>String&lt;/code>&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>LineMetrics&lt;/code> object created with the&#xA;     * specified &lt;code>String&lt;/code> and &lt;code>Graphics&lt;/code> context.&#xA;     * @see java.awt.Font#getLineMetrics(String, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.93"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLineMetrics">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="font/LineMetrics.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beginIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="limit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the {@link LineMetrics} object for the specified&#xA;     * &lt;code>String&lt;/code> in the specified {@link Graphics} context.&#xA;     * @param str the specified &lt;code>String&lt;/code>&#xA;     * @param beginIndex the initial offset of &lt;code>str&lt;/code>&#xA;     * @param limit the length of &lt;code>str&lt;/code>&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>LineMetrics&lt;/code> object created with the&#xA;     * specified &lt;code>String&lt;/code> and &lt;code>Graphics&lt;/code> context.&#xA;     * @see java.awt.Font#getLineMetrics(String, int, int, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.94"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.2"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.3"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLineMetrics">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="font/LineMetrics.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chars">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beginIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="limit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the {@link LineMetrics} object for the specified&#xA;     * character array in the specified {@link Graphics} context.&#xA;     * @param chars the specified character array&#xA;     * @param beginIndex the initial offset of &lt;code>chars&lt;/code>&#xA;     * @param limit the length of &lt;code>chars&lt;/code>&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>LineMetrics&lt;/code> object created with the&#xA;     * specified character array and &lt;code>Graphics&lt;/code> context.&#xA;     * @see java.awt.Font#getLineMetrics(char[], int, int, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.95"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.2"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.3"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLineMetrics">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="font/LineMetrics.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ci">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../text/CharacterIterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beginIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="limit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the {@link LineMetrics} object for the specified&#xA;     * {@link CharacterIterator} in the specified {@link Graphics} &#xA;     * context.&#xA;     * @param ci the specified &lt;code>CharacterIterator&lt;/code>&#xA;     * @param beginIndex the initial offset in &lt;code>ci&lt;/code>&#xA;     * @param limit the end index of &lt;code>ci&lt;/code>&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>LineMetrics&lt;/code> object created with the&#xA;     * specified arguments.&#xA;     * @see java.awt.Font#getLineMetrics(CharacterIterator, int, int, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.96"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.2"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.3"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounds of the specified &lt;code>String&lt;/code> in the&#xA;     * specified &lt;code>Graphics&lt;/code> context.  The bounds is used&#xA;     * to layout the &lt;code>String&lt;/code>.&#xA;     * @param str the specified &lt;code>String&lt;/code>   &#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a {@link Rectangle2D} that is the bounding box of the&#xA;     * specified &lt;code>String&lt;/code> in the specified&#xA;     * &lt;code>Graphics&lt;/code> context.&#xA;     * @see java.awt.Font#getStringBounds(String, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.97"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beginIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="limit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounds of the specified &lt;code>String&lt;/code> in the&#xA;     * specified &lt;code>Graphics&lt;/code> context.  The bounds is used&#xA;     * to layout the &lt;code>String&lt;/code>.&#xA;     * @param str the specified &lt;code>String&lt;/code>&#xA;     * @param beginIndex the offset of the beginning of &lt;code>str&lt;/code>&#xA;     * @param limit the length of &lt;code>str&lt;/code>&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>Rectangle2D&lt;/code> that is the bounding box of the&#xA;     * specified &lt;code>String&lt;/code> in the specified&#xA;     * &lt;code>Graphics&lt;/code> context.&#xA;     * @see java.awt.Font#getStringBounds(String, int, int, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.98"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.2"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.3"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="chars">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beginIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="limit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounds of the specified array of characters&#xA;     * in the specified &lt;code>Graphics&lt;/code> context.&#xA;     * The bounds is used to layout the &lt;code>String&lt;/code>&#xA;     * created with the specified array of characters,&#xA;     * &lt;code>beginIndex&lt;/code> and &lt;code>limit&lt;/code>.&#xA;     * @param chars an array of characters&#xA;     * @param beginIndex the initial offset of the array of&#xA;     * characters&#xA;     * @param limit the length of the array of characters&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>Rectangle2D&lt;/code> that is the bounding box of the&#xA;     * specified character array in the specified&#xA;     * &lt;code>Graphics&lt;/code> context. &#xA;     * @see java.awt.Font#getStringBounds(char[], int, int, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.99"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.2"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.3"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getStringBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ci">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../text/CharacterIterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beginIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="limit">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounds of the characters indexed in the specified&#xA;     * &lt;code>CharacterIterator&lt;/code> in the&#xA;     * specified &lt;code>Graphics&lt;/code> context.  &#xA;     * @param ci the specified &lt;code>CharacterIterator&lt;/code> &#xA;     * @param beginIndex the initial offset in &lt;code>ci&lt;/code>&#xA;     * @param limit the end index of &lt;code>ci&lt;/code>&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>Rectangle2D&lt;/code> that is the bounding box of the&#xA;     * characters indexed in the specified &lt;code>CharacterIterator&lt;/code>&#xA;     * in the specified &lt;code>Graphics&lt;/code> context.&#xA;     * @see java.awt.Font#getStringBounds(CharacterIterator, int, int, FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.100"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.2"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.3"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxCharBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the bounds for the character with the maximum bounds&#xA;     * in the specified &lt;code>Graphics&lt;/code> context.&#xA;     * @param context the specified &lt;code>Graphics&lt;/code> context&#xA;     * @return a &lt;code>Rectangle2D&lt;/code> that is the &#xA;     * bounding box for the character with the maximum bounds.&#xA;     * @see java.awt.Font#getMaxCharBounds(FontRenderContext)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Font.class.xmi#//@classifiers.0/@members.101"/>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.29">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="myFRC">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="font/FontRenderContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Graphics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Graphics2D.class.xmi#//@classifiers.0/@members.39"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="Graphics2D.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
              </expression>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Graphics2D.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="font/FontRenderContext.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a representation of this &lt;code>FontMetrics&lt;/code>&#xA;     * object's values as a &lt;code>String&lt;/code>.&#xA;     * @return    a &lt;code>String&lt;/code> representation of this &#xA;     * &lt;code>FontMetrics&lt;/code> object.&#xA;     * @since     JDK1.0.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/Class.class.xmi#//@classifiers.0/@members.44"/>
            </next>
            <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
          </children>
          <children xsi:type="references:StringReference" value="[font="/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          <children xsi:type="references:StringReference" value="ascent="/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          <children xsi:type="references:StringReference" value=", descent="/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
          <children xsi:type="references:StringReference" value=", height="/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.8"/>
          <children xsi:type="references:StringReference" value="]"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initIDs">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Initialize JNI field and method IDs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>FontMetrics&lt;/code> class defines a font metrics object, which&#xA; * encapsulates information about the rendering of a particular font on a&#xA; * particular screen. &#xA; * &lt;p>&#xA; * &lt;b>Note to subclassers&lt;/b>: Since many of these methods form closed,&#xA; * mutually recursive loops, you must take care that you implement&#xA; * at least one of the methods in each such loop to prevent&#xA; * infinite recursion when your subclass is used.&#xA; * In particular, the following is the minimal suggested set of methods&#xA; * to override in order to ensure correctness and prevent infinite&#xA; * recursion (though other subsets are equally feasible):&#xA; * &lt;ul>&#xA; * &lt;li>{@link #getAscent()}&#xA; * &lt;li>{@link #getLeading()}&#xA; * &lt;li>{@link #getMaxAdvance()}&#xA; * &lt;li>{@link #charWidth(char)}&#xA; * &lt;li>{@link #charsWidth(char[], int, int)}&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * &lt;img src=&quot;doc-files/FontMetrics-1.gif&quot; alt=&quot;The letter 'p' showing its 'reference point'&quot; border=15 align&#xA; * ALIGN=right HSPACE=10 VSPACE=7>&#xA; * Note that the implementations of these methods are&#xA; * inefficient, so they are usually overridden with more efficient&#xA; * toolkit-specific implementations.&#xA; * &lt;p>&#xA; * When an application asks AWT to place a character at the position&#xA; * (&lt;i>x&lt;/i>,&amp;nbsp;&lt;i>y&lt;/i>), the character is placed so that its&#xA; * reference point (shown as the dot in the accompanying image) is&#xA; * put at that position. The reference point specifies a horizontal&#xA; * line called the &lt;i>baseline&lt;/i> of the character. In normal&#xA; * printing, the baselines of characters should align.&#xA; * &lt;p>&#xA; * In addition, every character in a font has an &lt;i>ascent&lt;/i>, a&#xA; * &lt;i>descent&lt;/i>, and an &lt;i>advance width&lt;/i>. The ascent is the&#xA; * amount by which the character ascends above the baseline. The&#xA; * descent is the amount by which the character descends below the&#xA; * baseline. The advance width indicates the position at which AWT&#xA; * should place the next character.&#xA; * &lt;p>&#xA; * An array of characters or a string can also have an ascent, a&#xA; * descent, and an advance width. The ascent of the array is the&#xA; * maximum ascent of any character in the array. The descent is the&#xA; * maximum descent of any character in the array. The advance width&#xA; * is the sum of the advance widths of each of the characters in the&#xA; * character array.  The advance of a &lt;code>String&lt;/code> is the&#xA; * distance along the baseline of the &lt;code>String&lt;/code>.  This &#xA; * distance is the width that should be used for centering or &#xA; * right-aligning the &lt;code>String&lt;/code>.&#xA; * Note that the advance of a &lt;code>String&lt;/code> is not necessarily &#xA; * the sum of the advances of its characters measured in isolation &#xA; * because the width of a character can vary depending on its context.  &#xA; * For example, in Arabic text, the shape of a character can change &#xA; * in order to connect to other characters.  Also, in some scripts, &#xA; * certain character sequences can be represented by a single shape, &#xA; * called a &lt;em>ligature&lt;/em>.  Measuring characters individually does&#xA; * not account for these transformations.&#xA; *&#xA; * @version &#x9;1.53 05/18/04&#xA; * @author &#x9;Jim Graham&#xA; * @see         java.awt.Font&#xA; * @since       JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
