<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="KeyEventPostProcessor.java">
  <comments>/*&#xA; * @(#)KeyEventPostProcessor.java&#x9;1.5 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Class" href="event/KeyEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="KeyEventPostProcessor">
    <members xsi:type="members:InterfaceMethod" name="postProcessKeyEvent">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * This method is called by the current KeyboardFocusManager, requesting&#xA;     * that this KeyEventPostProcessor perform any necessary post-processing&#xA;     * which should be part of the KeyEvent's final resolution. At the time&#xA;     * this method is invoked, typically the KeyEvent has already been&#xA;     * dispatched to and handled by its target. However, if no Component in&#xA;     * the application currently owns the focus, then the KeyEvent has not&#xA;     * been dispatched to any Component. Typically, KeyEvent post-processing&#xA;     * will be used to implement features which require global KeyEvent&#xA;     * post-handling, such as menu shortcuts. Note that if a&#xA;     * KeyEventPostProcessor wishes to dispatch the KeyEvent, it must use&#xA;     * &lt;code>redispatchEvent&lt;/code> to prevent the AWT from recursively&#xA;     * requesting that this KeyEventPostProcessor perform post-processing&#xA;     * of the event again.&#xA;     * &lt;p>&#xA;     * If an implementation of this method returns &lt;code>false&lt;/code>, then the&#xA;     * KeyEvent is passed to the next KeyEventPostProcessor in the chain,&#xA;     * ending with the current KeyboardFocusManager. If an implementation&#xA;     * returns &lt;code>true&lt;/code>, the KeyEvent is assumed to have been fully&#xA;     * handled (although this need not be the case), and the AWT will take no&#xA;     * further action with regard to the KeyEvent. If an implementation&#xA;     * consumes the KeyEvent but returns &lt;code>false&lt;/code>, the consumed&#xA;     * event will still be passed to the next KeyEventPostProcessor in the&#xA;     * chain. It is important for developers to check whether the KeyEvent has&#xA;     * been consumed before performing any post-processing of the KeyEvent. By&#xA;     * default, the current KeyboardFocusManager will perform no post-&#xA;     * processing in response to a consumed KeyEvent.&#xA;     *&#xA;     * @param e the KeyEvent to post-process&#xA;     * @return &lt;code>true&lt;/code> if the AWT should take no further action with&#xA;     *         regard to the KeyEvent; &lt;code>false&lt;/code> otherwise&#xA;     * @see KeyboardFocusManager#redispatchEvent&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="event/KeyEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A KeyEventPostProcessor cooperates with the current KeyboardFocusManager&#xA; * in the final resolution of all unconsumed KeyEvents. KeyEventPostProcessors&#xA; * registered with the current KeyboardFocusManager will receive KeyEvents&#xA; * after the KeyEvents have been dispatched to and handled by their targets.&#xA; * KeyEvents that would have been otherwise discarded because no Component in&#xA; * the application currently owns the focus will also be forwarded to&#xA; * registered KeyEventPostProcessors. This will allow applications to implement&#xA; * features that require global KeyEvent post-handling, such as menu shortcuts.&#xA; * &lt;p>&#xA; * Note that the KeyboardFocusManager itself implements KeyEventPostProcessor.&#xA; * By default, the current KeyboardFocusManager will be the final&#xA; * KeyEventPostProcessor in the chain. The current KeyboardFocusManager cannot&#xA; * be completely deregistered as a KeyEventPostProcessor. However, if a&#xA; * KeyEventPostProcessor reports that no further post-processing of the&#xA; * KeyEvent should take place, the AWT will consider the event fully handled&#xA; * and will take no additional action with regard to the event. (While it is&#xA; * possible for client code to register the current KeyboardFocusManager as&#xA; * a KeyEventPostProcessor one or more times, this is usually unnecessary and&#xA; * not recommended.)&#xA; *&#xA; * @author David Mendenhall&#xA; * @version 1.5, 12/19/03&#xA; *&#xA; * @see KeyboardFocusManager#addKeyEventPostProcessor&#xA; * @see KeyboardFocusManager#removeKeyEventPostProcessor&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
