<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="Frame.java">
  <comments>/*&#xA; * @(#)Frame.java&#x9;1.147 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>peer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/awt/SunToolkit.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>ref</namespaces>
    <classifier xsi:type="classifiers:Class" href="../lang/ref/WeakReference.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>accessibility</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Frame">
    <comments>// inner class AccessibleAWTFrame</comments>
    <members xsi:type="members:Field" name="DEFAULT_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.0"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/* Note: These are being obsoleted;  programs should use the Cursor class&#xA;     * variables going forward. See Cursor and Component.setCursor.&#xA;     */</comments>
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.DEFAULT_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CROSSHAIR_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.1"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.CROSSHAIR_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="TEXT_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.2"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.TEXT_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="WAIT_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.3"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.WAIT_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SW_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.4"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.SW_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SE_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.5"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.SE_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NW_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.6"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.NW_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NE_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.7"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.NE_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="N_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.8"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.N_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="S_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.9"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.S_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="W_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.10"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.W_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="E_RESIZE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.11"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.E_RESIZE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="HAND_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.12"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.HAND_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MOVE_CURSOR">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Cursor.class.xmi#//@classifiers.0/@members.13"/>
        </next>
        <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;    * @deprecated   replaced by &lt;code>Cursor.MOVE_CURSOR&lt;/code>.&#xA;    */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NORMAL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Frame is in the &quot;normal&quot; state.  This symbolic constant names a&#xA;     * frame state with all state bits cleared.&#xA;     * @see #setExtendedState(int)&#xA;     * @see #getExtendedState&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ICONIFIED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This state bit indicates that frame is iconified.&#xA;     * @see #setExtendedState(int)&#xA;     * @see #getExtendedState&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAXIMIZED_HORIZ">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This state bit indicates that frame is maximized in the&#xA;     * horizontal direction.&#xA;     * @see #setExtendedState(int)&#xA;     * @see #getExtendedState&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAXIMIZED_VERT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This state bit indicates that frame is maximized in the&#xA;     * vertical direction.&#xA;     * @see #setExtendedState(int)&#xA;     * @see #getExtendedState&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MAXIMIZED_BOTH">
      <initialValue xsi:type="expressions:InclusiveOrExpression">
        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This state bit mask indicates that frame is fully maximized&#xA;     * (that is both horizontally and vertically).  It is just a&#xA;     * convenience alias for&#xA;     * &lt;code>MAXIMIZED_VERT&amp;nbsp;|&amp;nbsp;MAXIMIZED_HORIZ&lt;/code>.&#xA;     *&#xA;     * &lt;p>Note that the correct test for frame being fully maximized is&#xA;     * &lt;pre>&#xA;     *     (state &amp; Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH&#xA;     * &lt;/pre>&#xA;     *&#xA;     * &lt;p>To test is frame is maximized in &lt;em>some&lt;/em> direction use&#xA;     * &lt;pre>&#xA;     *     (state &amp; Frame.MAXIMIZED_BOTH) != 0&#xA;     * &lt;/pre>&#xA;     * &#xA;     * @see #setExtendedState(int)&#xA;     * @see #getExtendedState&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="maximizedBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Maximized bounds for this frame.&#xA;     * @see     #setMaximizedBounds(Rectangle)&#xA;     * @see     #getMaximizedBounds&#xA;     * @serial&#xA;     * @since 1.4&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="title">
      <initialValue xsi:type="references:StringReference" value="Untitled"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * This is the title of the frame.  It can be changed&#xA;     * at any time.  &lt;code>title&lt;/code> can be null and if&#xA;     * this is the case the &lt;code>title&lt;/code> = &quot;&quot;.&#xA;     *&#xA;     * @serial&#xA;     * @see #getTitle&#xA;     * @see #setTitle(String)&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="icon">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Image.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient">
        <comments>/**&#xA;     * &lt;code>icon&lt;/code> is the graphical way we can&#xA;     * represent the frame.&#xA;     * &lt;code>icon&lt;/code> can be null, but obviously if&#xA;     * you try to set the icon image &lt;code>icon&lt;/code>&#xA;     * cannot be null.&#xA;     *&#xA;     * @serial&#xA;     * @see #getIconImage&#xA;     * @see #setIconImage(Image)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="menuBar">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * The frames menubar.  If &lt;code>menuBar&lt;/code> = null&#xA;     * the frame will not have a menubar.&#xA;     *&#xA;     * @serial&#xA;     * @see #getMenuBar&#xA;     * @see #setMenuBar(MenuBar)&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="MenuBar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="resizable">
      <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * This field indicates whether the frame is resizable.&#xA;     * This property can be changed at any time.&#xA;     * &lt;code>resizable&lt;/code> will be true if the frame is&#xA;     * resizable, otherwise it will be false.&#xA;     *&#xA;     * @serial&#xA;     * @see #isResizable()&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="undecorated">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * This field indicates whether the frame is undecorated.&#xA;     * This property can only be changed while the frame is not displayable.&#xA;     * &lt;code>undecorated&lt;/code> will be true if the frame is&#xA;     * undecorated, otherwise it will be false.&#xA;     *&#xA;     * @serial&#xA;     * @see #setUndecorated(boolean)&#xA;     * @see #isUndecorated()&#xA;     * @see Component#isDisplayable()&#xA;     * @since 1.4&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="mbManagement">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * &lt;code>mbManagement&lt;/code> is only used by the Motif implementation.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="state">
      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* used only by the Motif impl.&#x9;*/</comments>
        <comments>// XXX: uwe: abuse old field for now</comments>
        <comments>// will need to take care of serialization</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="ownedWindows">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/* &#xA;     * The Windows owned by the Frame.&#xA;     * Note: in 1.2 this has been superceded by Window.ownedWindowList&#xA;     *&#xA;     * @serial&#xA;     * @see java.awt.Window#ownedWindowList&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="weakThis">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ref/WeakReference.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient">
        <comments>/*&#xA;     * We insert a weak reference into the Vector of all Frames&#xA;     * instead of 'this' so that garbage collection can still take&#xA;     * place correctly.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="base">
      <initialValue xsi:type="references:StringReference" value="frame"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="nameCounter">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="2673458971256075116"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * JDK 1.1 serialVersionUID &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>/* ensure that the necessary native libraries are loaded */</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.75"/>
          </next>
          <target xsi:type="classifiers:Class" href="Toolkit.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.70"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
          </child>
        </condition>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="Frame">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:StringReference" value=""/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new instance of &lt;code>Frame&lt;/code> that is &#xA;     * initially invisible.  The title of the &lt;code>Frame&lt;/code>&#xA;     * is empty.&#xA;     * @exception HeadlessException when GraphicsEnvironment.isHeadless()&#xA;     * returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless()&#xA;     * @see Component#setSize&#xA;     * @see Component#setVisible(boolean)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Frame">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:StringReference" value=""/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="gc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="GraphicsConfiguration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a &lt;code>Frame&lt;/code> with the specified &#xA;     * &lt;code>GraphicsConfiguration&lt;/code> of&#xA;     * a screen device.&#xA;     * @param gc the &lt;code>GraphicsConfiguration&lt;/code> &#xA;     * of the target screen device. If &lt;code>gc&lt;/code> &#xA;     * is &lt;code>null&lt;/code>, the system default &#xA;     * &lt;code>GraphicsConfiguration&lt;/code> is assumed.&#xA;     * @exception IllegalArgumentException if &#xA;     * &lt;code>gc&lt;/code> is not from a screen device.&#xA;     * This exception is always thrown&#xA;     * when GraphicsEnvironment.isHeadless() returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless()&#xA;     * @since     1.3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Frame">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new, initially invisible &lt;code>Frame&lt;/code> object &#xA;     * with the specified title.&#xA;     * @param title the title to be displayed in the frame's border.&#xA;     *              A &lt;code>null&lt;/code> value&#xA;     *              is treated as an empty string, &quot;&quot;.&#xA;     * @exception HeadlessException when GraphicsEnvironment.isHeadless()&#xA;     * returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless()&#xA;     * @see java.awt.Component#setSize&#xA;     * @see java.awt.Component#setVisible(boolean)&#xA;     * @see java.awt.GraphicsConfiguration#getBounds&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Frame">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="gc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="GraphicsConfiguration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new, initially invisible &lt;code>Frame&lt;/code> object &#xA;     * with the specified title and a &#xA;     * &lt;code>GraphicsConfiguration&lt;/code>.&#xA;     * @param title the title to be displayed in the frame's border.&#xA;     *              A &lt;code>null&lt;/code> value&#xA;     *              is treated as an empty string, &quot;&quot;.&#xA;     * @param gc the &lt;code>GraphicsConfiguration&lt;/code> &#xA;     * of the target screen device.  If &lt;code>gc&lt;/code> is &#xA;     * &lt;code>null&lt;/code>, the system default &#xA;     * &lt;code>GraphicsConfiguration&lt;/code> is assumed.&#xA;     * @exception IllegalArgumentException if &lt;code>gc&lt;/code> &#xA;     * is not from a screen device.&#xA;     * This exception is always thrown&#xA;     * when GraphicsEnvironment.isHeadless() returns true&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless()&#xA;     * @see java.awt.Component#setSize&#xA;     * @see java.awt.Component#setVisible(boolean)&#xA;     * @see java.awt.GraphicsConfiguration#getBounds&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="gc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="GraphicsConfiguration.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/ref/WeakReference.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.65"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../sun/awt/SunToolkit.class.xmi#//@classifiers.0/@members.50"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="literals:BooleanLiteral"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../sun/awt/SunToolkit.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="finalize">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Throwable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Disposes of the input methods and context, and removes &#xA;     * this Frame from the AppContext.  Subclasses that override &#xA;     * this method should call super.finalize().  &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
          <comments>// We have to remove the (hard) reference to weakThis in the</comments>
          <comments>// AppContext's Frame list Vector, otherwise the WeakReference </comments>
          <comments>// instance that points to this Frame will never get garbage </comments>
          <comments>// collected.</comments>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.34"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="constructComponentName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Construct a name for this component.  Called by getName() when the&#xA;     * name is null.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29"/>
            <children xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30"/>
              <operator xsi:type="operators:PlusPlus"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addNotify">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Makes this Frame displayable by connecting it to&#xA;     * a native screen resource.  Making a frame displayable will&#xA;     * cause any of its children to be made displayable.&#xA;     * This method is called internally by the toolkit and should&#xA;     * not be called directly by programs.&#xA;     * @see Component#isDisplayable&#xA;     * @see #removeNotify&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.24"/>
                    <arguments xsi:type="references:SelfReference">
                      <self xsi:type="literals:This"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.51"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="p">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="menuBar">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="MenuBar.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
              <self xsi:type="literals:This"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statements.2/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="MenuBar.class.xmi#//@classifiers.0/@members.8"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statements.2/@variable"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statements.2/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.6"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.36"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.105"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTitle">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the title of the frame.  The title is displayed in the&#xA;     * frame's border.&#xA;     * @return    the title of this frame, or an empty string (&quot;&quot;)&#xA;     *                if this frame doesn't have a title.&#xA;     * @see       #setTitle(String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setTitle">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="title">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the title for this frame to the specified string.&#xA;     * @param title the title to be displayed in the frame's border.&#xA;     *              A &lt;code>null&lt;/code> value&#xA;     *              is treated as an empty string, &quot;&quot;.&#xA;     * @see      #getTitle&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldTitle">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:StringReference" value=""/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="peer">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <self xsi:type="literals:This"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.2/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </lockProvider>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.347"/>
          <arguments xsi:type="references:StringReference" value="title"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getIconImage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Image.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the image to be displayed in the minimized icon&#xA;     * for this frame.&#xA;     * @return    the icon image for this frame, or &lt;code>null&lt;/code> &#xA;     *                    if this frame doesn't have an icon image.&#xA;     * @see       #setIconImage(Image)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setIconImage">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="image">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Image.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the image to be displayed in the minimized icon for this frame. &#xA;     * Not all platforms support the concept of minimizing a window.&#xA;     * @param     image the icon image to be displayed.&#xA;     *            If this parameter is &lt;code>null&lt;/code> then the&#xA;     *            icon image is set to the default image, which may vary&#xA;     *            with platform.            &#xA;     * @see       #getIconImage&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="peer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMenuBar">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MenuBar.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the menu bar for this frame.&#xA;     * @return    the menu bar for this frame, or &lt;code>null&lt;/code> &#xA;     *                   if this frame doesn't have a menu bar.&#xA;     * @see       #setMenuBar(MenuBar)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMenuBar">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="MenuBar.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the menu bar for this frame to the specified menu bar.&#xA;     * @param     mb the menu bar being set.&#xA;     *            If this parameter is &lt;code>null&lt;/code> then any&#xA;     *            existing menu bar on this frame is removed.&#xA;     * @see       #getMenuBar&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="MenuContainer.class.xmi#//@classifiers.0/@members.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                  </next>
                  <target xsi:type="members:Field" href="MenuComponent.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="MenuComponent.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="MenuComponent.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="peer">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:SelfReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <self xsi:type="literals:This"/>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="MenuBar.class.xmi#//@classifiers.0/@members.8"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Container.class.xmi#//@classifiers.0/@members.66"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.20"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@statements.4/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@statements.4/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.105"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isResizable">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether this frame is resizable by the user.  &#xA;     * By default, all frames are initially resizable. &#xA;     * @return    &lt;code>true&lt;/code> if the user can resize this frame; &#xA;     *                        &lt;code>false&lt;/code> otherwise.&#xA;     * @see       java.awt.Frame#setResizable(boolean)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setResizable">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="resizable">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets whether this frame is resizable by the user.  &#xA;     * @param    resizable   &lt;code>true&lt;/code> if this frame is resizable; &#xA;     *                       &lt;code>false&lt;/code> otherwise.&#xA;     * @see      java.awt.Frame#isResizable&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldResizable">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="testvalid">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="peer">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <self xsi:type="literals:This"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.2/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.2/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </lockProvider>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// On some platforms, changing the resizable state affects</comments>
        <comments>// the insets of the Frame. If we could, we'd call invalidate()</comments>
        <comments>// from the peer, but we need to guarantee that we're not holding</comments>
        <comments>// the Frame lock when we call invalidate().</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Container.class.xmi#//@classifiers.0/@members.66"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.20"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.348"/>
          <arguments xsi:type="references:StringReference" value="resizable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setState">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the state of this frame (obsolete).&#xA;     * &lt;p>&#xA;     * In older versions of JDK a frame state could only be NORMAL or&#xA;     * ICONIFIED.  Since JDK 1.4 set of supported frame states is&#xA;     * expanded and frame state is represented as a bitwise mask.&#xA;     * &lt;p>&#xA;     * For compatibility with old programs this method still accepts&#xA;     * &lt;code>Frame.NORMAL&lt;/code> and &lt;code>Frame.ICONIFIED&lt;/code> but&#xA;     * it only changes the iconic state of the frame, other aspects of&#xA;     * frame state are not affected by this method.&#xA;     * &#xA;     * @param state either &lt;code>Frame.NORMAL&lt;/code> or&#xA;     *     &lt;code>Frame.ICONIFIED&lt;/code>.&#xA;     * @see #getState&#xA;     * @see #setExtendedState(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="current">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
              <arguments xsi:type="expressions:InclusiveOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              </arguments>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                <arguments xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Complement"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                  </children>
                </arguments>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                </expression>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </children>
          </condition>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setExtendedState">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the state of this frame. The state is&#xA;     * represented as a bitwise mask.&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;code>NORMAL&lt;/code>&#xA;     * &lt;br>Indicates that no state bits are set.&#xA;     * &lt;li>&lt;code>ICONIFIED&lt;/code>&#xA;     * &lt;li>&lt;code>MAXIMIZED_HORIZ&lt;/code>&#xA;     * &lt;li>&lt;code>MAXIMIZED_VERT&lt;/code>&#xA;     * &lt;li>&lt;code>MAXIMIZED_BOTH&lt;/code>&#xA;     * &lt;br>Concatenates &lt;code>MAXIMIZED_HORIZ&lt;/code>&#xA;     * and &lt;code>MAXIMIZED_VERT&lt;/code>.&#xA;     * &lt;/ul>&#xA;     * &lt;p>Note that if the state is not supported on a&#xA;     * given platform, nothing will happen. The application&#xA;     * may determine if a specific state is available via&#xA;     * the &lt;code>java.awt.Toolkit#isFrameStateSupported(int state)&lt;/code>&#xA;     * method.&#xA;     * &#xA;     * @param state a bitwise mask of frame state constants&#xA;     * @see     #getExtendedState&#xA;     * @see     java.awt.Toolkit#isFrameStateSupported(int)&#xA;     * @since   1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="peer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isFrameStateSupported">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="state">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <comments>// * Toolkit.isFrameStateSupported returns always false </comments>
            <comments>// on compound state even if all parts are supported;</comments>
            <comments>// * if part of state is not supported, state is not supported;</comments>
            <comments>// * MAXIMIZED_BOTH is not a compound state.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.73"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.51"/>
                </child>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:AssignmentAnd"/>
                  <value xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Complement"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.73"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
              </next>
              <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.51"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.73"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.51"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getState">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the state of this frame (obsolete).&#xA;     * &lt;p>&#xA;     * In older versions of JDK a frame state could only be NORMAL or&#xA;     * ICONIFIED.  Since JDK 1.4 set of supported frame states is&#xA;     * expanded and frame state is represented as a bitwise mask.&#xA;     * &lt;p>&#xA;     * For compatibility with old programs this method still returns&#xA;     * &lt;code>Frame.NORMAL&lt;/code> and &lt;code>Frame.ICONIFIED&lt;/code> but&#xA;     * it only reports the iconic state of the frame, other aspects of&#xA;     * frame state are not reported by this method.&#xA;     * &#xA;     * @return  &lt;code>Frame.NORMAL&lt;/code> or &lt;code>Frame.ICONIFIED&lt;/code>.&#xA;     * @see     #setState(int)&#xA;     * @see     #getExtendedState&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExtendedState">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the state of this frame. The state is&#xA;     * represented as a bitwise mask.&#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;code>NORMAL&lt;/code>&#xA;     * &lt;br>Indicates that no state bits are set.&#xA;     * &lt;li>&lt;code>ICONIFIED&lt;/code>&#xA;     * &lt;li>&lt;code>MAXIMIZED_HORIZ&lt;/code>&#xA;     * &lt;li>&lt;code>MAXIMIZED_VERT&lt;/code>&#xA;     * &lt;li>&lt;code>MAXIMIZED_BOTH&lt;/code>&#xA;     * &lt;br>Concatenates &lt;code>MAXIMIZED_HORIZ&lt;/code>&#xA;     * and &lt;code>MAXIMIZED_VERT&lt;/code>.&#xA;     * &lt;/ul>&#xA;     *&#xA;     * @return&#x9;a bitwise mask of frame state constants&#xA;     * @see     #setExtendedState(int)&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="peer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.5"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMaximizedBounds">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bounds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the maximized bounds for this frame.&#xA;     * &lt;p>&#xA;     * When a frame is in maximized state the system supplies some&#xA;     * defaults bounds.  This method allows some or all of those&#xA;     * system supplied values to be overridden.&#xA;     * &lt;p>&#xA;     * If &lt;code>bounds&lt;/code> is &lt;code>null&lt;/code>, accept bounds&#xA;     * supplied by the system.  If non-&lt;code>null&lt;/code> you can&#xA;     * override some of the system supplied values while accepting&#xA;     * others by setting those fields you want to accept from system&#xA;     * to &lt;code>Integer.MAX_VALUE&lt;/code>.&#xA;     * &lt;p>&#xA;     * On some systems only the size portion of the bounds is taken&#xA;     * into account.&#xA;     * &#xA;     * @param bounds  bounds for the maximized state&#xA;     * @see #getMaximizedBounds()&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="peer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaximizedBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets maximized bounds for this frame.&#xA;     * Some fields may contain &lt;code>Integer.MAX_VALUE&lt;/code> to indicate&#xA;     * that system supplied values for this field must be used.&#xA;     *&#xA;     * @return&#x9;maximized bounds for this frame;  may be &lt;code>null&lt;/code>&#xA;     * @see     #setMaximizedBounds(Rectangle)&#xA;     * @since   1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setUndecorated">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="undecorated">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Disables or enables decorations for this frame.&#xA;     * This method can only be called while the frame is not displayable.&#xA;     * @param  undecorated &lt;code>true&lt;/code> if no frame decorations are &#xA;     *         to be enabled;&#xA;     *         &lt;code>false&lt;/code> if frame decorations are to be enabled.&#xA;     * @throws &lt;code>IllegalComponentStateException&lt;/code> if the frame&#xA;     *         is displayable.&#xA;     * @see    #isUndecorated&#xA;     * @see    Component#isDisplayable&#x9; &#xA;     * @see    javax.swing.JFrame#setDefaultLookAndFeelDecorated(boolean)&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <comments>/* Make sure we don't run in the middle of peer creation.*/</comments>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="IllegalComponentStateException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="The frame is displayable."/>
              </throwable>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.109"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.105"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isUndecorated">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates whether this frame is undecorated.  &#xA;     * By default, all frames are initially decorated. &#xA;     * @return    &lt;code>true&lt;/code> if frame is undecorated; &#xA;     *                        &lt;code>false&lt;/code> otherwise.&#xA;     * @see       java.awt.Frame#setUndecorated(boolean)&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="remove">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="m">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="MenuComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the specified menu bar from this frame.&#xA;     * @param    m   the menu component to remove.&#xA;     *           If &lt;code>m&lt;/code> is &lt;code>null&lt;/code>, then &#xA;     *           no action is taken&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="peer">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:SelfReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                    <self xsi:type="literals:This"/>
                  </child>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Container.class.xmi#//@classifiers.0/@members.66"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.20"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statements.0/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.2"/>
                      <arguments xsi:type="literals:NullLiteral"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="MenuComponent.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statements.0/@statement/@statements.1/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="MenuComponent.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.332"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                </next>
                <self xsi:type="literals:Super"/>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.105"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeNotify">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Makes this Frame undisplayable by removing its connection&#xA;     * to its native screen resource. Making a Frame undisplayable&#xA;     * will cause any of its children to be made undisplayable. &#xA;     * This method is called by the toolkit internally and should&#xA;     * not be called directly by programs.&#xA;     * @see Component#isDisplayable&#xA;     * @see #addNotify&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="peer">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="peer/FramePeer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <self xsi:type="literals:This"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                <comments>// get the latest Frame state before disposing</comments>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:BooleanLiteral" value="true"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@statements.0/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="peer/FramePeer.class.xmi#//@classifiers.0/@members.2"/>
                      <arguments xsi:type="literals:NullLiteral"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="MenuBar.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59/@statements.0/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Container.class.xmi#//@classifiers.0/@members.112"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.105"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="postProcessKeyEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="event/KeyEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="event/InputEvent.class.xmi#//@classifiers.0/@members.32"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="MenuBar.class.xmi#//@classifiers.0/@members.22"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
            </next>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.75"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="paramString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns a string representing the state of this &lt;code>Frame&lt;/code>.&#xA;     * This method is intended to be used only for debugging purposes, and the &#xA;     * content and format of the returned string may vary between &#xA;     * implementations. The returned string may be empty but may not be &#xA;     * &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return the parameter string of this frame&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="str">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Container.class.xmi#//@classifiers.0/@members.116"/>
            </next>
            <self xsi:type="literals:Super"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value=",title="/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:StringReference" value=",resizable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.53"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// sync with peer</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:StringReference" value=",normal"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:StringReference" value=",iconified"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
                </expression>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:StringReference" value=",maximized"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
                </expression>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                    <value xsi:type="references:StringReference" value=",maximized_horiz"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                      <value xsi:type="references:StringReference" value=",maximized_vert"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
              </elseStatement>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setCursor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cursorType">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>Component.setCursor(Cursor)&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="illegal cursor type"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.56"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Cursor.class.xmi#//@classifiers.0/@members.35"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCursorType">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>Component.getCursor()&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Cursor.class.xmi#//@classifiers.0/@members.40"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.196"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFrames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array containing all Frames created by the application.&#xA;     * If called from an applet, the array will only include the Frames&#xA;     * accessible by that applet.&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="realCopy">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <arrayDimensionsAfter/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="frameList">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0/@members.22"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                      <next xsi:type="references:ReflectiveClassReference"/>
                    </arguments>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0/@members.19"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="fullSize">
                <typeReference xsi:type="types:Int">
                  <comments>// Recall that frameList is actually a Vector of WeakReferences</comments>
                  <comments>// and calling get() on one of these references may return</comments>
                  <comments>// null. Make two arrays-- one the size of the Vector </comments>
                  <comments>// (fullCopy with size fullSize), and one the size of all</comments>
                  <comments>// non-null get()s (realCopy with size realSize).</comments>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="realSize">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="fullCopy">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <arrayDimensionsAfter/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.0/@variable"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.2/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
                      </arraySelectors>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0"/>
                      </typeReference>
                      <child xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:NestedExpression">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/ref/Reference.class.xmi#//@classifiers.0/@members.6"/>
                          </next>
                          <expression xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../lang/ref/WeakReference.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <child xsi:type="expressions:NestedExpression">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.1/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.3/@init"/>
                                </next>
                              </expression>
                            </child>
                          </expression>
                        </expression>
                      </child>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.2/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
                      </arraySelectors>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.3/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.0/@variable"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.3/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0"/>
                      </typeReference>
                      <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.2/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.1/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.2/@statement/@statements.2/@variable"/>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </value>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@statements.0/@statements.0/@variable"/>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addToFrameList">
      <typeReference xsi:type="types:Void"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="frameList">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0/@members.22"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:ReflectiveClassReference"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.4"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0/@members.23"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:ReflectiveClassReference"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statements.0/@variable"/>
                </next>
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.4"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.0/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../util/Vector.class.xmi#//@classifiers.0/@members.28"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
            </next>
          </expression>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeFromFrameList">
      <typeReference xsi:type="types:Void"/>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="frameList">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../util/Vector.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0/@members.22"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:ReflectiveClassReference"/>
                  </arguments>
                </next>
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.4"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../util/Vector.class.xmi#//@classifiers.0/@members.29"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:ReflectiveClassReference"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:Field" name="frameSerializedDataVersion">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* Serialization support.  If there's a MenuBar we restore&#xA;     * its (transient) parent field here.  Likewise for top level &#xA;     * windows that are &quot;owned&quot; by this frame.&#xA;     */</comments>
        <comments>/**&#xA;     * &lt;code>Frame&lt;/code>'s Serialized Data Version.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="writeObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Writes default serializable fields to stream.  Writes&#xA;     * an optional serializable &lt;code>Icon&lt;/code>, which is&#xA;     * available as of 1.4.&#xA;     *&#xA;     * @param s the &lt;code>ObjectOutputStream&lt;/code> to write&#xA;     * @serialData an optional &lt;code>Icon&lt;/code>&#xA;     * @see javax.swing.Icon&#xA;     * @see #readObject(ObjectInputStream)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.68/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Reads the &lt;code>ObjectInputStream&lt;/code>.  Tries&#xA;     * to read an &lt;code>Icon&lt;/code>, which is optional&#xA;     * data available as of 1.4.  If an &lt;code>Icon&lt;/code>&#xA;     * is not available, but anything other than an EOF&#xA;     * is detected, an &lt;code>OptionalDataException&lt;/code>&#xA;     * will be thrown..&#xA;     * Unrecognized keys or values will be ignored.&#xA;     *&#xA;     * @param s the &lt;code>ObjectInputStream&lt;/code> to read&#xA;     * @exception OptionalDataException if an &lt;code>Icon&lt;/code>&#xA;     *   is not available, but anything other than an EOF&#xA;     *   is detected&#xA;     * @exception HeadlessException if&#xA;     *   &lt;code>GraphicsEnvironment.isHeadless&lt;/code> returns&#xA;     *   &lt;code>true&lt;/code>&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless()&#xA;     * @see javax.swing.Icon&#xA;     * @see #writeObject(ObjectOutputStream)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
          <comments>// HeadlessException is thrown by Window's readObject</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.19"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Image.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                </next>
              </child>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Condition">
            <comments>// pre-1.4 instances will not have this optional data.</comments>
            <comments>// e.eof will be true to indicate that there is no more</comments>
            <comments>// data available for this object.</comments>
            <comments>// If e.eof is not true, throw the exception as it</comments>
            <comments>// might have been caused by unrelated reasons.</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="expressions:NestedExpression">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.1/@catcheBlocks.0/@parameter"/>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.1/@catcheBlocks.0/@parameter">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="../io/OptionalDataException.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </child>
            </condition>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>io</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/OptionalDataException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="MenuComponent.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Ensure 1.1 serialized Frames can read &amp; hook-up</comments>
        <comments>// owned windows properly</comments>
        <comments>//</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.98"/>
                  <arguments xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="Window.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../util/Vector.class.xmi#//@classifiers.0/@members.22"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.3/@statement/@statements.0/@init"/>
                      </next>
                    </child>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.3/@statement/@statements.0/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../util/Vector.class.xmi#//@classifiers.0/@members.14"/>
                </next>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.69/@statements.3/@statement/@statements.0/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/ref/WeakReference.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.65"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initIDs">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Initialize JNI field and method IDs&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/*&#xA;     * --- Accessibility Support ---&#xA;     *&#xA;     */</comments>
        <comments>/**&#xA;     * Gets the AccessibleContext associated with this Frame. &#xA;     * For frames, the AccessibleContext takes the form of an &#xA;     * AccessibleAWTFrame. &#xA;     * A new AccessibleAWTFrame instance is created if necessary.&#xA;     *&#xA;     * @return an AccessibleAWTFrame that serves as the &#xA;     *         AccessibleContext of this Frame&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.72"/>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="AccessibleAWTFrame">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalLongLiteral" decimalValue="6172960752956030250"/>
        </initialValue>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/*&#xA;         * JDK 1.3 serialVersionUID&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleRole">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Get the role of this object.&#xA;         *&#xA;         * @return an instance of AccessibleRole describing the role of the &#xA;         * object&#xA;         * @see AccessibleRole&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0/@members.9"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleStateSet">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Get the state of this object.&#xA;         *&#xA;         * @return an instance of AccessibleStateSet containing the current&#xA;         * state set of the object&#xA;         * @see AccessibleState&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="states">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Window$AccessibleAWTWindow.class.xmi#//@classifiers.0/@members.4"/>
              </next>
              <self xsi:type="literals:Super"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@members.2/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Window.class.xmi#//@classifiers.0/@members.78"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@members.2/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.15"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.47"/>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.72/@members.2/@statements.0/@variable"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * This class implements accessibility support for the &#xA;     * &lt;code>Frame&lt;/code> class.  It provides an implementation of the &#xA;     * Java Accessibility API appropriate to frame user-interface elements.&#xA;     */</comments>
      </annotationsAndModifiers>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Window$AccessibleAWTWindow.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>Frame&lt;/code> is a top-level window with a title and a border.&#xA; * &lt;p>&#xA; * The size of the frame includes any area designated for the&#xA; * border.  The dimensions of the border area may be obtained &#xA; * using the &lt;code>getInsets&lt;/code> method, however, since &#xA; * these dimensions are platform-dependent, a valid insets&#xA; * value cannot be obtained until the frame is made displayable&#xA; * by either calling &lt;code>pack&lt;/code> or &lt;code>show&lt;/code>. &#xA; * Since the border area is included in the overall size of the&#xA; * frame, the border effectively obscures a portion of the frame,&#xA; * constraining the area available for rendering and/or displaying&#xA; * subcomponents to the rectangle which has an upper-left corner&#xA; * location of &lt;code>(insets.left, insets.top)&lt;/code>, and has a size of&#xA; * &lt;code>width - (insets.left + insets.right)&lt;/code> by &#xA; * &lt;code>height - (insets.top + insets.bottom)&lt;/code>. &#xA; * &lt;p>&#xA; * The default layout for a frame is &lt;code>BorderLayout&lt;/code>.&#xA; * &lt;p>&#xA; * A frame may have its native decorations (i.e. &lt;code>Frame&lt;/code>&#xA; * and &lt;code>Titlebar&lt;/code>) turned off&#xA; * with &lt;code>setUndecorated&lt;/code>. This can only be done while the frame&#xA; * is not {@link Component#isDisplayable() displayable}.&#xA; * &lt;p>&#xA; * In a multi-screen environment, you can create a &lt;code>Frame&lt;/code>&#xA; * on a different screen device by constructing the &lt;code>Frame&lt;/code>&#xA; * with {@link #Frame(GraphicsConfiguration)} or&#xA; * {@link #Frame(String title, GraphicsConfiguration)}.  The&#xA; * &lt;code>GraphicsConfiguration&lt;/code> object is one of the&#xA; * &lt;code>GraphicsConfiguration&lt;/code> objects of the target screen&#xA; * device.&#xA; * &lt;p>&#xA; * In a virtual device multi-screen environment in which the desktop&#xA; * area could span multiple physical screen devices, the bounds of all&#xA; * configurations are relative to the virtual-coordinate system.  The&#xA; * origin of the virtual-coordinate system is at the upper left-hand&#xA; * corner of the primary physical screen.  Depending on the location&#xA; * of the primary screen in the virtual device, negative coordinates&#xA; * are possible, as shown in the following figure.&#xA; * &lt;p>&#xA; * &lt;img src=&quot;doc-files/MultiScreen.gif&quot; &#xA; * alt=&quot;Diagram of virtual device encompassing three physical screens and one primary physical screen. The primary physical screen&#xA; * shows (0,0) coords while a different physical screen shows (-80,-100) coords.&quot;&#xA; * ALIGN=center HSPACE=10 VSPACE=7>&#xA; * &lt;p>&#xA; * In such an environment, when calling &lt;code>setLocation&lt;/code>, &#xA; * you must pass a virtual coordinate to this method.  Similarly, &#xA; * calling &lt;code>getLocationOnScreen&lt;/code> on a &lt;code>Frame&lt;/code>&#xA; * returns virtual device coordinates.  Call the &lt;code>getBounds&lt;/code>&#xA; * method of a &lt;code>GraphicsConfiguration&lt;/code> to find its origin in&#xA; * the virtual coordinate system.&#xA; * &lt;p>&#xA; * The following code sets the&#xA; * location of the &lt;code>Frame&lt;/code> at (10, 10) relative&#xA; * to the origin of the physical screen of the corresponding&#xA; * &lt;code>GraphicsConfiguration&lt;/code>.  If the bounds of the&#xA; * &lt;code>GraphicsConfiguration&lt;/code> is not taken into account, the&#xA; * &lt;code>Frame&lt;/code> location would be set at (10, 10) relative to the&#xA; * virtual-coordinate system and would appear on the primary physical&#xA; * screen, which might be different from the physical screen of the&#xA; * specified &lt;code>GraphicsConfiguration&lt;/code>.&#xA; *&#xA; * &lt;pre>&#xA; *      Frame f = new Frame(GraphicsConfiguration gc);&#xA; *      Rectangle bounds = gc.getBounds();&#xA; *      f.setLocation(10 + bounds.x, 10 + bounds.y);&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p>&#xA; * Frames are capable of generating the following types of&#xA; * &lt;code>WindowEvent&lt;/code>s:&#xA; * &lt;ul>&#xA; * &lt;li>&lt;code>WINDOW_OPENED&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_CLOSING&lt;/code>:&#xA; *     &lt;br>If the program doesn't&#xA; *     explicitly hide or dispose the window while processing&#xA; *     this event, the window close operation is canceled.&#xA; * &lt;li>&lt;code>WINDOW_CLOSED&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_ICONIFIED&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_DEICONIFIED&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_ACTIVATED&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_DEACTIVATED&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_GAINED_FOCUS&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_LOST_FOCUS&lt;/code>&#xA; * &lt;li>&lt;code>WINDOW_STATE_CHANGED&lt;/code>&#xA; * &lt;/ul>&#xA; *&#xA; * @version &#x9;1.147, 05/18/04&#xA; * @author &#x9;Sami Shaio&#xA; * @see WindowEvent&#xA; * @see Window#addWindowListener&#xA; * @since       JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Window.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
