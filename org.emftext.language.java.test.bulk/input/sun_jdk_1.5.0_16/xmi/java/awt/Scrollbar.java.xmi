<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="Scrollbar.java">
  <comments>/*&#xA; * @(#)Scrollbar.java&#x9;1.108 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>peer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../util/EventListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>accessibility</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Scrollbar">
    <comments>// AccessibleAWTScrollBar</comments>
    <members xsi:type="members:Field" name="HORIZONTAL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A constant that indicates a horizontal scroll bar.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="VERTICAL">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * A constant that indicates a vertical scroll bar.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="value">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The value of the &lt;code>Scrollbar&lt;/code>.&#xA;     * This property must be greater than or equal to &lt;code>minimum&lt;/code>&#xA;     * and less than or equal to &#xA;     * &lt;code>maximum - visibleAmount&lt;/code>&#xA;     *&#xA;     * @serial&#xA;     * @see #getValue&#xA;     * @see #setValue&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="maximum">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The maximum value of the &lt;code>Scrollbar&lt;/code>.&#xA;     * This value must be greater than the &lt;code>minimum&lt;/code>&#xA;     * value.&lt;br>&#xA;     *&#xA;     * @serial&#xA;     * @see #getMaximum&#xA;     * @see #setMaximum&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="minimum">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The minimum value of the &lt;code>Scrollbar&lt;/code>.&#xA;     * This value must be less than the &lt;code>maximum&lt;/code>&#xA;     * value.&lt;br>&#xA;     *&#xA;     * @serial&#xA;     * @see #getMinimum&#xA;     * @see #setMinimum&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="visibleAmount">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The size of the &lt;code>Scrollbar&lt;/code>'s bubble.  &#xA;     * When a scroll bar is used to select a range of values,&#xA;     * the visibleAmount represents the size of this range.&#xA;     * This is visually indicated by the size of the bubble. &#xA;     *&#xA;     * @serial&#xA;     * @see #getVisibleAmount&#xA;     * @see #setVisibleAmount&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="orientation">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The &lt;code>Scrollbar&lt;/code>'s orientation--being either horizontal&#xA;     * or vertical.&#xA;     * This value should be specified when the scrollbar is created.&lt;BR>&#xA;     * orientation can be either : &lt;code>VERTICAL&lt;/code> or&#xA;     * &lt;code>HORIZONTAL&lt;/code> only.&#xA;     *&#xA;     * @serial&#xA;     * @see #getOrientation&#xA;     * @see #setOrientation&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="lineIncrement">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The amount by which the scrollbar value will change when going&#xA;     * up or down by a line.&#xA;     * This value must be greater than zero.  &#xA;     *&#xA;     * @serial&#xA;     * @see #getLineIncrement&#xA;     * @see #setLineIncrement&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="pageIncrement">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The amount by which the scrollbar value will change when going&#xA;     * up or down by a page.&#xA;     * This value must be greater than zero. &#xA;     *&#xA;     * @serial&#xA;     * @see #getPageIncrement&#xA;     * @see #setPageIncrement&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="isAdjusting">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Transient">
        <comments>/**&#xA;     * The adjusting status of the &lt;code>Scrollbar&lt;/code>.&#xA;     * True if the value is in the process of changing as a result of&#xA;     * actions being taken by the user.&#xA;     *&#xA;     * @see #getValueIsAdjusting&#xA;     * @see #setValueIsAdjusting&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="adjustmentListener">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="base">
      <initialValue xsi:type="references:StringReference" value="scrollbar"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="nameCounter">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="8451667562882310543"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * JDK 1.1 serialVersionUID&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initIDs">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Initialize JNI field and method IDs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>/* ensure that the necessary native libraries are loaded */</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.75"/>
          </next>
          <target xsi:type="classifiers:Class" href="Toolkit.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
          </child>
        </condition>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Constructor" name="Scrollbar">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new vertical scroll bar.&#xA;     * The default properties of the scroll bar are listed in&#xA;     * the following table:&#xA;     * &lt;p> &lt;/p>&#xA;     * &lt;table border=1 summary=&quot;Scrollbar default properties&quot;>&#xA;     * &lt;tr>&#xA;     *   &lt;th>Property&lt;/th>&#xA;     *   &lt;th>Description&lt;/th>&#xA;     *   &lt;th>Default Value&lt;/th>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>orientation&lt;/td>&#xA;     *   &lt;td>indicates whether the scroll bar is vertical&#xA;     *   &lt;br>or horizontal&lt;/td>&#xA;     *   &lt;td>&lt;code>Scrollbar.VERTICAL&lt;/code>&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>value&lt;/td>&#xA;     *   &lt;td>value which controls the location&#xA;     *   &lt;br>of the scroll bar's bubble&lt;/td>&#xA;     *   &lt;td>0&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>visible amount&lt;/td>&#xA;     *   &lt;td>visible amount of the scroll bar's range,&#xA;     *   &lt;br>typically represented by the size of the &#xA;     *   &lt;br>scroll bar's bubble&lt;/td>&#xA;     *   &lt;td>10&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>minimum&lt;/td>&#xA;     *   &lt;td>minimum value of the scroll bar&lt;/td>&#xA;     *   &lt;td>0&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>maximum&lt;/td>&#xA;     *   &lt;td>maximum value of the scroll bar&lt;/td>&#xA;     *   &lt;td>100&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>unit increment&lt;/td>&#xA;     *   &lt;td>amount the value changes when the&#xA;     *   &lt;br>Line Up or Line Down key is pressed,&#xA;     *   &lt;br>or when the end arrows of the scrollbar&#xA;     *   &lt;br>are clicked &lt;/td>&#xA;     *   &lt;td>1&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;tr>&#xA;     *   &lt;td>block increment&lt;/td>&#xA;     *   &lt;td>amount the value changes when the&#xA;     *   &lt;br>Page Up or Page Down key is pressed,&#xA;     *   &lt;br>or when the scrollbar track is clicked &#xA;     *   &lt;br>on either side of the bubble &lt;/td>&#xA;     *   &lt;td>10&lt;/td>&#xA;     * &lt;/tr>&#xA;     * &lt;/table>&#xA;     *&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     * returns true.&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Scrollbar">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orientation">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new scroll bar with the specified orientation.&#xA;     * &lt;p>&#xA;     * The &lt;code>orientation&lt;/code> argument must take one of the two&#xA;     * values &lt;code>Scrollbar.HORIZONTAL&lt;/code>,&#xA;     * or &lt;code>Scrollbar.VERTICAL&lt;/code>,&#xA;     * indicating a horizontal or vertical scroll bar, respectively.&#xA;     * &#xA;     * @param       orientation   indicates the orientation of the scroll bar&#xA;     * @exception   IllegalArgumentException    when an illegal value for&#xA;     *                    the &lt;code>orientation&lt;/code> argument is supplied&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     * returns true.&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Scrollbar">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.8"/>
          </next>
          <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                <self xsi:type="literals:This"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Break"/>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="illegal scrollbar orientation"/>
            </throwable>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.3"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.4"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orientation">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="visible">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new scroll bar with the specified orientation,&#xA;     * initial value, visible amount, and minimum and maximum values.&#xA;     * &lt;p>&#xA;     * The &lt;code>orientation&lt;/code> argument must take one of the two&#xA;     * values &lt;code>Scrollbar.HORIZONTAL&lt;/code>,&#xA;     * or &lt;code>Scrollbar.VERTICAL&lt;/code>,&#xA;     * indicating a horizontal or vertical scroll bar, respectively.&#xA;     * &lt;p>&#xA;     * The parameters supplied to this constructor are subject to the &#xA;     * constraints described in {@link #setValues(int, int, int, int)}. &#xA;     * &#xA;     * @param     orientation   indicates the orientation of the scroll bar.&#xA;     * @param     value     the initial value of the scroll bar&#xA;     * @param     visible   the visible amount of the scroll bar, typically &#xA;     *                      represented by the size of the bubble &#xA;     * @param     minimum   the minimum value of the scroll bar&#xA;     * @param     maximum   the maximum value of the scroll bar&#xA;     * @exception IllegalArgumentException    when an illegal value for&#xA;     *                    the &lt;code>orientation&lt;/code> argument is supplied&#xA;     * @exception HeadlessException if GraphicsEnvironment.isHeadless()&#xA;     * returns true.&#xA;     * @see #setValues&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="constructComponentName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Constructs a name for this component.  Called by &lt;code>getName&lt;/code>&#xA;     * when the name is &lt;code>null&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
            <children xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12"/>
              <operator xsi:type="operators:PlusPlus"/>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addNotify">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates the &lt;code>Scrollbar&lt;/code>'s peer.  The peer allows you to modify&#xA;     * the appearance of the &lt;code>Scrollbar&lt;/code> without changing any of its&#xA;     * functionality.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </arguments>
                </next>
                <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.106"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.300"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.105"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getOrientation">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the orientation of this scroll bar.&#xA;     * &#xA;     * @return    the orientation of this scroll bar, either&#xA;     *               &lt;code>Scrollbar.HORIZONTAL&lt;/code> or&#xA;     *               &lt;code>Scrollbar.VERTICAL&lt;/code>&#xA;     * @see       java.awt.Scrollbar#setOrientation&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setOrientation">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orientation">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the orientation for this scroll bar.&#xA;     * &#xA;     * @param orientation  the orientation of this scroll bar, either&#xA;     *               &lt;code>Scrollbar.HORIZONTAL&lt;/code> or&#xA;     *               &lt;code>Scrollbar.VERTICAL&lt;/code>&#xA;     * @see       java.awt.Scrollbar#getOrientation&#xA;     * @exception   IllegalArgumentException  if the value supplied&#xA;     *                   for &lt;code>orientation&lt;/code> is not a&#xA;     *                   legal value&#xA;     * @since     JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            <children xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
              <self xsi:type="literals:This"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                  <self xsi:type="literals:This"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:StringReference" value="illegal scrollbar orientation"/>
              </throwable>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>/* Create a new peer with the specified orientation. */</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.301"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.20"/>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.191"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.105"/>
        </lockProvider>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.51"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      </expression>
                    </child>
                    <expressionIf xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                    </expressionIf>
                    <expressionElse xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.21"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                    </expressionElse>
                  </expression>
                </arguments>
                <arguments xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                      </expression>
                    </child>
                    <expressionIf xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.21"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                    </expressionIf>
                    <expressionElse xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                    </expressionElse>
                  </expression>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValue">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the current value of this scroll bar.&#xA;     * &#xA;     * @return      the current value of this scroll bar&#xA;     * @see         java.awt.Scrollbar#getMinimum&#xA;     * @see         java.awt.Scrollbar#getMaximum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newValue">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of this scroll bar to the specified value.&#xA;     * &lt;p>&#xA;     * If the value supplied is less than the current &lt;code>minimum&lt;/code> &#xA;     * or greater than the current &lt;code>maximum - visibleAmount&lt;/code>, &#xA;     * then either &lt;code>minimum&lt;/code> or &lt;code>maximum - visibleAmount&lt;/code> &#xA;     * is substituted, as appropriate.&#xA;     * &lt;p>&#xA;     * Normally, a program should change a scroll bar's&#xA;     * value only by calling &lt;code>setValues&lt;/code>.&#xA;     * The &lt;code>setValues&lt;/code> method simultaneously&#xA;     * and synchronously sets the minimum, maximum, visible amount,&#xA;     * and value properties of a scroll bar, so that they are&#xA;     * mutually consistent.&#xA;     * &lt;p>&#xA;     * Calling this method does not fire an&#xA;     * &lt;code>AdjustmentEvent&lt;/code>.&#xA;     * &#xA;     * @param       newValue   the new value of the scroll bar&#xA;     * @see         java.awt.Scrollbar#setValues&#xA;     * @see         java.awt.Scrollbar#getValue&#xA;     * @see         java.awt.Scrollbar#getMinimum&#xA;     * @see         java.awt.Scrollbar#getMaximum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
          <comments>// Use setValues so that a consistent policy relating</comments>
          <comments>// minimum, maximum, visible amount, and value is enforced.</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMinimum">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the minimum value of this scroll bar.&#xA;     * &#xA;     * @return      the minimum value of this scroll bar&#xA;     * @see         java.awt.Scrollbar#getValue&#xA;     * @see         java.awt.Scrollbar#getMaximum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMinimum">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newMinimum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the minimum value of this scroll bar.&#xA;     * &lt;p>&#xA;     * When &lt;code>setMinimum&lt;/code> is called, the minimum value &#xA;     * is changed, and other values (including the maximum, the &#xA;     * visible amount, and the current scroll bar value) &#xA;     * are changed to be consistent with the new minimum.  &#xA;     * &lt;p>&#xA;     * Normally, a program should change a scroll bar's minimum&#xA;     * value only by calling &lt;code>setValues&lt;/code>.&#xA;     * The &lt;code>setValues&lt;/code> method simultaneously&#xA;     * and synchronously sets the minimum, maximum, visible amount,&#xA;     * and value properties of a scroll bar, so that they are&#xA;     * mutually consistent.&#xA;     * &lt;p>&#xA;     * Note that setting the minimum value to &lt;code>Integer.MAX_VALUE&lt;/code>&#xA;     * will result in the new minimum value being set to &#xA;     * &lt;code>Integer.MAX_VALUE - 1&lt;/code>.&#xA;     *&#xA;     * @param       newMinimum   the new minimum value for this scroll bar&#xA;     * @see         java.awt.Scrollbar#setValues&#xA;     * @see         java.awt.Scrollbar#setMaximum&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
          <comments>// No checks are necessary in this method since minimum is </comments>
          <comments>// the first variable checked in the setValues function.  </comments>
          <comments>// Use setValues so that a consistent policy relating </comments>
          <comments>// minimum, maximum, visible amount, and value is enforced.</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaximum">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the maximum value of this scroll bar.&#xA;     * &#xA;     * @return      the maximum value of this scroll bar&#xA;     * @see         java.awt.Scrollbar#getValue&#xA;     * @see         java.awt.Scrollbar#getMinimum&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setMaximum">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newMaximum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the maximum value of this scroll bar.&#xA;     * &lt;p>&#xA;     * When &lt;code>setMaximum&lt;/code> is called, the maximum value &#xA;     * is changed, and other values (including the minimum, the &#xA;     * visible amount, and the current scroll bar value)&#xA;     * are changed to be consistent with the new maximum.&#xA;     * &lt;p>&#xA;     * Normally, a program should change a scroll bar's maximum&#xA;     * value only by calling &lt;code>setValues&lt;/code>.&#xA;     * The &lt;code>setValues&lt;/code> method simultaneously&#xA;     * and synchronously sets the minimum, maximum, visible amount,&#xA;     * and value properties of a scroll bar, so that they are&#xA;     * mutually consistent.&#xA;     * &lt;p>&#xA;     * Note that setting the maximum value to &lt;code>Integer.MIN_VALUE&lt;/code>&#xA;     * will result in the new maximum value being set to &#xA;     * &lt;code>Integer.MIN_VALUE + 1&lt;/code>.&#xA;     * &#xA;     * @param       newMaximum   the new maximum value&#xA;     *                     for this scroll bar&#xA;     * @see         java.awt.Scrollbar#setValues&#xA;     * @see         java.awt.Scrollbar#setMinimum&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// minimum is checked first in setValues, so we need to </comments>
        <comments>// enforce minimum and maximum checks here.  </comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
          <comments>// Use setValues so that a consistent policy relating </comments>
          <comments>// minimum, maximum, visible amount, and value is enforced.</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getVisibleAmount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the visible amount of this scroll bar.&#xA;     * &lt;p>&#xA;     * When a scroll bar is used to select a range of values,&#xA;     * the visible amount is used to represent the range of values&#xA;     * that are currently visible.  The size of the scroll bar's&#xA;     * bubble (also called a thumb or scroll box), usually gives a&#xA;     * visual representation of the relationship of the visible&#xA;     * amount to the range of the scroll bar.&#xA;     * &lt;p>&#xA;     * The scroll bar's bubble may not be displayed when it is not &#xA;     * moveable (e.g. when it takes up the entire length of the &#xA;     * scroll bar's track, or when the scroll bar is disabled). &#xA;     * Whether the bubble is displayed or not will not affect &#xA;     * the value returned by &lt;code>getVisibleAmount&lt;/code>. &#xA;     * &#xA;     * @return      the visible amount of this scroll bar&#xA;     * @see         java.awt.Scrollbar#setVisibleAmount&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getVisible">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>getVisibleAmount()&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setVisibleAmount">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAmount">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the visible amount of this scroll bar.&#xA;     * &lt;p>&#xA;     * When a scroll bar is used to select a range of values,&#xA;     * the visible amount is used to represent the range of values&#xA;     * that are currently visible.  The size of the scroll bar's&#xA;     * bubble (also called a thumb or scroll box), usually gives a&#xA;     * visual representation of the relationship of the visible&#xA;     * amount to the range of the scroll bar.&#xA;     * &lt;p>&#xA;     * The scroll bar's bubble may not be displayed when it is not &#xA;     * moveable (e.g. when it takes up the entire length of the &#xA;     * scroll bar's track, or when the scroll bar is disabled). &#xA;     * Whether the bubble is displayed or not will not affect &#xA;     * the value returned by &lt;code>getVisibleAmount&lt;/code>. &#xA;     * &lt;p>&#xA;     * If the visible amount supplied is less than &lt;code>one&lt;/code>&#xA;     * or greater than the current &lt;code>maximum - minimum&lt;/code>, &#xA;     * then either &lt;code>one&lt;/code> or &lt;code>maximum - minimum&lt;/code> &#xA;     * is substituted, as appropriate.&#xA;     * &lt;p>&#xA;     * Normally, a program should change a scroll bar's&#xA;     * value only by calling &lt;code>setValues&lt;/code>.&#xA;     * The &lt;code>setValues&lt;/code> method simultaneously&#xA;     * and synchronously sets the minimum, maximum, visible amount,&#xA;     * and value properties of a scroll bar, so that they are&#xA;     * mutually consistent.&#xA;     * &#xA;     * @param       newAmount the new visible amount&#xA;     * @see         java.awt.Scrollbar#getVisibleAmount&#xA;     * @see         java.awt.Scrollbar#setValues&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.40">
          <comments>// Use setValues so that a consistent policy relating</comments>
          <comments>// minimum, maximum, visible amount, and value is enforced.</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setUnitIncrement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the unit increment for this scroll bar.&#xA;     * &lt;p>&#xA;     * The unit increment is the value that is added or subtracted&#xA;     * when the user activates the unit increment area of the&#xA;     * scroll bar, generally through a mouse or keyboard gesture&#xA;     * that the scroll bar receives as an adjustment event.&#xA;     * The unit increment must be greater than zero. &#xA;     * Attepts to set the unit increment to a value lower than 1 &#xA;     * will result in a value of 1 being set.  &#xA;     * &#xA;     * @param        v  the amount by which to increment or decrement&#xA;     *                         the scroll bar's value&#xA;     * @see          java.awt.Scrollbar#getUnitIncrement&#xA;     * @since        JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setLineIncrement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>setUnitIncrement(int)&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tmp">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </expression>
            </child>
            <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="peer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getUnitIncrement">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the unit increment for this scrollbar.&#xA;     * &lt;p>&#xA;     * The unit increment is the value that is added or subtracted&#xA;     * when the user activates the unit increment area of the&#xA;     * scroll bar, generally through a mouse or keyboard gesture&#xA;     * that the scroll bar receives as an adjustment event.&#xA;     * The unit increment must be greater than zero. &#xA;     * &#xA;     * @return      the unit increment of this scroll bar&#xA;     * @see         java.awt.Scrollbar#setUnitIncrement&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.35"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getLineIncrement">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>getUnitIncrement()&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setBlockIncrement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the block increment for this scroll bar.&#xA;     * &lt;p>&#xA;     * The block increment is the value that is added or subtracted&#xA;     * when the user activates the block increment area of the&#xA;     * scroll bar, generally through a mouse or keyboard gesture&#xA;     * that the scroll bar receives as an adjustment event.&#xA;     * The block increment must be greater than zero. &#xA;     * Attepts to set the block increment to a value lower than 1 &#xA;     * will result in a value of 1 being set.  &#xA;     * &#xA;     * @param        v  the amount by which to increment or decrement&#xA;     *                         the scroll bar's value&#xA;     * @see          java.awt.Scrollbar#getBlockIncrement&#xA;     * @since        JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setPageIncrement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>setBlockIncrement()&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="tmp">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </expression>
            </child>
            <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@variable"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="peer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.3/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0/@members.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@statements.3/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBlockIncrement">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the block increment of this scroll bar.&#xA;     * &lt;p>&#xA;     * The block increment is the value that is added or subtracted&#xA;     * when the user activates the block increment area of the&#xA;     * scroll bar, generally through a mouse or keyboard gesture&#xA;     * that the scroll bar receives as an adjustment event.&#xA;     * The block increment must be greater than zero. &#xA;     * &#xA;     * @return      the block increment of this scroll bar&#xA;     * @see         java.awt.Scrollbar#setBlockIncrement&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPageIncrement">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>getBlockIncrement()&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValues">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="visible">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="minimum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the values of four properties for this scroll bar: &#xA;     * &lt;code>value&lt;/code>, &lt;code>visibleAmount&lt;/code>, &#xA;     * &lt;code>minimum&lt;/code>, and &lt;code>maximum&lt;/code>.&#xA;     * If the values supplied for these properties are inconsistent &#xA;     * or incorrect, they will be changed to ensure consistency.  &#xA;     * &lt;p>&#xA;     * This method simultaneously and synchronously sets the values&#xA;     * of four scroll bar properties, assuring that the values of&#xA;     * these properties are mutually consistent. It enforces the&#xA;     * following constraints:  &#xA;     * &lt;code>maximum&lt;/code> must be greater than &lt;code>minimum&lt;/code>,  &#xA;     * &lt;code>maximum - minimum&lt;/code> must not be greater &#xA;     *     than &lt;code>Integer.MAX_VALUE&lt;/code>,  &#xA;     * &lt;code>visibleAmount&lt;/code> must be greater than zero. &#xA;     * &lt;code>visibleAmount&lt;/code> must not be greater than &#xA;     *     &lt;code>maximum - minimum&lt;/code>,  &#xA;     * &lt;code>value&lt;/code> must not be less than &lt;code>minimum&lt;/code>,  &#xA;     * and &lt;code>value&lt;/code> must not be greater than &#xA;     *     &lt;code>maximum - visibleAmount&lt;/code> &#xA;     * &lt;p>&#xA;     * Calling this method does not fire an&#xA;     * &lt;code>AdjustmentEvent&lt;/code>.&#xA;     *&#xA;     * @param      value is the position in the current window&#xA;     * @param      visible is the visible amount of the scroll bar&#xA;     * @param      minimum is the minimum value of the scroll bar&#xA;     * @param      maximum is the maximum value of the scroll bar&#xA;     * @see        #setMinimum&#xA;     * @see        #setMaximum&#xA;     * @see        #setVisibleAmount&#xA;     * @see        #setValue&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="maxMinusMin">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Long"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
              </children>
              <children xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:Long"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                  <children xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Int"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statements.2/@variable"/>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statements.2/@variable"/>
            <children xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:Int"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statements.2/@variable"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
            <children xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Int"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statements.2/@variable"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
            <children xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <self xsi:type="literals:This"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="peer">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.2"/>
                </next>
                <self xsi:type="literals:This"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statements.13/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="peer/ScrollbarPeer.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.2"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.3"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.1/@statements.13/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </lockProvider>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.51"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@variable"/>
                </arguments>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@parameters.0"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getValueIsAdjusting">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if the value is in the process of changing as a&#xA;     * result of actions being taken by the user.&#xA;     *&#xA;     * @return the value of the &lt;code>valueIsAdjusting&lt;/code> property&#xA;     * @see #setValueIsAdjusting&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setValueIsAdjusting">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the &lt;code>valueIsAdjusting&lt;/code> property.&#xA;     * &#xA;     * @param b new adjustment-in-progress status&#xA;     * @see #getValueIsAdjusting&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:Boolean"/>
        </variable>
      </statements>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </lockProvider>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.51"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
                </arguments>
                <arguments xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
                    </child>
                    <expressionIf xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                    </expressionIf>
                    <expressionElse xsi:type="literals:NullLiteral"/>
                  </expression>
                </arguments>
                <arguments xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
                    </child>
                    <expressionIf xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                    </expressionIf>
                    <expressionElse xsi:type="literals:NullLiteral"/>
                  </expression>
                </arguments>
              </next>
              <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addAdjustmentListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds the specified adjustment listener to receive instances of&#xA;     * &lt;code>AdjustmentEvent&lt;/code> from this scroll bar.&#xA;     * If l is &lt;code>null&lt;/code>, no exception is thrown and no&#xA;     * action is performed.&#xA;     *&#xA;     * @param        l the adjustment listener&#xA;     * @see          #removeAdjustmentListener&#xA;     * @see          #getAdjustmentListeners&#xA;     * @see          java.awt.event.AdjustmentEvent&#xA;     * @see          java.awt.event.AdjustmentListener&#xA;     * @since        JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AWTEventMulticaster.class.xmi#//@classifiers.0/@members.53"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="AWTEventMulticaster.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.41"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeAdjustmentListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the specified adjustment listener so that it no longer&#xA;     * receives instances of &lt;code>AdjustmentEvent&lt;/code> from this scroll bar.&#xA;     * If l is &lt;code>null&lt;/code>, no exception is thrown and no action&#xA;     * is performed.&#xA;     *&#xA;     * @param        &#x9;l    the adjustment listener&#xA;     * @see          &#x9;#addAdjustmentListener&#xA;     * @see          &#x9;#getAdjustmentListeners&#xA;     * @see          &#x9;java.awt.event.AdjustmentEvent&#xA;     * @see          &#x9;java.awt.event.AdjustmentListener&#xA;     * @since        &#x9;JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="AWTEventMulticaster.class.xmi#//@classifiers.0/@members.70"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@parameters.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="AWTEventMulticaster.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAdjustmentListeners">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of all the adjustment listeners&#xA;     * registered on this scrollbar.&#xA;     *&#xA;     * @return all of this scrollbar's &lt;code>AdjustmentListener&lt;/code>s&#xA;     *         or an empty array if no adjustment &#xA;     *         listeners are currently registered&#xA;     * @see          &#x9;#addAdjustmentListener&#xA;     * @see          &#x9;#removeAdjustmentListener&#xA;     * @see          &#x9;java.awt.event.AdjustmentEvent&#xA;     * @see          &#x9;java.awt.event.AdjustmentListener&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Synchronized"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.46">
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:ReflectiveClassReference"/>
                <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
              </arguments>
            </expression>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getListeners">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.46/@typeParameters.0"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <typeParameters name="T">
        <extendTypes xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../util/EventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </extendTypes>
      </typeParameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listenerType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.46/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an array of all the objects currently registered&#xA;     * as &lt;code>&lt;em>Foo&lt;/em>Listener&lt;/code>s&#xA;     * upon this &lt;code>Scrollbar&lt;/code>.&#xA;     * &lt;code>&lt;em>Foo&lt;/em>Listener&lt;/code>s are registered using the&#xA;     * &lt;code>add&lt;em>Foo&lt;/em>Listener&lt;/code> method.&#xA;     * &lt;p>&#xA;     * You can specify the &lt;code>listenerType&lt;/code> argument&#xA;     * with a class literal,  such as&#xA;     * &lt;code>&lt;em>Foo&lt;/em>Listener.class&lt;/code>.&#xA;     * For example, you can query a&#xA;     * &lt;code>Scrollbar&lt;/code> &lt;code>c&lt;/code>&#xA;     * for its mouse listeners with the following code:&#xA;     *&#xA;     * &lt;pre>MouseListener[] mls = (MouseListener[])(c.getListeners(MouseListener.class));&lt;/pre>&#xA;     *&#xA;     * If no such listeners exist, this method returns an empty array.&#xA;     *&#xA;     * @param listenerType the type of listeners requested; this parameter&#xA;     *          should specify an interface that descends from&#xA;     *          &lt;code>java.util.EventListener&lt;/code>&#xA;     * @return an array of all objects registered as&#xA;     *          &lt;code>&lt;em>Foo&lt;/em>Listener&lt;/code>s on this component,&#xA;     *          or an empty array if no such listeners have been added&#xA;     * @exception ClassCastException if &lt;code>listenerType&lt;/code>&#xA;     *          doesn't specify a class or interface that implements&#xA;     *          &lt;code>java.util.EventListener&lt;/code>&#xA;     *&#xA;     * @since 1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../util/EventListener.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:ReflectiveClassReference"/>
            <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.273"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
              </next>
              <self xsi:type="literals:Super"/>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AWTEventMulticaster.class.xmi#//@classifiers.0/@members.82"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="AWTEventMulticaster.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="eventEnabled">
      <typeReference xsi:type="types:Boolean">
        <comments>// REMIND: remove when filtering is done at lower level</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AWTEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AndExpression">
                    <children xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.70"/>
                    </children>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="AWTEvent.class.xmi#//@classifiers.0/@members.13"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="AWTEvent.class.xmi#//@classifiers.0"/>
                    </children>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="AWTEvent.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </children>
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="event/AdjustmentEvent.class.xmi#//@classifiers.0/@members.2"/>
            </next>
            <target xsi:type="classifiers:Class" href="event/AdjustmentEvent.class.xmi#//@classifiers.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.239"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="processEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AWTEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Processes events on this scroll bar. If the event is an&#xA;     * instance of &lt;code>AdjustmentEvent&lt;/code>, it invokes the&#xA;     * &lt;code>processAdjustmentEvent&lt;/code> method.&#xA;     * Otherwise, it invokes its superclass's&#xA;     * &lt;code>processEvent&lt;/code> method.&#xA;     * &lt;p>Note that if the event parameter is &lt;code>null&lt;/code>&#xA;     * the behavior is unspecified and may result in an&#xA;     * exception.&#xA;     *&#xA;     * @param        e the event&#xA;     * @see          java.awt.event.AdjustmentEvent&#xA;     * @see          java.awt.Scrollbar#processAdjustmentEvent&#xA;     * @since        JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="event/AdjustmentEvent.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
              </arguments>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="event/AdjustmentEvent.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.279"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="processAdjustmentEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="event/AdjustmentEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Processes adjustment events occurring on this&#xA;     * scrollbar by dispatching them to any registered&#xA;     * &lt;code>AdjustmentListener&lt;/code> objects.&#xA;     * &lt;p>&#xA;     * This method is not called unless adjustment events are&#xA;     * enabled for this component. Adjustment events are enabled&#xA;     * when one of the following occurs:&#xA;     * &lt;p>&lt;ul>&#xA;     * &lt;li>An &lt;code>AdjustmentListener&lt;/code> object is registered&#xA;     * via &lt;code>addAdjustmentListener&lt;/code>.&#xA;     * &lt;li>Adjustment events are enabled via &lt;code>enableEvents&lt;/code>.&#xA;     * &lt;/ul>&lt;p>&#xA;     * &lt;p>Note that if the event parameter is &lt;code>null&lt;/code>&#xA;     * the behavior is unspecified and may result in an&#xA;     * exception.&#xA;     *&#xA;     * @param       e the adjustment event&#xA;     * @see         java.awt.event.AdjustmentEvent&#xA;     * @see         java.awt.event.AdjustmentListener&#xA;     * @see         java.awt.Scrollbar#addAdjustmentListener&#xA;     * @see         java.awt.Component#enableEvents&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="listener">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="event/AdjustmentListener.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="paramString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns a string representing the state of this &lt;code>Scrollbar&lt;/code>.&#xA;     * This method is intended to be used only for debugging purposes, and the &#xA;     * content and format of the returned string may vary between &#xA;     * implementations. The returned string may be empty but may not be &#xA;     * &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return      the parameter string of this scroll bar&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.333"/>
            </next>
            <self xsi:type="literals:Super"/>
          </children>
          <children xsi:type="references:StringReference" value=",val="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <children xsi:type="references:StringReference" value=",vis="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <children xsi:type="references:StringReference" value=",min="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="references:StringReference" value=",max="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </expression>
              </child>
              <expressionIf xsi:type="references:StringReference" value=",vert"/>
              <expressionElse xsi:type="references:StringReference" value=",horz"/>
            </expression>
          </children>
          <children xsi:type="references:StringReference" value=",isAdjusting="/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="scrollbarSerializedDataVersion">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* Serialization support.&#xA;     */</comments>
        <comments>/**&#xA;     * The scroll bar's serialized Data Version.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="writeObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Writes default serializable fields to stream.  Writes&#xA;     * a list of serializable &lt;code>AdjustmentListeners&lt;/code>&#xA;     * as optional data. The non-serializable listeners are&#xA;     * detected and no attempt is made to serialize them.&#xA;     *&#xA;     * @param s the &lt;code>ObjectOutputStream&lt;/code> to write&#xA;     * @serialData &lt;code>null&lt;/code> terminated sequence of 0&#xA;     *   or more pairs; the pair consists of a &lt;code>String&lt;/code> &#xA;     *   and an &lt;code>Object&lt;/code>; the &lt;code>String&lt;/code> indicates&#xA;     *   the type of object and is one of the following:&#xA;     *   &lt;code>adjustmentListenerK&lt;/code> indicating an&#xA;     *     &lt;code>AdjustmentListener&lt;/code> object&#xA;     *&#xA;     * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)&#xA;     * @see java.awt.Component#adjustmentListenerK&#xA;     * @see #readObject(ObjectInputStream)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AWTEventMulticaster.class.xmi#//@classifiers.0/@members.79"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.53"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10"/>
          </next>
          <target xsi:type="classifiers:Class" href="AWTEventMulticaster.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Reads the &lt;code>ObjectInputStream&lt;/code> and if&#xA;     * it isn't &lt;code>null&lt;/code> adds a listener to&#xA;     * receive adjustment events fired by the&#xA;     * &lt;code>Scrollbar&lt;/code>.&#xA;     * Unrecognized keys or values will be ignored.&#xA;     * &#xA;     * @param s the &lt;code>ObjectInputStream&lt;/code> to read&#xA;     * @exception HeadlessException if&#xA;     *   &lt;code>GraphicsEnvironment.isHeadless&lt;/code> returns&#xA;     *   &lt;code>true&lt;/code>&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     * @see #writeObject(ObjectOutputStream)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.8"/>
          </next>
          <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.19"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="keyOrNull">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="key">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.87"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.2/@variable"/>
                </expression>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.43">
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="event/AdjustmentListener.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                      </next>
                    </expression>
                  </child>
                </arguments>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.53"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.3/@statement/@statements.0/@variable"/>
            </condition>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
                <comments>// skip value for unrecognized key</comments>
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                </next>
              </expression>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="literals:NullLiteral"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                </next>
              </value>
            </expression>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/////////////////</comments>
        <comments>// Accessibility support</comments>
        <comments>////////////////</comments>
        <comments>/**&#xA;     * Gets the &lt;code>AccessibleContext&lt;/code> associated with this &#xA;     * &lt;code>Scrollbar&lt;/code>. For scrollbars, the&#xA;     * &lt;code>AccessibleContext&lt;/code> takes the form of an &#xA;     * &lt;code>AccessibleAWTScrollBar&lt;/code>. A new&#xA;     * &lt;code>AccessibleAWTScrollBar&lt;/code> instance is created if necessary.&#xA;     *&#xA;     * @return an &lt;code>AccessibleAWTScrollBar&lt;/code> that serves as the &#xA;     *         &lt;code>AccessibleContext&lt;/code> of this &lt;code>ScrollBar&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.55"/>
                </typeReference>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.87"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="AccessibleAWTScrollBar">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalLongLiteral" decimalValue="344337268523697807"/>
        </initialValue>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/*&#xA;         * JDK 1.3 serialVersionUID&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleStateSet">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Get the state set of this object.&#xA;         *&#xA;         * @return an instance of &lt;code>AccessibleState&lt;/code>&#xA;         *     containing the current state of the object&#xA;         * @see AccessibleState&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="states">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Component$AccessibleAWTComponent.class.xmi#//@classifiers.0/@members.10"/>
              </next>
              <self xsi:type="literals:Super"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.1/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.41"/>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.1/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.21"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.21"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.1/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0/@members.22"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleState.class.xmi#//@classifiers.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.1/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleRole">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Get the role of this object.&#xA;         *&#xA;         * @return an instance of &lt;code>AccessibleRole&lt;/code>&#xA;         *     describing the role of the object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0/@members.39"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/accessibility/AccessibleValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Get the &lt;code>AccessibleValue&lt;/code> associated with this&#xA;&#x9; * object.  In the implementation of the Java Accessibility&#xA;&#x9; * API for this class, return this object, which is&#xA;&#x9; * responsible for implementing the&#xA;&#x9; * &lt;code>AccessibleValue&lt;/code> interface on behalf of itself.&#xA;&#x9; * &#xA;&#x9; * @return this object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getCurrentAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Get the accessible value of this object.&#xA;         *&#xA;         * @return The current value of this object.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setCurrentAccessibleValue">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="n">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Number.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Set the value of this object as a Number.&#xA;         *&#xA;         * @return True if the value was set.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.5/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Number.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </arguments>
              </expression>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@members.5/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getMinimumAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Get the minimum accessible value of this object.&#xA;         *&#xA;         * @return The minimum value of this object.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.25"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getMaximumAccessibleValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Number.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Get the maximum accessible value of this object.&#xA;         *&#xA;         * @return The maximum value of this object.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * This class implements accessibility support for the&#xA;     * &lt;code>Scrollbar&lt;/code> class.  It provides an implementation of&#xA;     * the Java Accessibility API appropriate to scrollbar&#xA;     * user-interface elements.&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../javax/accessibility/AccessibleValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Component$AccessibleAWTComponent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Scrollbar&lt;/code> class embodies a scroll bar, a&#xA; * familiar user-interface object. A scroll bar provides a&#xA; * convenient means for allowing a user to select from a&#xA; * range of values. The following three vertical&#xA; * scroll bars could be used as slider controls to pick&#xA; * the red, green, and blue components of a color:&#xA; * &lt;p>&#xA; * &lt;img src=&quot;doc-files/Scrollbar-1.gif&quot; alt=&quot;Image shows 3 vertical sliders, side-by-side.&quot;&#xA; * ALIGN=center HSPACE=10 VSPACE=7>&#xA; * &lt;p>&#xA; * Each scroll bar in this example could be created with&#xA; * code similar to the following:&#xA; * &lt;p>&#xA; * &lt;hr>&lt;blockquote>&lt;pre>&#xA; * redSlider=new Scrollbar(Scrollbar.VERTICAL, 0, 1, 0, 255);&#xA; * add(redSlider);&#xA; * &lt;/pre>&lt;/blockquote>&lt;hr>&#xA; * &lt;p>&#xA; * Alternatively, a scroll bar can represent a range of values. For&#xA; * example, if a scroll bar is used for scrolling through text, the&#xA; * width of the &quot;bubble&quot; (also called the &quot;thumb&quot; or &quot;scroll box&quot;)&#xA; * can be used to represent the amount of text that is visible.&#xA; * Here is an example of a scroll bar that represents a range:&#xA; * &lt;p>&#xA; * &lt;img src=&quot;doc-files/Scrollbar-2.gif&quot;&#xA; * alt=&quot;Image shows horizontal slider with starting range of 0 and ending range of 300. The slider thumb is labeled 60.&quot;&#xA; * ALIGN=center HSPACE=10 VSPACE=7>&#xA; * &lt;p>&#xA; * The value range represented by the bubble in this example&#xA; * is the &lt;em>visible amount&lt;/em>. The horizontal scroll bar &#xA; * in this example could be created with code like the following:&#xA; * &lt;p>&#xA; * &lt;hr>&lt;blockquote>&lt;pre>&#xA; * ranger = new Scrollbar(Scrollbar.HORIZONTAL, 0, 60, 0, 300);&#xA; * add(ranger);&#xA; * &lt;/pre>&lt;/blockquote>&lt;hr>&#xA; * &lt;p>&#xA; * Note that the actual maximum value of the scroll bar is the&#xA; * &lt;code>maximum&lt;/code> minus the &lt;code>visible amount&lt;/code>.&#xA; * In the previous example, because the &lt;code>maximum&lt;/code> is&#xA; * 300 and the &lt;code>visible amount&lt;/code> is 60, the actual maximum&#xA; * value is 240.  The range of the scrollbar track is 0 - 300.&#xA; * The left side of the bubble indicates the value of the&#xA; * scroll bar.&#xA; * &lt;p>&#xA; * Normally, the user changes the value of the scroll bar by&#xA; * making a gesture with the mouse. For example, the user can&#xA; * drag the scroll bar's bubble up and down, or click in the&#xA; * scroll bar's unit increment or block increment areas. Keyboard&#xA; * gestures can also be mapped to the scroll bar. By convention,&#xA; * the &lt;b>Page&amp;nbsp;Up&lt;/b> and &lt;b>Page&amp;nbsp;Down&lt;/b>&#xA; * keys are equivalent to clicking in the scroll bar's block&#xA; * increment and block decrement areas.&#xA; * &lt;p>&#xA; * When the user changes the value of the scroll bar, the scroll bar&#xA; * receives an instance of &lt;code>AdjustmentEvent&lt;/code>.&#xA; * The scroll bar processes this event, passing it along to&#xA; * any registered listeners.&#xA; * &lt;p>&#xA; * Any object that wishes to be notified of changes to the&#xA; * scroll bar's value should implement&#xA; * &lt;code>AdjustmentListener&lt;/code>, an interface defined in&#xA; * the package &lt;code>java.awt.event&lt;/code>.&#xA; * Listeners can be added and removed dynamically by calling&#xA; * the methods &lt;code>addAdjustmentListener&lt;/code> and&#xA; * &lt;code>removeAdjustmentListener&lt;/code>.&#xA; * &lt;p>&#xA; * The &lt;code>AdjustmentEvent&lt;/code> class defines five types&#xA; * of adjustment event, listed here:&#xA; * &lt;p>&#xA; * &lt;ul>&#xA; * &lt;li>&lt;code>AdjustmentEvent.TRACK&lt;/code> is sent out when the&#xA; * user drags the scroll bar's bubble.&#xA; * &lt;li>&lt;code>AdjustmentEvent.UNIT_INCREMENT&lt;/code> is sent out&#xA; * when the user clicks in the left arrow of a horizontal scroll&#xA; * bar, or the top arrow of a vertical scroll bar, or makes the&#xA; * equivalent gesture from the keyboard.&#xA; * &lt;li>&lt;code>AdjustmentEvent.UNIT_DECREMENT&lt;/code> is sent out&#xA; * when the user clicks in the right arrow of a horizontal scroll&#xA; * bar, or the bottom arrow of a vertical scroll bar, or makes the&#xA; * equivalent gesture from the keyboard.&#xA; * &lt;li>&lt;code>AdjustmentEvent.BLOCK_INCREMENT&lt;/code> is sent out&#xA; * when the user clicks in the track, to the left of the bubble&#xA; * on a horizontal scroll bar, or above the bubble on a vertical&#xA; * scroll bar. By convention, the &lt;b>Page&amp;nbsp;Up&lt;/b>&#xA; * key is equivalent, if the user is using a keyboard that&#xA; * defines a &lt;b>Page&amp;nbsp;Up&lt;/b> key.&#xA; * &lt;li>&lt;code>AdjustmentEvent.BLOCK_DECREMENT&lt;/code> is sent out&#xA; * when the user clicks in the track, to the right of the bubble&#xA; * on a horizontal scroll bar, or below the bubble on a vertical&#xA; * scroll bar. By convention, the &lt;b>Page&amp;nbsp;Down&lt;/b>&#xA; * key is equivalent, if the user is using a keyboard that&#xA; * defines a &lt;b>Page&amp;nbsp;Down&lt;/b> key.&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * The JDK&amp;nbsp;1.0 event system is supported for backwards&#xA; * compatibility, but its use with newer versions of the platform is&#xA; * discouraged. The five types of adjustment events introduced&#xA; * with JDK&amp;nbsp;1.1 correspond to the five event types&#xA; * that are associated with scroll bars in previous platform versions.&#xA; * The following list gives the adjustment event type,&#xA; * and the corresponding JDK&amp;nbsp;1.0 event type it replaces.&#xA; * &lt;p>&#xA; * &lt;ul>&#xA; * &lt;li>&lt;code>AdjustmentEvent.TRACK&lt;/code> replaces&#xA; * &lt;code>Event.SCROLL_ABSOLUTE&lt;/code>&#xA; * &lt;li>&lt;code>AdjustmentEvent.UNIT_INCREMENT&lt;/code> replaces&#xA; * &lt;code>Event.SCROLL_LINE_UP&lt;/code>&#xA; * &lt;li>&lt;code>AdjustmentEvent.UNIT_DECREMENT&lt;/code> replaces&#xA; * &lt;code>Event.SCROLL_LINE_DOWN&lt;/code>&#xA; * &lt;li>&lt;code>AdjustmentEvent.BLOCK_INCREMENT&lt;/code> replaces&#xA; * &lt;code>Event.SCROLL_PAGE_UP&lt;/code>&#xA; * &lt;li>&lt;code>AdjustmentEvent.BLOCK_DECREMENT&lt;/code> replaces&#xA; * &lt;code>Event.SCROLL_PAGE_DOWN&lt;/code>&#xA; * &lt;/ul>&#xA; * &lt;p>&#xA; * &lt;b>Note&lt;/b>: We recommend using a &lt;code>Scrollbar&lt;/code>&#xA; * for value selection only.  If you want to implement&#xA; * a scrollable component inside a container, we recommend you use&#xA; * a {@link ScrollPane ScrollPane}. If you use a &#xA; * &lt;code>Scrollbar&lt;/code> for this purpose, you are likely to&#xA; * encounter issues with painting, key handling, sizing and &#xA; * positioning.&#xA; *&#xA; * @version &#x9;1.108, 05/18/04&#xA; * @author &#x9;Sami Shaio&#xA; * @see         java.awt.event.AdjustmentEvent&#xA; * @see         java.awt.event.AdjustmentListener&#xA; * @since       JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Adjustable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../javax/accessibility/Accessible.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
