<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="MenuComponent.java">
  <comments>/*&#xA; * @(#)MenuComponent.java&#x9;1.77 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>peer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="peer/MenuComponentPeer.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>event</namespaces>
    <classifier xsi:type="classifiers:Class" href="event/ActionEvent.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/awt/SunToolkit.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>javax</namespaces>
    <namespaces>accessibility</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="MenuComponent">
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <comments>/* ensure that the necessary native libraries are loaded */</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.75"/>
          </next>
          <target xsi:type="classifiers:Class" href="Toolkit.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.32"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
          </child>
        </condition>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="peer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="peer/MenuComponentPeer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="parent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="appContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient">
        <comments>/**&#xA;     * The &lt;code>AppContext&lt;/code> of the &lt;code>MenuComponent&lt;/code>.&#xA;     * This is set in the constructor and never changes.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="font">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * The menu component's font. This value can be &#xA;     * &lt;code>null&lt;/code> at which point a default will be used.&#xA;     * This defaults to &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @serial&#xA;     * @see #setFont(Font)&#xA;     * @see #getFont()&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The menu component's name, which defaults to &lt;code>null&lt;/code>.&#xA;     * @serial&#xA;     * @see #getName()&#xA;     * @see #setName(String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="nameExplicitlySet">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * A variable to indicate whether a name is explicitly set.&#xA;     * If &lt;code>true&lt;/code> the name will be set explicitly. &#xA;     * This defaults to &lt;code>false&lt;/code>.&#xA;     * @serial&#xA;     * @see #setName(String)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="newEventsOnly">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Defaults to &lt;code>false&lt;/code>.&#xA;     * @serial&#xA;     * @see #dispatchEvent(AWTEvent)&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="actionListenerK">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.52"/>
        </next>
        <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/*&#xA;     * Internal constants for serialization.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="itemListenerK">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.57"/>
        </next>
        <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="4536902356223894379"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * JDK 1.1 serialVersionUID &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="privateKey">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient">
        <comments>/**&#xA;     * This object is used as a key for internal hashtables.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Constructor" name="MenuComponent">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.8"/>
          </next>
          <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0/@members.19"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>MenuComponent&lt;/code>.&#xA;     * @exception HeadlessException if&#xA;     *    &lt;code>GraphicsEnvironment.isHeadless&lt;/code>&#xA;     *    returns &lt;code>true&lt;/code>&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="constructComponentName">
      <comments>// For strict compliance with prior platform versions, a MenuComponent</comments>
      <comments>// that doesn't set its name should return null from</comments>
      <comments>// getName()</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Constructs a name for this &lt;code>MenuComponent&lt;/code>.&#xA;     * Called by &lt;code>getName&lt;/code> when the name is &lt;code>null&lt;/code>.&#xA;     * @return a name for this &lt;code>MenuComponent&lt;/code>&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the name of the menu component.&#xA;     * @return        the name of the menu component&#xA;     * @see           java.awt.MenuComponent#setName(java.lang.String)&#xA;     * @since         JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:SynchronizedBlock">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.13"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                </children>
              </condition>
            </statements>
            <lockProvider xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </lockProvider>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the name of the component to the specified string.&#xA;     * @param         name    the name of the menu component&#xA;     * @see           java.awt.MenuComponent#getName&#xA;     * @since         JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:BooleanLiteral" value="true"/>
          </expression>
        </statements>
        <lockProvider xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </lockProvider>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getParent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the parent container for this menu component.&#xA;     * @return    the menu component containing this menu component, &#xA;     *                 or &lt;code>null&lt;/code> if this menu component &#xA;     *                 is the outermost component, the menu bar itself&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getParent_NoClientCode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>// NOTE: This method may be called by privileged threads.</comments>
        <comments>//       This functionality is implemented in a package-private method </comments>
        <comments>//       to insure that it cannot be overridden by client subclasses. </comments>
        <comments>//       DO NOT INVOKE CLIENT CODE ON THIS THREAD!</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPeer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="peer/MenuComponentPeer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * programs should not directly manipulate peers.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFont">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the font used for this menu component.&#xA;     * @return   the font used in this menu component, if there is one; &#xA;     *                  &lt;code>null&lt;/code> otherwise&#xA;     * @see     java.awt.MenuComponent#setFont&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="font">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="parent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="MenuContainer.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFont_NoClientCode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>// NOTE: This method may be called by privileged threads.</comments>
        <comments>//       This functionality is implemented in a package-private method </comments>
        <comments>//       to insure that it cannot be overridden by client subclasses. </comments>
        <comments>//       DO NOT INVOKE CLIENT CODE ON THIS THREAD!</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="font">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="parent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// The MenuContainer interface does not have getFont_NoClientCode()</comments>
              <comments>// and it cannot, because it must be package-private. Because of</comments>
              <comments>// this, we must manually cast classes that implement </comments>
              <comments>// MenuContainer.</comments>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:NestedExpression">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.139"/>
                    </next>
                    <expression xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
                    </expression>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:NestedExpression">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.20"/>
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0"/>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
                      </expression>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setFont">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="f">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// getFont_NoClientCode()</comments>
        <comments>/**&#xA;     * Sets the font to be used for this menu component to the specified &#xA;     * font. This font is also used by all subcomponents of this menu &#xA;     * component, unless those subcomponents specify a different font. &#xA;     * &lt;p>&#xA;     * Some platforms may not support setting of all font attributes &#xA;     * of a menu component; in such cases, calling &lt;code>setFont&lt;/code>&#xA;     * will have no effect on the unsupported font attributes of this &#xA;     * menu component.  Unless subcomponents of this menu component &#xA;     * specify a different font, this font will be used by those &#xA;     * subcomponents if supported by the underlying platform.  &#xA;     *&#xA;     * @param     f   the font to be set&#xA;     * @see       #getFont&#xA;     * @see       Font#getAttributes&#xA;     * @see       java.awt.font.TextAttribute&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="peer/MenuComponentPeer.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="removeNotify">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the menu component's peer.  The peer allows us to modify the&#xA;     * appearance of the menu component without changing the functionality of&#xA;     * the menu component.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="p">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="peer/MenuComponentPeer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="peer/MenuComponentPeer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <self xsi:type="literals:This"/>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="EventQueue.class.xmi#//@classifiers.0/@members.40"/>
                    <arguments xsi:type="references:SelfReference">
                      <self xsi:type="literals:This"/>
                    </arguments>
                    <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.79"/>
                </next>
                <target xsi:type="classifiers:Class" href="Toolkit.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:SelfReference">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <self xsi:type="literals:This"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="peer/MenuComponentPeer.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <lockProvider xsi:type="references:MethodCall" target="//@classifiers.0/@members.30"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="postEvent">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="evt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Event.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Posts the specified event to the menu.&#xA;     * This method is part of the Java&amp;nbsp;1.0 event system&#xA;     * and it is maintained only for backwards compatibility.&#xA;     * Its use is discouraged, and it may not be supported&#xA;     * in the future.&#xA;     * @param evt the event which is to take place&#xA;     * @deprecated As of JDK version 1.1, replaced by {@link&#xA;     * #dispatchEvent(AWTEvent) dispatchEvent}.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="parent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="MenuContainer.class.xmi#//@classifiers.0/@members.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatchEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AWTEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/*&#xA;     * Delivers an event to this component or one of its sub components.&#xA;     * @param e the event&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="dispatchEventImpl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AWTEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="EventQueue.class.xmi#//@classifiers.0/@members.41"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          </next>
          <target xsi:type="classifiers:Class" href="EventQueue.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.97"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
            </next>
            <target xsi:type="members:ClassMethod" href="Toolkit.class.xmi#//@classifiers.0/@members.51"/>
          </next>
          <target xsi:type="classifiers:Class" href="Toolkit.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="AWTEvent.class.xmi#//@classifiers.0/@members.32"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:NestedExpression">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
                    </next>
                    <expression xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0"/>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                    </expression>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="event/ActionEvent.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
              </condition>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                </expression>
              </children>
            </expression>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="olde">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>// backward compatibility</comments>
                  <target xsi:type="classifiers:Class" href="Event.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AWTEvent.class.xmi#//@classifiers.0/@members.39"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.2/@elseStatement/@statements.0/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.2/@elseStatement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="eventEnabled">
      <typeReference xsi:type="types:Boolean">
        <comments>// REMIND: remove when filtering is done at lower level</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AWTEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="processEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AWTEvent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/** &#xA;     * Processes events occurring on this menu component.  &#xA;     * &lt;p>Note that if the event parameter is &lt;code>null&lt;/code>&#xA;     * the behavior is unspecified and may result in an&#xA;     * exception.&#xA;     *&#xA;     * @param e the event&#xA;     * @since JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="paramString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns a string representing the state of this&#xA;     * &lt;code>MenuComponent&lt;/code>. This method is intended to be used&#xA;     * only for debugging purposes, and the content and format of the&#xA;     * returned string may vary between implementations. The returned&#xA;     * string may be empty but may not be &lt;code>null&lt;/code>.&#xA;     *&#xA;     * @return     the parameter string of this menu component&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="thisName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.14"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@statements.0/@variable"/>
            <expressionElse xsi:type="references:StringReference" value=""/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a representation of this menu component as a string. &#xA;     * @return  a string representation of this menu component&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/Class.class.xmi#//@classifiers.0/@members.44"/>
            </next>
            <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
          </children>
          <children xsi:type="references:StringReference" value="["/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
          <children xsi:type="references:StringReference" value="]"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getTreeLock">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Gets this component's locking object (the object that owns the thread &#xA;     * sychronization monitor) for AWT component-tree and layout&#xA;     * operations.&#xA;     * @return this component's locking object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="Component.class.xmi#//@classifiers.0/@members.33"/>
          </next>
          <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="HeadlessException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Reads the menu component from an object input stream.&#xA;     *&#xA;     * @param s the &lt;code>ObjectInputStream&lt;/code> to read&#xA;     * @exception HeadlessException if&#xA;     *   &lt;code>GraphicsEnvironment.isHeadless&lt;/code> returns&#xA;     *   &lt;code>true&lt;/code>&#xA;     * @serial&#xA;     * @see java.awt.GraphicsEnvironment#isHeadless&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="GraphicsEnvironment.class.xmi#//@classifiers.0/@members.8"/>
          </next>
          <target xsi:type="classifiers:Class" href="GraphicsEnvironment.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.19"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0/@members.19"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../sun/awt/AppContext.class.xmi#//@classifiers.0"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initIDs">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Initialize JNI field and method IDs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Native"/>
    </members>
    <members xsi:type="members:Field" name="accessibleContext">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/*&#xA;     * --- Accessibility Support ---&#xA;     *&#xA;     *  MenuComponent will contain all of the methods in interface Accessible,&#xA;     *  though it won't actually implement the interface - that will be up&#xA;     *  to the individual objects which extend MenuComponent.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>AccessibleContext&lt;/code> associated with &#xA;     * this &lt;code>MenuComponent&lt;/code>.&#xA;     *&#xA;     * The method implemented by this base class returns &lt;code>null&lt;/code>.&#xA;     * Classes that extend &lt;code>MenuComponent&lt;/code>&#xA;     * should implement this method to return the &#xA;     * &lt;code>AccessibleContext&lt;/code> associated with the subclass.&#xA;     *&#xA;     * @return the &lt;code>AccessibleContext&lt;/code> of this&#xA;     *     &lt;code>MenuComponent&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33"/>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="AccessibleAWTMenuComponent">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalLongLiteral" decimalValue="4269533416223798698"/>
        </initialValue>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/*&#xA;         * JDK 1.3 serialVersionUID&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="AccessibleAWTMenuComponent">
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;&#x9; * Although the class is abstract, this should be called by&#xA;&#x9; * all sub-classes. &#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleSelection">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/accessibility/AccessibleSelection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// AccessibleContext methods</comments>
          <comments>//</comments>
          <comments>/**&#xA;&#x9; * Gets the &lt;code>AccessibleSelection&lt;/code> associated with this&#xA;         * object which allows its &lt;code>Accessible&lt;/code> children to be selected.&#xA;&#x9; *&#xA;&#x9; * @return &lt;code>AccessibleSelection&lt;/code> if supported by object;&#xA;         *      else return &lt;code>null&lt;/code>&#xA;&#x9; * @see AccessibleSelection&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the accessible name of this object.  This should almost never&#xA;         * return &lt;code>java.awt.MenuComponent.getName&lt;/code>, as that&#xA;         * generally isn't a localized name, and doesn't have meaning for the&#xA;         * user.  If the object is fundamentally a text object (e.g. a menu item), the&#xA;         * accessible name should be the text of the object (e.g. &quot;save&quot;).&#xA;         * If the object has a tooltip, the tooltip text may also be an&#xA;         * appropriate String to return.&#xA;         *&#xA;         * @return the localized name of the object -- can be &lt;code>null&lt;/code>&#xA;         *         if this object does not have a name&#xA;         * @see AccessibleContext#setAccessibleName&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.23"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleDescription">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the accessible description of this object.  This should be&#xA;         * a concise, localized description of what this object is - what&#xA;         * is its meaning to the user.  If the object has a tooltip, the&#xA;         * tooltip text may be an appropriate string to return, assuming&#xA;         * it contains a concise description of the object (instead of just&#xA;         * the name of the object - e.g. a &quot;Save&quot; icon on a toolbar that&#xA;         * had &quot;save&quot; as the tooltip text shouldn't return the tooltip&#xA;         * text as the description, but something like &quot;Saves the current&#xA;         * text document&quot; instead).&#xA;         *&#xA;         * @return the localized description of the object -- can be&#xA;         *     &lt;code>null&lt;/code> if this object does not have a description&#xA;         * @see AccessibleContext#setAccessibleDescription&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.24"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleRole">
        <comments>// Non-specific -- overridden in subclasses</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the role of this object.&#xA;         *&#xA;         * @return an instance of &lt;code>AccessibleRole&lt;/code>&#xA;         *     describing the role of the object&#xA;         * @see AccessibleRole&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0/@members.48"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleRole.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleStateSet">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the state of this object.&#xA;         *&#xA;         * @return an instance of &lt;code>AccessibleStateSet&lt;/code>&#xA;         *     containing the current state set of the object&#xA;         * @see AccessibleState&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.38"/>
              <self xsi:type="literals:This"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleParent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/accessibility/Accessible.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the &lt;code>Accessible&lt;/code> parent of this object. &#xA;         * If the parent of this object implements &lt;code>Accessible&lt;/code>,&#xA;         * this method should simply return &lt;code>getParent&lt;/code>.&#xA;         *&#xA;         * @return the &lt;code>Accessible&lt;/code> parent of this object -- can&#xA;         *    be &lt;code>null&lt;/code> if this object does not have an &#xA;         *    &lt;code>Accessible&lt;/code> parent&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.22"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0/@members.22"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="parent">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
                  <next xsi:type="references:SelfReference">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                    <self xsi:type="literals:This"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="../../javax/accessibility/Accessible.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.7/@statements.0/@elseStatement/@statements.0/@variable"/>
                  </returnValue>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../javax/accessibility/Accessible.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.7/@statements.0/@elseStatement/@statements.0/@variable"/>
              </condition>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleIndexInParent">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the index of this object in its accessible parent.&#xA;         *&#xA;         * @return the index of this object in its parent; -1 if this&#xA;         *     object does not have an accessible parent&#xA;         * @see #getAccessibleParent&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.36"/>
              <self xsi:type="literals:This"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleChildrenCount">
        <comments>// MenuComponents don't have children</comments>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the number of accessible children in the object.  If all&#xA;         * of the children of this object implement &lt;code>Accessible&lt;/code>,&#xA;         * then this method should return the number of children of this object.&#xA;         *&#xA;         * @return the number of accessible children in the object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleChild">
        <comments>// MenuComponents don't have children</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/accessibility/Accessible.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="i">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the nth &lt;code>Accessible&lt;/code> child of the object.&#xA;         *&#xA;         * @param i zero-based index of child&#xA;         * @return the nth Accessible child of the object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getLocale">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>util</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../util/Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the locale of this object.&#xA;         *&#xA;         * @return the locale of this object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="parent">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                <self xsi:type="literals:This"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Component.class.xmi#//@classifiers.0/@members.142"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.11/@statements.0/@variable"/>
              </expression>
            </returnValue>
          </statement>
          <condition xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Component.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.11/@statements.0/@variable"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../util/Locale.class.xmi#//@classifiers.0/@members.35"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../util/Locale.class.xmi#//@classifiers.0"/>
                </next>
              </next>
            </returnValue>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleComponent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/accessibility/AccessibleComponent.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the &lt;code>AccessibleComponent&lt;/code> associated with&#xA;         * this object if one exists.  Otherwise return &lt;code>null&lt;/code>.&#xA;&#x9; *&#xA;&#x9; * @return the component&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getBackground">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// AccessibleComponent methods</comments>
          <comments>//</comments>
          <comments>/**&#xA;         * Gets the background color of this object.&#xA;         *&#xA;         * @return the background color, if supported, of the object;&#xA;         *     otherwise, &lt;code>null&lt;/code>&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setBackground">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Color.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the background color of this object.&#xA;         * (For transparency, see &lt;code>isOpaque&lt;/code>.)&#xA;         *&#xA;         * @param c the new &lt;code>Color&lt;/code> for the background&#xA;         * @see Component#isOpaque&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getForeground">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Color.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the foreground color of this object.&#xA;         *&#xA;         * @return the foreground color, if supported, of the object;&#xA;         *     otherwise, &lt;code>null&lt;/code>&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setForeground">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Color.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the foreground color of this object.&#xA;         *&#xA;         * @param c the new &lt;code>Color&lt;/code> for the foreground&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getCursor">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the &lt;code>Cursor&lt;/code> of this object.&#xA;         *&#xA;         * @return the &lt;code>Curso&lt;/code>, if supported, of the object;&#xA;         *     otherwise, &lt;code>null&lt;/code>&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setCursor">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="cursor">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Cursor.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the &lt;code>Cursor&lt;/code> of this object.&#xA;         *&#xA;         * @param cursor the new &lt;code>Cursor&lt;/code> for the object&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getFont">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the &lt;code>Font&lt;/code> of this object.&#xA;         *&#xA;         * @return the &lt;code>Font&lt;/code>,if supported, for the object;&#xA;         *     otherwise, &lt;code>null&lt;/code>&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.19"/>
              <self xsi:type="literals:This"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setFont">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the &lt;code>Font&lt;/code> of this object.&#xA;         *&#xA;         * @param f the new &lt;code>Font&lt;/code> for the object&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.20/@parameters.0"/>
              </next>
              <self xsi:type="literals:This"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getFontMetrics">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="FontMetrics.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Font.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the &lt;code>FontMetrics&lt;/code> of this object.&#xA;         *&#xA;         * @param f the &lt;code>Font&lt;/code>&#xA;         * @return the FontMetrics, if supported, the object;&#xA;         *&#x9;&#x9;otherwise, &lt;code>null&lt;/code>&#xA;         * @see #getFont&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isEnabled">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Determines if the object is enabled.&#xA;         *&#xA;         * @return true if object is enabled; otherwise, false&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setEnabled">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="b">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the enabled state of the object.&#xA;         *&#xA;         * @param b if true, enables this object; otherwise, disables it&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="isVisible">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Determines if the object is visible.  Note: this means that the&#xA;         * object intends to be visible; however, it may not in fact be&#xA;         * showing on the screen because one of the objects that this object&#xA;         * is contained by is not visible.  To determine if an object is&#xA;         * showing on the screen, use &lt;code>isShowing&lt;/code>.&#xA;         *&#xA;         * @return true if object is visible; otherwise, false&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setVisible">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="b">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the visible state of the object.&#xA;         *&#xA;         * @param b if true, shows this object; otherwise, hides it&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="isShowing">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Determines if the object is showing.  This is determined by checking&#xA;         * the visibility of the object and ancestors of the object.  Note:&#xA;         * this will return true even if the object is obscured by another&#xA;         * (for example, it happens to be underneath a menu that was pulled&#xA;         * down).&#xA;         *&#xA;         * @return true if object is showing; otherwise, false&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="contains">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Checks whether the specified point is within this object's bounds,&#xA;         * where the point's x and y coordinates are defined to be relative to&#xA;         * the coordinate system of the object.&#xA;         *&#xA;         * @param p the &lt;code>Point&lt;/code> relative to the coordinate&#xA;         *     system of the object&#xA;         * @return true if object contains &lt;code>Point&lt;/code>; otherwise false&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getLocationOnScreen">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the location of the object on the screen.&#xA;         *&#xA;         * @return location of object on screen -- can be &lt;code>null&lt;/code>&#xA;         *     if this object is not on the screen&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getLocation">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the location of the object relative to the parent in the form&#xA;         * of a point specifying the object's top-left corner in the screen's&#xA;         * coordinate space.&#xA;         *&#xA;         * @return an instance of &lt;code>Point&lt;/code> representing the&#xA;         *    top-left corner of the object's bounds in the coordinate&#xA;         *    space of the screen; &lt;code>null&lt;/code> if&#xA;         *    this object or its parent are not on the screen&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setLocation">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the location of the object relative to the parent.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getBounds">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Gets the bounds of this object in the form of a&#xA;         * &lt;code>Rectangle&lt;/code> object.&#xA;         * The bounds specify this object's width, height, and location&#xA;         * relative to its parent.&#xA;         *&#xA;         * @return a rectangle indicating this component's bounds;&#xA;         *     &lt;code>null&lt;/code> if this object is not on the screen&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setBounds">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="r">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Sets the bounds of this object in the form of a&#xA;         * &lt;code>Rectangle&lt;/code> object.&#xA;         * The bounds specify this object's width, height, and location&#xA;         * relative to its parent.&#xA;         *&#xA;         * @param r a rectangle indicating this component's bounds&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getSize">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Dimension.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the size of this object in the form of a&#xA;         * &lt;code>Dimension&lt;/code> object. The height field of&#xA;         * the &lt;code>Dimension&lt;/code> object contains this object's&#xA;         * height, and the width field of the &lt;code>Dimension&lt;/code>&#xA;         * object contains this object's width.&#xA;         *&#xA;         * @return a &lt;code>Dimension&lt;/code> object that indicates the&#xA;         *         size of this component; &lt;code>null&lt;/code>&#xA;         *         if this object is not on the screen&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setSize">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="d">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Dimension.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Resizes this object.&#xA;         *&#xA;         * @param d - the &lt;code>Dimension&lt;/code> specifying the&#xA;         *    new size of the object&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleAt">
        <comments>// MenuComponents don't have children</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/accessibility/Accessible.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the &lt;code>Accessible&lt;/code> child, if one exists,&#xA;         * contained at the local coordinate &lt;code>Point&lt;/code>.&#xA;         * If there is no &lt;code>Accessible&lt;/code> child, &lt;code>null&lt;/code>&#xA;         * is returned.&#xA;         *&#xA;         * @param p the point defining the top-left corner of the &#xA;         *    &lt;code>Accessible&lt;/code>, given in the coordinate space&#xA;         *    of the object's parent&#xA;         * @return the &lt;code>Accessible&lt;/code>, if it exists,&#xA;         *    at the specified location; else &lt;code>null&lt;/code>&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isFocusTraversable">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns whether this object can accept focus or not.&#xA;         *&#xA;         * @return true if object can accept focus; otherwise false&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="requestFocus">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Requests focus for this object.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="addFocusListener">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>java</namespaces>
            <namespaces>awt</namespaces>
            <namespaces>event</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="event/FocusListener.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Adds the specified focus listener to receive focus events from this&#xA;         * component.&#xA;         *&#xA;         * @param l the focus listener&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="removeFocusListener">
        <comments>// Not supported for MenuComponents</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>java</namespaces>
            <namespaces>awt</namespaces>
            <namespaces>event</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="event/FocusListener.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Removes the specified focus listener so it no longer receives focus&#xA;         * events from this component.&#xA;         *&#xA;         * @param l the focus listener&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleSelectionCount">
        <comments>//  To be fully implemented in a future release</comments>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// AccessibleSelection methods</comments>
          <comments>//</comments>
          <comments>/**&#xA;&#x9; * Returns the number of &lt;code>Accessible&lt;/code> children currently selected.&#xA;&#x9; * If no children are selected, the return value will be 0.&#xA;&#x9; *&#xA;&#x9; * @return the number of items currently selected&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getAccessibleSelection">
        <comments>//  To be fully implemented in a future release</comments>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/accessibility/Accessible.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="i">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns an &lt;code>Accessible&lt;/code> representing the specified &#xA;&#x9; * selected child in the object.  If there isn't a selection, or there are&#xA;&#x9; * fewer children selected than the integer passed in, the return&#xA;&#x9; * value will be &lt;code>null&lt;/code>.&#xA;&#x9; * &lt;p>Note that the index represents the i-th selected child, which&#xA;&#x9; * is different from the i-th child.&#xA;&#x9; *&#xA;&#x9; * @param i the zero-based index of selected children&#xA;&#x9; * @return the i-th selected child&#xA;&#x9; * @see #getAccessibleSelectionCount&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isAccessibleChildSelected">
        <comments>//  To be fully implemented in a future release</comments>
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="i">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Determines if the current child of this object is selected.&#xA;&#x9; *&#xA;&#x9; * @return true if the current child of this object is selected; &#xA;&#x9; *    else false&#xA;&#x9; * @param i the zero-based index of the child in this &#xA;         *      &lt;code>Accessible&lt;/code> object&#xA;&#x9; * @see AccessibleContext#getAccessibleChild&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="addAccessibleSelection">
        <comments>//  To be fully implemented in a future release</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="i">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Adds the specified &lt;code>Accessible&lt;/code> child of the object&#xA;         * to the object's selection.  If the object supports multiple selections,&#xA;&#x9; * the specified child is added to any existing selection, otherwise&#xA;&#x9; * it replaces any existing selection in the object.  If the&#xA;&#x9; * specified child is already selected, this method has no effect.&#xA;&#x9; *&#xA;&#x9; * @param i the zero-based index of the child&#xA;&#x9; * @see AccessibleContext#getAccessibleChild&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="removeAccessibleSelection">
        <comments>//  To be fully implemented in a future release</comments>
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="i">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Removes the specified child of the object from the object's&#xA;&#x9; * selection.  If the specified item isn't currently selected, this&#xA;&#x9; * method has no effect.&#xA;&#x9; *&#xA;&#x9; * @param i the zero-based index of the child&#xA;&#x9; * @see AccessibleContext#getAccessibleChild&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="clearAccessibleSelection">
        <comments>//  To be fully implemented in a future release</comments>
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Clears the selection in the object, so that no children in the&#xA;&#x9; * object are selected.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="selectAllAccessibleSelection">
        <comments>//  To be fully implemented in a future release</comments>
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Causes every child of the object to be selected&#xA;&#x9; * if the object supports multiple selections.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Inner class of &lt;code>MenuComponent&lt;/code> used to provide&#xA;     * default support for accessibility.  This class is not meant&#xA;     * to be used directly by application developers, but is instead&#xA;     * meant only to be subclassed by menu component developers.&#xA;     * &lt;p>&#xA;     * The class used to obtain the accessible role for this object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../javax/accessibility/AccessibleComponent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../javax/accessibility/AccessibleSelection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleIndexInParent">
      <typeReference xsi:type="types:Int">
        <comments>// inner class AccessibleAWTComponent</comments>
        <comments>/**&#xA;     * Gets the index of this object in its accessible parent.&#xA;     *&#xA;     * @return -1 if this object does not have an accessible parent;&#xA;     *      otherwise, the index of the child in its accessible parent.&#xA;     */</comments>
      </typeReference>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="localParent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="MenuContainer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <comments>// MenuComponents only have accessible index when inside MenuComponents</comments>
            <returnValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
            </expression>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="localParentMenu">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.2/@variable">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.37">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleChildIndex">
      <comments>// Overridden in subclasses.</comments>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the index of the child within this MenuComponent.&#xA;     *&#xA;     * @param child MenuComponent whose index we are interested in.&#xA;     * @return -1 if this object doesn't contain the child,&#xA;     *      otherwise, index of the child.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="child">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAccessibleStateSet">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the state of this object.&#xA;     *&#xA;     * @return an instance of &lt;code>AccessibleStateSet&lt;/code>&#xA;     *     containing the current state set of the object&#xA;     * @see AccessibleState&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="states">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../javax/accessibility/AccessibleStateSet.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.38/@statements.0/@variable"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The abstract class &lt;code>MenuComponent&lt;/code> is the superclass &#xA; * of all menu-related components. In this respect, the class&#xA; * &lt;code>MenuComponent&lt;/code> is analogous to the abstract superclass&#xA; * &lt;code>Component&lt;/code> for AWT components.&#xA; * &lt;p>&#xA; * Menu components receive and process AWT events, just as components do,&#xA; * through the method &lt;code>processEvent&lt;/code>.&#xA; *&#xA; * @version &#x9;1.77, 05/18/04&#xA; * @author &#x9;Arthur van Hoff&#xA; * @since       JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
