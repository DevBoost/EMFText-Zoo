<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="InputMethodRequests.java">
  <comments>/*&#xA; * @(#)InputMethodRequests.java&#x9;1.18 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <namespaces>im</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>font</namespaces>
    <classifier xsi:type="classifiers:Class" href="../font/TextHitInfo.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../text/AttributedCharacterIterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <namespaces>AttributedCharacterIterator</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../text/AttributedCharacterIterator$Attribute.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="InputMethodRequests">
    <members xsi:type="members:InterfaceMethod" name="getTextLocation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the location of a specified offset in the current composed text,&#xA;     * or of the selection in committed text.&#xA;     * This information is, for example, used to position the candidate window&#xA;     * near the composed text, or a composition window near the location&#xA;     * where committed text will be inserted.&#xA;     *&#xA;     * &lt;p>&#xA;     * If the component has composed text (because the most recent&#xA;     * InputMethodEvent sent to it contained composed text), then the offset is&#xA;     * relative to the composed text - offset 0 indicates the first character&#xA;     * in the composed text. The location returned should be for this character.&#xA;     *&#xA;     * &lt;p>&#xA;     * If the component doesn't have composed text, the offset should be ignored,&#xA;     * and the location returned should reflect the beginning (in line&#xA;     * direction) of the highlight in the last line containing selected text.&#xA;     * For example, for horizontal left-to-right text (such as English), the&#xA;     * location to the left of the left-most character on the last line&#xA;     * containing selected text is returned. For vertical top-to-bottom text,&#xA;     * with lines proceding from right to left, the location to the top of the&#xA;     * left-most line containing selected text is returned.&#xA;     *&#xA;     * &lt;p>&#xA;     * The location is represented as a 0-thickness caret, that is, it has 0&#xA;     * width if the text is drawn horizontally, and 0 height if the text is&#xA;     * drawn vertically. Other text orientations need to be mapped to&#xA;     * horizontal or vertical orientation. The rectangle uses absolute screen&#xA;     * coordinates.&#xA;     *&#xA;     * @param offset the offset within the composed text, if there is composed&#xA;     * text; null otherwise&#xA;     * @return a rectangle representing the screen location of the offset&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../font/TextHitInfo.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocationOffset">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the offset within the composed text for the specified absolute x&#xA;     * and y coordinates on the screen. This information is used, for example&#xA;     * to handle mouse clicks and the mouse cursor. The offset is relative to&#xA;     * the composed text, so offset 0 indicates the beginning of the composed&#xA;     * text.&#xA;     *&#xA;     * &lt;p>&#xA;     * Return null if the location is outside the area occupied by the composed&#xA;     * text.&#xA;     *&#xA;     * @param x the absolute x coordinate on screen&#xA;     * @param y the absolute y coordinate on screen&#xA;     * @return a text hit info describing the offset in the composed text.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../font/TextHitInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInsertPositionOffset">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the offset of the insert position in the committed text contained&#xA;     * in the text editing component. This is the offset at which characters&#xA;     * entered through an input method are inserted. This information is used&#xA;     * by an input method, for example, to examine the text surrounding the&#xA;     * insert position.&#xA;     * &#xA;     * @return the offset of the insert position&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCommittedText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets an iterator providing access to the entire text and attributes&#xA;     * contained in the text editing component except for uncommitted&#xA;     * text. Uncommitted (composed) text should be ignored for index&#xA;     * calculations and should not be made accessible through the iterator.&#xA;     *&#xA;     * &lt;p>&#xA;     * The input method may provide a list of attributes that it is&#xA;     * interested in. In that case, information about other attributes that&#xA;     * the implementor may have need not be made accessible through the&#xA;     * iterator. If the list is null, all available attribute information&#xA;     * should be made accessible.&#xA;     *&#xA;     * @param beginIndex the index of the first character&#xA;     * @param endIndex the index of the character following the last character&#xA;     * @param attributes a list of attributes that the input method is&#xA;     * interested in&#xA;     * @return an iterator providing access to the text and its attributes&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../../text/AttributedCharacterIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beginIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="endIndex">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../text/AttributedCharacterIterator$Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCommittedTextLength">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Gets the length of the entire text contained in the text&#xA;     * editing component except for uncommitted (composed) text.&#xA;     *&#xA;     * @return the length of the text except for uncommitted text&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="cancelLatestCommittedText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the latest committed text from the text editing component and&#xA;     * removes it from the component's text body.&#xA;     * This is used for the &quot;Undo Commit&quot; feature in some input methods, where&#xA;     * the committed text reverts to its previous composed state. The composed&#xA;     * text will be sent to the component using an InputMethodEvent.&#xA;     *&#xA;     * &lt;p>&#xA;     * Generally, this feature should only be supported immediately after the&#xA;     * text was committed, not after the user performed other operations on the&#xA;     * text. When the feature is not supported, return null.&#xA;     *&#xA;     * &lt;p>&#xA;     * The input method may provide a list of attributes that it is&#xA;     * interested in. In that case, information about other attributes that&#xA;     * the implementor may have need not be made accessible through the&#xA;     * iterator. If the list is null, all available attribute information&#xA;     * should be made accessible.&#xA;     *&#xA;     * @param attributes a list of attributes that the input method is&#xA;     * interested in&#xA;     * @return the latest committed text, or null when the &quot;Undo Commit&quot;&#xA;     * feature is not supported&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../../text/AttributedCharacterIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../text/AttributedCharacterIterator$Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSelectedText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the currently selected text from the text editing component.&#xA;     * This may be used for a variety of purposes.&#xA;     * One of them is the &quot;Reconvert&quot; feature in some input methods.&#xA;     * In this case, the input method will typically send an input method event&#xA;     * to replace the selected text with composed text. Depending on the input&#xA;     * method's capabilities, this may be the original composed text for the&#xA;     * selected text, the latest composed text entered anywhere in the text, or&#xA;     * a version of the text that's converted back from the selected text.&#xA;     *&#xA;     * &lt;p>&#xA;     * The input method may provide a list of attributes that it is&#xA;     * interested in. In that case, information about other attributes that&#xA;     * the implementor may have need not be made accessible through the&#xA;     * iterator. If the list is null, all available attribute information&#xA;     * should be made accessible.&#xA;     *&#xA;     * @param attributes a list of attributes that the input method is&#xA;     * interested in&#xA;     * @return the currently selected text&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="../../text/AttributedCharacterIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="attributes">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../text/AttributedCharacterIterator$Attribute.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * InputMethodRequests defines the requests that a text editing component&#xA; * has to handle in order to work with input methods. The component&#xA; * can implement this interface itself or use a separate object that&#xA; * implements it. The object implementing this interface must be returned&#xA; * from the component's getInputMethodRequests method.&#xA; *&#xA; * &lt;p>&#xA; * The text editing component also has to provide an input method event&#xA; * listener.&#xA; *&#xA; * &lt;p>&#xA; * The interface is designed to support one of two input user interfaces:&#xA; * &lt;ul>&#xA; * &lt;li>&lt;em>on-the-spot&lt;/em> input, where the composed text is displayed as part&#xA; *     of the text component's text body.&#xA; * &lt;li>&lt;em>below-the-spot&lt;/em> input, where the composed text is displayed in&#xA; *     a separate composition window just below the insertion point where&#xA; *     the text will be inserted when it is committed. Note that, if text is&#xA; *     selected within the component's text body, this text will be replaced by&#xA; *     the committed text upon commitment; therefore it is not considered part&#xA; *     of the context that the text is input into.&#xA; * &lt;/ul>&#xA; *&#xA; * @see java.awt.Component#getInputMethodRequests&#xA; * @see java.awt.event.InputMethodListener&#xA; *&#xA; * @version &#x9;1.18, 12/19/03&#xA; * @author JavaSoft Asia/Pacific&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
