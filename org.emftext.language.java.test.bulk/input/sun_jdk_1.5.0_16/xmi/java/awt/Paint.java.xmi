<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Paint.java">
  <comments>/*&#xA; * @(#)Paint.java&#x9;1.27 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>image</namespaces>
    <classifier xsi:type="classifiers:Class" href="image/ColorModel.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="geom/AffineTransform.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="geom/Point2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Paint">
    <members xsi:type="members:InterfaceMethod" name="createContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PaintContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cm">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="image/ColorModel.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="deviceBounds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="userBounds">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xform">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/AffineTransform.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hints">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RenderingHints.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates and returns a {@link PaintContext} used to &#xA;     * generate the color pattern.&#xA;     * Since the ColorModel argument to createContext is only a&#xA;     * hint, implementations of Paint should accept a null argument&#xA;     * for ColorModel.  Note that if the application does not&#xA;     * prefer a specific ColorModel, the null ColorModel argument&#xA;     * will give the Paint implementation full leeway in using the&#xA;     * most efficient ColorModel it prefers for its raster processing.&#xA;     * &lt;p>&#xA;     * Since the API documentation was not specific about this in&#xA;     * releases before 1.4, there may be implementations of &#xA;     * &lt;code>Paint&lt;/code> that do not accept a null &#xA;     * &lt;code>ColorModel&lt;/code> argument.&#xA;     * If a developer is writing code which passes a null &#xA;     * &lt;code>ColorModel&lt;/code> argument to the &#xA;     * &lt;code>createContext&lt;/code> method of &lt;code>Paint&lt;/code> &#xA;     * objects from arbitrary sources it would be wise to code defensively&#xA;     * by manufacturing a non-null &lt;code>ColorModel&lt;/code> for those&#xA;     * objects which throw a &lt;code>NullPointerException&lt;/code>.&#xA;     * @param cm the {@link ColorModel} that receives the&#xA;     * &lt;code>Paint&lt;/code> data. This is used only as a hint.&#xA;     * @param deviceBounds the device space bounding box&#xA;     *                     of the graphics primitive being rendered&#xA;     * @param userBounds the user space bounding box &#xA;     *                     of the graphics primitive being rendered&#xA;     * @param xform the {@link AffineTransform} from user&#xA;     *      space into device space&#xA;     * @param hints the hint that the context object uses to&#xA;     *              choose between rendering alternatives&#xA;     * @return the &lt;code>PaintContext&lt;/code> for&#xA;     *              generating color patterns&#xA;     * @see PaintContext&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This &lt;code>Paint&lt;/code> interface defines how color patterns&#xA; * can be generated for {@link Graphics2D} operations.  A class&#xA; * implementing the &lt;code>Paint&lt;/code> interface is added to the&#xA; * &lt;code>Graphics2D&lt;/code> context in order to define the color &#xA; * pattern used by the &lt;code>draw&lt;/code> and &lt;code>fill&lt;/code> methods.&#xA; * &lt;p>&#xA; * Instances of classes implementing &lt;code>Paint&lt;/code> must be &#xA; * read-only because the &lt;code>Graphics2D&lt;/code> does not clone&#xA; * these objects when they are set as an attribute with the &#xA; * &lt;code>setPaint&lt;/code> method or when the &lt;code>Graphics2D&lt;/code>&#xA; * object is itself cloned.&#xA; * @see PaintContext&#xA; * @see Color&#xA; * @see GradientPaint&#xA; * @see TexturePaint&#xA; * @see Graphics2D#setPaint&#xA; * @version 1.27, 12/19/03&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Transparency.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
