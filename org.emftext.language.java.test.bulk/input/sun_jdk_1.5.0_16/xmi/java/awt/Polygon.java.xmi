<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="Polygon.java">
  <comments>/*&#xA; * @(#)Polygon.java&#x9;1.52 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="geom/AffineTransform.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="geom/PathIterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="geom/Point2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>awt</namespaces>
    <namespaces>geom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Polygon">
    <members xsi:type="members:Field" name="npoints">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The total number of points.  The value of &lt;code>npoints&lt;/code>&#xA;     * represents the number of valid points in this &lt;code>Polygon&lt;/code>&#xA;     * and might be less than the number of elements in &#xA;     * {@link #xpoints xpoints} or {@link #ypoints ypoints}.&#xA;     * This value can be NULL.&#xA;     *&#xA;     * @serial&#xA;     * @see #addPoint(int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="xpoints">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The array of &lt;i>x&lt;/i> coordinates.  The number of elements in &#xA;     * this array might be more than the number of &lt;i>x&lt;/i> coordinates &#xA;     * in this &lt;code>Polygon&lt;/code>.  The extra elements allow new points&#xA;     * to be added to this &lt;code>Polygon&lt;/code> without re-creating this&#xA;     * array.  The value of {@link #npoints npoints} is equal to the&#xA;     * number of valid points in this &lt;code>Polygon&lt;/code>.&#xA;     *&#xA;     * @serial&#xA;     * @see #addPoint(int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="ypoints">
      <typeReference xsi:type="types:Int"/>
      <arrayDimensionsAfter/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The array of &lt;i>y&lt;/i> coordinates.  The number of elements in&#xA;     * this array might be more than the number of &lt;i>y&lt;/i> coordinates   &#xA;     * in this &lt;code>Polygon&lt;/code>.  The extra elements allow new points    &#xA;     * to be added to this &lt;code>Polygon&lt;/code> without re-creating this&#xA;     * array.  The value of &lt;code>npoints&lt;/code> is equal to the&#xA;     * number of valid points in this &lt;code>Polygon&lt;/code>. &#xA;     *&#xA;     * @serial&#xA;     * @see #addPoint(int, int)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="bounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Bounds of the polygon.&#xA;     * This value can be NULL.&#xA;     * Please see the javadoc comments getBounds().&#xA;     * &#xA;     * @serial&#xA;     * @see #getBoundingBox()&#xA;     * @see #getBounds()&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="6460061437900069969"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/* &#xA;     * JDK 1.1 serialVersionUID &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="Polygon">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
          </value>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an empty polygon.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Polygon">
      <statements xsi:type="statements:Condition">
        <comments>// Fix 4489009: should throw IndexOutofBoundsException instead</comments>
        <comments>// of OutofMemoryException if npoints is huge and > {x,y}points.length</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="npoints > xpoints.length || npoints > ypoints.length"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="arrays:ArrayInstantiationBySize">
            <typeReference xsi:type="types:Int"/>
            <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
          </next>
          <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xpoints">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ypoints">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="npoints">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs and initializes a &lt;code>Polygon&lt;/code> from the specified &#xA;     * parameters. &#xA;     * @param xpoints an array of &lt;i>x&lt;/i> coordinates&#xA;     * @param ypoints an array of &lt;i>y&lt;/i> coordinates&#xA;     * @param npoints the total number of points in the    &#xA;     *&#x9;&#x9;&#x9;&#x9;&lt;code>Polygon&lt;/code>&#xA;     * @exception  NegativeArraySizeException if the value of&#xA;     *                       &lt;code>npoints&lt;/code> is negative.&#xA;     * @exception  IndexOutOfBoundsException if &lt;code>npoints&lt;/code> is&#xA;     *             greater than the length of &lt;code>xpoints&lt;/code>&#xA;     *             or the length of &lt;code>ypoints&lt;/code>.&#xA;     * @exception  NullPointerException if &lt;code>xpoints&lt;/code> or&#xA;     *             &lt;code>ypoints&lt;/code> is &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="reset">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Resets this &lt;code>Polygon&lt;/code> object to an empty polygon.&#xA;     * The coordinate arrays and the data in them are left untouched&#xA;     * but the number of points is reset to zero to mark the old&#xA;     * vertex data as invalid and to start accumulating new vertex&#xA;     * data at the beginning.&#xA;     * All internally-cached data relating to the old vertices&#xA;     * are discarded.&#xA;     * Note that since the coordinate arrays from before the reset&#xA;     * are reused, creating a new empty &lt;code>Polygon&lt;/code> might&#xA;     * be more memory efficient than resetting the current one if&#xA;     * the number of vertices in the new polygon data is significantly&#xA;     * smaller than the number of vertices in the data from before the&#xA;     * reset.&#xA;     * @see         java.awt.Polygon#invalidate&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="invalidate">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Invalidates or flushes any internally-cached data that depends&#xA;     * on the vertex coordinates of this &lt;code>Polygon&lt;/code>.&#xA;     * This method should be called after any direct manipulation&#xA;     * of the coordinates in the &lt;code>xpoints&lt;/code> or&#xA;     * &lt;code>ypoints&lt;/code> arrays to avoid inconsistent results&#xA;     * from methods such as &lt;code>getBounds&lt;/code> or &lt;code>contains&lt;/code>&#xA;     * that might cache data from earlier computations relating to&#xA;     * the vertex coordinates.&#xA;     * @see         java.awt.Polygon#getBounds&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="translate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="deltaX">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="deltaY">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Translates the vertices of the &lt;code>Polygon&lt;/code> by &#xA;     * &lt;code>deltaX&lt;/code> along the x axis and by &#xA;     * &lt;code>deltaY&lt;/code> along the y axis.&#xA;     * @param deltaX the amount to translate along the &lt;i>x&lt;/i> axis&#xA;     * @param deltaY the amount to translate along the &lt;i>y&lt;/i> axis&#xA;     * @since JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:AssignmentPlus"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Rectangle.class.xmi#//@classifiers.0/@members.27"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="calculateBounds">
      <typeReference xsi:type="types:Void">
        <comments>/*&#xA;     * Calculates the bounding box of the points passed to the constructor.&#xA;     * Sets &lt;code>bounds&lt;/code> to the result.&#xA;     * @param xpoints[] array of &lt;i>x&lt;/i> coordinates&#xA;     * @param ypoints[] array of &lt;i>y&lt;/i> coordinates&#xA;     * @param npoints the total number of points&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xpoints">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ypoints">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="npoints">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="boundsMinX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="boundsMinY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="boundsMaxX">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="boundsMaxY">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../lang/Integer.class.xmi#//@classifiers.0/@members.0"/>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="x">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@init"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@statement/@statements.0/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@statement/@statements.0/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="y">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@init"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.37"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@statement/@statements.3/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@statement/@statements.3/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.4/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.2/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.3/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="updateBounds">
      <typeReference xsi:type="types:Void">
        <comments>/*&#xA;     * Resizes the bounding box to accomodate the specified coordinates.&#xA;     * @param x,&amp;nbsp;y the specified coordinates&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <comments>// bounds.x = bounds.x;</comments>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.0"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                  </next>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <comments>// bounds.y = bounds.y;</comments>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                <next xsi:type="references:IdentifierReference">
                  <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.3"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="Rectangle.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addPoint">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Appends the specified coordinates to this &lt;code>Polygon&lt;/code>. &#xA;     * &lt;p>&#xA;     * If an operation that calculates the bounding box of this     &#xA;     * &lt;code>Polygon&lt;/code> has already been performed, such as  &#xA;     * &lt;code>getBounds&lt;/code> or &lt;code>contains&lt;/code>, then this &#xA;     * method updates the bounding box. &#xA;     * @param       x the specified x coordinate&#xA;     * @param       y the specified y coordinate&#xA;     * @see         java.awt.Polygon#getBounds&#xA;     * @see         java.awt.Polygon#contains&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="tmp">
              <typeReference xsi:type="types:Int"/>
              <arrayDimensionsAfter/>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <sizes xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </sizes>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statement/@statements.0/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statement/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Int"/>
                <sizes xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </sizes>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statement/@statements.0/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:IdentifierReference"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <arraySelectors>
              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </arraySelectors>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <operator xsi:type="operators:PlusPlus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBounds">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the bounding box of this &lt;code>Polygon&lt;/code>. &#xA;     * The bounding box is the smallest {@link Rectangle} whose&#xA;     * sides are parallel to the x and y axes of the &#xA;     * coordinate space, and can completely contain the &lt;code>Polygon&lt;/code>.&#xA;     * @return a &lt;code>Rectangle&lt;/code> that defines the bounds of this &#xA;     * &lt;code>Polygon&lt;/code>.&#xA;     * @since       JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.14"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBoundingBox">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns the bounds of this &lt;code>Polygon&lt;/code>.&#xA;     * @return the bounds of this &lt;code>Polygon&lt;/code>.&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>getBounds()&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Rectangle.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </returnValue>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="Rectangle.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Point.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether the specified {@link Point} is inside this &#xA;     * &lt;code>Polygon&lt;/code>.&#xA;     * @param p the specified &lt;code>Point&lt;/code> to be tested&#xA;     * @return &lt;code>true&lt;/code> if the &lt;code>Polygon&lt;/code> contains the&#xA;     * &#x9;&#x9;&#x9;&lt;code>Point&lt;/code>; &lt;code>false&lt;/code> otherwise.&#xA;     * @see #contains(double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.16">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Point.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="Point.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines whether the specified coordinates are inside this &#xA;     * &lt;code>Polygon&lt;/code>.   &#xA;     * &lt;p>&#xA;     * @param x the specified x coordinate to be tested&#xA;     * @param y the specified y coordinate to be tested&#xA;     * @return  &lt;code>true&lt;/code> if this &lt;code>Polygon&lt;/code> contains&#xA;     * &#x9;&#x9;&#x9;the specified coordinates, (&lt;i>x&lt;/i>,&amp;nbsp;&lt;i>y&lt;/i>);  &#xA;     * &#x9;&#x9;&#x9;&lt;code>false&lt;/code> otherwise.&#xA;     * @see #contains(double, double)&#xA;     * @since      JDK1.1&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
          </arguments>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="inside">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Determines whether the specified coordinates are contained in this &#xA;     * &lt;code>Polygon&lt;/code>.&#xA;     * @param x the specified x coordinate to be tested&#xA;     * @param y the specified y coordinate to be tested&#xA;     * @return  &lt;code>true&lt;/code> if this &lt;code>Polygon&lt;/code> contains&#xA;     * &#x9;&#x9;the specified coordinates, (&lt;i>x&lt;/i>,&amp;nbsp;&lt;i>y&lt;/i>);  &#xA;     * &#x9;&#x9;&lt;code>false&lt;/code> otherwise.&#xA;     * @see #contains(double, double)&#xA;     * @deprecated As of JDK version 1.1,&#xA;     * replaced by &lt;code>contains(int, int)&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          </arguments>
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:Double"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.1"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getBounds2D">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the high precision bounding box of the {@link Shape}.&#xA;     * @return a {@link Rectangle2D} that precisely&#xA;     *&#x9;&#x9;bounds the &lt;code>Shape&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.13"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Determines if the specified coordinates are inside this &#xA;     * &lt;code>Polygon&lt;/code>.  For the definition of&#xA;     * &lt;i>insideness&lt;/i>, see the class comments of {@link Shape}.&#xA;     * @param x the specified x coordinate&#xA;     * @param y the specified y coordinate&#xA;     * @return &lt;code>true&lt;/code> if the &lt;code>Polygon&lt;/code> contains the&#xA;     * specified coordinates; &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="geom/Rectangle2D.class.xmi#//@classifiers.0/@members.13"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="hits">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lastx">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lasty">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="curx">
          <typeReference xsi:type="types:Int"/>
          <additionalLocalVariables name="cury"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Walk the edges of the polygon</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@init"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@init"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Continue"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.3/@variable"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="leftx">
              <typeReference xsi:type="types:Int"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Continue"/>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Continue"/>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.3/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="test1">
              <typeReference xsi:type="types:Double"/>
              <additionalLocalVariables name="test2"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Continue"/>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.3/@variable"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Continue"/>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.3/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.5/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.5/@variable/@additionalLocalVariables.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.3/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Continue"/>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.3/@variable"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Continue"/>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.3/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.5/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.5/@variable/@additionalLocalVariables.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.3/@variable"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.5/@variable"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@statement/@statements.5/@variable/@additionalLocalVariables.0"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.3/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </expression>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </expression>
                  </children>
                  <multiplicativeOperators xsi:type="operators:Division"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </expression>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.2/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable"/>
        </updates>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.3/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.4/@variable/@additionalLocalVariables.0"/>
        </updates>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.5/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCrossings">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xlo">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ylo">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="xhi">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="yhi">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cross">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Crossings</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../sun/awt/geom/Crossings$EvenOdd.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.3"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lastx">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lasty">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <arraySelectors>
              <position xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </position>
            </arraySelectors>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="curx">
          <typeReference xsi:type="types:Int"/>
          <additionalLocalVariables name="cury"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Walk the edges of the polygon</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.4/@init"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.3/@variable/@additionalLocalVariables.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.4/@init"/>
                </arraySelectors>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:NullLiteral"/>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0/@members.19"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.3/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.3/@variable/@additionalLocalVariables.0"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.3/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.3/@variable/@additionalLocalVariables.0"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.4/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.4/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/Point2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if a specified {@link Point2D} is inside the boundary of this &#xA;     * &lt;code>Polygon&lt;/code>.&#xA;     * @param p a specified &lt;code>Point2D&lt;/code>&#xA;     * @return &lt;code>true&lt;/code> if this &lt;code>Polygon&lt;/code> contains the &#xA;     * &#x9;&#x9;specified &lt;code>Point2D&lt;/code>; &lt;code>false&lt;/code>&#xA;     *          otherwise.&#xA;     * @see #contains(double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/Point2D.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/Point2D.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intersects">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the interior of this &lt;code>Polygon&lt;/code> intersects the &#xA;     * interior of a specified set of rectangular coordinates.&#xA;     * @param x the x coordinate of the specified rectangular&#xA;     *&#x9;&#x9;&#x9;shape's top-left corner&#xA;     * @param y the y coordinate of the specified rectangular&#xA;     *&#x9;&#x9;&#x9;shape's top-left corner&#xA;     * @param w the width of the specified rectangular shape&#xA;     * @param h the height of the specified rectangular shape&#xA;     * @return &lt;code>true&lt;/code> if the interior of this &#xA;     *&#x9;&#x9;&#x9;&lt;code>Polygon&lt;/code> and the interior of the&#xA;     *&#x9;&#x9;&#x9;specified set of rectangular &#xA;     * &#x9;&#x9;&#x9;coordinates intersect each other;&#xA;     *&#x9;&#x9;&#x9;&lt;code>false&lt;/code> otherwise&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="geom/Rectangle2D.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.3"/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cross">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.2"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.3"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0/@members.15"/>
                </next>
              </child>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="intersects">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the interior of this &lt;code>Polygon&lt;/code> intersects the&#xA;     * interior of a specified &lt;code>Rectangle2D&lt;/code>.&#xA;     * @param r a specified &lt;code>Rectangle2D&lt;/code>&#xA;     * @return &lt;code>true&lt;/code> if this &lt;code>Polygon&lt;/code> and the&#xA;     * &#x9;&#x9;&#x9;interior of the specified &lt;code>Rectangle2D&lt;/code>&#xA;     * &#x9;&#x9;&#x9;intersect each other; &lt;code>false&lt;/code>&#xA;     * &#x9;&#x9;&#x9;otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.4"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="y">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="w">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="h">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the interior of this &lt;code>Polygon&lt;/code> entirely&#xA;     * contains the specified set of rectangular coordinates.&#xA;     * @param x the x coordinate of the top-left corner of the&#xA;     * &#x9;&#x9;&#x9;specified set of rectangular coordinates&#xA;     * @param y the y coordinate of the top-left corner of the&#xA;     * &#x9;&#x9;&#x9;specified set of rectangular coordinates&#xA;     * @param w the width of the set of rectangular coordinates&#xA;     * @param h the height of the set of rectangular coordinates&#xA;     * @return &lt;code>true&lt;/code> if this &lt;code>Polygon&lt;/code> entirely&#xA;     * &#x9;&#x9;&#x9;contains the specified set of rectangular&#xA;     * &#x9;&#x9;&#x9;coordinates; &lt;code>false&lt;/code> otherwise&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="geom/Rectangle2D.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.3"/>
              </next>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cross">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.2"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.3"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../sun/awt/geom/Crossings.class.xmi#//@classifiers.0/@members.16"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.3"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </next>
            </children>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="contains">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="r">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/Rectangle2D.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Tests if the interior of this &lt;code>Polygon&lt;/code> entirely&#xA;     * contains the specified &lt;code>Rectangle2D&lt;/code>.&#xA;     * @param r the specified &lt;code>Rectangle2D&lt;/code>&#xA;     * @return &lt;code>true&lt;/code> if this &lt;code>Polygon&lt;/code> entirely&#xA;     * &#x9;&#x9;&#x9;contains the specified &lt;code>Rectangle2D&lt;/code>;&#xA;     *&#x9;&#x9;&#x9;&lt;code>false&lt;/code> otherwise.&#xA;     * @see #contains(double, double, double, double)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="geom/RectangularShape.class.xmi#//@classifiers.0/@members.4"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPathIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="geom/PathIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="at">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/AffineTransform.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an iterator object that iterates along the boundary of this &#xA;     * &lt;code>Polygon&lt;/code> and provides access to the geometry&#xA;     * of the outline of this &lt;code>Polygon&lt;/code>.  An optional&#xA;     * {@link AffineTransform} can be specified so that the coordinates &#xA;     * returned in the iteration are transformed accordingly.&#xA;     * @param at an optional &lt;code>AffineTransform&lt;/code> to be applied to the&#xA;     * &#x9;&#x9;coordinates as they are returned in the iteration, or &#xA;     *&#x9;&#x9;&lt;code>null&lt;/code> if untransformed coordinates are desired&#xA;     * @return a {@link PathIterator} object that provides access to the&#xA;     *&#x9;&#x9;geometry of this &lt;code>Polygon&lt;/code>.      &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.28"/>
          </typeReference>
          <arguments xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPathIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="geom/PathIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="at">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/AffineTransform.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flatness">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an iterator object that iterates along the boundary of&#xA;     * the &lt;code>Shape&lt;/code> and provides access to the geometry of the &#xA;     * outline of the &lt;code>Shape&lt;/code>.  Only SEG_MOVETO, SEG_LINETO, and &#xA;     * SEG_CLOSE point types are returned by the iterator.&#xA;     * Since polygons are already flat, the &lt;code>flatness&lt;/code> parameter&#xA;     * is ignored.  An optional &lt;code>AffineTransform&lt;/code> can be specified &#xA;     * in which case the coordinates returned in the iteration are transformed&#xA;     * accordingly.&#xA;     * @param at an optional &lt;code>AffineTransform&lt;/code> to be applied to the&#xA;     * &#x9;&#x9;coordinates as they are returned in the iteration, or &#xA;     *&#x9;&#x9;&lt;code>null&lt;/code> if untransformed coordinates are desired&#xA;     * @param flatness the maximum amount that the control points&#xA;     * &#x9;&#x9;for a given curve can vary from colinear before a subdivided&#xA;     *&#x9;&#x9;curve is replaced by a straight line connecting the &#xA;     * &#x9;&#x9;endpoints.  Since polygons are already flat the&#xA;     * &#x9;&#x9;&lt;code>flatness&lt;/code> parameter is ignored.&#xA;     * @return a &lt;code>PathIterator&lt;/code> object that provides access to the&#xA;     * &#x9;&#x9;&lt;code>Shape&lt;/code> object's geometry.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="PolygonPathIterator">
      <members xsi:type="members:Field" name="poly">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="transform">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="geom/AffineTransform.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="index">
        <typeReference xsi:type="types:Int"/>
      </members>
      <members xsi:type="members:Constructor" name="PolygonPathIterator">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.3/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.3/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2">
                  <comments>// Prevent a spurious SEG_CLOSE segment</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.3/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="pg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="at">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="geom/AffineTransform.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
      </members>
      <members xsi:type="members:ClassMethod" name="getWindingRule">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the winding rule for determining the interior of the&#xA;&#x9; * path.&#xA;         * @return an integer representing the current winding rule.&#xA;&#x9; * @see PathIterator#WIND_NON_ZERO&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="geom/PathIterator.class.xmi#//@classifiers.0/@members.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isDone">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Tests if there are more points to read.&#xA;&#x9; * @return &lt;code>true&lt;/code> if there are more points to read;&#xA;         *          &lt;code>false&lt;/code> otherwise.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="next">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Moves the iterator forwards, along the primary direction of &#xA;         * traversal, to the next segment of the path when there are&#xA;&#x9; * more points in that direction.&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
            <operator xsi:type="operators:PlusPlus"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="currentSegment">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="coords">
          <typeReference xsi:type="types:Float"/>
          <arrayDimensionsBefore/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the coordinates and type of the current path segment in&#xA;&#x9; * the iteration.&#xA;&#x9; * The return value is the path segment type:&#xA;&#x9; * SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.&#xA;&#x9; * A &lt;code>float&lt;/code> array of length 2 must be passed in and&#xA;         * can be used to store the coordinates of the point(s).&#xA;&#x9; * Each point is stored as a pair of &lt;code>float&lt;/code> x,&amp;nbsp;y&#xA;         * coordinates.  SEG_MOVETO and SEG_LINETO types return one&#xA;         * point, and SEG_CLOSE does not return any points.&#xA;         * @param coords a &lt;code>float&lt;/code> array that specifies the&#xA;         * coordinates of the point(s)&#xA;         * @return an integer representing the type and coordinates of the &#xA;         * &#x9;&#x9;current path segment.&#xA;&#x9; * @see PathIterator#SEG_MOVETO&#xA;&#x9; * @see PathIterator#SEG_LINETO&#xA;&#x9; * @see PathIterator#SEG_CLOSE&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="geom/PathIterator.class.xmi#//@classifiers.0/@members.6"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7/@parameters.0">
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
                </arraySelectors>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7/@parameters.0">
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
                </arraySelectors>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="geom/AffineTransform.class.xmi#//@classifiers.0/@members.71"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7/@parameters.0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7/@parameters.0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </child>
              <expressionIf xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="geom/PathIterator.class.xmi#//@classifiers.0/@members.2"/>
              </expressionIf>
              <expressionElse xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="geom/PathIterator.class.xmi#//@classifiers.0/@members.3"/>
              </expressionElse>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="currentSegment">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="coords">
          <typeReference xsi:type="types:Double"/>
          <arrayDimensionsBefore/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;&#x9; * Returns the coordinates and type of the current path segment in&#xA;&#x9; * the iteration.&#xA;&#x9; * The return value is the path segment type:&#xA;&#x9; * SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.&#xA;&#x9; * A &lt;code>double&lt;/code> array of length 2 must be passed in and&#xA;         * can be used to store the coordinates of the point(s).&#xA;&#x9; * Each point is stored as a pair of &lt;code>double&lt;/code> x,&amp;nbsp;y&#xA;         * coordinates.&#xA;&#x9; * SEG_MOVETO and SEG_LINETO types return one point,&#xA;&#x9; * and SEG_CLOSE does not return any points.&#xA;         * @param coords a &lt;code>double&lt;/code> array that specifies the&#xA;         * coordinates of the point(s)&#xA;         * @return an integer representing the type and coordinates of the &#xA;         * &#x9;&#x9;current path segment.&#xA;&#x9; * @see PathIterator#SEG_MOVETO&#xA;&#x9; * @see PathIterator#SEG_LINETO&#xA;&#x9; * @see PathIterator#SEG_CLOSE&#xA;&#x9; */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="geom/PathIterator.class.xmi#//@classifiers.0/@members.6"/>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </children>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8/@parameters.0">
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
                </arraySelectors>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8/@parameters.0">
              <arraySelectors>
                <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
                </arraySelectors>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="geom/AffineTransform.class.xmi#//@classifiers.0/@members.72"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8/@parameters.0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8/@parameters.0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.2"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </child>
              <expressionIf xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="geom/PathIterator.class.xmi#//@classifiers.0/@members.2"/>
              </expressionIf>
              <expressionElse xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="geom/PathIterator.class.xmi#//@classifiers.0/@members.3"/>
              </expressionElse>
            </expression>
          </returnValue>
        </statements>
      </members>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="geom/PathIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Polygon&lt;/code> class encapsulates a description of a &#xA; * closed, two-dimensional region within a coordinate space. This &#xA; * region is bounded by an arbitrary number of line segments, each of &#xA; * which is one side of the polygon. Internally, a polygon&#xA; * comprises of a list of (&lt;i>x&lt;/i>,&amp;nbsp;&lt;i>y&lt;/i>) &#xA; * coordinate pairs, where each pair defines a &lt;i>vertex&lt;/i> of the &#xA; * polygon, and two successive pairs are the endpoints of a &#xA; * line that is a side of the polygon. The first and final&#xA; * pairs of (&lt;i>x&lt;/i>,&amp;nbsp;&lt;i>y&lt;/i>) points are joined by a line segment &#xA; * that closes the polygon.  This &lt;code>Polygon&lt;/code> is defined with&#xA; * an even-odd winding rule.  See&#xA; * {@link java.awt.geom.PathIterator#WIND_EVEN_ODD WIND_EVEN_ODD}&#xA; * for a definition of the even-odd winding rule.&#xA; * This class's hit-testing methods, which include the &#xA; * &lt;code>contains&lt;/code>, &lt;code>intersects&lt;/code> and &lt;code>inside&lt;/code>&#xA; * methods, use the &lt;i>insideness&lt;/i> definition described in the &#xA; * {@link Shape} class comments.&#xA; *&#xA; * @version     1.26, 07/24/98&#xA; * @author &#x9;Sami Shaio&#xA; * @see Shape&#xA; * @author      Herb Jellinek&#xA; * @since       JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Shape.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
