<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/types ../../java.ecore#/16" name="ActiveEvent.java">
  <comments>/*&#xA; * @(#)ActiveEvent.java&#x9;1.13 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>awt</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ActiveEvent">
    <members xsi:type="members:InterfaceMethod" name="dispatch">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Dispatch the event to its target, listeners of the events source, &#xA;     * or do whatever it is this event is supposed to do.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An interface for events that know how to dispatch themselves.&#xA; * By implementing this interface an event can be placed upon the event&#xA; * queue and its &lt;code>dispatch()&lt;/code> method will be called when the event&#xA; * is dispatched, using the &lt;code>EventDispatchThread&lt;/code>.&#xA; * &lt;p>&#xA; * This is a very useful mechanism for avoiding deadlocks. If&#xA; * a thread is executing in a critical section (i.e., it has entered&#xA; * one or more monitors), calling other synchronized code may&#xA; * cause deadlocks. To avoid the potential deadlocks, an &#xA; * &lt;code>ActiveEvent&lt;/code> can be created to run the second section of&#xA; * code at later time. If there is contention on the monitor,&#xA; * the second thread will simply block until the first thread&#xA; * has finished its work and exited its monitors.&#xA; * &lt;p>&#xA; * For security reasons, it is often desirable to use an &lt;code>ActiveEvent&lt;/code> &#xA; * to avoid calling untrusted code from a critical thread. For&#xA; * instance, peer implementations can use this facility to avoid &#xA; * making calls into user code from a system thread. Doing so avoids&#xA; * potential deadlocks and denial-of-service attacks.&#xA; *&#xA; * @author  Timothy Prinzing&#xA; * @version 1.13 12/19/03&#xA; * @since   1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
