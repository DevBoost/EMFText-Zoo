<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RMIClassLoaderSpi.java">
  <comments>/*&#xA; * @(#)RMIClassLoaderSpi.java&#x9;1.14 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>rmi</namespaces>
  <namespaces>server</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="RMIClassLoaderSpi">
    <members xsi:type="members:InterfaceMethod" name="loadClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultLoader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Provides the implementation for&#xA;     * {@link RMIClassLoader#loadClass(URL,String)},&#xA;     * {@link RMIClassLoader#loadClass(String,String)}, and&#xA;     * {@link RMIClassLoader#loadClass(String,String,ClassLoader)}.&#xA;     *&#xA;     * Loads a class from a codebase URL path, optionally using the&#xA;     * supplied loader.&#xA;     *&#xA;     * Typically, a provider implementation will attempt to&#xA;     * resolve the named class using the given &lt;code>defaultLoader&lt;/code>,&#xA;     * if specified, before attempting to resolve the class from the&#xA;     * codebase URL path.&#xA;     *&#xA;     * &lt;p>An implementation of this method must either return a class&#xA;     * with the given name or throw an exception.&#xA;     *&#xA;     * @param&#x9;codebase the list of URLs (separated by spaces) to load&#xA;     * the class from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @param&#x9;name the name of the class to load&#xA;     *&#xA;     * @param&#x9;defaultLoader additional contextual class loader&#xA;     * to use, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @return&#x9;the &lt;code>Class&lt;/code> object representing the loaded class&#xA;     *&#xA;     * @throws&#x9;MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * non-&lt;code>null&lt;/code> and contains an invalid URL, or&#xA;     * if &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code> and a provider-specific&#xA;     * URL used to load classes is invalid&#xA;     *&#xA;     * @throws&#x9;ClassNotFoundException if a definition for the class&#xA;     * could not be found at the specified location&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="loadProxyClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="interfaces">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultLoader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Provides the implementation for&#xA;     * {@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}.&#xA;     *&#xA;     * Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy}&#xA;     * that implements a set of interfaces with the given names&#xA;     * from a codebase URL path, optionally using the supplied loader.&#xA;     * &#xA;     * &lt;p>An implementation of this method must either return a proxy&#xA;     * class that implements the named interfaces or throw an exception.&#xA;     *&#xA;     * @param&#x9;codebase the list of URLs (space-separated) to load&#xA;     * classes from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @param&#x9;interfaces the names of the interfaces for the proxy class&#xA;     * to implement&#xA;     *&#xA;     * @return&#x9;a dynamic proxy class that implements the named interfaces&#xA;     *&#xA;     * @param&#x9;defaultLoader additional contextual class loader&#xA;     * to use, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @throws&#x9;MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * non-&lt;code>null&lt;/code> and contains an invalid URL, or&#xA;     * if &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code> and a provider-specific&#xA;     * URL used to load classes is invalid&#xA;     *&#xA;     * @throws&#x9;ClassNotFoundException if a definition for one of&#xA;     * the named interfaces could not be found at the specified location,&#xA;     * or if creation of the dynamic proxy class failed (such as if&#xA;     * {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}&#xA;     * would throw an &lt;code>IllegalArgumentException&lt;/code> for the given&#xA;     * interface list)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClassLoader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Provides the implementation for&#xA;     * {@link RMIClassLoader#getClassLoader(String)}.&#xA;     *&#xA;     * Returns a class loader that loads classes from the given codebase&#xA;     * URL path.&#xA;     *&#xA;     * &lt;p>If there is a security manger, its &lt;code>checkPermission&lt;/code>&#xA;     * method will be invoked with a&#xA;     * &lt;code>RuntimePermission(&quot;getClassLoader&quot;)&lt;/code> permission;&#xA;     * this could result in a &lt;code>SecurityException&lt;/code>.&#xA;     * The implementation of this method may also perform further security&#xA;     * checks to verify that the calling context has permission to connect&#xA;     * to all of the URLs in the codebase URL path.&#xA;     *&#xA;     * @param&#x9;codebase the list of URLs (space-separated) from which&#xA;     * the returned class loader will load classes from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @return a class loader that loads classes from the given codebase URL&#xA;     * path&#xA;     *&#xA;     * @throws&#x9;MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * non-&lt;code>null&lt;/code> and contains an invalid URL, or&#xA;     * if &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code> and a provider-specific&#xA;     * URL used to identify the class loader is invalid&#xA;     *&#xA;     * @throws&#x9;SecurityException if there is a security manager and the&#xA;     * invocation of its &lt;code>checkPermission&lt;/code> method fails, or&#xA;     * if the caller does not have permission to connect to all of the&#xA;     * URLs in the codebase URL path&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClassAnnotation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// SecurityException</comments>
        <comments>/**&#xA;     * Provides the implementation for&#xA;     * {@link RMIClassLoader#getClassAnnotation(Class)}.&#xA;     *&#xA;     * Returns the annotation string (representing a location for&#xA;     * the class definition) that RMI will use to annotate the class&#xA;     * descriptor when marshalling objects of the given class.&#xA;     *&#xA;     * @param&#x9;cl the class to obtain the annotation for&#xA;     *&#xA;     * @return&#x9;a string to be used to annotate the given class when&#xA;     * it gets marshalled, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @throws&#x9;NullPointerException if &lt;code>cl&lt;/code> is &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>RMIClassLoaderSpi&lt;/code> is the service provider interface for&#xA; * &lt;code>RMIClassLoader&lt;/code>.&#xA; *&#xA; * In particular, an &lt;code>RMIClassLoaderSpi&lt;/code> instance provides an&#xA; * implementation of the following static methods of&#xA; * &lt;code>RMIClassLoader&lt;/code>:&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li>{@link RMIClassLoader#loadClass(URL,String)}&#xA; * &lt;li>{@link RMIClassLoader#loadClass(String,String)}&#xA; * &lt;li>{@link RMIClassLoader#loadClass(String,String,ClassLoader)}&#xA; * &lt;li>{@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}&#xA; * &lt;li>{@link RMIClassLoader#getClassLoader(String)}&#xA; * &lt;li>{@link RMIClassLoader#getClassAnnotation(Class)}&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * When one of those methods is invoked, its behavior is to delegate&#xA; * to a corresponding method on an instance of this class.&#xA; * The details of how each method delegates to the provider instance is&#xA; * described in the documentation for each particular method.&#xA; * See the documentation for {@link RMIClassLoader} for a description&#xA; * of how a provider instance is chosen.&#xA; *&#xA; * @version&#x9;1.14, 04/05/05&#xA; * @author&#x9;Peter Jones&#xA; * @author&#x9;Laird Dornin&#xA; * @see&#x9;&#x9;RMIClassLoader&#xA; * @since&#x9;JDK1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
