<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RemoteObject.java">
  <comments>/*&#xA; * @(#)RemoteObject.java&#x9;1.33 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>rmi</namespaces>
  <namespaces>server</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Remote.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NoSuchObjectException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>lang</namespaces>
    <namespaces>reflect</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../lang/reflect/Proxy.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>rmi</namespaces>
    <namespaces>server</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/rmi/server/Util.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="RemoteObject">
    <members xsi:type="members:Field" name="ref">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="RemoteRef.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Transient">
        <comments>/** The object's remote reference. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="3215090123894869218"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** indicate compatibility with JDK 1.1.x version of class */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="RemoteObject">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates a remote object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="RemoteObject">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newref">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RemoteRef.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates a remote object, initialized with the specified remote&#xA;     * reference.&#xA;     * @param newref remote reference&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="getRef">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="RemoteRef.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the remote reference for the remote object.&#xA;     *&#xA;     * &lt;p>Note: The object returned from this method may be an instance of&#xA;     * an implementation-specific class.  The &lt;code>RemoteObject&lt;/code>&#xA;     * class ensures serialization portability of its instances' remote&#xA;     * references through the behavior of its custom&#xA;     * &lt;code>writeObject&lt;/code> and &lt;code>readObject&lt;/code> methods.  An&#xA;     * instance of &lt;code>RemoteRef&lt;/code> should not be serialized outside&#xA;     * of its &lt;code>RemoteObject&lt;/code> wrapper instance or the result may&#xA;     * be unportable.&#xA;     *&#xA;     * @return remote reference for the remote object&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toStub">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Remote.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Remote.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NoSuchObjectException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the stub for the remote object &lt;code>obj&lt;/code> passed&#xA;     * as a parameter. This operation is only valid &lt;i>after&lt;/i>&#xA;     * the object has been exported.&#xA;     * @param obj the remote object whose stub is needed&#xA;     * @return the stub for the remote object, &lt;code>obj&lt;/code>.&#xA;     * @exception NoSuchObjectException if the stub for the&#xA;     * remote object could not be found.&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="RemoteStub.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/reflect/Proxy.class.xmi#//@classifiers.0/@members.13"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../lang/reflect/Proxy.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="RemoteObjectInvocationHandler.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/reflect/Proxy.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../lang/reflect/Proxy.class.xmi#//@classifiers.0"/>
                </child>
              </children>
            </expression>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../sun/rmi/transport/ObjectTable.class.xmi#//@classifiers.0/@members.12"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../sun/rmi/transport/ObjectTable.class.xmi#//@classifiers.0"/>
                  </next>
                </next>
              </next>
            </returnValue>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hashcode for a remote object.  Two remote object stubs&#xA;     * that refer to the same remote object will have the same hash code&#xA;     * (in order to support remote objects as keys in hash tables).&#xA;     *&#xA;     * @see&#x9;&#x9;java.util.Hashtable&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.3"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expressionIf>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="RemoteRef.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares two remote objects for equality.&#xA;     * Returns a boolean that indicates whether this remote object is&#xA;     * equivalent to the specified Object. This method is used when a&#xA;     * remote object is stored in a hashtable.&#xA;     * If the specified Object is not itself an instance of RemoteObject,&#xA;     * then this method delegates by returning the result of invoking the&#xA;     * &lt;code>equals&lt;/code> method of its parameter with this remote object&#xA;     * as the argument.&#xA;     * @param&#x9;obj&#x9;the Object to compare with&#xA;     * @return&#x9;true if these Objects are equal; false otherwise.&#xA;     * @see&#x9;&#x9;java.util.Hashtable&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                  <children xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </children>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="RemoteRef.class.xmi#//@classifiers.0/@members.8"/>
                    <arguments xsi:type="expressions:NestedExpression">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0"/>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
                      </expression>
                    </arguments>
                  </next>
                </returnValue>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <comments>/*&#xA;&#x9;     * Fix for 4099660: if object is not an instance of RemoteObject,&#xA;&#x9;     * use the result of its equals method, to support symmetry is a&#xA;&#x9;     * remote object implementation class that does not extend&#xA;&#x9;     * RemoteObject wishes to support equality with its stub objects.&#xA;&#x9;     */</comments>
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </arguments>
                </next>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a String that represents the value of this remote object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="classname">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/rmi/server/Util.class.xmi#//@classifiers.0/@members.17"/>
              <arguments xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/rmi/server/Util.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
          <expressionElse xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
            <children xsi:type="references:StringReference" value="["/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="RemoteRef.class.xmi#//@classifiers.0/@members.9"/>
              </next>
            </children>
            <children xsi:type="references:StringReference" value="]"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="writeObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;code>writeObject&lt;/code> for custom serialization.&#xA;     *&#xA;     * &lt;p>This method writes this object's serialized form for this class&#xA;     * as follows:&#xA;     *&#xA;     * &lt;p>The {@link RemoteRef#getRefClass(java.io.ObjectOutput) getRefClass}&#xA;     * method is invoked on this object's &lt;code>ref&lt;/code> field&#xA;     * to obtain its external ref type name.&#xA;     * If the value returned by &lt;code>getRefClass&lt;/code> was&#xA;     * a non-&lt;code>null&lt;/code> string of length greater than zero,&#xA;     * the &lt;code>writeUTF&lt;/code> method is invoked on &lt;code>out&lt;/code>&#xA;     * with the value returned by &lt;code>getRefClass&lt;/code>, and then&#xA;     * the &lt;code>writeExternal&lt;/code> method is invoked on&#xA;     * this object's &lt;code>ref&lt;/code> field passing &lt;code>out&lt;/code>&#xA;     * as the argument; otherwise,&#xA;     * the &lt;code>writeUTF&lt;/code> method is invoked on &lt;code>out&lt;/code>&#xA;     * with a zero-length string (&lt;code>&quot;&quot;&lt;/code>), and then&#xA;     * the &lt;code>writeObject&lt;/code> method is invoked on &lt;code>out&lt;/code>&#xA;     * passing this object's &lt;code>ref&lt;/code> field as the argument.&#xA;     * &#xA;     * @serialData&#xA;     *&#xA;     * The serialized data for this class comprises a string (written with&#xA;     * &lt;code>ObjectOutput.writeUTF&lt;/code>) that is either the external&#xA;     * ref type name of the contained &lt;code>RemoteRef&lt;/code> instance&#xA;     * (the &lt;code>ref&lt;/code> field) or a zero-length string, followed by&#xA;     * either the external form of the &lt;code>ref&lt;/code> field as written by&#xA;     * its &lt;code>writeExternal&lt;/code> method if the string was of non-zero&#xA;     * length, or the serialized form of the &lt;code>ref&lt;/code> field as&#xA;     * written by passing it to the serialization stream's&#xA;     * &lt;code>writeObject&lt;/code> if the string was of zero length.&#xA;     *&#xA;     * &lt;p>If this object is an instance of&#xA;     * {@link RemoteStub} or {@link RemoteObjectInvocationHandler}&#xA;     * that was returned from any of&#xA;     * the &lt;code>UnicastRemoteObject.exportObject&lt;/code> methods&#xA;     * and custom socket factories are not used,&#xA;     * the external ref type name is &lt;code>&quot;UnicastRef&quot;&lt;/code>.&#xA;     *&#xA;     * If this object is an instance of&#xA;     * &lt;code>RemoteStub&lt;/code> or &lt;code>RemoteObjectInvocationHandler&lt;/code>&#xA;     * that was returned from any of&#xA;     * the &lt;code>UnicastRemoteObject.exportObject&lt;/code> methods&#xA;     * and custom socket factories are used,&#xA;     * the external ref type name is &lt;code>&quot;UnicastRef2&quot;&lt;/code>.&#xA;     *&#xA;     * If this object is an instance of&#xA;     * &lt;code>RemoteStub&lt;/code> or &lt;code>RemoteObjectInvocationHandler&lt;/code>&#xA;     * that was returned from any of&#xA;     * the &lt;code>java.rmi.activation.Activatable.exportObject&lt;/code> methods,&#xA;     * the external ref type name is &lt;code>&quot;ActivatableRef&quot;&lt;/code>.&#xA;     *&#xA;     * If this object is an instance of&#xA;     * &lt;code>RemoteStub&lt;/code> or &lt;code>RemoteObjectInvocationHandler&lt;/code>&#xA;     * that was returned from&#xA;     * the &lt;code>RemoteObject.toStub&lt;/code> method (and the argument passed&#xA;     * to &lt;code>toStub&lt;/code> was not itself a &lt;code>RemoteStub&lt;/code>),&#xA;     * the external ref type name is a function of how the remote object&#xA;     * passed to &lt;code>toStub&lt;/code> was exported, as described above.&#xA;     *&#xA;     * If this object is an instance of&#xA;     * &lt;code>RemoteStub&lt;/code> or &lt;code>RemoteObjectInvocationHandler&lt;/code>&#xA;     * that was originally created via deserialization,&#xA;     * the external ref type name is the same as that which was read&#xA;     * when this object was deserialized.&#xA;     *&#xA;     * &lt;p>If this object is an instance of&#xA;     * &lt;code>java.rmi.server.UnicastRemoteObject&lt;/code> that does not&#xA;     * use custom socket factories,&#xA;     * the external ref type name is &lt;code>&quot;UnicastServerRef&quot;&lt;/code>.&#xA;     *&#xA;     * If this object is an instance of&#xA;     * &lt;code>UnicastRemoteObject&lt;/code> that does&#xA;     * use custom socket factories,&#xA;     * the external ref type name is &lt;code>&quot;UnicastServerRef2&quot;&lt;/code>.&#xA;     *&#xA;     * &lt;p>Following is the data that must be written by the&#xA;     * &lt;code>writeExternal&lt;/code> method and read by the&#xA;     * &lt;code>readExternal&lt;/code> method of &lt;code>RemoteRef&lt;/code>&#xA;     * implementation classes that correspond to the each of the&#xA;     * defined external ref type names:&#xA;     *&#xA;     * &lt;p>For &lt;code>&quot;UnicastRef&quot;&lt;/code>:&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>the hostname of the referenced remote object,&#xA;     * written by {@link java.io.ObjectOutput#writeUTF(String)}&#xA;     *&#xA;     * &lt;li>the port of the referenced remote object,&#xA;     * written by {@link java.io.ObjectOutput#writeInt(int)}&#xA;     *&#xA;     * &lt;li>the data written as a result of calling&#xA;     * {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}&#xA;     * on the &lt;code>ObjID&lt;/code> instance contained in the reference&#xA;     *&#xA;     * &lt;li>the boolean value &lt;code>false&lt;/code>,&#xA;     * written by {@link java.io.ObjectOutput#writeBoolean(boolean)}&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>For &lt;code>&quot;UnicastRef2&quot;&lt;/code> with a&#xA;     * &lt;code>null&lt;/code> client socket factory:&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>the byte value &lt;code>0x00&lt;/code>&#xA;     * (indicating &lt;code>null&lt;/code> client socket factory),&#xA;     * written by {@link java.io.ObjectOutput#writeByte(int)}&#xA;     *&#xA;     * &lt;li>the hostname of the referenced remote object,&#xA;     * written by {@link java.io.ObjectOutput#writeUTF(String)}&#xA;     *&#xA;     * &lt;li>the port of the referenced remote object,&#xA;     * written by {@link java.io.ObjectOutput#writeInt(int)}&#xA;     *&#xA;     * &lt;li>the data written as a result of calling&#xA;     * {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}&#xA;     * on the &lt;code>ObjID&lt;/code> instance contained in the reference&#xA;     *&#xA;     * &lt;li>the boolean value &lt;code>false&lt;/code>,&#xA;     * written by {@link java.io.ObjectOutput#writeBoolean(boolean)}&#xA;     *&#xA;     * &lt;/ul>&#xA;     * &#xA;     * &lt;p>For &lt;code>&quot;UnicastRef2&quot;&lt;/code> with a&#xA;     * non-&lt;code>null&lt;/code> client socket factory:&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>the byte value &lt;code>0x01&lt;/code>&#xA;     * (indicating non-&lt;code>null&lt;/code> client socket factory),&#xA;     * written by {@link java.io.ObjectOutput#writeByte(int)}&#xA;     *&#xA;     * &lt;li>the hostname of the referenced remote object,&#xA;     * written by {@link java.io.ObjectOutput#writeUTF(String)}&#xA;     *&#xA;     * &lt;li>the port of the referenced remote object,&#xA;     * written by {@link java.io.ObjectOutput#writeInt(int)}&#xA;     *&#xA;     * &lt;li>a client socket factory (object of type&#xA;     * &lt;code>java.rmi.server.RMIClientSocketFactory&lt;/code>),&#xA;     * written by passing it to an invocation of&#xA;     * &lt;code>writeObject&lt;/code> on the stream instance&#xA;     *&#xA;     * &lt;li>the data written as a result of calling&#xA;     * {link java.rmi.server.ObjID#write(java.io.ObjectOutput)}&#xA;     * on the &lt;code>ObjID&lt;/code> instance contained in the reference&#xA;     *&#xA;     * &lt;li>the boolean value &lt;code>false&lt;/code>,&#xA;     * written by {@link java.io.ObjectOutput#writeBoolean(boolean)}&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>For &lt;code>&quot;ActivatableRef&quot;&lt;/code> with a&#xA;     * &lt;code>null&lt;/code> nested remote reference:&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>an instance of&#xA;     * &lt;code>java.rmi.activation.ActivationID&lt;/code>,&#xA;     * written by passing it to an invocation of&#xA;     * &lt;code>writeObject&lt;/code> on the stream instance&#xA;     *&#xA;     * &lt;li>a zero-length string (&lt;code>&quot;&quot;&lt;/code>),&#xA;     * written by {@link java.io.ObjectOutput#writeUTF(String)}&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>For &lt;code>&quot;ActivatableRef&quot;&lt;/code> with a&#xA;     * non-&lt;code>null&lt;/code> nested remote reference:&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>an instance of&#xA;     * &lt;code>java.rmi.activation.ActivationID&lt;/code>,&#xA;     * written by passing it to an invocation of&#xA;     * &lt;code>writeObject&lt;/code> on the stream instance&#xA;     *&#xA;     * &lt;li>the external ref type name of the nested remote reference,&#xA;     * which must be &lt;code>&quot;UnicastRef2&quot;&lt;/code>,&#xA;     * written by {@link java.io.ObjectOutput#writeUTF(String)}&#xA;     *&#xA;     * &lt;li>the external form of the nested remote reference,&#xA;     * written by invoking its &lt;code>writeExternal&lt;/code> method&#xA;     * with the stream instance&#xA;     * (see the description of the external form for&#xA;     * &lt;code>&quot;UnicastRef2&quot;&lt;/code> above)&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>For &lt;code>&quot;UnicastServerRef&quot;&lt;/code> and&#xA;     * &lt;code>&quot;UnicastServerRef2&quot;&lt;/code>, no data is written by the&#xA;     * &lt;code>writeExternal&lt;/code> method or read by the&#xA;     * &lt;code>readExternal&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>java</namespaces>
                <namespaces>rmi</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../MarshalException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="Invalid remote object"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="refClassName">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="RemoteRef.class.xmi#//@classifiers.0/@members.6"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                  <comments>/*&#xA;&#x9;&#x9; * No reference class name specified, so serialize&#xA;&#x9;&#x9; * remote reference.&#xA;&#x9;&#x9; */</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.43"/>
                    <arguments xsi:type="references:StringReference" value=""/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@elseStatement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@elseStatement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                  <comments>/*&#xA;&#x9;&#x9; * Built-in reference class specified, so delegate&#xA;&#x9;&#x9; * to reference to write out its external form.&#xA;&#x9;&#x9; */</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.43"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@elseStatement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../io/Externalizable.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                  </next>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="in">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * &lt;code>readObject&lt;/code> for custom serialization.&#xA;     *&#xA;     * &lt;p>This method reads this object's serialized form for this class&#xA;     * as follows:&#xA;     *&#xA;     * &lt;p>The &lt;code>readUTF&lt;/code> method is invoked on &lt;code>in&lt;/code>&#xA;     * to read the external ref type name for the &lt;code>RemoteRef&lt;/code>&#xA;     * instance to be filled in to this object's &lt;code>ref&lt;/code> field.&#xA;     * If the string returned by &lt;code>readUTF&lt;/code> has length zero,&#xA;     * the &lt;code>readObject&lt;/code> method is invoked on &lt;code>in&lt;/code>,&#xA;     * and than the value returned by &lt;code>readObject&lt;/code> is cast to&#xA;     * &lt;code>RemoteRef&lt;/code> and this object's &lt;code>ref&lt;/code> field is&#xA;     * set to that value.&#xA;     * Otherwise, this object's &lt;code>ref&lt;/code> field is set to a&#xA;     * &lt;code>RemoteRef&lt;/code> instance that is created of an&#xA;     * implementation-specific class corresponding to the external ref&#xA;     * type name returned by &lt;code>readUTF&lt;/code>, and then&#xA;     * the &lt;code>readExternal&lt;/code> method is invoked on&#xA;     * this object's &lt;code>ref&lt;/code> field.&#xA;     *&#xA;     * &lt;p>If the external ref type name is&#xA;     * &lt;code>&quot;UnicastRef&quot;&lt;/code>, &lt;code>&quot;UnicastServerRef&quot;&lt;/code>,&#xA;     * &lt;code>&quot;UnicastRef2&quot;&lt;/code>, &lt;code>&quot;UnicastServerRef2&quot;&lt;/code>,&#xA;     * or &lt;code>&quot;ActivatableRef&quot;&lt;/code>, a corresponding&#xA;     * implementation-specific class must be found, and its&#xA;     * &lt;code>readExternal&lt;/code> method must read the serial data&#xA;     * for that external ref type name as specified to be written&#xA;     * in the &lt;b>serialData&lt;/b> documentation for this class.&#xA;     * If the external ref type name is any other string (of non-zero&#xA;     * length), a &lt;code>ClassNotFoundException&lt;/code> will be thrown,&#xA;     * unless the implementation provides an implementation-specific&#xA;     * class corresponding to that external ref type name, in which&#xA;     * case this object's &lt;code>ref&lt;/code> field will be set to an&#xA;     * instance of that implementation-specific class.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="refClassName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.46"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <comments>/*&#xA;&#x9;     * No reference class name specified, so construct&#xA;&#x9;     * remote reference from its serialized form.&#xA;&#x9;     */</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="RemoteRef.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/String.class.xmi#//@classifiers.0/@members.22"/>
              </next>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="internalRefClassName">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <comments>/*&#xA;&#x9;     * Built-in reference class specified, so delegate to&#xA;&#x9;     * internal reference class to initialize its fields from&#xA;&#x9;     * its external form.&#xA;&#x9;     */</comments>
                  <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="RemoteRef.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                  <target xsi:type="classifiers:Interface" href="RemoteRef.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="references:StringReference" value="."/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="refClass">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.32"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.0/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <comments>/*&#xA;&#x9;&#x9; * If this step fails, assume we found an internal&#xA;&#x9;&#x9; * class that is not meant to be a serializable ref&#xA;&#x9;&#x9; * type.&#xA;&#x9;&#x9; */</comments>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="RemoteRef.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                    </next>
                  </child>
                </value>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.2/@catcheBlocks.0/@parameter"/>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/InstantiationException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.2/@catcheBlocks.1/@parameter"/>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@elseStatement/@statements.2/@catcheBlocks.2/@parameter"/>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/ClassCastException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../../io/Externalizable.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
              </next>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>RemoteObject&lt;/code> class implements the&#xA; * &lt;code>java.lang.Object&lt;/code> behavior for remote objects.&#xA; * &lt;code>RemoteObject&lt;/code> provides the remote semantics of Object by&#xA; * implementing methods for hashCode, equals, and toString.&#xA; *&#xA; * @author&#x9;Ann Wollrath&#xA; * @author&#x9;Laird Dornin&#xA; * @author&#x9;Peter Jones&#xA; * @version&#x9;1.33, 03/12/19&#xA; * @since&#x9;JDK1.1&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../Remote.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
