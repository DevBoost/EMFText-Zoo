<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RemoteRef.java">
  <comments>/*&#xA; * @(#)RemoteRef.java&#x9;1.23 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>rmi</namespaces>
  <namespaces>server</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RemoteRef">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="3632638527362204081"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/** indicate compatibility with JDK 1.1.x version of class. */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="packagePrefix">
      <initialValue xsi:type="references:StringReference" value="sun.rmi.server"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Initialize the server package prefix: assumes that the&#xA;     * implementation of server ref classes (e.g., UnicastRef,&#xA;     * UnicastServerRef) are located in the package defined by the&#xA;     * prefix.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invoke">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Invoke a method. This form of delegating method invocation&#xA;     * to the reference allows the reference to take care of&#xA;     * setting up the connection to the remote host, marshaling&#xA;     * some representation for the method and parameters, then&#xA;     * communicating the method invocation to the remote host.&#xA;     * This method either returns the result of a method invocation&#xA;     * on the remote object which resides on the remote host or&#xA;     * throws a RemoteException if the call failed or an&#xA;     * application-level exception if the remote invocation throws&#xA;     * an exception.&#xA;     *    &#xA;     * @param obj the object that contains the RemoteRef (e.g., the&#xA;     *            RemoteStub for the object.&#xA;     * @param method the method to be invoked&#xA;     * @param params the parameter list&#xA;     * @param opnum  a hash that may be used to represent the method&#xA;     * @return result of remote method invocation&#xA;     * @exception Exception if any exception occurs during remote method&#xA;     * invocation&#xA;     * @since 1.2&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Remote.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="method">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <namespaces>reflect</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/reflect/Method.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="params">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="opnum">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="newCall">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="RemoteCall.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RemoteObject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="op">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Operation.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="opnum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hash">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RemoteException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Creates an appropriate call object for a new remote method&#xA;     * invocation on this object.  Passing operation array and index,&#xA;     * allows the stubs generator to assign the operation indexes and&#xA;     * interpret them. The remote reference may need the operation to&#xA;     * encode in the call.&#xA;     *&#xA;     * @since JDK1.1&#xA;     * @deprecated 1.2 style stubs no longer use this method. Instead of&#xA;     * using a sequence of method calls on the stub's the remote reference&#xA;     * (&lt;code>newCall&lt;/code>, &lt;code>invoke&lt;/code>, and &lt;code>done&lt;/code>), a&#xA;     * stub uses a single method, &lt;code>invoke(Remote, Method, Object[],&#xA;     * int)&lt;/code>, on the remote reference to carry out parameter&#xA;     * marshalling, remote method executing and unmarshalling of the return&#xA;     * value.&#xA;     *&#xA;     * @param obj remote stub through which to make call&#xA;     * @param op array of stub operations&#xA;     * @param opnum operation number&#xA;     * @param hash stub/skeleton interface hash&#xA;     * @return call object representing remote call&#xA;     * @throws RemoteException if failed to initiate new remote call&#xA;     * @see #invoke(Remote,java.lang.reflect.Method,Object[],long)&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invoke">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="call">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RemoteCall.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Executes the remote call.&#xA;     * &#xA;     * Invoke will raise any &quot;user&quot; exceptions which&#xA;     * should pass through and not be caught by the stub.  If any&#xA;     * exception is raised during the remote invocation, invoke should&#xA;     * take care of cleaning up the connection before raising the&#xA;     * &quot;user&quot; or remote exception.&#xA;     *&#xA;     * @since JDK1.1&#xA;     * @deprecated 1.2 style stubs no longer use this method. Instead of&#xA;     * using a sequence of method calls to the remote reference&#xA;     * (&lt;code>newCall&lt;/code>, &lt;code>invoke&lt;/code>, and &lt;code>done&lt;/code>), a&#xA;     * stub uses a single method, &lt;code>invoke(Remote, Method, Object[],&#xA;     * int)&lt;/code>, on the remote reference to carry out parameter&#xA;     * marshalling, remote method executing and unmarshalling of the return&#xA;     * value.&#xA;     *&#xA;     * @param call object representing remote call&#xA;     * @throws Exception if any exception occurs during remote method&#xA;     * @see #invoke(Remote,java.lang.reflect.Method,Object[],long)&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="done">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="call">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RemoteCall.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RemoteException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Allows the remote reference to clean up (or reuse) the connection.&#xA;     * Done should only be called if the invoke returns successfully&#xA;     * (non-exceptionally) to the stub.&#xA;     *&#xA;     * @since JDK1.1&#xA;     * @deprecated 1.2 style stubs no longer use this method. Instead of&#xA;     * using a sequence of method calls to the remote reference&#xA;     * (&lt;code>newCall&lt;/code>, &lt;code>invoke&lt;/code>, and &lt;code>done&lt;/code>), a&#xA;     * stub uses a single method, &lt;code>invoke(Remote, Method, Object[],&#xA;     * int)&lt;/code>, on the remote reference to carry out parameter&#xA;     * marshalling, remote method executing and unmarshalling of the return&#xA;     * value.&#xA;     *&#xA;     * @param call object representing remote call&#xA;     * @throws RemoteException if remote error occurs during call cleanup&#xA;     * @see #invoke(Remote,java.lang.reflect.Method,Object[],long)&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRefClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the class name of the ref type to be serialized onto&#xA;     * the stream 'out'.&#xA;     * @param out the output stream to which the reference will be serialized&#xA;     * @return the class name (without package qualification) of the reference&#xA;     * type&#xA;     * @since JDK1.1&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="out">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../io/ObjectOutput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remoteHashCode">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns a hashcode for a remote object.  Two remote object stubs&#xA;     * that refer to the same remote object will have the same hash code&#xA;     * (in order to support remote objects as keys in hash tables).&#xA;     *&#xA;     * @return remote object hashcode&#xA;     * @see&#x9;&#x9;java.util.Hashtable&#xA;     * @since JDK1.1&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remoteEquals">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Compares two remote objects for equality.&#xA;     * Returns a boolean that indicates whether this remote object is&#xA;     * equivalent to the specified Object. This method is used when a&#xA;     * remote object is stored in a hashtable.&#xA;     * @param&#x9;obj&#x9;the Object to compare with&#xA;     * @return&#x9;true if these Objects are equal; false otherwise.&#xA;     * @see&#x9;&#x9;java.util.Hashtable&#xA;     * @since JDK1.1&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remoteToString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns a String that represents the reference of this remote&#xA;     * object.&#xA;     * @return string representing remote object reference&#xA;     * @since JDK1.1&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>RemoteRef&lt;/code> represents the handle for a remote object. A&#xA; * &lt;code>RemoteStub&lt;/code> uses a remote reference to carry out a&#xA; * remote method invocation to a remote object.&#xA; *&#xA; * @version 1.23, 05/18/04&#xA; * @author  Ann Wollrath&#xA; * @since   JDK1.1&#xA; * @see     java.rmi.server.RemoteStub&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../io/Externalizable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
