<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RemoteCall.java">
  <comments>/*&#xA; * @(#)RemoteCall.java&#x9;1.19 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>rmi</namespaces>
  <namespaces>server</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../io/ObjectOutput.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../io/ObjectInput.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="RemoteCall">
    <members xsi:type="members:InterfaceMethod" name="getOutputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../io/ObjectOutput.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Return the output stream the stub/skeleton should put arguments/results&#xA;     * into.&#xA;     *&#xA;     * @return output stream for arguments/results&#xA;     * @exception java.io.IOException if an I/O error occurs.&#xA;     * @since JDK1.1&#xA;     * @deprecated no replacement&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="releaseOutputStream">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Release the output stream; in some transports this would release&#xA;     * the stream.&#xA;     *&#xA;     * @exception java.io.IOException if an I/O error occurs.&#xA;     * @since JDK1.1&#xA;     * @deprecated no replacement&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getInputStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../io/ObjectInput.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Get the InputStream that the stub/skeleton should get&#xA;     * results/arguments from.&#xA;     *&#xA;     * @return input stream for reading arguments/results&#xA;     * @exception java.io.IOException if an I/O error occurs.&#xA;     * @since JDK1.1&#xA;     * @deprecated no replacement&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="releaseInputStream">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Release the input stream. This would allow some transports to release&#xA;     * the channel early.&#xA;     *&#xA;     * @exception java.io.IOException if an I/O error occurs.&#xA;     * @since JDK1.1&#xA;     * @deprecated no replacement&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResultStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../io/ObjectOutput.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="success">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/StreamCorruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns an output stream (may put out header information&#xA;     * relating to the success of the call). Should only succeed&#xA;     * once per remote call.&#xA;     *&#xA;     * @param success If true, indicates normal return, else indicates&#xA;     * exceptional return.&#xA;     * @return output stream for writing call result&#xA;     * @exception java.io.IOException              if an I/O error occurs.&#xA;     * @exception java.io.StreamCorruptedException If already been called.&#xA;     * @since JDK1.1&#xA;     * @deprecated no replacement&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="executeCall">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Do whatever it takes to execute the call.&#xA;     *&#xA;     * @exception java.lang.Exception if a general exception occurs.&#xA;     * @since JDK1.1&#xA;     * @deprecated no replacement&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="done">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Allow cleanup after the remote call has completed.&#xA;     *&#xA;     * @exception java.io.IOException if an I/O error occurs.&#xA;     * @since JDK1.1&#xA;     * @deprecated no replacement&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
      <comments>/**&#xA; * &lt;code>RemoteCall&lt;/code> is an abstraction used solely by the RMI runtime&#xA; * (in conjunction with stubs and skeletons of remote objects) to carry out a&#xA; * call to a remote object.  The &lt;code>RemoteCall&lt;/code> interface is&#xA; * deprecated in the Java 2 platform since it is only used by deprecated methods of&#xA; * &lt;code>java.rmi.server.RemoteRef&lt;/code>.&#xA; *&#xA; * @version 1.19, 05/18/04&#xA; * @since   JDK1.1&#xA; * @author  Ann Wollrath&#xA; * @author  Roger Riggs&#xA; * @see     java.rmi.server.RemoteRef&#xA; * @deprecated no replacement.&#xA; */</comments>
      <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
  </classifiers>
</containers:CompilationUnit>
