<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RMIClassLoader.java">
  <comments>/*&#xA; * @(#)RMIClassLoader.java&#x9;1.40 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>rmi</namespaces>
  <namespaces>server</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/misc/Service.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="RMIClassLoader">
    <members xsi:type="members:Field" name="defaultProvider">
      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &quot;default&quot; provider instance */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="provider">
      <initialValue xsi:type="expressions:CastExpression">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <child xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>java</namespaces>
                    <namespaces>security</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.13"/>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../security/AccessController.class.xmi#//@classifiers.0"/>
            </next>
          </next>
        </child>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** provider instance */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="RMIClassLoader">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/*&#xA;     * Disallow anyone from creating one of these.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="loadClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Loads the class with the specified &lt;code>name&lt;/code>.&#xA;     *&#xA;     * &lt;p>This method delegates to {@link #loadClass(String,String)},&#xA;     * passing &lt;code>null&lt;/code> as the first argument and&#xA;     * &lt;code>name&lt;/code> as the second argument.&#xA;     *&#xA;     * @param&#x9;name the name of the class to load&#xA;     *&#xA;     * @return&#x9;the &lt;code>Class&lt;/code> object representing the loaded class&#xA;     *&#xA;     * @throws MalformedURLException if a provider-specific URL used&#xA;     * to load classes is invalid&#xA;     *&#xA;     * @throws&#x9;ClassNotFoundException if a definition for the class&#xA;     * could not be found at the codebase location&#xA;     *&#xA;     * @deprecated replaced by &lt;code>loadClass(String,String)&lt;/code> method&#xA;     * @see #loadClass(String,String)&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="literals:NullLiteral"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../net/URL.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Loads a class from a codebase URL.&#xA;     *&#xA;     * If &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code>, then this method&#xA;     * will behave the same as {@link #loadClass(String,String)} with a&#xA;     * &lt;code>null&lt;/code> &lt;code>codebase&lt;/code> and the given class name.&#xA;     *&#xA;     * &lt;p>This method delegates to the&#xA;     * {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}&#xA;     * method of the provider instance, passing the result of invoking&#xA;     * {@link URL#toString} on the given URL (or &lt;code>null&lt;/code> if&#xA;     * &lt;code>codebase&lt;/code> is null) as the first argument,&#xA;     * &lt;code>name&lt;/code> as the second argument,&#xA;     * and &lt;code>null&lt;/code> as the third argument.&#xA;     *&#xA;     * @param&#x9;codebase the URL to load the class from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @param&#x9;name the name of the class to load&#xA;     *&#xA;     * @return&#x9;the &lt;code>Class&lt;/code> object representing the loaded class&#xA;     *&#xA;     * @throws MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * &lt;code>null&lt;/code> and a provider-specific URL used&#xA;     * to load classes is invalid&#xA;     *&#xA;     * @throws&#x9;ClassNotFoundException if a definition for the class&#xA;     * could not be found at the specified URL&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </child>
              <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../net/URL.class.xmi#//@classifiers.0/@members.40"/>
                </next>
              </expressionIf>
              <expressionElse xsi:type="literals:NullLiteral"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.1"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Loads a class from a codebase URL path.&#xA;     *&#xA;     * &lt;p>This method delegates to the&#xA;     * {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}&#xA;     * method of the provider instance, passing &lt;code>codebase&lt;/code>&#xA;     * as the first argument, &lt;code>name&lt;/code> as the second argument,&#xA;     * and &lt;code>null&lt;/code> as the third argument.&#xA;     *&#xA;     * @param&#x9;codebase the list of URLs (separated by spaces) to load&#xA;     * the class from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @param&#x9;name the name of the class to load&#xA;     *&#xA;     * @return&#x9;the &lt;code>Class&lt;/code> object representing the loaded class&#xA;     *&#xA;     * @throws MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * non-&lt;code>null&lt;/code> and contains an invalid URL, or if&#xA;     * &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code> and a provider-specific&#xA;     * URL used to load classes is invalid&#xA;     *&#xA;     * @throws&#x9;ClassNotFoundException if a definition for the class&#xA;     * could not be found at the specified location&#xA;     *&#xA;     * @since&#x9;1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultLoader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Loads a class from a codebase URL path, optionally using the&#xA;     * supplied loader.&#xA;     *&#xA;     * This method should be used when the caller would like to make&#xA;     * available to the provider implementation an additional contextual&#xA;     * class loader to consider, such as the loader of a caller on the&#xA;     * stack.  Typically, a provider implementation will attempt to&#xA;     * resolve the named class using the given &lt;code>defaultLoader&lt;/code>,&#xA;     * if specified, before attempting to resolve the class from the&#xA;     * codebase URL path.&#xA;     *&#xA;     * &lt;p>This method delegates to the&#xA;     * {@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}&#xA;     * method of the provider instance, passing &lt;code>codebase&lt;/code>&#xA;     * as the first argument, &lt;code>name&lt;/code> as the second argument,&#xA;     * and &lt;code>defaultLoader&lt;/code> as the third argument.&#xA;     *&#xA;     * @param&#x9;codebase the list of URLs (separated by spaces) to load&#xA;     * the class from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @param&#x9;name the name of the class to load&#xA;     *&#xA;     * @param&#x9;defaultLoader additional contextual class loader&#xA;     * to use, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @return&#x9;the &lt;code>Class&lt;/code> object representing the loaded class&#xA;     *&#xA;     * @throws MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * non-&lt;code>null&lt;/code> and contains an invalid URL, or if&#xA;     * &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code> and a provider-specific&#xA;     * URL used to load classes is invalid&#xA;     *&#xA;     * @throws&#x9;ClassNotFoundException if a definition for the class&#xA;     * could not be found at the specified location&#xA;     *&#xA;     * @since&#x9;1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadProxyClass">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="interfaces">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultLoader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy})&#xA;     * that implements a set of interfaces with the given names&#xA;     * from a codebase URL path.&#xA;     *&#xA;     * &lt;p>The interfaces will be resolved similar to classes loaded via&#xA;     * the {@link #loadClass(String,String)} method using the given&#xA;     * &lt;code>codebase&lt;/code>.&#xA;     *&#xA;     * &lt;p>This method delegates to the&#xA;     * {@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)}&#xA;     * method of the provider instance, passing &lt;code>codebase&lt;/code>&#xA;     * as the first argument, &lt;code>interfaces&lt;/code> as the second argument,&#xA;     * and &lt;code>defaultLoader&lt;/code> as the third argument.&#xA;     *&#xA;     * @param&#x9;codebase the list of URLs (space-separated) to load&#xA;     * classes from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @param&#x9;interfaces the names of the interfaces for the proxy class&#xA;     * to implement&#xA;     *&#xA;     * @param&#x9;defaultLoader additional contextual class loader&#xA;     * to use, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @return&#x9;a dynamic proxy class that implements the named interfaces&#xA;     *&#xA;     * @throws&#x9;MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * non-&lt;code>null&lt;/code> and contains an invalid URL, or&#xA;     * if &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code> and a provider-specific&#xA;     * URL used to load classes is invalid&#xA;     *&#xA;     * @throws&#x9;ClassNotFoundException if a definition for one of&#xA;     * the named interfaces could not be found at the specified location,&#xA;     * or if creation of the dynamic proxy class failed (such as if&#xA;     * {@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}&#xA;     * would throw an &lt;code>IllegalArgumentException&lt;/code> for the given&#xA;     * interface list)&#xA;     *&#xA;     * @since&#x9;1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getClassLoader">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/SecurityException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a class loader that loads classes from the given codebase&#xA;     * URL path.&#xA;     *&#xA;     * &lt;p>The class loader returned is the class loader that the&#xA;     * {@link #loadClass(String,String)} method would use to load classes&#xA;     * for the same &lt;code>codebase&lt;/code> argument.&#xA;     * &#xA;     * &lt;p>This method delegates to the&#xA;     * {@link RMIClassLoaderSpi#getClassLoader(String)} method&#xA;     * of the provider instance, passing &lt;code>codebase&lt;/code> as the argument.&#xA;     *&#xA;     * &lt;p>If there is a security manger, its &lt;code>checkPermission&lt;/code>&#xA;     * method will be invoked with a&#xA;     * &lt;code>RuntimePermission(&quot;getClassLoader&quot;)&lt;/code> permission;&#xA;     * this could result in a &lt;code>SecurityException&lt;/code>.&#xA;     * The provider implementation of this method may also perform further&#xA;     * security checks to verify that the calling context has permission to&#xA;     * connect to all of the URLs in the codebase URL path.&#xA;     *&#xA;     * @param&#x9;codebase the list of URLs (space-separated) from which&#xA;     * the returned class loader will load classes from, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @return a class loader that loads classes from the given codebase URL&#xA;     * path&#xA;     *&#xA;     * @throws&#x9;MalformedURLException if &lt;code>codebase&lt;/code> is&#xA;     * non-&lt;code>null&lt;/code> and contains an invalid URL, or&#xA;     * if &lt;code>codebase&lt;/code> is &lt;code>null&lt;/code> and a provider-specific&#xA;     * URL used to identify the class loader is invalid&#xA;     *&#xA;     * @throws&#x9;SecurityException if there is a security manager and the&#xA;     * invocation of its &lt;code>checkPermission&lt;/code> method fails, or&#xA;     * if the caller does not have permission to connect to all of the&#xA;     * URLs in the codebase URL path&#xA;     *&#xA;     * @since&#x9;1.3&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0/@members.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getClassAnnotation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the annotation string (representing a location for&#xA;     * the class definition) that RMI will use to annotate the class&#xA;     * descriptor when marshalling objects of the given class.&#xA;     * &#xA;     * &lt;p>This method delegates to the&#xA;     * {@link RMIClassLoaderSpi#getClassAnnotation(Class)} method&#xA;     * of the provider instance, passing &lt;code>cl&lt;/code> as the argument.&#xA;     *&#xA;     * @param&#x9;cl the class to obtain the annotation for&#xA;     *&#xA;     * @return&#x9;a string to be used to annotate the given class when&#xA;     * it gets marshalled, or &lt;code>null&lt;/code>&#xA;     *&#xA;     * @throws&#x9;NullPointerException if &lt;code>cl&lt;/code> is &lt;code>null&lt;/code>&#xA;     *&#xA;     * @since&#x9;1.2&#xA;     */</comments>
        <comments>/*&#xA;     * REMIND: Should we say that the returned class annotation will or&#xA;     * should be a (space-separated) list of URLs?&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDefaultProviderInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the canonical instance of the default provider&#xA;     * for the service provider interface {@link RMIClassLoaderSpi}.&#xA;     * If the system property &lt;code>java.rmi.server.RMIClassLoaderSpi&lt;/code>&#xA;     * is not defined, then the &lt;code>RMIClassLoader&lt;/code> static&#xA;     * methods&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>{@link #loadClass(URL,String)}&#xA;     * &lt;li>{@link #loadClass(String,String)}&#xA;     * &lt;li>{@link #loadClass(String,String,ClassLoader)}&#xA;     * &lt;li>{@link #loadProxyClass(String,String[],ClassLoader)}&#xA;     * &lt;li>{@link #getClassLoader(String)}&#xA;     * &lt;li>{@link #getClassAnnotation(Class)}&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * will use the canonical instance of the default provider&#xA;     * as the service provider instance.&#xA;     *&#xA;     * &lt;p>If there is a security manager, its&#xA;     * &lt;code>checkPermission&lt;/code> method will be invoked with a&#xA;     * &lt;code>RuntimePermission(&quot;setFactory&quot;)&lt;/code> permission; this&#xA;     * could result in a &lt;code>SecurityException&lt;/code>.&#xA;     *&#xA;     * &lt;p>The default service provider instance implements&#xA;     * {@link RMIClassLoaderSpi} as follows:&#xA;     *&#xA;     * &lt;blockquote>&#xA;     *&#xA;     * &lt;p>The &lt;b>{@link RMIClassLoaderSpi#getClassAnnotation(Class)&#xA;     * getClassAnnotation}&lt;/b> method returns a &lt;code>String&lt;/code>&#xA;     * representing the codebase URL path that a remote party should&#xA;     * use to download the definition for the specified class.  The&#xA;     * format of the returned string is a path of URLs separated by&#xA;     * spaces.&#xA;     *&#xA;     * The codebase string returned depends on the defining class&#xA;     * loader of the specified class:&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;p>&lt;li>If the class loader is the system class loader (see&#xA;     * {@link ClassLoader#getSystemClassLoader}), a parent of the&#xA;     * system class loader such as the loader used for installed&#xA;     * extensions, or the bootstrap class loader (which may be&#xA;     * represented by &lt;code>null&lt;/code>), then the value of the&#xA;     * &lt;code>java.rmi.server.codebase&lt;/code> property (or possibly an&#xA;     * earlier cached value) is returned, or&#xA;     * &lt;code>null&lt;/code> is returned if that property is not set.&#xA;     *&#xA;     * &lt;p>&lt;li>Otherwise, if the class loader is an instance of&#xA;     * &lt;code>URLClassLoader&lt;/code>, then the returned string is a&#xA;     * space-separated list of the external forms of the URLs returned&#xA;     * by invoking the &lt;code>getURLs&lt;/code> methods of the loader.  If&#xA;     * the &lt;code>URLClassLoader&lt;/code> was created by this provider to&#xA;     * service an invocation of its &lt;code>loadClass&lt;/code> or&#xA;     * &lt;code>loadProxyClass&lt;/code> methods, then no permissions are&#xA;     * required to get the associated codebase string.  If it is an&#xA;     * arbitrary other &lt;code>URLClassLoader&lt;/code> instance, then if&#xA;     * there is a security manager, its &lt;code>checkPermission&lt;/code>&#xA;     * method will be invoked once for each URL returned by the&#xA;     * &lt;code>getURLs&lt;/code> method, with the permission returned by&#xA;     * invoking &lt;code>openConnection().getPermission()&lt;/code> on each&#xA;     * URL; if any of those invocations throws a&#xA;     * &lt;code>SecurityException&lt;/code> or an &lt;code>IOException&lt;/code>,&#xA;     * then the value of the &lt;code>java.rmi.server.codebase&lt;/code>&#xA;     * property (or possibly an earlier cached value) is returned, or&#xA;     * &lt;code>null&lt;/code> is returned if that property is not set.&#xA;     *&#xA;     * &lt;p>&lt;li>Finally, if the class loader is not an instance of&#xA;     * &lt;code>URLClassLoader&lt;/code>, then the value of the&#xA;     * &lt;code>java.rmi.server.codebase&lt;/code> property (or possibly an&#xA;     * earlier cached value) is returned, or&#xA;     * &lt;code>null&lt;/code> is returned if that property is not set.&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>For the implementations of the methods described below,&#xA;     * which all take a &lt;code>String&lt;/code> parameter named&#xA;     * &lt;code>codebase&lt;/code> that is a space-separated list of URLs,&#xA;     * each invocation has an associated &lt;i>codebase loader&lt;/i> that&#xA;     * is identified using the &lt;code>codebase&lt;/code> argument in&#xA;     * conjunction with the current thread's context class loader (see&#xA;     * {@link Thread#getContextClassLoader()}).  When there is a&#xA;     * security manager, this provider maintains an internal table of&#xA;     * class loader instances (which are at least instances of {@link&#xA;     * java.net.URLClassLoader}) keyed by the pair of their parent&#xA;     * class loader and their codebase URL path (an ordered list of&#xA;     * URLs).  If the &lt;code>codebase&lt;/code> argument is &lt;code>null&lt;/code>,&#xA;     * the codebase URL path is the value of the system property&#xA;     * &lt;code>java.rmi.server.codebase&lt;/code> or possibly an &#xA;     * earlier cached value.  For a given codebase URL path passed as the&#xA;     * &lt;code>codebase&lt;/code> argument to an invocation of one of the&#xA;     * below methods in a given context, the codebase loader is the&#xA;     * loader in the table with the specified codebase URL path and&#xA;     * the current thread's context class loader as its parent.  If no&#xA;     * such loader exists, then one is created and added to the table.&#xA;     * The table does not maintain strong references to its contained&#xA;     * loaders, in order to allow them and their defined classes to be&#xA;     * garbage collected when not otherwise reachable.  In order to&#xA;     * prevent arbitrary untrusted code from being implicitly loaded&#xA;     * into a virtual machine with no security manager, if there is no&#xA;     * security manager set, the codebase loader is just the current&#xA;     * thread's context class loader (the supplied codebase URL path&#xA;     * is ignored, so remote class loading is disabled).&#xA;     *&#xA;     * &lt;p>The &lt;b>{@link RMIClassLoaderSpi#getClassLoader(String)&#xA;     * getClassLoader}&lt;/b> method returns the codebase loader for the&#xA;     * specified codebase URL path.  If there is a security manager,&#xA;     * then if the calling context does not have permission to connect&#xA;     * to all of the URLs in the codebase URL path, a&#xA;     * &lt;code>SecurityException&lt;/code> will be thrown.&#xA;     *&#xA;     * &lt;p>The &lt;b>{@link&#xA;     * RMIClassLoaderSpi#loadClass(String,String,ClassLoader)&#xA;     * loadClass}&lt;/b> method attempts to load the class with the&#xA;     * specified name as follows:&#xA;     *&#xA;     * &lt;blockquote>&#xA;     *&#xA;     * If the &lt;code>defaultLoader&lt;/code> argument is&#xA;     * non-&lt;code>null&lt;/code>, it first attempts to load the class with the&#xA;     * specified &lt;code>name&lt;/code> using the&#xA;     * &lt;code>defaultLoader&lt;/code>, such as by evaluating&#xA;     *&#xA;     * &lt;pre>&#xA;     *     Class.forName(name, false, defaultLoader)&#xA;     * &lt;/pre>&#xA;     *&#xA;     * If the class is successfully loaded from the&#xA;     * &lt;code>defaultLoader&lt;/code>, that class is returned.  If an&#xA;     * exception other than &lt;code>ClassNotFoundException&lt;/code> is&#xA;     * thrown, that exception is thrown to the caller.&#xA;     *&#xA;     * &lt;p>Next, the &lt;code>loadClass&lt;/code> method attempts to load the&#xA;     * class with the specified &lt;code>name&lt;/code> using the codebase&#xA;     * loader for the specified codebase URL path.&#xA;     * If there is a security manager, then the calling context&#xA;     * must have permission to connect to all of the URLs in the&#xA;     * codebase URL path; otherwise, the current thread's context&#xA;     * class loader will be used instead of the codebase loader.&#xA;     *&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * &lt;p>The &lt;b>{@link&#xA;     * RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)&#xA;     * loadProxyClass}&lt;/b> method attempts to return a dynamic proxy&#xA;     * class with the named interface as follows:&#xA;     *&#xA;     * &lt;blockquote>&#xA;     *&#xA;     * &lt;p>If the &lt;code>defaultLoader&lt;/code> argument is&#xA;     * non-&lt;code>null&lt;/code> and all of the named interfaces can be&#xA;     * resolved through that loader, then,&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>if all of the resolved interfaces are &lt;code>public&lt;/code>,&#xA;     * then it first attempts to obtain a dynamic proxy class (using&#xA;     * {@link&#xA;     * java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])&#xA;     * Proxy.getProxyClass}) for the resolved interfaces defined in&#xA;     * the codebase loader; if that attempt throws an&#xA;     * &lt;code>IllegalArgumentException&lt;/code>, it then attempts to&#xA;     * obtain a dynamic proxy class for the resolved interfaces&#xA;     * defined in the &lt;code>defaultLoader&lt;/code>.  If both attempts&#xA;     * throw &lt;code>IllegalArgumentException&lt;/code>, then this method&#xA;     * throws a &lt;code>ClassNotFoundException&lt;/code>.  If any other&#xA;     * exception is thrown, that exception is thrown to the caller.&#xA;     *&#xA;     * &lt;li>if all of the non-&lt;code>public&lt;/code> resolved interfaces&#xA;     * are defined in the same class loader, then it attempts to&#xA;     * obtain a dynamic proxy class for the resolved interfaces&#xA;     * defined in that loader.&#xA;     *&#xA;     * &lt;li>otherwise, a &lt;code>LinkageError&lt;/code> is thrown (because a&#xA;     * class that implements all of the specified interfaces cannot be&#xA;     * defined in any loader).&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>Otherwise, if all of the named interfaces can be resolved&#xA;     * through the codebase loader, then,&#xA;     *&#xA;     * &lt;ul>&#xA;     *&#xA;     * &lt;li>if all of the resolved interfaces are &lt;code>public&lt;/code>,&#xA;     * then it attempts to obtain a dynamic proxy class for the&#xA;     * resolved interfaces in the codebase loader.  If the attempt&#xA;     * throws an &lt;code>IllegalArgumentException&lt;/code>, then this&#xA;     * method throws a &lt;code>ClassNotFoundException&lt;/code>.&#xA;     *&#xA;     * &lt;li>if all of the non-&lt;code>public&lt;/code> resolved interfaces&#xA;     * are defined in the same class loader, then it attempts to&#xA;     * obtain a dynamic proxy class for the resolved interfaces&#xA;     * defined in that loader.&#xA;     *&#xA;     * &lt;li>otherwise, a &lt;code>LinkageError&lt;/code> is thrown (because a&#xA;     * class that implements all of the specified interfaces cannot be&#xA;     * defined in any loader).&#xA;     *&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>Otherwise, a &lt;code>ClassNotFoundException&lt;/code> is thrown&#xA;     * for one of the named interfaces that could not be resolved.&#xA;     *&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * &lt;/blockquote>&#xA;     *&#xA;     * @return&#x9;the canonical instance of the default service provider&#xA;     *&#xA;     * @throws&#x9;SecurityException if there is a security manager and the&#xA;     * invocation of its &lt;code>checkPermission&lt;/code> method fails&#xA;     *&#xA;     * @since&#x9;1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sm">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/SecurityManager.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.17"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/SecurityManager.class.xmi#//@classifiers.0/@members.22"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/RuntimePermission.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:StringReference" value="setFactory"/>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSecurityContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loader">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Returns the security context of the given class loader.&#xA;     *&#xA;     * @param&#x9;loader a class loader from which to get the security context&#xA;     *&#xA;     * @return&#x9;the security context&#xA;     *&#xA;     * @deprecated no replacement.  As of the Java 2 platform v1.2, RMI no&#xA;     * longer uses this method to obtain a class loader's security context.&#xA;     * @see java.lang.SecurityManager#getSecurityContext()&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0/@members.13"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0"/>
              </next>
            </next>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="newDefaultProviderInstance">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Creates an instance of the default provider class.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <anonymousClass>
            <members xsi:type="members:ClassMethod" name="loadClass">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameters>
              <parameters xsi:type="parameters:OrdinaryParameter" name="name">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameters>
              <parameters xsi:type="parameters:OrdinaryParameter" name="defaultLoader">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameters>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0/@members.10"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.0/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.0/@parameters.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.0/@parameters.2"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0"/>
                      </next>
                    </next>
                  </next>
                </returnValue>
              </statements>
            </members>
            <members xsi:type="members:ClassMethod" name="loadProxyClass">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameters>
              <parameters xsi:type="parameters:OrdinaryParameter" name="interfaces">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
              </parameters>
              <parameters xsi:type="parameters:OrdinaryParameter" name="defaultLoader">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameters>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0/@members.16"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.1/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.1/@parameters.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.1/@parameters.2"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0"/>
                      </next>
                    </next>
                  </next>
                </returnValue>
              </statements>
            </members>
            <members xsi:type="members:ClassMethod" name="getClassLoader">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <parameters xsi:type="parameters:OrdinaryParameter" name="codebase">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameters>
              <exceptions>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../net/MalformedURLException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </exceptions>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0/@members.12"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.2/@parameters.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0"/>
                      </next>
                    </next>
                  </next>
                </returnValue>
              </statements>
            </members>
            <members xsi:type="members:ClassMethod" name="getClassAnnotation">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <parameters xsi:type="parameters:OrdinaryParameter" name="cl">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                    <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameters>
              <annotationsAndModifiers xsi:type="modifiers:Public"/>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0/@members.11"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.0/@returnValue/@anonymousClass/@members.3/@parameters.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../../sun/rmi/server/LoaderHandler.class.xmi#//@classifiers.0"/>
                      </next>
                    </next>
                  </next>
                </returnValue>
              </statements>
            </members>
          </anonymousClass>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="initializeProvider">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Chooses provider instance, following above documentation.&#xA;     *&#xA;     * This method assumes that it has been invoked in a privileged block.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="providerClassName">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>/*&#xA;&#x9; * First check for the system property being set:&#xA;&#x9; */</comments>
              <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.25"/>
              <arguments xsi:type="references:StringReference" value="java.rmi.server.RMIClassLoaderSpi"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:StringReference" value="default"/>
              </next>
            </condition>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="providerClass">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
                    <arguments xsi:type="literals:BooleanLiteral"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../lang/Class.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.1/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                  </next>
                </child>
              </returnValue>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/NoClassDefFoundError.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.1/@catcheBlocks.0/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                  </arguments>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/IllegalAccessError.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.1/@catcheBlocks.1/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                  </arguments>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/IllegalAccessException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/InstantiationError.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.1/@catcheBlocks.2/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../lang/Throwable.class.xmi#//@classifiers.0/@members.9"/>
                    </next>
                  </arguments>
                </throwable>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/InstantiationException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="error">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/Error.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../lang/LinkageError.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:StringReference" value="provider class not assignable to RMIClassLoaderSpi"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.1/@catcheBlocks.3/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/Throwable.class.xmi#//@classifiers.0/@members.12"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.1/@catcheBlocks.3/@parameter"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.1/@catcheBlocks.3/@statements.0/@variable"/>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/ClassCastException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="iter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>/*&#xA;&#x9; * Next look for a provider configuration file intalled:&#xA;&#x9; */</comments>
              <target xsi:type="classifiers:Interface" href="../../util/Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../sun/misc/Service.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:ReflectiveClassReference"/>
                <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../../../sun/misc/Service.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="RMIClassLoaderSpi.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../../util/Iterator.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </child>
              </returnValue>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="error">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/Error.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../lang/LinkageError.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:StringReference" value="provider class not assignable to RMIClassLoaderSpi"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@statement/@statements.0/@catcheBlocks.0/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../lang/Throwable.class.xmi#//@classifiers.0/@members.12"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.3/@statement/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
              </statements>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/ClassCastException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../../util/Iterator.class.xmi#//@classifiers.0/@members.0"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>/*&#xA;&#x9; * Finally, return the canonical instance of the default provider.&#xA;&#x9; */</comments>
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>RMIClassLoader&lt;/code> comprises static methods to support&#xA; * dynamic class loading with RMI.  Included are methods for loading&#xA; * classes from a network location (one or more URLs) and obtaining&#xA; * the location from which an existing class should be loaded by&#xA; * remote parties.  These methods are used by the RMI runtime when&#xA; * marshalling and unmarshalling classes contained in the arguments&#xA; * and return values of remote method calls, and they also may be&#xA; * invoked directly by applications in order to mimic RMI's dynamic&#xA; * class loading behavior.&#xA; *&#xA; * &lt;p>The implementation of the following static methods&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li>{@link #loadClass(URL,String)}&#xA; * &lt;li>{@link #loadClass(String,String)}&#xA; * &lt;li>{@link #loadClass(String,String,ClassLoader)}&#xA; * &lt;li>{@link #loadProxyClass(String,String[],ClassLoader)}&#xA; * &lt;li>{@link #getClassLoader(String)}&#xA; * &lt;li>{@link #getClassAnnotation(Class)}&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * is provided by an instance of {@link RMIClassLoaderSpi}, the&#xA; * service provider interface for those methods.  When one of the&#xA; * methods is invoked, its behavior is to delegate to a corresponding&#xA; * method on the service provider instance.  The details of how each&#xA; * method delegates to the provider instance is described in the&#xA; * documentation for each particular method.&#xA; *&#xA; * &lt;p>The service provider instance is chosen as follows:&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li>If the system property&#xA; * &lt;code>java.rmi.server.RMIClassLoaderSpi&lt;/code> is defined, then if&#xA; * its value equals the string &lt;code>&quot;default&quot;&lt;/code>, the provider&#xA; * instance will be the value returned by an invocation of the {@link&#xA; * #getDefaultProviderInstance()} method, and for any other value, if&#xA; * a class named with the value of the property can be loaded by the&#xA; * system class loader (see {@link ClassLoader#getSystemClassLoader})&#xA; * and that class is assignable to {@link RMIClassLoaderSpi} and has a&#xA; * public no-argument constructor, then that constructor will be&#xA; * invoked to create the provider instance.  If the property is&#xA; * defined but any other of those conditions are not true, then an&#xA; * unspecified &lt;code>Error&lt;/code> will be thrown to code that attempts&#xA; * to use &lt;code>RMIClassLoader&lt;/code>, indicating the failure to&#xA; * obtain a provider instance.&#xA; *&#xA; * &lt;li>If a resource named&#xA; * &lt;code>META-INF/services/java.rmi.server.RMIClassLoaderSpi&lt;/code> is&#xA; * visible to the system class loader, then the contents of that&#xA; * resource are interpreted as a provider-configuration file, and the&#xA; * first class name specified in that file is used as the provider&#xA; * class name.  If a class with that name can be loaded by the system&#xA; * class loader and that class is assignable to {@link&#xA; * RMIClassLoaderSpi} and has a public no-argument constructor, then&#xA; * that constructor will be invoked to create the provider instance.&#xA; * If the resource is found but a provider cannot be instantiated as&#xA; * described, then an unspecified &lt;code>Error&lt;/code> will be thrown to&#xA; * code that attempts to use &lt;code>RMIClassLoader&lt;/code>, indicating&#xA; * the failure to obtain a provider instance.&#xA; *&#xA; * &lt;li>Otherwise, the provider instance will be the value returned by&#xA; * an invocation of the {@link #getDefaultProviderInstance()} method.&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * @version&#x9;1.40, 04/05/18&#xA; * @author&#x9;Ann Wollrath&#xA; * @author&#x9;Peter Jones&#xA; * @author&#x9;Laird Dornin&#xA; * @see&#x9;&#x9;RMIClassLoaderSpi&#xA; * @since&#x9;JDK1.1&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
