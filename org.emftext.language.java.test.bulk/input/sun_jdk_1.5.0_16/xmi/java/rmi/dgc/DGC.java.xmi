<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DGC.java">
  <comments>/*&#xA; * @(#)DGC.java&#x9;1.15 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>rmi</namespaces>
  <namespaces>dgc</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>rmi</namespaces>
    <namespaces>server</namespaces>
    <classifier xsi:type="classifiers:Class" href="../server/ObjID.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DGC">
    <members xsi:type="members:InterfaceMethod" name="dirty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * The dirty call requests leases for the remote object references&#xA;     * associated with the object identifiers contained in the array&#xA;     * 'ids'. The 'lease' contains a client's unique VM identifier (VMID)&#xA;     * and a requested lease period. For each remote object exported&#xA;     * in the local VM, the garbage collector maintains a reference&#xA;     * list-a list of clients that hold references to it. If the lease&#xA;     * is granted, the garbage collector adds the client's VMID to the&#xA;     * reference list for each remote object indicated in 'ids'. The&#xA;     * 'sequenceNum' parameter is a sequence number that is used to&#xA;     * detect and discard late calls to the garbage collector. The&#xA;     * sequence number should always increase for each subsequent call&#xA;     * to the garbage collector.&#xA;     *&#xA;     * Some clients are unable to generate a VMID, since a VMID is a&#xA;     * universally unique identifier that contains a host address&#xA;     * which some clients are unable to obtain due to security&#xA;     * restrictions. In this case, a client can use a VMID of null,&#xA;     * and the distributed garbage collector will assign a VMID for&#xA;     * the client.&#xA;     *&#xA;     * The dirty call returns a Lease object that contains the VMID&#xA;     * used and the lease period granted for the remote references (a&#xA;     * server may decide to grant a smaller lease period than the&#xA;     * client requests). A client must use the VMID the garbage&#xA;     * collector uses in order to make corresponding clean calls when&#xA;     * the client drops remote object references.&#xA;     *&#xA;     * A client VM need only make one initial dirty call for each&#xA;     * remote reference referenced in the VM (even if it has multiple&#xA;     * references to the same remote object). The client must also&#xA;     * make a dirty call to renew leases on remote references before&#xA;     * such leases expire. When the client no longer has any&#xA;     * references to a specific remote object, it must schedule a&#xA;     * clean call for the object ID associated with the reference.&#xA;     * &#xA;     * @param ids IDs of objects to mark as referenced by calling client&#xA;     * @param sequenceNum sequence number&#xA;     * @param lease requested lease&#xA;     * @return granted lease&#xA;     * @throws RemoteException if dirty call fails&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Lease.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ids">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../server/ObjID.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sequenceNum">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lease">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Lease.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RemoteException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="clean">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * The clean call removes the 'vmid' from the reference list of&#xA;     * each remote object indicated in 'id's.  The sequence number is&#xA;     * used to detect late clean calls.  If the argument 'strong' is&#xA;     * true, then the clean call is a result of a failed dirty call,&#xA;     * thus the sequence number for the client 'vmid' needs to be&#xA;     * remembered.&#xA;     * &#xA;     * @param ids IDs of objects to mark as unreferenced by calling client&#xA;     * @param sequenceNum sequence number&#xA;     * @param vmid client VMID&#xA;     * @param strong make 'strong' clean call&#xA;     * @throws RemoteException if clean call fails&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ids">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../server/ObjID.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sequenceNum">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vmid">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="VMID.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="strong">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../RemoteException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The DGC abstraction is used for the server side of the distributed&#xA; * garbage collection algorithm. This interface contains the two&#xA; * methods: dirty and clean. A dirty call is made when a remote&#xA; * reference is unmarshaled in a client (the client is indicated by&#xA; * its VMID). A corresponding clean call is made when no more&#xA; * references to the remote reference exist in the client. A failed&#xA; * dirty call must schedule a strong clean call so that the call's&#xA; * sequence number can be retained in order to detect future calls&#xA; * received out of order by the distributed garbage collector.&#xA; *&#xA; * A reference to a remote object is leased for a period of time by&#xA; * the client holding the reference. The lease period starts when the&#xA; * dirty call is received. It is the client's responsibility to renew&#xA; * the leases, by making additional dirty calls, on the remote&#xA; * references it holds before such leases expire. If the client does&#xA; * not renew the lease before it expires, the distributed garbage&#xA; * collector assumes that the remote object is no longer referenced by&#xA; * that client.&#xA; *&#xA; * @author Ann Wollrath&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../Remote.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
