<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Dictionary.java">
  <comments>/*&#xA; * @(#)Dictionary.java&#x9;1.23 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Dictionary">
    <typeParameters name="K"/>
    <typeParameters name="V"/>
    <members xsi:type="members:Constructor" name="Dictionary">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sole constructor.  (For invocation by subclass constructors, typically&#xA;     * implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="size">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Returns the number of entries (distinct keys) in this dictionary.&#xA;     *&#xA;     * @return  the number of keys in this dictionary.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isEmpty">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Tests if this dictionary maps no keys to value. The general contract &#xA;     * for the &lt;tt>isEmpty&lt;/tt> method is that the result is true if and only &#xA;     * if this dictionary contains no entries. &#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if this dictionary maps no keys to values;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="keys">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Returns an enumeration of the keys in this dictionary. The general &#xA;     * contract for the keys method is that an &lt;tt>Enumeration&lt;/tt> object &#xA;     * is returned that will generate all the keys for which this dictionary &#xA;     * contains entries. &#xA;     *&#xA;     * @return  an enumeration of the keys in this dictionary.&#xA;     * @see     java.util.Dictionary#elements()&#xA;     * @see     java.util.Enumeration&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="elements">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Returns an enumeration of the values in this dictionary. The general &#xA;     * contract for the &lt;tt>elements&lt;/tt> method is that an &#xA;     * &lt;tt>Enumeration&lt;/tt> is returned that will generate all the elements &#xA;     * contained in entries in this dictionary.&#xA;     *&#xA;     * @return  an enumeration of the values in this dictionary.&#xA;     * @see     java.util.Dictionary#keys()&#xA;     * @see     java.util.Enumeration&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Returns the value to which the key is mapped in this dictionary. &#xA;     * The general contract for the &lt;tt>isEmpty&lt;/tt> method is that if this &#xA;     * dictionary contains an entry for the specified key, the associated &#xA;     * value is returned; otherwise, &lt;tt>null&lt;/tt> is returned. &#xA;     *&#xA;     * @return  the value to which the key is mapped in this dictionary;&#xA;     * @param   key   a key in this dictionary.&#xA;     *          &lt;code>null&lt;/code> if the key is not mapped to any value in&#xA;     *          this dictionary.&#xA;     * @exception NullPointerException if the &lt;tt>key&lt;/tt> is &lt;tt>null&lt;/tt>.&#xA;     * @see     java.util.Dictionary#put(java.lang.Object, java.lang.Object)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="put">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Maps the specified &lt;code>key&lt;/code> to the specified &#xA;     * &lt;code>value&lt;/code> in this dictionary. Neither the key nor the &#xA;     * value can be &lt;code>null&lt;/code>.&#xA;     * &lt;p>&#xA;     * If this dictionary already contains an entry for the specified &#xA;     * &lt;tt>key&lt;/tt>, the value already in this dictionary for that &#xA;     * &lt;tt>key&lt;/tt> is returned, after modifying the entry to contain the&#xA;     *  new element. &lt;p>If this dictionary does not already have an entry &#xA;     *  for the specified &lt;tt>key&lt;/tt>, an entry is created for the &#xA;     *  specified &lt;tt>key&lt;/tt> and &lt;tt>value&lt;/tt>, and &lt;tt>null&lt;/tt> is &#xA;     *  returned.&#xA;     * &lt;p>&#xA;     * The &lt;code>value&lt;/code> can be retrieved by calling the &#xA;     * &lt;code>get&lt;/code> method with a &lt;code>key&lt;/code> that is equal to &#xA;     * the original &lt;code>key&lt;/code>. &#xA;     *&#xA;     * @param      key     the hashtable key.&#xA;     * @param      value   the value.&#xA;     * @return     the previous value to which the &lt;code>key&lt;/code> was mapped&#xA;     *             in this dictionary, or &lt;code>null&lt;/code> if the key did not&#xA;     *             have a previous mapping.&#xA;     * @exception  NullPointerException  if the &lt;code>key&lt;/code> or&#xA;     *               &lt;code>value&lt;/code> is &lt;code>null&lt;/code>.&#xA;     * @see        java.lang.Object#equals(java.lang.Object)&#xA;     * @see        java.util.Dictionary#get(java.lang.Object)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Removes the &lt;code>key&lt;/code> (and its corresponding &#xA;     * &lt;code>value&lt;/code>) from this dictionary. This method does nothing &#xA;     * if the &lt;code>key&lt;/code> is not in this dictionary. &#xA;     *&#xA;     * @param   key   the key that needs to be removed.&#xA;     * @return  the value to which the &lt;code>key&lt;/code> had been mapped in this&#xA;     *          dictionary, or &lt;code>null&lt;/code> if the key did not have a&#xA;     *          mapping.&#xA;     * @exception NullPointerException if &lt;tt>key&lt;/tt> is &lt;tt>null&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Dictionary&lt;/code> class is the abstract parent of any &#xA; * class, such as &lt;code>Hashtable&lt;/code>, which maps keys to values. &#xA; * Every key and every value is an object. In any one &lt;tt>Dictionary&lt;/tt> &#xA; * object, every key is associated with at most one value. Given a &#xA; * &lt;tt>Dictionary&lt;/tt> and a key, the associated element can be looked up. &#xA; * Any non-&lt;code>null&lt;/code> object can be used as a key and as a value.&#xA; * &lt;p>&#xA; * As a rule, the &lt;code>equals&lt;/code> method should be used by &#xA; * implementations of this class to decide if two keys are the same. &#xA; * &lt;p>&#xA; * &lt;strong>NOTE: This class is obsolete.  New implementations should&#xA; * implement the Map interface, rather than extending this class.&lt;/strong>&#xA; *&#xA; * @author  unascribed&#xA; * @version 1.23, 01/12/04&#xA; * @see&#x9;    java.util.Map&#xA; * @see     java.lang.Object#equals(java.lang.Object)&#xA; * @see     java.lang.Object#hashCode()&#xA; * @see     java.util.Hashtable&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
