<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/types ../../java.ecore#/16" name="FormattableFlags.java">
  <comments>/*&#xA; * @(#)FormattableFlags.java&#x9;1.1 04/04/21&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Class" name="FormattableFlags">
    <comments>// '#'</comments>
    <members xsi:type="members:Constructor" name="FormattableFlags">
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Explicit instantiation of this class is prohibited.</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="LEFT_JUSTIFY">
      <initialValue xsi:type="expressions:ShiftExpression">
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        <shiftOperators xsi:type="operators:LeftShift"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Left-justifies the output.  Spaces (&lt;tt>'&amp;#92;u0020'&lt;/tt>) will be added&#xA;     * at the end of the converted value as required to fill the minimum width&#xA;     * of the field.  If this flag is not set then the output will be&#xA;     * right-justified.&#xA;     *&#xA;     * &lt;p> This flag corresponds to &lt;tt>'-'&lt;/tt> (&lt;tt>'&amp;#92;u002d'&lt;/tt>) in&#xA;     * the format specifier.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="UPPERCASE">
      <initialValue xsi:type="expressions:ShiftExpression">
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <shiftOperators xsi:type="operators:LeftShift"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// '-'</comments>
        <comments>/**&#xA;     * Converts the output to upper case according to the rules of the&#xA;     * {@linkplain java.util.Locale locale} given during creation of the&#xA;     * &lt;tt>formatter&lt;/tt> argument of the {@link Formattable#formatTo&#xA;     * formatTo()} method.  The output should be equivalent the following&#xA;     * invocation of {@link String#toUpperCase(java.util.Locale)}&#xA;     *&#xA;     * &lt;pre>&#xA;     *     out.toUpperCase() &lt;/pre>&#xA;     *&#xA;     * &lt;p> This flag corresponds to &lt;tt>'^'&lt;/tt> (&lt;tt>'&amp;#92;u005e'&lt;/tt>) in&#xA;     * the format specifier.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ALTERNATE">
      <initialValue xsi:type="expressions:ShiftExpression">
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        <shiftOperators xsi:type="operators:LeftShift"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// '^'</comments>
        <comments>/**&#xA;     * Requires the output to use an alternate form.  The definition of the&#xA;     * form is specified by the &lt;tt>Formattable&lt;/tt>.&#xA;     *&#xA;     * &lt;p> This flag corresponds to &lt;tt>'#'&lt;/tt> (&lt;tt>'&amp;#92;u0023'&lt;/tt>) in&#xA;     * the format specifier.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * FomattableFlags are passed to the {@link Formattable#formatTo&#xA; * Formattable.formatTo()} method and modify the output format for {@linkplain&#xA; * Formattable Formattables}.  Implementations of {@link Formattable} are&#xA; * responsible for interpreting and validating any flags.&#xA; *&#xA; * @version &#x9;1.1, 04/21/04&#xA; * @since  1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
