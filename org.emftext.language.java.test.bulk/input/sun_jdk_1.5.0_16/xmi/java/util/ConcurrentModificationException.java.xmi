<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="ConcurrentModificationException.java">
  <comments>/*&#xA; * @(#)ConcurrentModificationException.java&#x9;1.18 04/06/22&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Class" name="ConcurrentModificationException">
    <members xsi:type="members:Constructor" name="ConcurrentModificationException">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a ConcurrentModificationException with no&#xA;     * detail message.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ConcurrentModificationException">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="message">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a &lt;tt>ConcurrentModificationException&lt;/tt> with the&#xA;     * specified detail message.&#xA;     *&#xA;     * @param message the detail message pertaining to this exception.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This exception may be thrown by methods that have detected concurrent&#xA; * modification of an object when such modification is not permissible.&#xA; * &lt;p>&#xA; * For example, it is not generally permissible for one thread to modify a Collection&#xA; * while another thread is iterating over it.  In general, the results of the&#xA; * iteration are undefined under these circumstances.  Some Iterator&#xA; * implementations (including those of all the general purpose collection implementations&#xA; * provided by the JRE) may choose to throw this exception if this behavior is&#xA; * detected.  Iterators that do this are known as &lt;i>fail-fast&lt;/i> iterators,&#xA; * as they fail quickly and cleanly, rather that risking arbitrary,&#xA; * non-deterministic behavior at an undetermined time in the future.&#xA; * &lt;p>&#xA; * Note that this exception does not always indicate that an object has&#xA; * been concurrently modified by a &lt;i>different&lt;/i> thread.  If a single&#xA; * thread issues a sequence of method invocations that violates the&#xA; * contract of an object, the object may throw this exception.  For&#xA; * example, if a thread modifies a collection directly while it is&#xA; * iterating over the collection with a fail-fast iterator, the iterator&#xA; * will throw this exception.&#xA; *&#xA; * &lt;p>Note that fail-fast behavior cannot be guaranteed as it is, generally&#xA; * speaking, impossible to make any hard guarantees in the presence of&#xA; * unsynchronized concurrent modification.  Fail-fast operations&#xA; * throw &lt;tt>ConcurrentModificationException&lt;/tt> on a best-effort basis. &#xA; * Therefore, it would be wrong to write a program that depended on this&#xA; * exception for its correctness: &lt;i>&lt;tt>ConcurrentModificationException&lt;/tt>&#xA; * should be used only to detect bugs.&lt;/i>&#xA; *&#xA; * @author  Josh Bloch&#xA; * @version 1.18, 06/22/04&#xA; * @see&#x9;    Collection&#xA; * @see     Iterator&#xA; * @see     ListIterator&#xA; * @see&#x9;    Vector&#xA; * @see&#x9;    LinkedList&#xA; * @see&#x9;    HashSet&#xA; * @see&#x9;    Hashtable&#xA; * @see&#x9;    TreeMap&#xA; * @see&#x9;    AbstractList&#xA; * @since   1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="../lang/RuntimeException.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
