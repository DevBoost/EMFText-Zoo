<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="TreeMap.java">
  <comments>/*&#xA; * @(#)TreeMap.java&#x9;1.65 04/02/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Class" name="TreeMap">
    <typeParameters name="K"/>
    <typeParameters name="V"/>
    <members xsi:type="members:Field" name="comparator">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:SuperTypeArgument">
            <superType xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </superType>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Comparator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The Comparator used to maintain order in this TreeMap, or&#xA;     * null if this TreeMap uses its elements natural ordering.&#xA;     *&#xA;     * @serial&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="root">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="size">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The number of entries in the tree&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Field" name="modCount">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The number of structural modifications to the tree.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:ClassMethod" name="incrementSize">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <operator xsi:type="operators:PlusPlus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <operator xsi:type="operators:PlusPlus"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="decrementSize">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <operator xsi:type="operators:PlusPlus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <operator xsi:type="operators:MinusMinus"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="TreeMap">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new, empty map, sorted according to the keys' natural&#xA;     * order.  All keys inserted into the map must implement the&#xA;     * &lt;tt>Comparable&lt;/tt> interface.  Furthermore, all such keys must be&#xA;     * &lt;i>mutually comparable&lt;/i>: &lt;tt>k1.compareTo(k2)&lt;/tt> must not throw a&#xA;     * ClassCastException for any elements &lt;tt>k1&lt;/tt> and &lt;tt>k2&lt;/tt> in the&#xA;     * map.  If the user attempts to put a key into the map that violates this&#xA;     * constraint (for example, the user attempts to put a string key into a&#xA;     * map whose keys are integers), the &lt;tt>put(Object key, Object&#xA;     * value)&lt;/tt> call will throw a &lt;tt>ClassCastException&lt;/tt>.&#xA;     *&#xA;     * @see Comparable&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="TreeMap">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:SuperTypeArgument">
              <superType xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </superType>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Comparator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new, empty map, sorted according to the given comparator.&#xA;     * All keys inserted into the map must be &lt;i>mutually comparable&lt;/i> by&#xA;     * the given comparator: &lt;tt>comparator.compare(k1, k2)&lt;/tt> must not&#xA;     * throw a &lt;tt>ClassCastException&lt;/tt> for any keys &lt;tt>k1&lt;/tt> and&#xA;     * &lt;tt>k2&lt;/tt> in the map.  If the user attempts to put a key into the&#xA;     * map that violates this constraint, the &lt;tt>put(Object key, Object&#xA;     * value)&lt;/tt> call will throw a &lt;tt>ClassCastException&lt;/tt>.&#xA;     *&#xA;     * @param c the comparator that will be used to sort this map.  A&#xA;     *        &lt;tt>null&lt;/tt> value indicates that the keys' &lt;i>natural&#xA;     *        ordering&lt;/i> should be used.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="TreeMap">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="m">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </extendTypes>
            </typeArguments>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new map containing the same mappings as the given map,&#xA;     * sorted according to the keys' &lt;i>natural order&lt;/i>.  All keys inserted&#xA;     * into the new map must implement the &lt;tt>Comparable&lt;/tt> interface.&#xA;     * Furthermore, all such keys must be &lt;i>mutually comparable&lt;/i>:&#xA;     * &lt;tt>k1.compareTo(k2)&lt;/tt> must not throw a &lt;tt>ClassCastException&lt;/tt>&#xA;     * for any elements &lt;tt>k1&lt;/tt> and &lt;tt>k2&lt;/tt> in the map.  This method&#xA;     * runs in n*log(n) time.&#xA;     *&#xA;     * @param  m the map whose mappings are to be placed in this map.&#xA;     * @throws ClassCastException the keys in t are not Comparable, or&#xA;     *         are not mutually comparable.&#xA;     * @throws NullPointerException if the specified map is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="TreeMap">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="SortedMap.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="Map.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Set.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="members:InterfaceMethod" href="Map.class.xmi#//@classifiers.0/@members.11"/>
              </next>
            </arguments>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="cannotHappen">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>io</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <parameter name="cannotHappen">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="m">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new map containing the same mappings as the given&#xA;     * &lt;tt>SortedMap&lt;/tt>, sorted according to the same ordering.  This method&#xA;     * runs in linear time.&#xA;     *&#xA;     * @param  m the sorted map whose mappings are to be placed in this map,&#xA;     *         and whose comparator is to be used to sort this map.&#xA;     * @throws NullPointerException if the specified sorted map is null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="size">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Query Operations</comments>
        <comments>/**&#xA;     * Returns the number of key-value mappings in this map.&#xA;     *&#xA;     * @return the number of key-value mappings in this map.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="containsKey">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this map contains a mapping for the specified&#xA;     * key.&#xA;     *&#xA;     * @param key key whose presence in this map is to be tested.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if this map contains a mapping for the&#xA;     *            specified key.&#xA;     * @throws ClassCastException if the key cannot be compared with the keys&#xA;     *                  currently in the map.&#xA;     * @throws NullPointerException key is &lt;tt>null&lt;/tt> and this map uses&#xA;     *                  natural ordering, or its comparator does not tolerate&#xA;     *            &lt;tt>null&lt;/tt> keys.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="containsValue">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this map maps one or more keys to the&#xA;     * specified value.  More formally, returns &lt;tt>true&lt;/tt> if and only if&#xA;     * this map contains at least one mapping to a value &lt;tt>v&lt;/tt> such&#xA;     * that &lt;tt>(value==null ? v==null : value.equals(v))&lt;/tt>.  This&#xA;     * operation will probably require time linear in the Map size for most&#xA;     * implementations of Map.&#xA;     *&#xA;     * @param value value whose presence in this Map is to be tested.&#xA;     * @return  &lt;tt>true&lt;/tt> if a mapping to &lt;tt>value&lt;/tt> exists;&#xA;     *&#x9;&#x9;&lt;tt>false&lt;/tt> otherwise.&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="literals:BooleanLiteral"/>
            <expressionElse xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                  <children xsi:type="literals:NullLiteral"/>
                </child>
                <expressionIf xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </expressionIf>
                <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
                </expressionElse>
              </expression>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueSearchNull">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// Check left and right subtrees for value</comments>
        <returnValue xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </arguments>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </arguments>
              </children>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valueSearchNonNull">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <comments>// Check this node for the value</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
            </arguments>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>// Check left and right subtrees for value</comments>
        <returnValue xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
              </children>
            </expression>
          </children>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
              </children>
            </expression>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value to which this map maps the specified key.  Returns&#xA;     * &lt;tt>null&lt;/tt> if the map contains no mapping for this key.  A return&#xA;     * value of &lt;tt>null&lt;/tt> does not &lt;i>necessarily&lt;/i> indicate that the&#xA;     * map contains no mapping for the key; it's also possible that the map&#xA;     * explicitly maps the key to &lt;tt>null&lt;/tt>.  The &lt;tt>containsKey&lt;/tt>&#xA;     * operation may be used to distinguish these two cases.&#xA;     *&#xA;     * @param key key whose associated value is to be returned.&#xA;     * @return the value to which this map maps the specified key, or&#xA;     *               &lt;tt>null&lt;/tt> if the map contains no mapping for the key.&#xA;     * @throws    ClassCastException key cannot be compared with the keys&#xA;     *                  currently in the map.&#xA;     * @throws NullPointerException key is &lt;tt>null&lt;/tt> and this map uses&#xA;     *                  natural ordering, or its comparator does not tolerate&#xA;     *                  &lt;tt>null&lt;/tt> keys.&#xA;     *&#xA;     * @see #containsKey(Object)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="literals:NullLiteral"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="comparator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:SuperTypeArgument">
            <superType xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </superType>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Comparator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the comparator used to order this map, or &lt;tt>null&lt;/tt> if this&#xA;     * map uses its keys' natural order.&#xA;     *&#xA;     * @return the comparator associated with this sorted map, or&#xA;     *                &lt;tt>null&lt;/tt> if it uses its keys' natural sort method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="firstKey">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the first (lowest) key currently in this sorted map.&#xA;     *&#xA;     * @return the first (lowest) key currently in this sorted map.&#xA;     * @throws    NoSuchElementException Map is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="lastKey">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the last (highest) key currently in this sorted map.&#xA;     *&#xA;     * @return the last (highest) key currently in this sorted map.&#xA;     * @throws    NoSuchElementException Map is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.47"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="putAll">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="map">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </extendTypes>
            </typeArguments>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Map.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Copies all of the mappings from the specified map to this map.  These&#xA;     * mappings replace any mappings that this map had for any of the keys&#xA;     * currently in the specified map.&#xA;     *&#xA;     * @param     map mappings to be stored in this map.&#xA;     * @throws    ClassCastException class of a key or value in the specified&#xA;     *                   map prevents it from being stored in this map.&#xA;     *&#xA;     * @throws NullPointerException if the given map is &lt;tt>null&lt;/tt> or&#xA;     *         this map does not permit &lt;tt>null&lt;/tt> keys and a&#xA;     *         key in the specified map is &lt;tt>null&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mapSize">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="Map.class.xmi#//@classifiers.0/@members.0"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="Comparator.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="SortedMap.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                </expression>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statements>
              <statements xsi:type="statements:TryBlock">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:InterfaceMethod" href="Set.class.xmi#//@classifiers.0/@members.3"/>
                        </next>
                        <target xsi:type="members:InterfaceMethod" href="Map.class.xmi#//@classifiers.0/@members.11"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
                <catcheBlocks>
                  <parameter name="cannotHappen">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>java</namespaces>
                      <namespaces>io</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
                <catcheBlocks>
                  <parameter name="cannotHappen">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </parameter>
                </catcheBlocks>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="Comparator.class.xmi#//@classifiers.0/@members.1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                    </next>
                  </children>
                </expression>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
          <children xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="AbstractMap.class.xmi#//@classifiers.0/@members.10"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEntry">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns this map's entry for the given key, or &lt;tt>null&lt;/tt> if the map&#xA;     * does not contain an entry for the key.&#xA;     *&#xA;     * @return this map's entry for the given key, or &lt;tt>null&lt;/tt> if the map&#xA;     *                does not contain an entry for the key.&#xA;     * @throws ClassCastException if the key cannot be compared with the keys&#xA;     *                  currently in the map.&#xA;     * @throws NullPointerException key is &lt;tt>null&lt;/tt> and this map uses&#xA;     *                  natural order, or its comparator does not tolerate *&#xA;     *                  &lt;tt>null&lt;/tt> keys.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="k">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cmp">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                  </value>
                </expression>
              </elseStatement>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCeilEntry">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Gets the entry corresponding to the specified key; if no such entry&#xA;     * exists, returns the entry for the least key greater than the specified&#xA;     * key; if no such entry exists (i.e., the greatest key in the Tree is less&#xA;     * than the specified key), returns &lt;tt>null&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cmp">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="parent">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.45">
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="ch">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.45">
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:WhileLoop">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.1/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="expressions:AssignmentExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                            <assignmentOperator xsi:type="operators:Assignment"/>
                            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable">
                              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                            </value>
                          </expression>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </children>
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.1/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                          </children>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.2/@statement/@statements.1/@elseStatement/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                    </statements>
                  </elseStatement>
                </statements>
              </elseStatement>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPrecedingEntry">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the entry for the greatest key less than the specified key; if&#xA;     * no such entry exists (i.e., the least key in the Tree is greater than&#xA;     * the specified key), returns &lt;tt>null&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cmp">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                  </children>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
                <elseStatement xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                  </children>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="parent">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.45">
                          <typeArguments xsi:type="generics:QualifiedTypeArgument">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                            </typeReference>
                          </typeArguments>
                          <typeArguments xsi:type="generics:QualifiedTypeArgument">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                            </typeReference>
                          </typeArguments>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="ch">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.45">
                          <typeArguments xsi:type="generics:QualifiedTypeArgument">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                            </typeReference>
                          </typeArguments>
                          <typeArguments xsi:type="generics:QualifiedTypeArgument">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                            </typeReference>
                          </typeArguments>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:WhileLoop">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.1/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:ConditionalAndExpression">
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </children>
                      <children xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.1/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                        </children>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.2/@statement/@statements.1/@elseStatement/@statements.0/@elseStatement/@statements.0/@variable"/>
                  </statements>
                </elseStatement>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="key">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.23/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="K"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="e">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.23/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the key corresponding to the specified Entry.  Throw&#xA;     * NoSuchElementException if the Entry is &lt;tt>null&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0">
          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="put">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Associates the specified value with the specified key in this map.&#xA;     * If the map previously contained a mapping for this key, the old&#xA;     * value is replaced.&#xA;     *&#xA;     * @param key key with which the specified value is to be associated.&#xA;     * @param value value to be associated with the specified key.&#xA;     *&#xA;     * @return previous value associated with specified key, or &lt;tt>null&lt;/tt>&#xA;     *         if there was no mapping for key.  A &lt;tt>null&lt;/tt> return can&#xA;     *         also indicate that the map previously associated &lt;tt>null&lt;/tt>&#xA;     *         with the specified key.&#xA;     * @throws    ClassCastException key cannot be compared with the keys&#xA;     *            currently in the map.&#xA;     * @throws NullPointerException key is &lt;tt>null&lt;/tt> and this map uses&#xA;     *         natural order, or its comparator does not tolerate&#xA;     *         &lt;tt>null&lt;/tt> keys.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.45">
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="cmp">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.9">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
                  </next>
                </returnValue>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.2/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.45">
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                                </typeReference>
                              </typeArguments>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                                </typeReference>
                              </typeArguments>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                        </arguments>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="literals:NullLiteral"/>
                    </statements>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <comments>// cmp > 0</comments>
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                        </value>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                    </children>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.45">
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                                </typeReference>
                              </typeArguments>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                                </typeReference>
                              </typeArguments>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@parameters.1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.24/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                        </arguments>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="literals:NullLiteral"/>
                    </statements>
                  </elseStatement>
                </statements>
              </elseStatement>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="remove">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the mapping for this key from this TreeMap if present.&#xA;     *&#xA;     * @param  key key for which mapping should be removed&#xA;     * @return previous value associated with specified key, or &lt;tt>null&lt;/tt>&#xA;     *         if there was no mapping for key.  A &lt;tt>null&lt;/tt> return can&#xA;     *         also indicate that the map previously associated&#xA;     *         &lt;tt>null&lt;/tt> with the specified key.&#xA;     *&#xA;     * @throws    ClassCastException key cannot be compared with the keys&#xA;     *            currently in the map.&#xA;     * @throws NullPointerException key is &lt;tt>null&lt;/tt> and this map uses&#xA;     *         natural order, or its comparator does not tolerate&#xA;     *         &lt;tt>null&lt;/tt> keys.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="oldValue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clear">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes all mappings from this TreeMap.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <operator xsi:type="operators:PlusPlus"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a shallow copy of this &lt;tt>TreeMap&lt;/tt> instance. (The keys and&#xA;     * values themselves are not cloned.)&#xA;     *&#xA;     * @return a shallow copy of this Map.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="clone">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0">
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="AbstractMap.class.xmi#//@classifiers.0/@members.18"/>
                </next>
                <self xsi:type="literals:Super"/>
              </child>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/InternalError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/CloneNotSupportedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
            <comments>// Put clone into &quot;virgin&quot; state (except for comparator)</comments>
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <comments>// Initialize clone with our mappings</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Set.class.xmi#//@classifiers.0/@members.3"/>
                </next>
              </arguments>
              <arguments xsi:type="literals:NullLiteral"/>
              <arguments xsi:type="literals:NullLiteral"/>
            </next>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="cannotHappen">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>io</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <parameter name="cannotHappen">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.27/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="entrySet">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Map</namespaces>
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Views</comments>
        <comments>/**&#xA;     * This field is initialized to contain an instance of the entry set&#xA;     * view the first time this view is requested.  The view is stateless,&#xA;     * so there's no reason to create more than one.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:ClassMethod" name="keySet">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a Set view of the keys contained in this map.  The set's&#xA;     * iterator will return the keys in ascending order.  The map is backed by&#xA;     * this &lt;tt>TreeMap&lt;/tt> instance, so changes to this map are reflected in&#xA;     * the Set, and vice-versa.  The Set supports element removal, which&#xA;     * removes the corresponding mapping from the map, via the&#xA;     * &lt;tt>Iterator.remove&lt;/tt>, &lt;tt>Set.remove&lt;/tt>, &lt;tt>removeAll&lt;/tt>,&#xA;     * &lt;tt>retainAll&lt;/tt>, and &lt;tt>clear&lt;/tt> operations.  It does not support&#xA;     * the &lt;tt>add&lt;/tt> or &lt;tt>addAll&lt;/tt> operations.&#xA;     *&#xA;     * @return a set view of the keys contained in this TreeMap.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="AbstractMap.class.xmi#//@classifiers.0/@members.0"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Class" href="AbstractSet.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <anonymousClass>
                  <members xsi:type="members:ClassMethod" name="iterator">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <typeArguments xsi:type="generics:QualifiedTypeArgument">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                          </typeReference>
                        </typeArguments>
                        <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.38"/>
                        </typeReference>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="size">
                    <typeReference xsi:type="types:Int"/>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
                        <next xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                          <self xsi:type="literals:This"/>
                        </next>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="contains">
                    <typeReference xsi:type="types:Boolean"/>
                    <parameters xsi:type="parameters:OrdinaryParameter" name="o">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameters>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@parameters.0"/>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="remove">
                    <typeReference xsi:type="types:Boolean"/>
                    <parameters xsi:type="parameters:OrdinaryParameter" name="o">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameters>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="oldSize">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
                        <next xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@parameters.0"/>
                          </next>
                          <self xsi:type="literals:This"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@statements.0/@variable"/>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="clear">
                    <typeReference xsi:type="types:Void"/>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
                        <next xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.26"/>
                          <self xsi:type="literals:This"/>
                        </next>
                      </expression>
                    </statements>
                  </members>
                </anonymousClass>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="AbstractMap.class.xmi#//@classifiers.0/@members.0"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="AbstractMap.class.xmi#//@classifiers.0/@members.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="values">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a collection view of the values contained in this map.  The&#xA;     * collection's iterator will return the values in the order that their&#xA;     * corresponding keys appear in the tree.  The collection is backed by&#xA;     * this &lt;tt>TreeMap&lt;/tt> instance, so changes to this map are reflected in&#xA;     * the collection, and vice-versa.  The collection supports element&#xA;     * removal, which removes the corresponding mapping from the map through&#xA;     * the &lt;tt>Iterator.remove&lt;/tt>, &lt;tt>Collection.remove&lt;/tt>,&#xA;     * &lt;tt>removeAll&lt;/tt>, &lt;tt>retainAll&lt;/tt>, and &lt;tt>clear&lt;/tt> operations.&#xA;     * It does not support the &lt;tt>add&lt;/tt> or &lt;tt>addAll&lt;/tt> operations.&#xA;     *&#xA;     * @return a collection view of the values contained in this map.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference">
                <target xsi:type="members:Field" href="AbstractMap.class.xmi#//@classifiers.0/@members.1"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Class" href="AbstractCollection.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <anonymousClass>
                  <members xsi:type="members:ClassMethod" name="iterator">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <typeArguments xsi:type="generics:QualifiedTypeArgument">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                          </typeReference>
                        </typeArguments>
                        <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.39"/>
                        </typeReference>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="size">
                    <typeReference xsi:type="types:Int"/>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
                        <next xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                          <self xsi:type="literals:This"/>
                        </next>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="contains">
                    <typeReference xsi:type="types:Boolean"/>
                    <parameters xsi:type="parameters:OrdinaryParameter" name="o">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameters>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:ForLoop">
                      <statement xsi:type="statements:Condition">
                        <statement xsi:type="statements:Return">
                          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                        </statement>
                        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.0/@init">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.8"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@parameters.0"/>
                        </condition>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.0/@init"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </condition>
                      <init xsi:type="variables:LocalVariable" name="e">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.45">
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
                      </init>
                      <updates xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.0/@init"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.0/@init"/>
                        </value>
                      </updates>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="literals:BooleanLiteral"/>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="remove">
                    <typeReference xsi:type="types:Boolean"/>
                    <parameters xsi:type="parameters:OrdinaryParameter" name="o">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameters>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:ForLoop">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Block">
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@statements.0/@init"/>
                              </expression>
                            </statements>
                            <statements xsi:type="statements:Return">
                              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                            </statements>
                          </statement>
                          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@statements.0/@init">
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.8"/>
                            </arguments>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@parameters.0"/>
                          </condition>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@statements.0/@init"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </condition>
                      <init xsi:type="variables:LocalVariable" name="e">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.45">
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
                      </init>
                      <updates xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@statements.0/@init"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.3/@statements.0/@init"/>
                        </value>
                      </updates>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="literals:BooleanLiteral"/>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="clear">
                    <typeReference xsi:type="types:Void"/>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
                        <next xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.26"/>
                          <self xsi:type="literals:This"/>
                        </next>
                      </expression>
                    </statements>
                  </members>
                </anonymousClass>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference">
            <target xsi:type="members:Field" href="AbstractMap.class.xmi#//@classifiers.0/@members.1"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="AbstractMap.class.xmi#//@classifiers.0/@members.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="entrySet">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Map</namespaces>
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a set view of the mappings contained in this map.  The set's&#xA;     * iterator returns the mappings in ascending key order.  Each element in&#xA;     * the returned set is a &lt;tt>Map.Entry&lt;/tt>.  The set is backed by this&#xA;     * map, so changes to this map are reflected in the set, and vice-versa.&#xA;     * The set supports element removal, which removes the corresponding&#xA;     * mapping from the TreeMap, through the &lt;tt>Iterator.remove&lt;/tt>,&#xA;     * &lt;tt>Set.remove&lt;/tt>, &lt;tt>removeAll&lt;/tt>, &lt;tt>retainAll&lt;/tt> and&#xA;     * &lt;tt>clear&lt;/tt> operations.  It does not support the &lt;tt>add&lt;/tt> or&#xA;     * &lt;tt>addAll&lt;/tt> operations.&#xA;     *&#xA;     * @return a set view of the mappings contained in this map.&#xA;     * @see Map.Entry&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>Map</namespaces>
                        <classifierReferences>
                          <typeArguments xsi:type="generics:QualifiedTypeArgument">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                            </typeReference>
                          </typeArguments>
                          <typeArguments xsi:type="generics:QualifiedTypeArgument">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                            </typeReference>
                          </typeArguments>
                          <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Class" href="AbstractSet.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <anonymousClass>
                  <members xsi:type="members:ClassMethod" name="iterator">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <typeArguments xsi:type="generics:QualifiedTypeArgument">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <namespaces>Map</namespaces>
                            <classifierReferences>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                                </typeReference>
                              </typeArguments>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                                </typeReference>
                              </typeArguments>
                              <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                        </typeArguments>
                        <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.37"/>
                        </typeReference>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="contains">
                    <typeReference xsi:type="types:Boolean"/>
                    <parameters xsi:type="parameters:OrdinaryParameter" name="o">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameters>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Return">
                        <returnValue xsi:type="literals:BooleanLiteral"/>
                      </statement>
                      <condition xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:InstanceOfExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <namespaces>Map</namespaces>
                              <classifierReferences>
                                <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.1/@parameters.0"/>
                          </expression>
                        </child>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="entry">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <namespaces>Map</namespaces>
                          <classifierReferences>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                            <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <namespaces>Map</namespaces>
                            <classifierReferences>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                                </typeReference>
                              </typeArguments>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                                </typeReference>
                              </typeArguments>
                              <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.1/@parameters.0"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="value">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                        </typeReference>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.1/@statements.1/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="p">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.45">
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.1/@statements.1/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                          </arguments>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.1/@statements.3/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </children>
                        <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.1/@statements.3/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.8"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.1/@statements.2/@variable"/>
                        </children>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="remove">
                    <typeReference xsi:type="types:Boolean"/>
                    <parameters xsi:type="parameters:OrdinaryParameter" name="o">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                    </parameters>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Return">
                        <returnValue xsi:type="literals:BooleanLiteral"/>
                      </statement>
                      <condition xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Negate"/>
                        <child xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:InstanceOfExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <namespaces>Map</namespaces>
                              <classifierReferences>
                                <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@parameters.0"/>
                          </expression>
                        </child>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="entry">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <namespaces>Map</namespaces>
                          <classifierReferences>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                            <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <namespaces>Map</namespaces>
                            <classifierReferences>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                                </typeReference>
                              </typeArguments>
                              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                                </typeReference>
                              </typeArguments>
                              <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@parameters.0"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="value">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                        </typeReference>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.1/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                          </next>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="p">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.45">
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                              </typeReference>
                            </typeArguments>
                            <typeArguments xsi:type="generics:QualifiedTypeArgument">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                              </typeReference>
                            </typeArguments>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.1/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                            </next>
                          </arguments>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.3/@variable"/>
                          </expression>
                        </statements>
                        <statements xsi:type="statements:Return">
                          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.3/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </children>
                        <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.3/@variable">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.8"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@statements.0/@statement/@statements.0/@expression/@value/@anonymousClass/@members.2/@statements.2/@variable"/>
                        </children>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="literals:BooleanLiteral"/>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="size">
                    <typeReference xsi:type="types:Int"/>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:Return">
                      <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
                        <next xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.10"/>
                          <self xsi:type="literals:This"/>
                        </next>
                      </returnValue>
                    </statements>
                  </members>
                  <members xsi:type="members:ClassMethod" name="clear">
                    <typeReference xsi:type="types:Void"/>
                    <annotationsAndModifiers xsi:type="modifiers:Public"/>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
                        <next xsi:type="references:SelfReference">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.26"/>
                          <self xsi:type="literals:This"/>
                        </next>
                      </expression>
                    </statements>
                  </members>
                </anonymousClass>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="subMap">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fromKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="toKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a view of the portion of this map whose keys range from&#xA;     * &lt;tt>fromKey&lt;/tt>, inclusive, to &lt;tt>toKey&lt;/tt>, exclusive.  (If&#xA;     * &lt;tt>fromKey&lt;/tt> and &lt;tt>toKey&lt;/tt> are equal, the returned sorted map&#xA;     * is empty.)  The returned sorted map is backed by this map, so changes&#xA;     * in the returned sorted map are reflected in this map, and vice-versa.&#xA;     * The returned sorted map supports all optional map operations.&lt;p>&#xA;     *&#xA;     * The sorted map returned by this method will throw an&#xA;     * &lt;tt>IllegalArgumentException&lt;/tt> if the user attempts to insert a key&#xA;     * less than &lt;tt>fromKey&lt;/tt> or greater than or equal to&#xA;     * &lt;tt>toKey&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Note: this method always returns a &lt;i>half-open range&lt;/i> (which&#xA;     * includes its low endpoint but not its high endpoint).  If you need a&#xA;     * &lt;i>closed range&lt;/i> (which includes both endpoints), and the key type&#xA;     * allows for calculation of the successor a given key, merely request the&#xA;     * subrange from &lt;tt>lowEndpoint&lt;/tt> to &lt;tt>successor(highEndpoint)&lt;/tt>.&#xA;     * For example, suppose that &lt;tt>m&lt;/tt> is a sorted map whose keys are&#xA;     * strings.  The following idiom obtains a view containing all of the&#xA;     * key-value mappings in &lt;tt>m&lt;/tt> whose keys are between &lt;tt>low&lt;/tt>&#xA;     * and &lt;tt>high&lt;/tt>, inclusive:&#xA;     *             &lt;pre>    SortedMap sub = m.submap(low, high+&quot;\0&quot;);&lt;/pre>&#xA;     * A similar technique can be used to generate an &lt;i>open range&lt;/i> (which&#xA;     * contains neither endpoint).  The following idiom obtains a view&#xA;     * containing all of the key-value mappings in &lt;tt>m&lt;/tt> whose keys are&#xA;     * between &lt;tt>low&lt;/tt> and &lt;tt>high&lt;/tt>, exclusive:&#xA;     *             &lt;pre>    SortedMap sub = m.subMap(low+&quot;\0&quot;, high);&lt;/pre>&#xA;     *&#xA;     * @param fromKey low endpoint (inclusive) of the subMap.&#xA;     * @param toKey high endpoint (exclusive) of the subMap.&#xA;     *&#xA;     * @return a view of the portion of this map whose keys range from&#xA;     *                &lt;tt>fromKey&lt;/tt>, inclusive, to &lt;tt>toKey&lt;/tt>, exclusive.&#xA;     *&#xA;     * @throws ClassCastException if &lt;tt>fromKey&lt;/tt> and &lt;tt>toKey&lt;/tt>&#xA;     *         cannot be compared to one another using this map's comparator&#xA;     *         (or, if the map has no comparator, using natural ordering).&#xA;     * @throws IllegalArgumentException if &lt;tt>fromKey&lt;/tt> is greater than&#xA;     *         &lt;tt>toKey&lt;/tt>.&#xA;     * @throws NullPointerException if &lt;tt>fromKey&lt;/tt> or &lt;tt>toKey&lt;/tt> is&#xA;     *               &lt;tt>null&lt;/tt> and this map uses natural order, or its&#xA;     *               comparator does not tolerate &lt;tt>null&lt;/tt> keys.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.35"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="headMap">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="toKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a view of the portion of this map whose keys are strictly less&#xA;     * than &lt;tt>toKey&lt;/tt>.  The returned sorted map is backed by this map, so&#xA;     * changes in the returned sorted map are reflected in this map, and&#xA;     * vice-versa.  The returned sorted map supports all optional map&#xA;     * operations.&lt;p>&#xA;     *&#xA;     * The sorted map returned by this method will throw an&#xA;     * &lt;tt>IllegalArgumentException&lt;/tt> if the user attempts to insert a key&#xA;     * greater than or equal to &lt;tt>toKey&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Note: this method always returns a view that does not contain its&#xA;     * (high) endpoint.  If you need a view that does contain this endpoint,&#xA;     * and the key type allows for calculation of the successor a given key,&#xA;     * merely request a headMap bounded by &lt;tt>successor(highEndpoint)&lt;/tt>.&#xA;     * For example, suppose that suppose that &lt;tt>m&lt;/tt> is a sorted map whose&#xA;     * keys are strings.  The following idiom obtains a view containing all of&#xA;     * the key-value mappings in &lt;tt>m&lt;/tt> whose keys are less than or equal&#xA;     * to &lt;tt>high&lt;/tt>:&#xA;     * &lt;pre>&#xA;     *     SortedMap head = m.headMap(high+&quot;\0&quot;);&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @param toKey high endpoint (exclusive) of the headMap.&#xA;     * @return a view of the portion of this map whose keys are strictly&#xA;     *                less than &lt;tt>toKey&lt;/tt>.&#xA;     *&#xA;     * @throws ClassCastException if &lt;tt>toKey&lt;/tt> is not compatible&#xA;     *         with this map's comparator (or, if the map has no comparator,&#xA;     *         if &lt;tt>toKey&lt;/tt> does not implement &lt;tt>Comparable&lt;/tt>).&#xA;     * @throws IllegalArgumentException if this map is itself a subMap,&#xA;     *         headMap, or tailMap, and &lt;tt>toKey&lt;/tt> is not within the&#xA;     *         specified range of the subMap, headMap, or tailMap.&#xA;     * @throws NullPointerException if &lt;tt>toKey&lt;/tt> is &lt;tt>null&lt;/tt> and&#xA;     *               this map uses natural order, or its comparator does not&#xA;     *               tolerate &lt;tt>null&lt;/tt> keys.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.35"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          <arguments xsi:type="literals:BooleanLiteral" value="true"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="tailMap">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fromKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a view of the portion of this map whose keys are greater than&#xA;     * or equal to &lt;tt>fromKey&lt;/tt>.  The returned sorted map is backed by&#xA;     * this map, so changes in the returned sorted map are reflected in this&#xA;     * map, and vice-versa.  The returned sorted map supports all optional map&#xA;     * operations.&lt;p>&#xA;     *&#xA;     * The sorted map returned by this method will throw an&#xA;     * &lt;tt>IllegalArgumentException&lt;/tt> if the user attempts to insert a key&#xA;     * less than &lt;tt>fromKey&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Note: this method always returns a view that contains its (low)&#xA;     * endpoint.  If you need a view that does not contain this endpoint, and&#xA;     * the element type allows for calculation of the successor a given value,&#xA;     * merely request a tailMap bounded by &lt;tt>successor(lowEndpoint)&lt;/tt>.&#xA;     * For example, suppose that &lt;tt>m&lt;/tt> is a sorted map whose keys&#xA;     * are strings.  The following idiom obtains a view containing&#xA;     * all of the key-value mappings in &lt;tt>m&lt;/tt> whose keys are strictly&#xA;     * greater than &lt;tt>low&lt;/tt>: &lt;pre>&#xA;     *     SortedMap tail = m.tailMap(low+&quot;\0&quot;);&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @param fromKey low endpoint (inclusive) of the tailMap.&#xA;     * @return a view of the portion of this map whose keys are greater&#xA;     *                than or equal to &lt;tt>fromKey&lt;/tt>.&#xA;     * @throws ClassCastException if &lt;tt>fromKey&lt;/tt> is not compatible&#xA;     *         with this map's comparator (or, if the map has no comparator,&#xA;     *         if &lt;tt>fromKey&lt;/tt> does not implement &lt;tt>Comparable&lt;/tt>).&#xA;     * @throws IllegalArgumentException if this map is itself a subMap,&#xA;     *         headMap, or tailMap, and &lt;tt>fromKey&lt;/tt> is not within the&#xA;     *         specified range of the subMap, headMap, or tailMap.&#xA;     * @throws NullPointerException if &lt;tt>fromKey&lt;/tt> is &lt;tt>null&lt;/tt> and&#xA;     *               this map uses natural order, or its comparator does not&#xA;     *               tolerate &lt;tt>null&lt;/tt> keys.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.35"/>
          </typeReference>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          <arguments xsi:type="literals:BooleanLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="SubMap">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalLongLiteral" decimalValue="6520786458950516097"/>
        </initialValue>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="fromStart">
        <initialValue xsi:type="literals:BooleanLiteral"/>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * fromKey is significant only if fromStart is false.  Similarly,&#xA;         * toKey is significant only if toStart is false.&#xA;         */</comments>
        </annotationsAndModifiers>
        <additionalFields name="toEnd">
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </additionalFields>
      </members>
      <members xsi:type="members:Field" name="fromKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <additionalFields name="toKey"/>
      </members>
      <members xsi:type="members:Constructor" name="SubMap">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="fromKey > toKey"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.3/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.3/@parameters.1"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.3/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.3/@parameters.1"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="fromKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="toKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:Constructor" name="SubMap">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.4/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.4/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// Type-check key</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.4/@parameters.0"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.4/@parameters.1"/>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.4/@parameters.0"/>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="headMap">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
      </members>
      <members xsi:type="members:Constructor" name="SubMap">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.5/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.5/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.5/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.5/@parameters.3"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="fromStart">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="fromKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="toEnd">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="toKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="isEmpty">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.13">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="Set.class.xmi#//@classifiers.0/@members.1"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="containsKey">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.19">
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.7/@parameters.0"/>
              </arguments>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.7/@parameters.0"/>
                </next>
                <self xsi:type="literals:This"/>
              </next>
            </children>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="get">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.19">
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.8/@parameters.0"/>
              </arguments>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.8/@parameters.0"/>
              </next>
              <self xsi:type="literals:This"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="put">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="key out of range"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.19">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.9/@parameters.0"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
            <next xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.9/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.9/@parameters.1"/>
              </next>
              <self xsi:type="literals:This"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="comparator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:SuperTypeArgument">
              <superType xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </superType>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Comparator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="firstKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>TreeMap</namespaces>
              <classifierReferences target="//@classifiers.0/@members.45">
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                  </typeReference>
                </typeArguments>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
              <expressionIf xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
              <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
              </expressionElse>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="first">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.11/@statements.0/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="expressions:NestedExpression">
              <expression xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </expression>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.11/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.11/@statements.1/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="lastKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>TreeMap</namespaces>
              <classifierReferences target="//@classifiers.0/@members.45">
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                  </typeReference>
                </typeArguments>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:ConditionalExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
              <expressionIf xsi:type="references:MethodCall" target="//@classifiers.0/@members.47"/>
              <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
              </expressionElse>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="last">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.12/@statements.0/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="expressions:NestedExpression">
              <expression xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </expression>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.12/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.12/@statements.1/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:Field" name="entrySet">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.35/@members.15"/>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Set.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Transient"/>
      </members>
      <members xsi:type="members:ClassMethod" name="entrySet">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Set.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.13"/>
        </statements>
      </members>
      <members xsi:type="classifiers:Class" name="EntrySetView">
        <members xsi:type="members:Field" name="size">
          <initialValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
          <typeReference xsi:type="types:Int"/>
          <annotationsAndModifiers xsi:type="modifiers:Private"/>
          <annotationsAndModifiers xsi:type="modifiers:Transient"/>
          <additionalFields name="sizeModCount"/>
        </members>
        <members xsi:type="members:ClassMethod" name="size">
          <typeReference xsi:type="types:Int"/>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.0/@additionalFields.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0">
                    <next xsi:type="references:SelfReference">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                      <self xsi:type="literals:This"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.15/@members.5"/>
                </variable>
              </statements>
              <statements xsi:type="statements:WhileLoop">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.0"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.1/@statements.0/@statement/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.1/@statements.0/@statement/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.0"/>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.0/@additionalFields.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
                  <next xsi:type="references:SelfReference">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                    <self xsi:type="literals:This"/>
                  </next>
                </children>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.0"/>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="isEmpty">
          <typeReference xsi:type="types:Boolean"/>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.15/@members.5">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </child>
            </returnValue>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="contains">
          <typeReference xsi:type="types:Boolean"/>
          <parameters xsi:type="parameters:OrdinaryParameter" name="o">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameters>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>Map</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@parameters.0"/>
                </expression>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="entry">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>Map</namespaces>
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="key">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.19">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@statements.2/@variable"/>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="node">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>TreeMap</namespaces>
                <classifierReferences target="//@classifiers.0/@members.45"/>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@statements.2/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@statements.4/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@statements.4/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.8"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.3/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
              </children>
            </returnValue>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="remove">
          <typeReference xsi:type="types:Boolean"/>
          <parameters xsi:type="parameters:OrdinaryParameter" name="o">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameters>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>Map</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@parameters.0"/>
                </expression>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="entry">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>Map</namespaces>
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="key">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.19">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@statements.2/@variable"/>
              </child>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="node">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>TreeMap</namespaces>
                <classifierReferences target="//@classifiers.0/@members.45">
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@statements.2/@variable"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@statements.4/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@statements.4/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@statements.4/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.8"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.15/@members.4/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="iterator">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>Map</namespaces>
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.40"/>
              </typeReference>
              <arguments xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
                  <expressionIf xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
                  <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
                  </expressionElse>
                </expression>
              </arguments>
              <arguments xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
                  <expressionIf xsi:type="literals:NullLiteral"/>
                  <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
                  </expressionElse>
                </expression>
              </arguments>
            </returnValue>
          </statements>
        </members>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <extends xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="AbstractSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </extends>
      </members>
      <members xsi:type="members:ClassMethod" name="subMap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="fromKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="toKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="fromKey out of range"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.20">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.16/@parameters.0"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="toKey out of range"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.20">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.16/@parameters.1"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.35"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.16/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.16/@parameters.1"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="headMap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="toKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="toKey out of range"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.20">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.17/@parameters.0"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.35"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.17/@parameters.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="tailMap">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="fromKey">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="fromKey out of range"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.20">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.18/@parameters.0"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.35"/>
            </typeReference>
            <arguments xsi:type="literals:BooleanLiteral"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.18/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="inRange">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.19/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </children>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.19/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </children>
              </expression>
            </children>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="inRange2">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// This form allows the high endpoint (as well as all legit keys)</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1"/>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.20/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </children>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.1/@additionalFields.0"/>
                <children xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.20/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@members.2/@additionalFields.0"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThanOrEqual"/>
                </children>
              </expression>
            </children>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <implements xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="AbstractMap.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="PrivateEntryIterator">
      <typeParameters name="T"/>
      <members xsi:type="members:Field" name="expectedModCount">
        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0">
          <next xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <self xsi:type="literals:This"/>
          </next>
        </initialValue>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="lastReturned">
        <initialValue xsi:type="literals:NullLiteral"/>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Constructor" name="PrivateEntryIterator">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.46"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:Constructor" name="PrivateEntryIterator">
        <comments>// Used by SubMapEntryIterator</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.4/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="first">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="hasNext">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="nextEntry">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="ConcurrentModificationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="remove">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/IllegalStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="ConcurrentModificationException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.57">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.0"/>
            <operator xsi:type="operators:PlusPlus"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:NullLiteral"/>
          </expression>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * TreeMap Iterator.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.36/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="classifiers:Class" name="EntryIterator">
      <members xsi:type="members:ClassMethod" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Map</namespaces>
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36/@members.6"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.36">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Map</namespaces>
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="KeyIterator">
      <members xsi:type="members:ClassMethod" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36/@members.6">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.36">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="ValueIterator">
      <members xsi:type="members:ClassMethod" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36/@members.6">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.36">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="classifiers:Class" name="SubMapEntryIterator">
      <members xsi:type="members:Field" name="firstExcludedKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="SubMapEntryIterator">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1/@parameters.0"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1/@parameters.1"/>
                  <children xsi:type="literals:NullLiteral"/>
                </child>
                <expressionIf xsi:type="literals:NullLiteral"/>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1/@parameters.1">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                </expressionElse>
              </expression>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="first">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="firstExcluded">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="hasNext">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
            </children>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>Map</namespaces>
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.36/@members.6"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.36">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Map</namespaces>
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="members:ClassMethod" name="compare">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="k1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="k2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Compares two keys using the correct comparison method for this TreeMap.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../lang/Comparable.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.1"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0">
                          <comments>/*-*/</comments>
                        </classifierReferences>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Interface" href="../lang/Comparable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
              </expression>
            </expressionIf>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="Comparator.class.xmi#//@classifiers.0/@members.0"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
                </arguments>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.1"/>
                </arguments>
              </next>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="valEquals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Test two values  for equality.  Differs from o1.equals(o2) only in&#xA;     * that it copes with &lt;tt>null&lt;/tt> o1 properly.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </expressionIf>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@parameters.1"/>
              </next>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="RED">
      <initialValue xsi:type="literals:BooleanLiteral"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="BLACK">
      <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="classifiers:Class" name="Entry">
      <typeParameters name="K"/>
      <typeParameters name="V"/>
      <members xsi:type="members:Field" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="left">
        <initialValue xsi:type="literals:NullLiteral"/>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="right">
        <initialValue xsi:type="literals:NullLiteral"/>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="parent">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:Field" name="color">
        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
        <typeReference xsi:type="types:Boolean"/>
      </members>
      <members xsi:type="members:Constructor" name="Entry">
        <comments>/**&#xA;         * Make a new cell with given key, value, and parent, and with&#xA;         * &lt;tt>null&lt;/tt> child links, and BLACK color.&#xA;         */</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.6/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.6/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.6/@parameters.2"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="parent">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="getKey">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the key.&#xA;         *&#xA;         * @return the key.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Returns the value associated with the key.&#xA;         *&#xA;         * @return the value associated with the key.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="setValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Replaces the value currently associated with the key with the given&#xA;         * value.&#xA;         *&#xA;         * @return the value associated with the key before this method was&#xA;         *           called.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="oldValue">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              <self xsi:type="literals:This"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.9/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.9/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="equals">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="o">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>Map</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.10/@parameters.0"/>
              </expression>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>Map</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.10/@parameters.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.10/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                </next>
              </arguments>
            </children>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.42">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.10/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </arguments>
            </children>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hashCode">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="keyHash">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
                  <children xsi:type="literals:NullLiteral"/>
                </child>
                <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.11"/>
                </expressionElse>
              </expression>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="valueHash">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
                  <children xsi:type="literals:NullLiteral"/>
                </child>
                <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.45/@members.11"/>
                </expressionElse>
              </expression>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:ExclusiveOrExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.11/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.11/@statements.1/@variable"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
            <children xsi:type="references:StringReference" value="="/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
            <additiveOperators xsi:type="operators:Addition"/>
            <additiveOperators xsi:type="operators:Addition"/>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Node in the Tree.  Doubles as a means to pass key-value pairs back to&#xA;     * user (see Map.Entry).&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <namespaces>Map</namespaces>
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.45/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="members:ClassMethod" name="firstEntry">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the first Entry in the TreeMap (according to the TreeMap's&#xA;     * key-sort function).  Returns null if the TreeMap is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="lastEntry">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the last Entry in the TreeMap (according to the TreeMap's&#xA;     * key-sort function).  Returns null if the TreeMap is empty.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="successor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns the successor of the specified Entry, or null if no such.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.45">
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@statement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.45">
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="ch">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.45">
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:WhileLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                  </children>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@elseStatement/@elseStatement/@statements.0/@variable"/>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="colorOf">
      <typeReference xsi:type="types:Boolean"/>
      <typeParameters name="K"/>
      <typeParameters name="V"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.49/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.49/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Balancing operations.&#xA;     *&#xA;     * Implementations of rebalancings during insertion and deletion are&#xA;     * slightly different than the CLR version.  Rather than using dummy&#xA;     * nilnodes, we use a set of accessors that deal properly with null.  They&#xA;     * are used to avoid messiness surrounding nullness checks in the main&#xA;     * algorithms.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parentOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.50/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.50/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <typeParameters name="K"/>
      <typeParameters name="V"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.50/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.50/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </child>
            <expressionIf xsi:type="literals:NullLiteral"/>
            <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
            </expressionElse>
          </expression>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setColor">
      <typeReference xsi:type="types:Void"/>
      <typeParameters name="K"/>
      <typeParameters name="V"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.51/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.51/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.1"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="leftOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.52/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.52/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <typeParameters name="K"/>
      <typeParameters name="V"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.52/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.52/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="literals:NullLiteral"/>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="rightOf">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.53/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.53/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <typeParameters name="K"/>
      <typeParameters name="V"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.53/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.53/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </child>
          <expressionIf xsi:type="literals:NullLiteral"/>
          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
          </expressionElse>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="rotateLeft">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** From CLR **/</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="r">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              </next>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
            </expression>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@statements.0/@variable"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="rotateRight">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** From CLR **/</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              </next>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </next>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable"/>
            </expression>
          </elseStatement>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@statements.0/@variable"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="fixAfterInsertion">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** From CLR **/</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
        </expression>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="y">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.45">
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                        </typeReference>
                      </typeArguments>
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                        </typeReference>
                      </typeArguments>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      </arguments>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                          </arguments>
                        </arguments>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </children>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                  </arguments>
                </arguments>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="y">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.45">
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                        </typeReference>
                      </typeArguments>
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                        </typeReference>
                      </typeArguments>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      </arguments>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@statements.1/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </children>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                          </arguments>
                        </arguments>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
                        </arguments>
                      </children>
                      <children xsi:type="literals:NullLiteral"/>
                    </condition>
                  </statements>
                </elseStatement>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
              </next>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="deleteEntry">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Delete node p, and then rebalance the tree.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// If strictly internal, copy successor's element to p and then make p</comments>
        <comments>// point to successor.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="s">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45">
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@statement/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@statement/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.1"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.1/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="replacement">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <comments>// p has 2 children</comments>
              <comments>// Start fixup at replacement node, if it exists.</comments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </child>
              <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              </expressionIf>
              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
              </expressionElse>
            </expression>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.2/@variable">
                <comments>// Link replacement to parent</comments>
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.2/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                    </next>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.2/@variable"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                  </next>
                </children>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                    </next>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.2/@variable"/>
                </expression>
              </elseStatement>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <comments>// Null out links so they are OK to use by fixAfterDeletion.</comments>
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:NullLiteral"/>
                </value>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <comments>// Fix replacement</comments>
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.2/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
                  <comments>// return if we are the only node.</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <comments>//  No children. Use self as phantom replacement and unlink.</comments>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.58">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                        </next>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:NullLiteral"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
                      </next>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                          </next>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:NullLiteral"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
                        </next>
                      </children>
                    </condition>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
          </elseStatement>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="fixAfterDeletion">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="x">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.45">
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
              </typeReference>
            </typeArguments>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** From CLR **/</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sib">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.45">
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                        </typeReference>
                      </typeArguments>
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                        </typeReference>
                      </typeArguments>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </arguments>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </arguments>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                            </arguments>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                        </arguments>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                        </arguments>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                </arguments>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sib">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.45">
                      <comments>// symmetric</comments>
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                        </typeReference>
                      </typeArguments>
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                        </typeReference>
                      </typeArguments>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                        </arguments>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      </arguments>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      </arguments>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.53">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                          </arguments>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.54">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                            </arguments>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                        </arguments>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                        <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                        </arguments>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@statements.0/@statement/@statements.0/@elseStatement/@statements.0/@variable"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.55">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="919286545866124006"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="writeObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Save the state of the &lt;tt>TreeMap&lt;/tt> instance to a stream (i.e.,&#xA;     * serialize it).&#xA;     *&#xA;     * @serialData The &lt;i>size&lt;/i> of the TreeMap (the number of key-value&#xA;     *             mappings) is emitted (int), followed by the key (Object)&#xA;     *             and value (Object) for each key-value mapping represented&#xA;     *             by the TreeMap. The key-value mappings are emitted in&#xA;     *             key-order (as determined by the TreeMap's Comparator,&#xA;     *             or by the keys' natural ordering if the TreeMap has no&#xA;     *             Comparator).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0">
          <comments>// Write out the Comparator and any hidden stuff</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.17"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0">
          <comments>// Write out size (number of Mappings)</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.37"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <comments>// Write out keys and values (alternating)</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="e">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@statements.2/@init">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.1"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@statements.2/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../io/ObjectOutputStream.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@statements.2/@statement/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60/@statements.2/@init">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.0"/>
          </next>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>Map</namespaces>
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                      </typeReference>
                    </typeArguments>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.31">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="Set.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </initialValue>
        </init>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readObject">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Reconstitute the &lt;tt>TreeMap&lt;/tt> instance from a stream (i.e.,&#xA;     * deserialize it).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0">
          <comments>// Read in the Comparator and any hidden stuff</comments>
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.19"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="size">
          <typeReference xsi:type="types:Int">
            <comments>// Read in size</comments>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.38"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@statements.1/@variable"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61/@parameters.0"/>
          <arguments xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="readTreeSet">
      <typeReference xsi:type="types:Void">
        <comments>/** Intended to be called only from TreeSet.readObject **/</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.0"/>
          <arguments xsi:type="literals:NullLiteral"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62/@parameters.2"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addAllForTreeSet">
      <typeReference xsi:type="types:Void">
        <comments>/** Intended to be called only from TreeSet.addAll **/</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="set">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>Map</namespaces>
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="SortedSet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
      </parameters>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="Set.class.xmi#//@classifiers.0/@members.0"/>
              </next>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="Set.class.xmi#//@classifiers.0/@members.3"/>
              </next>
            </arguments>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@parameters.1"/>
          </expression>
        </statements>
        <catcheBlocks>
          <parameter name="cannotHappen">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>io</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <parameter name="cannotHappen">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="buildFromSorted">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="size">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="it">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Linear time tree building algorithm from sorted data.  Can accept keys&#xA;     * and/or values from iterator or stream. This leads to too many&#xA;     * parameters, but seems better than alternatives.  The four formats&#xA;     * that this method accepts are:&#xA;     *&#xA;     *    1) An iterator of Map.Entries.  (it != null, defaultVal == null).&#xA;     *    2) An iterator of keys.         (it != null, defaultVal != null).&#xA;     *    3) A stream of alternating serialized keys and values.&#xA;     *                                   (it == null, defaultVal == null).&#xA;     *    4) A stream of serialized keys. (it == null, defaultVal != null).&#xA;     *&#xA;     * It is assumed that the comparator of the TreeMap is already set prior&#xA;     * to calling this method.&#xA;     *&#xA;     * @param size the number of keys (or key-value pairs) to be read from&#xA;     *        the iterator or stream.&#xA;     * @param it If non-null, new entries are created from entries&#xA;     *        or keys read from this iterator.&#xA;     * @param str If non-null, new entries are created from keys and&#xA;     *        possibly values read from this stream in serialized form.&#xA;     *        Exactly one of it and str should be non-null.&#xA;     * @param defaultVal if non-null, this default value is used for&#xA;     *        each value in the map.  If null, each value is read from&#xA;     *        iterator or stream, as described above.&#xA;     * @throws IOException propagated from stream reads. This cannot&#xA;     *         occur if str is null.&#xA;     * @throws ClassNotFoundException propagated from readObject.&#xA;     *         This cannot occur if str is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </arguments>
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.3"/>
          </value>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="buildFromSorted">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.45">
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
            </typeReference>
          </typeArguments>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="level">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="lo">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="hi">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="redLevel">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="it">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/ObjectInputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="defaultVal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Recursive &quot;helper method&quot; that does the real work of the&#xA;     * of the previous method.  Identically named parameters have&#xA;     * identical definitions.  Additional parameters are documented below.&#xA;     * It is assumed that the comparator and size fields of the TreeMap are&#xA;     * already set prior to calling this method.  (It ignores both fields.)&#xA;     *&#xA;     * @param level the current level of tree. Initial call should be 0.&#xA;     * @param lo the first element index of this subtree. Initial should be 0.&#xA;     * @param hi the last element index of this subtree.  Initial should be&#xA;     *              size-1.&#xA;     * @param redLevel the level at which nodes should be red.&#xA;     *        Must be equal to computeRedLevel for tree of this size.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <comments>/*&#xA;         * Strategy: The root is the middlemost element. To get to it, we&#xA;         * have to first recursively construct the entire left subtree,&#xA;         * so as to grab all of its elements. We can then proceed with right&#xA;         * subtree.&#xA;         *&#xA;         * The lo and hi arguments are the minimum and maximum&#xA;         * indices to pull out of the iterator or stream for current subtree.&#xA;         * They are not actually indexed, we just proceed sequentially,&#xA;         * ensuring that items are extracted in corresponding order.&#xA;         */</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.2"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="mid">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:MultiplicativeExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.2"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </expression>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <multiplicativeOperators xsi:type="operators:Division"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="left">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.1/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.3"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.6"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.1/@variable"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="key">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0">
              <comments>// extract key and/or value from iterator or stream</comments>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="entry">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>Map</namespaces>
                    <classifierReferences>
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                        </typeReference>
                      </typeArguments>
                      <typeArguments xsi:type="generics:QualifiedTypeArgument">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                        </typeReference>
                      </typeArguments>
                      <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>Map</namespaces>
                      <classifierReferences>
                        <typeArguments xsi:type="generics:QualifiedTypeArgument">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                          </typeReference>
                        </typeArguments>
                        <typeArguments xsi:type="generics:QualifiedTypeArgument">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                          </typeReference>
                        </typeArguments>
                        <target xsi:type="classifiers:Interface" href="Map$Entry.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.4">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.6/@statement/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.5/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.6/@statement/@statements.0/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="Map$Entry.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.6"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.4">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.1"/>
                      </next>
                    </child>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.5/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.6"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.4"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.4/@variable">
                <comments>// use stream</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.5">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                  </next>
                </child>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.5/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.6"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </child>
                  <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.6"/>
                  <expressionElse xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.5">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../io/ObjectInputStream.class.xmi#//@classifiers.0/@members.16"/>
                      </next>
                    </child>
                  </expressionElse>
                </expression>
              </value>
            </expression>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="middle">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.45">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.45">
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                  </typeReference>
                </typeArguments>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.4/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.5/@variable"/>
            <arguments xsi:type="literals:NullLiteral"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// color nodes in non-full bottommost level red</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.7/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.5"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.3"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.7/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.2"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.7/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="right">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.45">
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
                    </typeReference>
                  </typeArguments>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.1/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.2"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.4"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.5"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.6"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.7/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.3"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.10/@statement/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.10/@statement/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@members.4"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.7/@variable"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.1/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.2"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@statements.7/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="computeRedLevel">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sz">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Find the level down to which to assign all nodes BLACK.  This is the&#xA;     * last `full' level of the complete binary tree produced by&#xA;     * buildTree. The remaining nodes are colored RED. (This makes a `nice'&#xA;     * set of color assignments wrt future insertions.) This level number is&#xA;     * computed by finding the number of splits needed to reach the zeroeth&#xA;     * node.  (The answer is ~lg(N), but in any case must be computed by same&#xA;     * quick O(lg(N)) loop.)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="level">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@variable"/>
            <operator xsi:type="operators:PlusPlus"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.1/@init"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="m">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </initialValue>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="expressions:AdditiveExpression">
            <children xsi:type="expressions:MultiplicativeExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.1/@init"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
              <multiplicativeOperators xsi:type="operators:Division"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@statements.0/@variable"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Red-Black tree based implementation of the &lt;tt>SortedMap&lt;/tt> interface.&#xA; * This class guarantees that the map will be in ascending key order, sorted&#xA; * according to the &lt;i>natural order&lt;/i> for the key's class (see&#xA; * &lt;tt>Comparable&lt;/tt>), or by the comparator provided at creation time,&#xA; * depending on which constructor is used.&lt;p>&#xA; *&#xA; * This implementation provides guaranteed log(n) time cost for the&#xA; * &lt;tt>containsKey&lt;/tt>, &lt;tt>get&lt;/tt>, &lt;tt>put&lt;/tt> and &lt;tt>remove&lt;/tt>&#xA; * operations.  Algorithms are adaptations of those in Cormen, Leiserson, and&#xA; * Rivest's &lt;I>Introduction to Algorithms&lt;/I>.&lt;p>&#xA; *&#xA; * Note that the ordering maintained by a sorted map (whether or not an&#xA; * explicit comparator is provided) must be &lt;i>consistent with equals&lt;/i> if&#xA; * this sorted map is to correctly implement the &lt;tt>Map&lt;/tt> interface.  (See&#xA; * &lt;tt>Comparable&lt;/tt> or &lt;tt>Comparator&lt;/tt> for a precise definition of&#xA; * &lt;i>consistent with equals&lt;/i>.)  This is so because the &lt;tt>Map&lt;/tt>&#xA; * interface is defined in terms of the equals operation, but a map performs&#xA; * all key comparisons using its &lt;tt>compareTo&lt;/tt> (or &lt;tt>compare&lt;/tt>)&#xA; * method, so two keys that are deemed equal by this method are, from the&#xA; * standpoint of the sorted map, equal.  The behavior of a sorted map&#xA; * &lt;i>is&lt;/i> well-defined even if its ordering is inconsistent with equals; it&#xA; * just fails to obey the general contract of the &lt;tt>Map&lt;/tt> interface.&lt;p>&#xA; *&#xA; * &lt;b>Note that this implementation is not synchronized.&lt;/b> If multiple&#xA; * threads access a map concurrently, and at least one of the threads modifies&#xA; * the map structurally, it &lt;i>must&lt;/i> be synchronized externally.  (A&#xA; * structural modification is any operation that adds or deletes one or more&#xA; * mappings; merely changing the value associated with an existing key is not&#xA; * a structural modification.)  This is typically accomplished by&#xA; * synchronizing on some object that naturally encapsulates the map.  If no&#xA; * such object exists, the map should be &quot;wrapped&quot; using the&#xA; * &lt;tt>Collections.synchronizedMap&lt;/tt> method.  This is best done at creation&#xA; * time, to prevent accidental unsynchronized access to the map:&#xA; * &lt;pre>&#xA; *     Map m = Collections.synchronizedMap(new TreeMap(...));&#xA; * &lt;/pre>&lt;p>&#xA; *&#xA; * The iterators returned by all of this class's &quot;collection view methods&quot; are&#xA; * &lt;i>fail-fast&lt;/i>: if the map is structurally modified at any time after the&#xA; * iterator is created, in any way except through the iterator's own&#xA; * &lt;tt>remove&lt;/tt> or &lt;tt>add&lt;/tt> methods, the iterator throws a&#xA; * &lt;tt>ConcurrentModificationException&lt;/tt>.  Thus, in the face of concurrent&#xA; * modification, the iterator fails quickly and cleanly, rather than risking&#xA; * arbitrary, non-deterministic behavior at an undetermined time in the&#xA; * future.&#xA; *&#xA; * &lt;p>Note that the fail-fast behavior of an iterator cannot be guaranteed&#xA; * as it is, generally speaking, impossible to make any hard guarantees in the&#xA; * presence of unsynchronized concurrent modification.  Fail-fast iterators&#xA; * throw &lt;tt>ConcurrentModificationException&lt;/tt> on a best-effort basis.&#xA; * Therefore, it would be wrong to write a program that depended on this&#xA; * exception for its correctness:   &lt;i>the fail-fast behavior of iterators&#xA; * should be used only to detect bugs.&lt;/i>&lt;p>&#xA; *&#xA; * This class is a member of the&#xA; * &lt;a href=&quot;{@docRoot}/../guide/collections/index.html&quot;>&#xA; * Java Collections Framework&lt;/a>.&#xA; *&#xA; * @author  Josh Bloch and Doug Lea&#xA; * @version 1.65, 02/19/04&#xA; * @see Map&#xA; * @see HashMap&#xA; * @see Hashtable&#xA; * @see Comparable&#xA; * @see Comparator&#xA; * @see Collection&#xA; * @see Collections#synchronizedMap(Map)&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </typeArguments>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Interface" href="SortedMap.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </typeArguments>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.1"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Class" href="AbstractMap.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
