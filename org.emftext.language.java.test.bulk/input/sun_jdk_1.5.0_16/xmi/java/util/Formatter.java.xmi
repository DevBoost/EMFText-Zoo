<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16 http://www.emftext.org/java/variables ../../java.ecore#/17" name="Formatter.java">
  <comments>/*&#xA; * @(#)Formatter.java&#x9;1.16 05/01/04&#xA; *&#xA; * Copyright 2005 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/BufferedWriter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../io/Closeable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../io/Flushable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/OutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../math/BigInteger.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../math/MathContext.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>nio</namespaces>
    <namespaces>charset</namespaces>
    <classifier xsi:type="classifiers:Class" href="../nio/charset/Charset.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../text/DecimalFormat.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>text</namespaces>
    <classifier xsi:type="classifiers:Class" href="../text/NumberFormat.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <namespaces>regex</namespaces>
    <classifier xsi:type="classifiers:Class" href="regex/Matcher.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <namespaces>regex</namespaces>
    <classifier xsi:type="classifiers:Class" href="regex/Pattern.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Formatter">
    <members xsi:type="members:Field" name="a">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../lang/Appendable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="l">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="lastException">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="zero">
      <initialValue xsi:type="literals:CharacterLiteral" value="48"/>
      <typeReference xsi:type="types:Char"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="scaleUp">
      <typeReference xsi:type="types:Double"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="MAX_FD_CHARS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="30"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// 1 (sign) + 19 (max # sig digits) + 1 ('.') + 1 ('e') + 1 (sign)</comments>
        <comments>// + 3 (max # exp digits) + 4 (error) = 30</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../lang/Appendable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Initialize internal data.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.1"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.21"/>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter.&#xA;     *&#xA;     * &lt;p> The destination of the formatted output is a {@link StringBuilder}&#xA;     * which may be retrieved by invoking {@link #out out()} and whose&#xA;     * current content may be converted into a string by invoking {@link&#xA;     * #toString toString()}.  The locale used is the {@linkplain&#xA;     * Locale#getDefault() default locale} for this instance of the Java&#xA;     * virtual machine.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../lang/Appendable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified destination.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault() default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * @param  a&#xA;     *         Destination for the formatted output.  If &lt;tt>a&lt;/tt> is&#xA;     *         &lt;tt>null&lt;/tt> then a {@link StringBuilder} will be created.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified locale.&#xA;     *&#xA;     * &lt;p> The destination of the formatted output is a {@link StringBuilder}&#xA;     * which may be retrieved by invoking {@link #out out()} and whose current&#xA;     * content may be converted into a string by invoking {@link #toString&#xA;     * toString()}.&#xA;     *&#xA;     * @param  l&#xA;     *         The {@linkplain java.util.Locale locale} to apply during&#xA;     *         formatting.  If &lt;tt>l&lt;/tt> is &lt;tt>null&lt;/tt> then no localization&#xA;     *         is applied.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../lang/Appendable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified destination and locale.&#xA;     *&#xA;     * @param  a&#xA;     *         Destination for the formatted output.  If &lt;tt>a&lt;/tt> is&#xA;     *         &lt;tt>null&lt;/tt> then a {@link StringBuilder} will be created.&#xA;     *&#xA;     * @param  l&#xA;     *         The {@linkplain java.util.Locale locale} to apply during&#xA;     *         formatting.  If &lt;tt>l&lt;/tt> is &lt;tt>null&lt;/tt> then no localization&#xA;     *         is applied.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/BufferedWriter.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
              </arguments>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fileName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified file name.&#xA;     *&#xA;     * &lt;p> The charset used is the {@linkplain&#xA;     * java.nio.charset.Charset#defaultCharset default charset} for this&#xA;     * instance of the Java virtual machine.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault() default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * @param  fileName&#xA;     *         The name of the file to use as the destination of this&#xA;     *         formatter.  If the file exists then it will be truncated to&#xA;     *         zero size; otherwise, a new file will be created.  The output&#xA;     *         will be written to the file and is buffered.&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager is present and {@link&#xA;     *          SecurityManager#checkWrite checkWrite(fileName)} denies write&#xA;     *          access to the file&#xA;     *&#xA;     * @throws  FileNotFoundException&#xA;     *          If the given file name does not denote an existing, writable&#xA;     *          regular file and a new regular file of that name cannot be&#xA;     *          created, or if some other error occurs while opening or&#xA;     *          creating the file&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fileName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified file name and charset.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * @param  fileName&#xA;     *         The name of the file to use as the destination of this&#xA;     *         formatter.  If the file exists then it will be truncated to&#xA;     *         zero size; otherwise, a new file will be created.  The output&#xA;     *         will be written to the file and is buffered.&#xA;     *&#xA;     * @param  csn&#xA;     *         The name of a supported {@linkplain java.nio.charset.Charset&#xA;     *         charset}&#xA;     *&#xA;     * @throws  FileNotFoundException&#xA;     *          If the given file name does not denote an existing, writable&#xA;     *          regular file and a new regular file of that name cannot be&#xA;     *          created, or if some other error occurs while opening or&#xA;     *          creating the file&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager is present and {@link&#xA;     *          SecurityManager#checkWrite checkWrite(fileName)} denies write&#xA;     *          access to the file&#xA;     *&#xA;     * @throws  UnsupportedEncodingException&#xA;     *          If the named charset is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/BufferedWriter.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="fileName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified file name, charset, and&#xA;     * locale.&#xA;     *&#xA;     * @param  fileName&#xA;     *         The name of the file to use as the destination of this&#xA;     *         formatter.  If the file exists then it will be truncated to&#xA;     *         zero size; otherwise, a new file will be created.  The output&#xA;     *         will be written to the file and is buffered.&#xA;     *&#xA;     * @param  csn&#xA;     *         The name of a supported {@linkplain java.nio.charset.Charset&#xA;     *         charset}&#xA;     *&#xA;     * @param  l&#xA;     *         The {@linkplain java.util.Locale locale} to apply during&#xA;     *         formatting.  If &lt;tt>l&lt;/tt> is &lt;tt>null&lt;/tt> then no localization&#xA;     *         is applied.&#xA;     *&#xA;     * @throws  FileNotFoundException&#xA;     *          If the given file name does not denote an existing, writable&#xA;     *          regular file and a new regular file of that name cannot be&#xA;     *          created, or if some other error occurs while opening or&#xA;     *          creating the file&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager is present and {@link&#xA;     *          SecurityManager#checkWrite checkWrite(fileName)} denies write&#xA;     *          access to the file&#xA;     *&#xA;     * @throws  UnsupportedEncodingException&#xA;     *          If the named charset is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/BufferedWriter.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
              </arguments>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified file.&#xA;     *&#xA;     * &lt;p> The charset used is the {@linkplain&#xA;     * java.nio.charset.Charset#defaultCharset default charset} for this&#xA;     * instance of the Java virtual machine.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault() default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * @param  file&#xA;     *         The file to use as the destination of this formatter.  If the&#xA;     *         file exists then it will be truncated to zero size; otherwise,&#xA;     *         a new file will be created.  The output will be written to the&#xA;     *         file and is buffered.&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager is present and {@link&#xA;     *          SecurityManager#checkWrite checkWrite(file.getPath())} denies&#xA;     *          write access to the file&#xA;     *&#xA;     * @throws  FileNotFoundException&#xA;     *          If the given file object does not denote an existing, writable&#xA;     *          regular file and a new regular file of that name cannot be&#xA;     *          created, or if some other error occurs while opening or&#xA;     *          creating the file&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified file and charset.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * @param  file&#xA;     *         The file to use as the destination of this formatter.  If the&#xA;     *         file exists then it will be truncated to zero size; otherwise,&#xA;     *         a new file will be created.  The output will be written to the&#xA;     *         file and is buffered.&#xA;     *&#xA;     * @param  csn&#xA;     *         The name of a supported {@linkplain java.nio.charset.Charset&#xA;     *         charset}&#xA;     *&#xA;     * @throws  FileNotFoundException&#xA;     *          If the given file object does not denote an existing, writable&#xA;     *          regular file and a new regular file of that name cannot be&#xA;     *          created, or if some other error occurs while opening or&#xA;     *          creating the file&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager is present and {@link&#xA;     *          SecurityManager#checkWrite checkWrite(file.getPath())} denies&#xA;     *          write access to the file&#xA;     *&#xA;     * @throws  UnsupportedEncodingException&#xA;     *          If the named charset is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/BufferedWriter.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/FileOutputStream.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="file">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/File.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/FileNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified file, charset, and&#xA;     * locale.&#xA;     *&#xA;     * @param  file&#xA;     *         The file to use as the destination of this formatter.  If the&#xA;     *         file exists then it will be truncated to zero size; otherwise,&#xA;     *         a new file will be created.  The output will be written to the&#xA;     *         file and is buffered.&#xA;     *&#xA;     * @param  csn&#xA;     *         The name of a supported {@linkplain java.nio.charset.Charset&#xA;     *         charset}&#xA;     *&#xA;     * @param  l&#xA;     *         The {@linkplain java.util.Locale locale} to apply during&#xA;     *         formatting.  If &lt;tt>l&lt;/tt> is &lt;tt>null&lt;/tt> then no localization&#xA;     *         is applied.&#xA;     *&#xA;     * @throws  FileNotFoundException&#xA;     *          If the given file object does not denote an existing, writable&#xA;     *          regular file and a new regular file of that name cannot be&#xA;     *          created, or if some other error occurs while opening or&#xA;     *          creating the file&#xA;     *&#xA;     * @throws  SecurityException&#xA;     *          If a security manager is present and {@link&#xA;     *          SecurityManager#checkWrite checkWrite(file.getPath())} denies&#xA;     *          write access to the file&#xA;     *&#xA;     * @throws  UnsupportedEncodingException&#xA;     *          If the named charset is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../lang/Appendable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ps">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/PrintStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified print stream.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault() default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * &lt;p> Characters are written to the given {@link java.io.PrintStream&#xA;     * PrintStream} object and are therefore encoded using that object's&#xA;     * charset.&#xA;     *&#xA;     * @param  ps&#xA;     *         The stream to use as the destination of this formatter.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/BufferedWriter.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="os">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified output stream.&#xA;     *&#xA;     * &lt;p> The charset used is the {@linkplain&#xA;     * java.nio.charset.Charset#defaultCharset default charset} for this&#xA;     * instance of the Java virtual machine.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault() default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * @param  os&#xA;     *         The output stream to use as the destination of this formatter.&#xA;     *         The output will be buffered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.35"/>
            </next>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </arguments>
          <callTarget xsi:type="literals:This"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="os">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified output stream and&#xA;     * charset.&#xA;     *&#xA;     * &lt;p> The locale used is the {@linkplain Locale#getDefault default&#xA;     * locale} for this instance of the Java virtual machine.&#xA;     *&#xA;     * @param  os&#xA;     *         The output stream to use as the destination of this formatter.&#xA;     *         The output will be buffered.&#xA;     *&#xA;     * @param  csn&#xA;     *         The name of a supported {@linkplain java.nio.charset.Charset&#xA;     *         charset}&#xA;     *&#xA;     * @throws  UnsupportedEncodingException&#xA;     *          If the named charset is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="Formatter">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/BufferedWriter.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../io/OutputStreamWriter.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
            </arguments>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.2"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="os">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="csn">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/UnsupportedEncodingException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Constructs a new formatter with the specified output stream, charset,&#xA;     * and locale.&#xA;     *&#xA;     * @param  os&#xA;     *         The output stream to use as the destination of this formatter.&#xA;     *         The output will be buffered.&#xA;     *&#xA;     * @param  csn&#xA;     *         The name of a supported {@linkplain java.nio.charset.Charset&#xA;     *         charset}&#xA;     *&#xA;     * @param  l&#xA;     *         The {@linkplain java.util.Locale locale} to apply during&#xA;     *         formatting.  If &lt;tt>l&lt;/tt> is &lt;tt>null&lt;/tt> then no localization&#xA;     *         is applied.&#xA;     *&#xA;     * @throws  UnsupportedEncodingException&#xA;     *          If the named charset is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setZero">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="dfs">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.56"/>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </child>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="locale">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the locale set by the construction of this formatter.&#xA;     *&#xA;     * &lt;p> The {@link #format(java.util.Locale,String,Object...) format} method&#xA;     * for this object which has a locale argument does not change this value.&#xA;     *&#xA;     * @return  &lt;tt>null&lt;/tt> if no localization is applied, otherwise a&#xA;     *          locale&#xA;     *&#xA;     * @throws  FormatterClosedException&#xA;     *          If this formatter has been closed by invoking its {@link&#xA;     *          #close()} method&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="out">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../lang/Appendable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the destination for the output.&#xA;     *&#xA;     * @return  The destination for the output&#xA;     *&#xA;     * @throws  FormatterClosedException&#xA;     *          If this formatter has been closed by invoking its {@link&#xA;     *          #close()} method&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the result of invoking &lt;tt>toString()&lt;/tt> on the destination&#xA;     * for the output.  For example, the following code formats text into a&#xA;     * {@link StringBuilder} then retrieves the resultant string:&#xA;     *&#xA;     * &lt;blockquote>&lt;pre>&#xA;     *   Formatter f = new Formatter();&#xA;     *   f.format(&quot;Last reboot at %tc&quot;, lastRebootDate);&#xA;     *   String s = f.toString();&#xA;     *   // -> s == &quot;Last reboot at Sat Jan 01 00:00:00 PST 2000&quot;&#xA;     * &lt;/pre>&lt;/blockquote>&#xA;     *&#xA;     * &lt;p> An invocation of this method behaves in exactly the same way as the&#xA;     * invocation&#xA;     *&#xA;     * &lt;pre>&#xA;     *     out().toString() &lt;/pre>&#xA;     *&#xA;     * &lt;p> Depending on the specification of &lt;tt>toString&lt;/tt> for the {@link&#xA;     * Appendable}, the returned string may or may not contain the characters&#xA;     * written to the destination.  For instance, buffers typically return&#xA;     * their contents in &lt;tt>toString()&lt;/tt>, but streams cannot since the&#xA;     * data is discarded.&#xA;     *&#xA;     * @return  The result of invoking &lt;tt>toString()&lt;/tt> on the destination&#xA;     *          for the output&#xA;     *&#xA;     * @throws  FormatterClosedException&#xA;     *          If this formatter has been closed by invoking its {@link&#xA;     *          #close()} method&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.6"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="flush">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Flushes this formatter.  If the destination implements the {@link&#xA;     * java.io.Flushable} interface, its &lt;tt>flush&lt;/tt> method will be invoked.&#xA;     *&#xA;     * &lt;p> Flushing a formatter writes any buffered output in the destination&#xA;     * to the underlying stream.&#xA;     *&#xA;     * @throws  FormatterClosedException&#xA;     *          If this formatter has been closed by invoking its {@link&#xA;     *          #close()} method&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:NestedExpression">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../io/Flushable.class.xmi#//@classifiers.0/@members.0"/>
                </next>
                <expression xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../io/Flushable.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
                </expression>
              </expression>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.25/@statements.1/@statement/@statements.0/@catcheBlocks.0/@parameter"/>
                </expression>
              </statements>
              <parameter name="ioe">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:InstanceOfExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../io/Flushable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="close">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Closes this formatter.  If the destination implements the {@link&#xA;     * java.io.Closeable} interface, its &lt;tt>close&lt;/tt> method will be invoked.&#xA;     *&#xA;     * &lt;p> Closing a formatter allows it to release resources it may be holding&#xA;     * (such as open files).  If the formatter is already closed, then invoking&#xA;     * this method has no effect.&#xA;     *&#xA;     * &lt;p> Attempting to invoke any methods except {@link #ioException()} in&#xA;     * this formatter after it has been closed will result in a {@link&#xA;     * FormatterClosedException}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:NestedExpression">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../io/Closeable.class.xmi#//@classifiers.0/@members.0"/>
              </next>
              <expression xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../io/Closeable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              </expression>
            </expression>
          </statement>
          <condition xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../io/Closeable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          </condition>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.26/@statements.1/@catcheBlocks.0/@parameter"/>
            </expression>
          </statements>
          <parameter name="ioe">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <finallyBlock>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </finallyBlock>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ensureOpen">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="FormatterClosedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="ioException">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;tt>IOException&lt;/tt> last thrown by this formatter's {@link&#xA;     * Appendable}.&#xA;     *&#xA;     * &lt;p> If the destination's &lt;tt>append()&lt;/tt> method never throws&#xA;     * &lt;tt>IOException&lt;/tt>, then this method will always return &lt;tt>null&lt;/tt>.&#xA;     *&#xA;     * @return  The last exception thrown by the Appendable or &lt;tt>null&lt;/tt> if&#xA;     *          no such exception exists.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="format">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:VariableLengthParameter" name="args">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes a formatted string to this object's destination using the&#xA;     * specified format string and arguments.  The locale used is the one&#xA;     * defined during the construction of this formatter.&#xA;     *&#xA;     * @param  format&#xA;     *         A format string as described in &lt;a href=&quot;#syntax&quot;>Format string&#xA;     *         syntax&lt;/a>.&#xA;     *&#xA;     * @param  args&#xA;     *         Arguments referenced by the format specifiers in the format&#xA;     *         string.  If there are more arguments than format specifiers, the&#xA;     *         extra arguments are ignored.  The maximum number of arguments is&#xA;     *         limited by the maximum dimension of a Java array as defined by&#xA;     *         the &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;>Java&#xA;     *         Virtual Machine Specification&lt;/a>.&#xA;     *&#xA;     * @throws  IllegalFormatException&#xA;     *          If a format string contains an illegal syntax, a format&#xA;     *          specifier that is incompatible with the given arguments,&#xA;     *          insufficient arguments given the format string, or other&#xA;     *          illegal conditions.  For specification of all possible&#xA;     *          formatting errors, see the &lt;a href=&quot;#detail&quot;>Details&lt;/a>&#xA;     *          section of the formatter class specification.&#xA;     *&#xA;     * @throws  FormatterClosedException&#xA;     *          If this formatter has been closed by invoking its {@link&#xA;     *          #close()} method&#xA;     *&#xA;     * @return  This formatter&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.30">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="format">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="format">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:VariableLengthParameter" name="args">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Writes a formatted string to this object's destination using the&#xA;     * specified locale, format string, and arguments.&#xA;     *&#xA;     * @param  l&#xA;     *         The {@linkplain java.util.Locale locale} to apply during&#xA;     *         formatting.  If &lt;tt>l&lt;/tt> is &lt;tt>null&lt;/tt> then no localization&#xA;     *         is applied.  This does not change this object's locale that was&#xA;     *         set during construction.&#xA;     *&#xA;     * @param  format&#xA;     *         A format string as described in &lt;a href=&quot;#syntax&quot;>Format string&#xA;     *         syntax&lt;/a>&#xA;     *&#xA;     * @param  args&#xA;     *         Arguments referenced by the format specifiers in the format&#xA;     *         string.  If there are more arguments than format specifiers, the&#xA;     *         extra arguments are ignored.  The maximum number of arguments is&#xA;     *         limited by the maximum dimension of a Java array as defined by&#xA;     *         the &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;>Java&#xA;     *         Virtual Machine Specification&lt;/a>&#xA;     *&#xA;     * @throws  IllegalFormatException&#xA;     *          If a format string contains an illegal syntax, a format&#xA;     *          specifier that is incompatible with the given arguments,&#xA;     *          insufficient arguments given the format string, or other&#xA;     *          illegal conditions.  For specification of all possible&#xA;     *          formatting errors, see the &lt;a href=&quot;#detail&quot;>Details&lt;/a>&#xA;     *          section of the formatter class specification.&#xA;     *&#xA;     * @throws  FormatterClosedException&#xA;     *          If this formatter has been closed by invoking its {@link&#xA;     *          #close()} method&#xA;     *&#xA;     * @return  This formatter&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.27"/>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="last">
          <typeReference xsi:type="types:Int">
            <comments>// index of last argument referenced</comments>
          </typeReference>
          <initialValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lasto">
          <typeReference xsi:type="types:Int">
            <comments>// last ordinary index</comments>
          </typeReference>
          <initialValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="fsa">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.35"/>
          </typeReference>
          <arrayDimensionsBefore/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.33">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.1"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="fs">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.35"/>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@init"/>
                </arraySelectors>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="index">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:Switch">
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                    <comments>// fixed string, &quot;%n&quot;, or &quot;%%&quot;</comments>
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.1">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:Condition">
                  <comments>// relative index</comments>
                  <statement xsi:type="statements:Throw">
                    <throwable xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="MissingFormatArgumentException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.2"/>
                      </arguments>
                    </throwable>
                  </statement>
                  <condition xsi:type="expressions:ConditionalOrExpression">
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </children>
                        <children xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@variable"/>
                          <children xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2">
                              <next xsi:type="references:IdentifierReference"/>
                            </children>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </children>
                          <relationOperators xsi:type="operators:GreaterThan"/>
                        </children>
                      </expression>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.1">
                      <arguments xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </child>
                          <expressionIf xsi:type="literals:NullLiteral"/>
                          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2">
                            <arraySelectors>
                              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@variable"/>
                            </arraySelectors>
                          </expressionElse>
                        </expression>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </condition>
              </cases>
              <cases xsi:type="statements:NormalSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@variable">
                      <comments>// ordinary index</comments>
                    </child>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Throw">
                    <throwable xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="MissingFormatArgumentException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.2"/>
                      </arguments>
                    </throwable>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </children>
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@variable"/>
                      <children xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2">
                          <next xsi:type="references:IdentifierReference"/>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </children>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.1">
                      <arguments xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </child>
                          <expressionIf xsi:type="literals:NullLiteral"/>
                          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2">
                            <arraySelectors>
                              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.2/@variable"/>
                            </arraySelectors>
                          </expressionElse>
                        </expression>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
                <condition xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </cases>
              <cases xsi:type="statements:DefaultSwitchCase">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@variable">
                      <comments>// explicit index</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.1/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Throw">
                    <throwable xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="MissingFormatArgumentException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.2"/>
                      </arguments>
                    </throwable>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:NotEqual"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
                      <children xsi:type="literals:NullLiteral"/>
                    </children>
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@variable"/>
                      <children xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2">
                          <next xsi:type="references:IdentifierReference"/>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </children>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.35/@members.1">
                      <arguments xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </child>
                          <expressionIf xsi:type="literals:NullLiteral"/>
                          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.2">
                            <arraySelectors>
                              <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.1/@variable"/>
                            </arraySelectors>
                          </expressionElse>
                        </expression>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </cases>
              <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.1/@variable"/>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@statement/@statements.2/@catcheBlocks.0/@parameter"/>
                </expression>
              </statements>
              <parameter name="x">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@init"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.3/@variable">
            <next xsi:type="references:IdentifierReference"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </init>
        <updates xsi:type="expressions:SuffixUnaryModificationExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@statements.4/@init"/>
          <operator xsi:type="operators:PlusPlus"/>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <self xsi:type="literals:This"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Field" name="formatSpecifier">
      <initialValue xsi:type="references:StringReference" value="%(\d+\$)?([-#+ 0,(\&lt;]*)?(\d+)?(\.\d+)?([tT])?([a-zA-Z%])"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// %[argument_index$][flags][width][.precision][t]conversion</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="fsPattern">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="regex/Pattern.class.xmi#//@classifiers.0/@members.30"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31"/>
        </next>
        <target xsi:type="classifiers:Class" href="regex/Pattern.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="regex/Pattern.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="parse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.35"/>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Look for format specifiers in the format string.</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="al">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="ArrayList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="m">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="regex/Matcher.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="regex/Pattern.class.xmi#//@classifiers.0/@members.34"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="i">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Condition">
                <comments>// Anything between the start of the string and the beginning</comments>
                <comments>// of the format specifier is either fixed text or contains</comments>
                <comments>// an invalid format string.</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
                      <comments>// Make sure we didn't miss any invalid format specifiers</comments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="regex/Matcher.class.xmi#//@classifiers.0/@members.24"/>
                            </next>
                          </arguments>
                        </next>
                      </arguments>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
                      <comments>// Assume previous characters were fixed text</comments>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.36"/>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="regex/Matcher.class.xmi#//@classifiers.0/@members.24"/>
                                </next>
                              </arguments>
                            </next>
                          </arguments>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="regex/Matcher.class.xmi#//@classifiers.0/@members.24"/>
                    </next>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sa">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// Expect 6 groups in regular expression</comments>
                      <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arrayDimensionsBefore/>
                  <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ForLoop">
                <statement xsi:type="statements:Block">
                  <comments>// &#x9;&#x9;    System.out.print(sa[j] + &quot; &quot;);</comments>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@statement/@statements.0/@statement/@statements.1/@variable">
                        <arraySelectors>
                          <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@statement/@statements.0/@statement/@statements.2/@init"/>
                        </arraySelectors>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="regex/Matcher.class.xmi#//@classifiers.0/@members.29"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@statement/@statements.0/@statement/@statements.2/@init"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </arguments>
                        </next>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@statement/@statements.0/@statement/@statements.2/@init"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="regex/Matcher.class.xmi#//@classifiers.0/@members.30"/>
                    </next>
                  </children>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <init xsi:type="variables:LocalVariable" name="j">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </init>
                <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@statement/@statements.0/@statement/@statements.2/@init"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </updates>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
                  <comments>// &#x9;&#x9;System.out.println();</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.39"/>
                      </typeReference>
                      <arguments xsi:type="references:SelfReference">
                        <self xsi:type="literals:This"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.3/@statement/@statements.0/@statement/@statements.1/@variable"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="regex/Matcher.class.xmi#//@classifiers.0/@members.26"/>
                    </next>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="regex/Matcher.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.34">
                  <comments>// No more valid format specifiers.  Check for possible invalid</comments>
                  <comments>// format specifiers.</comments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
                  <comments>// The rest of the string is fixed text</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                    <arguments xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.36"/>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
                        </next>
                      </arguments>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </elseStatement>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.2/@variable"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
            </next>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>//   &#x9;FormatString[] fs = new FormatString[al.size()];</comments>
        <comments>//   &#x9;for (int j = 0; j &lt; al.size(); j++)</comments>
        <comments>//   &#x9;    System.out.println(((FormatString) al.get(j)).toString());</comments>
        <returnValue xsi:type="expressions:CastExpression">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.35"/>
          </typeReference>
          <arrayDimensionsBefore/>
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ArrayList.class.xmi#//@classifiers.0/@members.15"/>
              <arguments xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.35"/>
                </typeReference>
                <sizes xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </arguments>
            </next>
          </child>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="checkText">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="idx">
          <typeReference xsi:type="types:Int"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// If there are any '%' in the given string, we got a bad format</comments>
        <comments>// specifier.</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="c">
              <typeReference xsi:type="types:Char"/>
              <initialValue xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
                    <children xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                        </next>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </children>
                    <relationOperators xsi:type="operators:GreaterThan"/>
                  </child>
                  <expressionIf xsi:type="literals:CharacterLiteral" value="37"/>
                  <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.23"/>
                      <arguments xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </arguments>
                    </next>
                  </expressionElse>
                </expression>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="UnknownFormatConversionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.82"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.1/@statement/@statements.0/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.45"/>
                  <arguments xsi:type="literals:CharacterLiteral" value="37"/>
                </next>
              </value>
            </expression>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="classifiers:Interface" name="FormatString">
      <members xsi:type="members:InterfaceMethod" name="index">
        <typeReference xsi:type="types:Int"/>
      </members>
      <members xsi:type="members:InterfaceMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
      </members>
      <members xsi:type="members:InterfaceMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="classifiers:Class" name="FixedString">
      <members xsi:type="members:Field" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Constructor" name="FixedString">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.1/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="index">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.0"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@members.0"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.35"/>
      </implements>
    </members>
    <members xsi:type="classifiers:Enumeration" name="BigDecimalLayoutForm">
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <constants name="SCIENTIFIC"/>
      <constants name="DECIMAL_FLOAT"/>
    </members>
    <members xsi:type="members:EmptyMember"/>
    <members xsi:type="classifiers:Class" name="FormatSpecifier">
      <members xsi:type="members:Field" name="index">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </initialValue>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="f">
        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="width">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="precision">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="dt">
        <initialValue xsi:type="literals:BooleanLiteral"/>
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="c">
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="formatter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="ls">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// cache the line separator</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="index">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:TryBlock">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.8/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.8/@parameters.0">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                              </next>
                            </children>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </arguments>
                        </next>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:Assert">
                  <condition xsi:type="expressions:NestedExpression">
                    <expression xsi:type="literals:BooleanLiteral"/>
                  </condition>
                </statements>
                <parameter name="x">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/NumberFormatException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.8/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="index">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="flags">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.17">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.10/@parameters.0"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.10"/>
              </arguments>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="flags">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="width">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:TryBlock">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.12/@parameters.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="IllegalFormatWidthException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  </throwable>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:Assert">
                  <condition xsi:type="expressions:NestedExpression">
                    <expression xsi:type="literals:BooleanLiteral"/>
                  </condition>
                </statements>
                <parameter name="x">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/NumberFormatException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.12/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="width">
        <typeReference xsi:type="types:Int"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="precision">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:TryBlock">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3">
                    <comments>// remove the '.'</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.19"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.14/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </next>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="IllegalFormatPrecisionException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
                  </throwable>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
              </statements>
              <catcheBlocks>
                <statements xsi:type="statements:Assert">
                  <condition xsi:type="expressions:NestedExpression">
                    <expression xsi:type="literals:BooleanLiteral"/>
                  </condition>
                </statements>
                <parameter name="x">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/NumberFormatException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </parameter>
              </catcheBlocks>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.14/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="precision">
        <typeReference xsi:type="types:Int"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="conversion">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.16/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.23"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="UnknownFormatConversionException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.82"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                  </arguments>
                </throwable>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.23">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  </next>
                </child>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.15">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.104"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.128"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.27">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                </next>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.4"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="conversion">
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
        </statements>
      </members>
      <members xsi:type="members:Constructor" name="FormatSpecifier">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.6"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="idx">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.8">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.1">
              <arraySelectors>
                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.1">
              <arraySelectors>
                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.12">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.1">
              <arraySelectors>
                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.14">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.1">
              <arraySelectors>
                <position xsi:type="expressions:SuffixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.4"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.15">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                    </arguments>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.1">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:StringReference" value="T"/>
                </next>
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@statements.1/@variable"/>
                </arraySelectors>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.1">
              <arraySelectors>
                <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@statements.1/@variable"/>
              </arraySelectors>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.16">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@parameters.1">
              <arraySelectors>
                <position xsi:type="expressions:PrefixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.18/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </position>
              </arraySelectors>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.31"/>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.4"/>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.30"/>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.24">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              </next>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.32"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.11"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.33"/>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.25">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  </next>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.35"/>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.26">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                    </next>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.37"/>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.27">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                      </next>
                    </condition>
                    <elseStatement xsi:type="statements:Throw">
                      <throwable xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="UnknownFormatConversionException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.82"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </throwable>
                    </elseStatement>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="formatter">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sa">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <arrayDimensionsBefore/>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.22">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.4"/>
        </statements>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.0"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.20">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.2"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.4"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.6"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.8"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.21">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.9"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.23">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.11"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.25">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.15"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.24">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.17"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.26">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.19/@parameters.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.19"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.7"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.25"/>
                      <arguments xsi:type="references:StringReference" value="line.separator"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.7"/>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.7"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.21"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                  <arguments xsi:type="literals:CharacterLiteral" value="37"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.22"/>
            </condition>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Assert">
              <condition xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="printInteger">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
              <arguments xsi:type="references:StringReference" value="null"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.38">
                <arguments xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Byte.class.xmi#//@classifiers.0/@members.15"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/Byte.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                  </expression>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.1"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/Byte.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.39">
                  <arguments xsi:type="expressions:NestedExpression">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Short.class.xmi#//@classifiers.0/@members.16"/>
                    </next>
                    <expression xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Short.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                    </expression>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.1"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/Short.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.40">
                    <arguments xsi:type="expressions:NestedExpression">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
                      </next>
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                      </expression>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.1"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.41">
                      <arguments xsi:type="expressions:NestedExpression">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/Long.class.xmi#//@classifiers.0/@members.25"/>
                        </next>
                        <expression xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                        </expression>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.1"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.44">
                        <arguments xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:CastExpression">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../math/BigInteger.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                          </expression>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.1"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:InstanceOfExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../math/BigInteger.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                    </condition>
                    <elseStatement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.61">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.20/@parameters.0"/>
                      </expression>
                    </elseStatement>
                  </elseStatement>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="printFloat">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
              <arguments xsi:type="references:StringReference" value="null"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.45">
                <arguments xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Float.class.xmi#//@classifiers.0/@members.26"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/Float.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
                  </expression>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.1"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/Float.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.46">
                  <arguments xsi:type="expressions:NestedExpression">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.26"/>
                    </next>
                    <expression xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
                    </expression>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.1"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.52">
                    <arguments xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
                      </expression>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.1"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.61">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.21/@parameters.0"/>
                  </expression>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="printDateTime">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
                <arguments xsi:type="references:StringReference" value="null"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="cal">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="literals:NullLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// Instead of Calendar.setLenient(true), perhaps we should</comments>
          <comments>// wrap the IllegalArgumentException that might be thrown?</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@statements.1/@variable">
                  <comments>// Note that the following method uses an instance of the</comments>
                  <comments>// default time zone (TimeZone.getDefaultRef().</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.86"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.1"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.95"/>
                  <arguments xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@statements.1/@variable">
                    <comments>// Note that the following method uses an instance of the</comments>
                    <comments>// default time zone (TimeZone.getDefaultRef().</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.86"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.93"/>
                    <arguments xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="Date.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="expressions:NestedExpression">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.141"/>
                        </next>
                        <expression xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
                        </expression>
                      </child>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.129"/>
                      <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.61">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.0"/>
                  </expression>
                </statements>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.58">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@statements.1/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.22/@parameters.1"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="printCharacter">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
                <arguments xsi:type="references:StringReference" value="null"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Return"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="s">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="literals:NullLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.75"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
                  </expression>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:InstanceOfExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Byte"/>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Byte.class.xmi#//@classifiers.0/@members.15"/>
                    </next>
                    <expression xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Byte.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.1/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.94"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@statement/@statements.0/@variable"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.78"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@statement/@statements.0/@variable"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                </condition>
                <elseStatement xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="IllegalFormatCodePointException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@statement/@statements.0/@variable"/>
                  </throwable>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/Byte.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="i">
                    <typeReference xsi:type="types:Short"/>
                    <initialValue xsi:type="expressions:NestedExpression">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/Short.class.xmi#//@classifiers.0/@members.16"/>
                      </next>
                      <expression xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../lang/Short.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
                      </expression>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.1/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.94"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.78"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                  </condition>
                  <elseStatement xsi:type="statements:Throw">
                    <throwable xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="IllegalFormatCodePointException.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                    </throwable>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/Short.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="i">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="expressions:NestedExpression">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.27"/>
                        </next>
                        <expression xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
                        </expression>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.94"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                          </arguments>
                        </value>
                      </expression>
                    </statement>
                    <condition xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.78"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                    </condition>
                    <elseStatement xsi:type="statements:Throw">
                      <throwable xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="IllegalFormatCodePointException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.2/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      </throwable>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.61">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@parameters.0"/>
                    </expression>
                  </statements>
                </elseStatement>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.23/@statements.1/@variable"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="printString">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
                <arguments xsi:type="references:StringReference" value="null"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="fmt">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.6"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0"/>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.6">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.23"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@parameters.1"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.6">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@parameters.1"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:NestedExpression">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Formattable.class.xmi#//@classifiers.0/@members.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
                  </next>
                  <expression xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Interface" href="Formattable.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@parameters.0"/>
                  </expression>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="Formattable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@parameters.0"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.24/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.6"/>
                    </next>
                  </arguments>
                </expression>
              </statements>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="printBoolean">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="s">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.25/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:InstanceOfExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.25/@parameters.0"/>
                    </expression>
                  </child>
                  <expressionIf xsi:type="expressions:NestedExpression">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.12"/>
                    </next>
                    <expression xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.25/@parameters.0"/>
                    </expression>
                  </expressionIf>
                  <expressionElse xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.11"/>
                      <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
                  </expressionElse>
                </expression>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.25/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.25/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Boolean.class.xmi#//@classifiers.0/@members.11"/>
                  <arguments xsi:type="literals:BooleanLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Boolean.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.25/@statements.0/@variable"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="printHashCode">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="s">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.26/@parameters.0"/>
                  <children xsi:type="literals:NullLiteral"/>
                </child>
                <expressionIf xsi:type="references:StringReference" value="null"/>
                <expressionElse xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.11"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.26/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.3"/>
                      </next>
                    </arguments>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                </expressionElse>
              </expression>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.27">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.26/@statements.0/@variable"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.27/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.27/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
                </next>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.27/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.27/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.27/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.70"/>
                </next>
              </value>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
              </arguments>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.28">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.27/@parameters.0"/>
              </arguments>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="justify">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@parameters.0"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="pad">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
                </arguments>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sp">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ForLoop">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="literals:CharacterLiteral" value="32"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.4/@statement/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.3/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.4/@statement/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.2/@variable"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@parameters.0"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ForLoop">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="literals:CharacterLiteral" value="32"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.6/@statement/@init"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.3/@variable"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="i">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.6/@statement/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.2/@variable"/>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.28/@statements.1/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="literals:CharacterLiteral" value="37"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="dupf">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.40">
                <comments>// Flags.UPPERCASE is set internally for legal conversions.</comments>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.14">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.16">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                  </arguments>
                </next>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.1/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.20"/>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="literals:CharacterLiteral" value="36"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.0"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="46"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                      </arguments>
                    </next>
                  </child>
                  <expressionIf xsi:type="literals:CharacterLiteral" value="84"/>
                  <expressionElse xsi:type="literals:CharacterLiteral" value="116"/>
                </arguments>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.4"/>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
              <arguments xsi:type="expressions:ConditionalExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                    </arguments>
                  </next>
                </child>
                <expressionIf xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Character.class.xmi#//@classifiers.0/@members.130"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Character.class.xmi#//@classifiers.0"/>
                </expressionIf>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              </arguments>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.29/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkGeneral">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.60">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.15"/>
                  </children>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.19"/>
                  </children>
                </children>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                </arguments>
              </next>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// '-' requires a width</comments>
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="MissingFormatWidthException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.29"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
                </arguments>
              </next>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.5"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.6"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
            </arguments>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkDateTime">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalFormatPrecisionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="UnknownFormatConversionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="t"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.42/@members.31">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              </next>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// '-' requires a width</comments>
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="MissingFormatWidthException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.29"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
                </arguments>
              </next>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkCharacter">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalFormatPrecisionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// '-' requires a width</comments>
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="MissingFormatWidthException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.29"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
                </arguments>
              </next>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkInteger">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.36"/>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalFormatPrecisionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
              </arguments>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.0"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
                </arguments>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
                </arguments>
              </expression>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkBadFlags">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:VariableLengthParameter" name="badFlags">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.60">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.34/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.34/@statements.0/@init"/>
                  </arraySelectors>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.34/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.34/@statements.0/@init"/>
                  </arraySelectors>
                </arguments>
              </next>
            </condition>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.34/@statements.0/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.34/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.34/@statements.0/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkFloat">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.36"/>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block"/>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.8"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
                  </arguments>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.9"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
                    </arguments>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.4"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                      </arguments>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.6"/>
                  </children>
                </condition>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkNumeric">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalFormatWidthException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalFormatPrecisionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// '-' and '0' require a width</comments>
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="MissingFormatWidthException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.29"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
                    </arguments>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                    </arguments>
                  </next>
                </children>
              </expression>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// bad combination</comments>
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalFormatFlagsException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.20"/>
              </arguments>
            </throwable>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.5"/>
                    </arguments>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.6"/>
                    </arguments>
                  </next>
                </children>
              </expression>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
                    </arguments>
                  </next>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                    </arguments>
                  </next>
                </children>
              </expression>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="checkText">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="IllegalFormatPrecisionException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="IllegalFormatFlagsException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.20"/>
                  </arguments>
                </throwable>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                    </next>
                  </children>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                    </next>
                  </children>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// '-' requires a width</comments>
              <statement xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="MissingFormatWidthException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.29"/>
                </throwable>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </children>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
                    </arguments>
                  </next>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.22"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="IllegalFormatWidthException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                </throwable>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="IllegalFormatFlagsException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.20"/>
                  </arguments>
                </throwable>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                  </next>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Break"/>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.21"/>
            </condition>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Assert">
              <condition xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Byte"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="v">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.38/@parameters.0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.38/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                <value xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="literals:DecimalLongLiteral" decimalValue="1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Assert">
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.38/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <errorMessage xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.38/@statements.0/@variable"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.38/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
                  </children>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.2"/>
                  </children>
                </children>
              </expression>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.41">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.38/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.38/@parameters.1"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Short"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="v">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.39/@parameters.0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.39/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                <value xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="literals:DecimalLongLiteral" decimalValue="1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Assert">
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.39/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <errorMessage xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.39/@statements.0/@variable"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.39/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
                  </children>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.2"/>
                  </children>
                </children>
              </expression>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.41">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.39/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.39/@parameters.1"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="v">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.40/@parameters.0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.40/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                <value xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ShiftExpression">
                    <children xsi:type="literals:DecimalLongLiteral" decimalValue="1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="32"/>
                    <shiftOperators xsi:type="operators:LeftShift"/>
                  </expression>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:Assert">
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.40/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
              </condition>
              <errorMessage xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.40/@statements.0/@variable"/>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.40/@parameters.0"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:LessThan"/>
            </children>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
                  </children>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.2"/>
                  </children>
                </children>
              </expression>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.41">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.40/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.40/@parameters.1"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="neg">
                <typeReference xsi:type="types:Boolean"/>
                <initialValue xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@parameters.0"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="va">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </next>
                      <target xsi:type="members:ClassMethod" href="../lang/Long.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@parameters.0"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@parameters.0"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@statement/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
                      </next>
                      <target xsi:type="members:ClassMethod" href="../lang/Long.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@parameters.0"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
                  </value>
                </expression>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.42">
                <comments>// leading sign indicator</comments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                <comments>// the value</comments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@statement/@statements.1/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@statement/@statements.0/@variable"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@parameters.1"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.43">
                <comments>// trailing sign indicator</comments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.0"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.6"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.5"/>
                  </arguments>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="s">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/Long.class.xmi#//@classifiers.0/@members.8"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@parameters.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="len">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                          </arguments>
                        </next>
                      </child>
                      <expressionIf xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                          </next>
                        </children>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </expressionIf>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                        </next>
                      </expressionElse>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// apply ALTERNATE (radix indicator for octal) before ZERO_PAD</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                    </arguments>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ForLoop">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@statement/@statements.4/@statement/@init"/>
                    <children xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@statement/@statements.2/@variable"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </children>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </condition>
                  <init xsi:type="variables:LocalVariable" name="i">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </init>
                  <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@statement/@statements.4/@statement/@init"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </updates>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                    </arguments>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@statement/@statements.1/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.34">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.6"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.5"/>
                    </arguments>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="s">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/Long.class.xmi#//@classifiers.0/@members.7"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@parameters.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="len">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                            </arguments>
                          </next>
                        </child>
                        <expressionIf xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.1/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                            </next>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </expressionIf>
                        <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.1/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                          </next>
                        </expressionElse>
                      </expression>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <comments>// apply ALTERNATE (radix indicator for hex) before ZERO_PAD</comments>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                        <arguments xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                              </arguments>
                            </next>
                          </child>
                          <expressionIf xsi:type="references:StringReference" value="0X"/>
                          <expressionElse xsi:type="references:StringReference" value="0x"/>
                        </arguments>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                      </arguments>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                        </next>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.4/@statement/@init"/>
                      <children xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.2/@variable"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </children>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                    <init xsi:type="variables:LocalVariable" name="i">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.4/@statement/@init"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </updates>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                      </arguments>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.1/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.1/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.70"/>
                        </next>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                      </arguments>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.1/@elseStatement/@elseStatement/@statement/@statements.1/@variable"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.2"/>
                </children>
              </condition>
            </elseStatement>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <comments>// justify based on width</comments>
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.28">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.41/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
                  </next>
                </arguments>
              </arguments>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="leadingSign">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="neg">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// neg := val &lt; 0</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.42/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                      <arguments xsi:type="literals:CharacterLiteral" value="43"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.5"/>
                  </arguments>
                </next>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.42/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="32"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.6"/>
                    </arguments>
                  </next>
                </condition>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.42/@parameters.1"/>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.42/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="40"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                  </arguments>
                </next>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.42/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="45"/>
                  </next>
                </expression>
              </elseStatement>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.42/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="trailingSign">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="neg">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// neg := val &lt; 0</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.43/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="41"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.43/@parameters.1"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                </arguments>
              </next>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.43/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../math/BigInteger.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="neg">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.75"/>
                </next>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="v">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../math/BigInteger.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.73"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.42">
            <comments>// leading sign indicator</comments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.1/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// the value</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="va">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.113"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@statement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
                <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.1/@variable"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@parameters.1"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.0"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="s">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.2/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.112"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="len">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@statement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                      </next>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/AbstractStringBuilder.class.xmi#//@classifiers.0/@members.5"/>
                      </next>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@statement/@statements.1/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                      </arguments>
                    </next>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// apply ALTERNATE (radix indicator for octal) before ZERO_PAD</comments>
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@statement/@statements.1/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                    </arguments>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                        </next>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@statement/@statements.4/@statement/@statements.0/@init"/>
                      <children xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@statement/@statements.1/@variable"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </children>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                    <init xsi:type="variables:LocalVariable" name="i">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@statement/@statements.4/@statement/@statements.0/@init"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </updates>
                  </statements>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                    </arguments>
                  </next>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@statement/@statements.0/@variable"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="s">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.112"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
                      </next>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="len">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                        </next>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/AbstractStringBuilder.class.xmi#//@classifiers.0/@members.5"/>
                        </next>
                      </children>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.1/@variable"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.1/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                        </arguments>
                      </next>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <comments>// apply ALTERNATE (radix indicator for hex) before ZERO_PAD</comments>
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.1/@variable"/>
                        <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                        <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                          <arguments xsi:type="expressions:ConditionalExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                                </arguments>
                              </next>
                            </child>
                            <expressionIf xsi:type="references:StringReference" value="0X"/>
                            <expressionElse xsi:type="references:StringReference" value="0x"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                      </arguments>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                        </next>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.4/@statement/@init"/>
                      <children xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.1/@variable"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </children>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                    <init xsi:type="variables:LocalVariable" name="i">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </init>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.4/@statement/@init"/>
                      <operator xsi:type="operators:PlusPlus"/>
                    </updates>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                      </arguments>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.70"/>
                        </next>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                      </arguments>
                    </next>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.4/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                    </next>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.2"/>
                </children>
              </condition>
            </elseStatement>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.43">
            <comments>// trailing sign indicator</comments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable"/>
            <arguments xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.75"/>
                  </next>
                </children>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </expression>
            </arguments>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <comments>// justify based on width</comments>
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.28">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.44/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
                  </next>
                </arguments>
              </arguments>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Float"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.46">
            <arguments xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:Double"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.45/@parameters.0"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.45/@parameters.1"/>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="neg">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.33"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@parameters.0"/>
                  <arguments xsi:type="literals:DecimalDoubleLiteral"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="v">
                <typeReference xsi:type="types:Double"/>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.32"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@parameters.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.42">
                <comments>// leading sign indicator</comments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.1/@variable"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// the value</comments>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.47">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.2/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.1/@variable"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Negate"/>
                <child xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.15"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.2/@statement/@statements.0/@variable"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
                </child>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                          </arguments>
                        </next>
                      </child>
                      <expressionIf xsi:type="references:StringReference" value="INFINITY"/>
                      <expressionElse xsi:type="references:StringReference" value="Infinity"/>
                    </arguments>
                  </next>
                </expression>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.43">
                <comments>// trailing sign indicator</comments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.1/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@parameters.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
            </child>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                  <arguments xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                        </arguments>
                      </next>
                    </child>
                    <expressionIf xsi:type="references:StringReference" value="NAN"/>
                    <expressionElse xsi:type="references:StringReference" value="NaN"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <comments>// justify based on width</comments>
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.28">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.46/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
                  </next>
                </arguments>
              </arguments>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="precision">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="neg">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// !Double.isInfinite(value) &amp;&amp; !Double.isNaN(value)</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="prec">
                <typeReference xsi:type="types:Int">
                  <comments>// Create a new FormattedFloatingDecimal with the desired</comments>
                  <comments>// precision.</comments>
                </typeReference>
                <initialValue xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </child>
                    <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                    <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                  </expression>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="fd">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:EnumConstant" href="../../sun/misc/FormattedFloatingDecimal$Form.class.xmi#//@classifiers.0/@constants.0"/>
                      </next>
                      <target xsi:type="classifiers:Enumeration" href="../../sun/misc/FormattedFloatingDecimal$Form.class.xmi#//@classifiers.0"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                  </arguments>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="v">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Char"/>
                  <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="len">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0/@members.76"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.2/@variable"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="mant">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.50">
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.48">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.3/@variable"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.0/@variable"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// If the precision is zero and the '#' flag is set, add the</comments>
              <comments>// requested decimal point.</comments>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.4/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.56">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.4/@variable"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                    </arguments>
                  </next>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="exp">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.1"/>
                      <children xsi:type="literals:DecimalDoubleLiteral"/>
                    </expression>
                  </child>
                  <expressionIf xsi:type="arrays:ArrayInstantiationByValues">
                    <typeReference xsi:type="types:Char"/>
                    <arrayDimensionsBefore/>
                    <arrayInitializer>
                      <initialValues xsi:type="literals:CharacterLiteral" value="43"/>
                      <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
                      <initialValues xsi:type="literals:CharacterLiteral" value="48"/>
                    </arrayInitializer>
                  </expressionIf>
                  <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.49">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.3/@variable"/>
                  </expressionElse>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="newW">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.7/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.6/@variable">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.6"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.4/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.7/@variable"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                        </arguments>
                      </next>
                    </child>
                    <expressionIf xsi:type="literals:CharacterLiteral" value="69"/>
                    <expressionElse xsi:type="literals:CharacterLiteral" value="101"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="flags">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.40"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.14">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.16">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
                      </arguments>
                    </next>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="sign">
                <typeReference xsi:type="types:Char"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.6/@variable">
                  <arraySelectors>
                    <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </arraySelectors>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Assert">
              <condition xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.12/@variable"/>
                    <children xsi:type="literals:CharacterLiteral" value="43"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.12/@variable"/>
                    <children xsi:type="literals:CharacterLiteral" value="45"/>
                  </children>
                </expression>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.12/@variable"/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="tmp">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Char"/>
                  <sizes xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.6/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </sizes>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.6/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.15/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.6/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.15/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@statement/@statements.11/@variable"/>
                    <arguments xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </arguments>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.4"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="prec">
                  <typeReference xsi:type="types:Int">
                    <comments>// Create a new FormattedFloatingDecimal with the desired</comments>
                    <comments>// precision.</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </child>
                      <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="fd">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.1"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:EnumConstant" href="../../sun/misc/FormattedFloatingDecimal$Form.class.xmi#//@classifiers.0/@constants.2"/>
                        </next>
                        <target xsi:type="classifiers:Enumeration" href="../../sun/misc/FormattedFloatingDecimal$Form.class.xmi#//@classifiers.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="v">
                  <typeReference xsi:type="types:Char">
                    <comments>// MAX_FD_CHARS + 1 (round?)</comments>
                  </typeReference>
                  <arrayDimensionsBefore/>
                  <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                    <typeReference xsi:type="types:Char"/>
                    <sizes xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.29"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.1/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0/@members.74"/>
                            </next>
                          </arguments>
                        </next>
                        <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
                      </children>
                      <additiveOperators xsi:type="operators:Addition"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </sizes>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="len">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.1/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0/@members.76"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.2/@variable"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="mant">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsBefore/>
                  <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.50">
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.48">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.2/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.3/@variable"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// If the precision is zero and the '#' flag is set, add the</comments>
                <comments>// requested decimal point.</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.56">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.4/@variable"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                      </arguments>
                    </next>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </expression>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="newW">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.6/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.6"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Subtraction"/>
                    <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.4/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@statement/@statements.6/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.2"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.4"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.8"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="prec">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </condition>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="fd">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:EnumConstant" href="../../sun/misc/FormattedFloatingDecimal$Form.class.xmi#//@classifiers.0/@constants.3"/>
                          </next>
                          <target xsi:type="classifiers:Enumeration" href="../../sun/misc/FormattedFloatingDecimal$Form.class.xmi#//@classifiers.0"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="v">
                    <typeReference xsi:type="types:Char">
                      <comments>// MAX_FD_CHARS + 1 (round?)</comments>
                    </typeReference>
                    <arrayDimensionsBefore/>
                    <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                      <typeReference xsi:type="types:Char"/>
                      <sizes xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <children xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.29"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.2/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0/@members.74"/>
                              </next>
                            </arguments>
                          </next>
                          <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
                        </children>
                        <additiveOperators xsi:type="operators:Addition"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </sizes>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="len">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0/@members.76"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                      </next>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="exp">
                    <typeReference xsi:type="types:Char"/>
                    <arrayDimensionsBefore/>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.49">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.4/@variable"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                        <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ConditionalExpression">
                              <child xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.1"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              </child>
                              <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                              <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.2/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../sun/misc/FormattedFloatingDecimal.class.xmi#//@classifiers.0/@members.75"/>
                                </next>
                              </expressionElse>
                            </expression>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="mant">
                    <typeReference xsi:type="types:Char"/>
                    <arrayDimensionsBefore/>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.50">
                      <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.48">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.4/@variable"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <comments>// If the precision is zero and the '#' flag is set, add the</comments>
                  <comments>// requested decimal point.</comments>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.7/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.56">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.7/@variable"/>
                      </value>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                        </arguments>
                      </next>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </expression>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="newW">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.9/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable">
                                <next xsi:type="references:IdentifierReference"/>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </arguments>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.6"/>
                          </value>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:NotEqual"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable"/>
                        <children xsi:type="literals:NullLiteral"/>
                      </condition>
                      <elseStatement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.9/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.6"/>
                          </value>
                        </expression>
                      </elseStatement>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </condition>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.7/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.9/@variable"/>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                          <arguments xsi:type="expressions:ConditionalExpression">
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                                </arguments>
                              </next>
                            </child>
                            <expressionIf xsi:type="literals:CharacterLiteral" value="69"/>
                            <expressionElse xsi:type="literals:CharacterLiteral" value="101"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="flags">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.40"/>
                        </typeReference>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.14">
                            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.16">
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
                              </arguments>
                            </next>
                          </next>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="sign">
                        <typeReference xsi:type="types:Char"/>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable">
                          <arraySelectors>
                            <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </arraySelectors>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Assert">
                      <condition xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.12/@statement/@statements.2/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="43"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.12/@statement/@statements.2/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="45"/>
                          </children>
                        </expression>
                      </condition>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.12/@statement/@statements.2/@variable"/>
                        </next>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="tmp">
                        <typeReference xsi:type="types:Char"/>
                        <arrayDimensionsBefore/>
                        <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                          <typeReference xsi:type="types:Char"/>
                          <sizes xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable">
                              <next xsi:type="references:IdentifierReference"/>
                            </children>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </sizes>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.12/@statement/@statements.5/@variable"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <arguments xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable">
                              <next xsi:type="references:IdentifierReference"/>
                            </children>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </arguments>
                        </next>
                        <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                          <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                            <arguments xsi:type="literals:NullLiteral"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.12/@statement/@statements.5/@variable"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.12/@statement/@statements.1/@variable"/>
                            <arguments xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Subtraction"/>
                              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </arguments>
                            <arguments xsi:type="literals:NullLiteral"/>
                          </arguments>
                        </next>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@statement/@statements.5/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.4"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.6"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="prec">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable">
                          <comments>// assume that we want all of the digits</comments>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.5"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </condition>
                    </elseStatement>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="s">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.51">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="va">
                      <typeReference xsi:type="types:Char"/>
                      <arrayDimensionsBefore/>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="upper">
                      <typeReference xsi:type="types:Boolean"/>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                          </arguments>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                        <arguments xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.4/@variable"/>
                          <expressionIf xsi:type="references:StringReference" value="0X"/>
                          <expressionElse xsi:type="references:StringReference" value="0x"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ForLoop">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                            <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                          </next>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.6/@statement/@init"/>
                        <children xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                            </next>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </children>
                        <relationOperators xsi:type="operators:LessThan"/>
                      </condition>
                      <init xsi:type="variables:LocalVariable" name="i">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </init>
                      <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.6/@statement/@init"/>
                        <operator xsi:type="operators:PlusPlus"/>
                      </updates>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.3">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                        </arguments>
                      </next>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="idx">
                      <typeReference xsi:type="types:Int"/>
                      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.45"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="112"/>
                        </next>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
                          </next>
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.7/@variable"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="tmp">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.9/@statement/@statements.0/@variable">
                            <comments>// don't localize hex</comments>
                          </child>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.9/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.69"/>
                              <arguments xsi:type="references:IdentifierReference">
                                <next xsi:type="references:IdentifierReference">
                                  <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                              </arguments>
                            </next>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.9/@statement/@statements.0/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
                            </next>
                          </value>
                        </expression>
                      </statements>
                    </statement>
                    <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.4/@variable"/>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </child>
                          <expressionIf xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.50">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          </expressionIf>
                          <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.4/@variable"/>
                          <expressionIf xsi:type="literals:CharacterLiteral" value="80"/>
                          <expressionElse xsi:type="literals:CharacterLiteral" value="112"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.2/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@statements.0/@elseStatement/@elseStatement/@elseStatement/@statement/@statements.7/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Addition"/>
                            </arguments>
                          </next>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.47/@parameters.4"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.9"/>
                  </children>
                </condition>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="mantissa">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="v">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="len">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="i">
            <typeReference xsi:type="types:Int"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.0/@variable"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:CharacterLiteral" value="101"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@parameters.1"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="expressions:ExpressionList">
            <expressions xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expressions>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.0/@variable"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tmp">
            <typeReference xsi:type="types:Char"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Char"/>
              <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.0/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@parameters.0"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.2/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.0/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.48/@statements.2/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="exponent">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="v">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="len">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="i">
            <typeReference xsi:type="types:Int"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:CharacterLiteral" value="101"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </condition>
          <init xsi:type="expressions:ExpressionList">
            <expressions xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@parameters.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </value>
            </expressions>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
            <operator xsi:type="operators:MinusMinus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tmp">
            <typeReference xsi:type="types:Char"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Char"/>
              <sizes xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </sizes>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@parameters.0"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.3/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.49/@statements.3/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="addZeros">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="v">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="prec">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// Add zeros to the requested precision.</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="i">
            <typeReference xsi:type="types:Int">
              <comments>// Look for the dot.  If we don't find one, the we'll need to add</comments>
              <comments>// it before we add the zeros.</comments>
            </typeReference>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.0/@variable"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:CharacterLiteral" value="46"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="expressions:ExpressionList">
            <expressions xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </expressions>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.0/@variable"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="needDot">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:BooleanLiteral" value="true"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="outPrec">
            <typeReference xsi:type="types:Int">
              <comments>// Determine existing precision.</comments>
            </typeReference>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
                <next xsi:type="references:IdentifierReference"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.0/@variable"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.2/@variable"/>
                  <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </expression>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Assert">
          <condition xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.4/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.1"/>
              <relationOperators xsi:type="operators:LessThanOrEqual"/>
            </expression>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.4/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.1"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tmp">
            <typeReference xsi:type="types:Char">
              <comments>// Create new array with existing contents.</comments>
            </typeReference>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Char"/>
              <sizes xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.4/@variable"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.2/@variable"/>
                    <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </sizes>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.7/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
                <next xsi:type="references:IdentifierReference"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="start">
            <typeReference xsi:type="types:Int">
              <comments>// Add dot if previously determined to be necessary.</comments>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
              <next xsi:type="references:IdentifierReference"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.7/@variable">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@parameters.0">
                      <next xsi:type="references:IdentifierReference"/>
                    </position>
                  </arraySelectors>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:CharacterLiteral" value="46"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.9/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.2/@variable"/>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <comments>// Add zeros.</comments>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.7/@variable">
                <arraySelectors>
                  <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.11/@init"/>
                </arraySelectors>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:CharacterLiteral" value="48"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.11/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.7/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="j">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.9/@variable"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.11/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.50/@statements.7/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hexDouble">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="d">
          <typeReference xsi:type="types:Double"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="prec">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// Method assumes that d > 0.</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <comments>// Let Double.toHexString handle simple cases</comments>
          <statement xsi:type="statements:Return">
            <comments>// remove &quot;0x&quot;</comments>
            <returnValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.10"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.0"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
            </returnValue>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0/@members.10"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0"/>
              </child>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.0"/>
              <children xsi:type="literals:DecimalDoubleLiteral"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.1"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </children>
            <children xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.1"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
              <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Block">
            <statements xsi:type="statements:Assert">
              <condition xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
                    <relationOperators xsi:type="operators:LessThanOrEqual"/>
                  </children>
                </expression>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="exponent">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0/@members.4"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="subnormal">
                <typeReference xsi:type="types:Boolean"/>
                <initialValue xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.1/@variable"/>
                    <children xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.8"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </children>
                  </expression>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// If this is subnormal input so normalize (could be faster to</comments>
              <comments>// do as integer operation).</comments>
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0/@members.20"/>
                        <arguments xsi:type="literals:DecimalDoubleLiteral" decimalValue="1.0"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="54"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.0"/>
                    <assignmentOperator xsi:type="operators:AssignmentMultiplication"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.1/@variable">
                      <comments>// Calculate the exponent.  This is not just exponent + 54</comments>
                      <comments>// since the former is not the normalized exponent.</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0/@members.4"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.0"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../sun/misc/FpUtils.class.xmi#//@classifiers.0"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Assert">
                  <condition xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.1/@variable"/>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.8"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                      </children>
                      <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                    </children>
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.1/@variable"/>
                      <children xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.7"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                      </children>
                      <relationOperators xsi:type="operators:LessThanOrEqual"/>
                    </children>
                  </condition>
                  <errorMessage xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.1/@variable"/>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.2/@variable"/>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="precision">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <children xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.1"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </children>
                  <additiveOperators xsi:type="operators:Addition"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="shiftDistance">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.6"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.4/@variable"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Assert">
              <condition xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.6"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                    </children>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </children>
                </expression>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="doppel">
                <typeReference xsi:type="types:Long"/>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.29"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@parameters.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="newSignif">
                <typeReference xsi:type="types:Long">
                  <comments>// Deterime the number of bits to keep.</comments>
                </typeReference>
                <initialValue xsi:type="expressions:ShiftExpression">
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.7/@variable"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:InclusiveOrExpression">
                          <children xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.12"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                          </children>
                          <children xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.13"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                          </children>
                        </expression>
                      </children>
                    </expression>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                  <shiftOperators xsi:type="operators:RightShift"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="roundingBits">
                <typeReference xsi:type="types:Long">
                  <comments>// Bits to round away.</comments>
                </typeReference>
                <initialValue xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.7/@variable"/>
                  <children xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Complement"/>
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ShiftExpression">
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Complement"/>
                          <child xsi:type="literals:DecimalLongLiteral" decimalValue="0"/>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                        <shiftOperators xsi:type="operators:LeftShift"/>
                      </expression>
                    </child>
                  </children>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="leastZero">
                <typeReference xsi:type="types:Boolean">
                  <comments>// To decide how to round, look at the low-order bit of the</comments>
                  <comments>// working significand, the highest order discarded bit (the</comments>
                  <comments>// round bit) and whether any of the lower order discarded bits</comments>
                  <comments>// are nonzero (the sticky bit).</comments>
                </typeReference>
                <initialValue xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.8/@variable"/>
                      <children xsi:type="literals:HexLongLiteral" hexValue="1"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalLongLiteral" decimalValue="0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="round">
                <typeReference xsi:type="types:Boolean"/>
                <initialValue xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:AndExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:ShiftExpression">
                          <children xsi:type="literals:DecimalLongLiteral" decimalValue="1"/>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </expression>
                          </children>
                          <shiftOperators xsi:type="operators:LeftShift"/>
                        </expression>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.9/@variable"/>
                    </expression>
                  </children>
                  <children xsi:type="literals:DecimalLongLiteral" decimalValue="0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="sticky">
                <typeReference xsi:type="types:Boolean"/>
                <initialValue xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <relationOperators xsi:type="operators:GreaterThan"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AndExpression">
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Complement"/>
                          <child xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:ShiftExpression">
                              <children xsi:type="literals:DecimalLongLiteral" decimalValue="1"/>
                              <children xsi:type="expressions:NestedExpression">
                                <expression xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                  <additiveOperators xsi:type="operators:Subtraction"/>
                                </expression>
                              </children>
                              <shiftOperators xsi:type="operators:LeftShift"/>
                            </expression>
                          </child>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.9/@variable"/>
                      </expression>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </children>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:SuffixUnaryModificationExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.8/@variable"/>
                    <operator xsi:type="operators:PlusPlus"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.10/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.11/@variable"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.12/@variable"/>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.10/@variable"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.11/@variable"/>
                  </expression>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="signBit">
                <typeReference xsi:type="types:Long"/>
                <initialValue xsi:type="expressions:AndExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.7/@variable"/>
                  <children xsi:type="references:IdentifierReference">
                    <next xsi:type="references:IdentifierReference">
                      <target xsi:type="members:Field" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0/@members.11"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../sun/misc/DoubleConsts.class.xmi#//@classifiers.0"/>
                  </children>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.8/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="expressions:InclusiveOrExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.14/@variable"/>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ShiftExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.8/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.5/@variable"/>
                      <shiftOperators xsi:type="operators:LeftShift"/>
                    </expression>
                  </children>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="result">
                <typeReference xsi:type="types:Double"/>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.31"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.8/@variable"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Return">
                  <comments>// Infinite result generated by rounding</comments>
                  <returnValue xsi:type="references:StringReference" value="1.0p1024"/>
                </statements>
              </statement>
              <condition xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.15"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.16/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="res">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../lang/Double.class.xmi#//@classifiers.0/@members.10"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.16/@variable"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../lang/Double.class.xmi#//@classifiers.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.0/@variable"/>
                  </statement>
                  <condition xsi:type="expressions:UnaryExpression">
                    <operators xsi:type="operators:Negate"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.2/@variable"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="idx">
                        <typeReference xsi:type="types:Int">
                          <comments>// Create a normalized subnormal string.</comments>
                        </typeReference>
                        <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.45"/>
                            <arguments xsi:type="literals:CharacterLiteral" value="112"/>
                          </next>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:Block">
                        <statements xsi:type="statements:Assert">
                          <comments>// No 'p' character in hex string.</comments>
                          <condition xsi:type="literals:BooleanLiteral"/>
                        </statements>
                        <statements xsi:type="statements:Return">
                          <returnValue xsi:type="literals:NullLiteral"/>
                        </statements>
                      </statement>
                      <condition xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.1/@elseStatement/@statements.0/@variable"/>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </condition>
                      <elseStatement xsi:type="statements:Block">
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="exp">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <comments>// Get exponent and append at the end.</comments>
                                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.55"/>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.1/@elseStatement/@statements.0/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                  <additiveOperators xsi:type="operators:Addition"/>
                                </arguments>
                              </next>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="iexp">
                            <typeReference xsi:type="types:Int"/>
                            <initialValue xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.19"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.1/@elseStatement/@statements.1/@elseStatement/@statements.0/@variable"/>
                                </next>
                                <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="54"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:Return">
                          <returnValue xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.56"/>
                                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.1/@elseStatement/@statements.0/@variable"/>
                              </next>
                            </children>
                            <children xsi:type="references:StringReference" value="p"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../lang/Integer.class.xmi#//@classifiers.0/@members.15"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.51/@statements.0/@elseStatement/@statements.17/@elseStatement/@statements.1/@elseStatement/@statements.1/@elseStatement/@statements.1/@variable"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../lang/Integer.class.xmi#//@classifiers.0"/>
                            </children>
                            <additiveOperators xsi:type="operators:Addition"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </returnValue>
                        </statements>
                      </elseStatement>
                    </statements>
                  </elseStatement>
                </statements>
              </elseStatement>
            </statements>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.61">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@parameters.0"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.9"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="neg">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.75"/>
                </next>
              </children>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="v">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.69"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.42">
            <comments>// leading sign indicator</comments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.1/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.2/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.53">
            <comments>// the value</comments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.1/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.3/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.5"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.2/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.43">
            <comments>// trailing sign indicator</comments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.1/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.2/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <comments>// justify based on width</comments>
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.28">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.52/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
                  </next>
                </arguments>
              </arguments>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="precision">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="neg">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// value > 0</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="prec">
                <typeReference xsi:type="types:Int">
                  <comments>// Create a new BigDecimal with the desired precision.</comments>
                </typeReference>
                <initialValue xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.5"/>
                      <children xsi:type="expressions:UnaryExpression">
                        <operators xsi:type="operators:Subtraction"/>
                        <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </children>
                    </child>
                    <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                    <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.5"/>
                  </expression>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="scale">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.76"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="origPrec">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.77"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="nzeros">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="compPrec">
                <typeReference xsi:type="types:Int"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.2/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.3/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.0/@variable"/>
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.2/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </expression>
                      </children>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </value>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.2/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </children>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Addition"/>
                    </value>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="mc">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../math/MathContext.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../math/MathContext.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.4/@variable"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="v">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.78"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.1/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.6/@variable"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="bdl">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.39/@members.54"/>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.39/@members.54"/>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.7/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.78"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.7/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.76"/>
                    </next>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@constants.0"/>
                  </arguments>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="mant">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.8/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.6"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <comments>// Add a decimal point if necessary.  The mantissa may not</comments>
              <comments>// contain a decimal point if the scale is zero (the internal</comments>
              <comments>// representation has no fractional part) or the original</comments>
              <comments>// precision is one. Append a decimal point if '#' is set or if</comments>
              <comments>// we require zero padding to get to the requested precision.</comments>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.9/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.56">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.9/@variable"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalOrExpression">
                    <children xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.2/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.8/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.4"/>
                      </child>
                    </children>
                  </expression>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalOrExpression">
                    <children xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.3/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                          </arguments>
                        </next>
                      </expression>
                    </children>
                  </expression>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.9/@variable">
                  <comments>// Add trailing zeros in the case precision is greater than</comments>
                  <comments>// the number of available digits after the decimal separator.</comments>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.57">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.9/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.3/@variable"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="exp">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.8/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.7"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="newW">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.13/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                    <arguments xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.12/@variable">
                        <next xsi:type="references:IdentifierReference"/>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.6"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.9/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.13/@variable"/>
                <arguments xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="expressions:ConditionalExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3">
                      <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
                        </arguments>
                      </next>
                    </child>
                    <expressionIf xsi:type="literals:CharacterLiteral" value="69"/>
                    <expressionElse xsi:type="literals:CharacterLiteral" value="101"/>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="flags">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.40"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.14">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.16">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
                      </arguments>
                    </next>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="sign">
                <typeReference xsi:type="types:Char"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.12/@variable">
                  <arraySelectors>
                    <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </arraySelectors>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Assert">
              <condition xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.18/@variable"/>
                    <children xsi:type="literals:CharacterLiteral" value="43"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.18/@variable"/>
                    <children xsi:type="literals:CharacterLiteral" value="45"/>
                  </children>
                </expression>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.12/@variable">
                    <arraySelectors>
                      <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </arraySelectors>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="tmp">
                <typeReference xsi:type="types:Char"/>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Char"/>
                  <sizes xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.12/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </sizes>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.12/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.21/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.12/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                    <arguments xsi:type="literals:NullLiteral"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.21/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@statement/@statements.17/@variable"/>
                    <arguments xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </arguments>
                    <arguments xsi:type="literals:NullLiteral"/>
                  </arguments>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.4"/>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="prec">
                  <typeReference xsi:type="types:Int">
                    <comments>// Create a new BigDecimal with the desired precision.</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.5"/>
                        <children xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        </children>
                      </child>
                      <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.5"/>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="scale">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.76"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="origPrec">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.77"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="nzeros">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="compPrec">
                  <typeReference xsi:type="types:Int"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.4/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.2/@variable"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.3/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.1/@variable"/>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.1/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                  <relationOperators xsi:type="operators:LessThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.4/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.2/@variable"/>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.1/@variable"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.0/@variable"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </expression>
                        </children>
                        <additiveOperators xsi:type="operators:Subtraction"/>
                      </value>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="mc">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../math/MathContext.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../math/MathContext.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.4/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="v">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.78"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.1/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.6/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="bdl">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.39/@members.54"/>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.39/@members.54"/>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.7/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.78"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.7/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.76"/>
                      </next>
                    </arguments>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@constants.1"/>
                    </arguments>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="mant">
                  <typeReference xsi:type="types:Char"/>
                  <arrayDimensionsAfter/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.8/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.6"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <comments>// Add a decimal point if necessary.  The mantissa may not</comments>
                <comments>// contain a decimal point if the scale is zero (the internal</comments>
                <comments>// representation has no fractional part).  Append a decimal</comments>
                <comments>// point if '#' is set or we require zero padding to get to the</comments>
                <comments>// requested precision.</comments>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.9/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.56">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.8/@variable">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.6"/>
                      </arguments>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.1/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  </children>
                  <children xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalOrExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3">
                        <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
                          </arguments>
                        </next>
                      </children>
                      <children xsi:type="expressions:RelationExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.3/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <relationOperators xsi:type="operators:GreaterThan"/>
                      </children>
                    </expression>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.9/@variable">
                    <comments>// Add trailing zeros if the precision is greater than the</comments>
                    <comments>// number of available digits after the decimal separator.</comments>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.57">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.9/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.3/@variable"/>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@statement/@statements.9/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.55">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.6"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.2"/>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.4"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.8"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="prec">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.5"/>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.5"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.5"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    </condition>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="tenToTheNegFour">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.45"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="tenToThePrec">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.45"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <arguments xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        </arguments>
                      </next>
                      <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="e">
                        <typeReference xsi:type="types:Int"/>
                        <initialValue xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="expressions:UnaryExpression">
                            <operators xsi:type="operators:Subtraction"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.76"/>
                              </next>
                            </child>
                          </children>
                          <children xsi:type="expressions:NestedExpression">
                            <expression xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                                <next xsi:type="references:MethodCall">
                                  <next xsi:type="references:MethodCall">
                                    <next xsi:type="references:MethodCall">
                                      <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.22"/>
                                    </next>
                                    <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.113"/>
                                  </next>
                                  <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.78"/>
                                </next>
                              </children>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </expression>
                          </children>
                          <additiveOperators xsi:type="operators:Addition"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable">
                          <comments>// xxx.yyy</comments>
                          <comments>//   g precision (# sig digits) = #x + #y</comments>
                          <comments>//   f precision = #y</comments>
                          <comments>//   exponent = #x - 1</comments>
                          <comments>// => f precision = g precision - exponent - 1</comments>
                          <comments>// 0.000zzz</comments>
                          <comments>//   g precision (# sig digits) = #z</comments>
                          <comments>//   f precision = #0 (after '.') + #z</comments>
                          <comments>//   exponent = - #0 (after '.') - 1</comments>
                          <comments>// => f precision = g precision - exponent - 1</comments>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.4/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </value>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.53">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.2"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.8"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.6"/>
                      </expression>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:ConditionalOrExpression">
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.88"/>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.10"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../math/BigDecimal.class.xmi#//@classifiers.0"/>
                          </arguments>
                        </next>
                      </expression>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalAndExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.87"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.2/@variable"/>
                              </next>
                            </children>
                            <children xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Subtraction"/>
                              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </children>
                          </expression>
                        </children>
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../math/BigDecimal.class.xmi#//@classifiers.0/@members.87"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.3/@variable"/>
                              </next>
                            </children>
                            <children xsi:type="expressions:UnaryExpression">
                              <operators xsi:type="operators:Subtraction"/>
                              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            </children>
                          </expression>
                        </children>
                      </expression>
                    </children>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.53">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.0"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.1"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.2"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.3"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.4"/>
                        </arguments>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@statements.0/@elseStatement/@elseStatement/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.6"/>
                      </expression>
                    </statements>
                  </elseStatement>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.4"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.6"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Assert">
                    <comments>// This conversion isn't supported.  The error should be</comments>
                    <comments>// reported earlier.</comments>
                    <condition xsi:type="literals:BooleanLiteral"/>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.53/@parameters.4"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.9"/>
                  </children>
                </condition>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="classifiers:Class" name="BigDecimalLayout">
        <members xsi:type="members:Field" name="mant">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <annotationsAndModifiers xsi:type="modifiers:Private"/>
        </members>
        <members xsi:type="members:Field" name="exp">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <annotationsAndModifiers xsi:type="modifiers:Private"/>
        </members>
        <members xsi:type="members:Field" name="dot">
          <initialValue xsi:type="literals:BooleanLiteral"/>
          <typeReference xsi:type="types:Boolean"/>
          <annotationsAndModifiers xsi:type="modifiers:Private"/>
        </members>
        <members xsi:type="members:Constructor" name="BigDecimalLayout">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.9">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.3/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.3/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.3/@parameters.2"/>
            </expression>
          </statements>
          <parameters xsi:type="parameters:OrdinaryParameter" name="intVal">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../math/BigInteger.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameters>
          <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
            <typeReference xsi:type="types:Int"/>
          </parameters>
          <parameters xsi:type="parameters:OrdinaryParameter" name="form">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.37"/>
            </typeReference>
          </parameters>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
        </members>
        <members xsi:type="members:ClassMethod" name="hasDot">
          <typeReference xsi:type="types:Boolean"/>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.2"/>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="layoutChars">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <annotationsAndModifiers xsi:type="modifiers:Public">
            <comments>// char[] with canonical string representation</comments>
          </annotationsAndModifiers>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sb">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.5/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="69"/>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.5/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1"/>
                  </next>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.5/@statements.0/@variable"/>
            </returnValue>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="mantissa">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <annotationsAndModifiers xsi:type="modifiers:Public"/>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0"/>
            </returnValue>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="exponent">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <annotationsAndModifiers xsi:type="modifiers:Public">
            <comments>// The exponent will be formatted as a sign ('+' or '-') followed</comments>
            <comments>// by the exponent zero-padded to include at least two digits.</comments>
          </annotationsAndModifiers>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.54/@members.8">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1"/>
            </returnValue>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="toCharArray">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
          <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameters>
          <annotationsAndModifiers xsi:type="modifiers:Private"/>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:NullLiteral"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.8/@parameters.0"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="result">
              <typeReference xsi:type="types:Char"/>
              <arrayDimensionsBefore/>
              <initialValue xsi:type="arrays:ArrayInstantiationBySize">
                <typeReference xsi:type="types:Char"/>
                <sizes xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.8/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/AbstractStringBuilder.class.xmi#//@classifiers.0/@members.5"/>
                  </next>
                </sizes>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.8/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/AbstractStringBuilder.class.xmi#//@classifiers.0/@members.16"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.8/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.8/@statements.1/@variable"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.8/@statements.1/@variable"/>
          </statements>
        </members>
        <members xsi:type="members:ClassMethod" name="layout">
          <typeReference xsi:type="types:Void"/>
          <parameters xsi:type="parameters:OrdinaryParameter" name="intVal">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../math/BigInteger.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameters>
          <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
            <typeReference xsi:type="types:Int"/>
          </parameters>
          <parameters xsi:type="parameters:OrdinaryParameter" name="form">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.37"/>
            </typeReference>
          </parameters>
          <annotationsAndModifiers xsi:type="modifiers:Private"/>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="coeff">
              <typeReference xsi:type="types:Char"/>
              <arrayDimensionsAfter/>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../math/BigInteger.class.xmi#//@classifiers.0/@members.113"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                <comments>// Construct a buffer, with sufficient capacity for all cases.</comments>
                <comments>// If E-notation is needed, length will be: +1 if negative, +1</comments>
                <comments>// if '.' needed, +2 for &quot;E+&quot;, + up to 10 for adjusted</comments>
                <comments>// exponent.  Otherwise it could have +1 if negative, plus</comments>
                <comments>// leading &quot;0.00000&quot;</comments>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="len">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                          <arraySelectors>
                            <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </arraySelectors>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                            <arguments xsi:type="literals:CharacterLiteral" value="46"/>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.2"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="literals:BooleanLiteral" value="true"/>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.12"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="instantiations:NewConstructorCall">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <arguments xsi:type="references:StringReference" value="+"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1">
                            <next xsi:type="references:MethodCall">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.15"/>
                                <arguments xsi:type="expressions:AdditiveExpression">
                                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                  <additiveOperators xsi:type="operators:Subtraction"/>
                                </arguments>
                              </next>
                              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                              <arguments xsi:type="references:StringReference" value="0"/>
                            </next>
                          </expression>
                        </statement>
                        <condition xsi:type="expressions:RelationExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                          <relationOperators xsi:type="operators:LessThan"/>
                        </condition>
                        <elseStatement xsi:type="statements:ExpressionStatement">
                          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.15"/>
                              <arguments xsi:type="expressions:AdditiveExpression">
                                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                                <additiveOperators xsi:type="operators:Subtraction"/>
                              </arguments>
                            </next>
                          </expression>
                        </elseStatement>
                      </statements>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.2"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@constants.0"/>
                      </children>
                    </condition>
                    <elseStatement xsi:type="statements:Block">
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.12"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable"/>
                            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                            <arguments xsi:type="expressions:AdditiveExpression">
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                              <additiveOperators xsi:type="operators:Subtraction"/>
                            </arguments>
                          </next>
                        </expression>
                      </statements>
                    </elseStatement>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1"/>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="instantiations:NewConstructorCall">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <arguments xsi:type="references:StringReference" value="+00"/>
                        </value>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:EqualityExpression">
                      <equalityOperators xsi:type="operators:Equal"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.2"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@constants.0"/>
                      </children>
                    </condition>
                  </statements>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Return"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.1"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="adjusted">
              <typeReference xsi:type="types:Long"/>
              <initialValue xsi:type="expressions:AdditiveExpression">
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Long"/>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.1"/>
                  </child>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </expression>
                </children>
                <additiveOperators xsi:type="operators:Addition"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="pad">
                  <typeReference xsi:type="types:Int">
                    <comments>// count of padding zeros</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.1"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <comments>// 0.xxx form</comments>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                        <arguments xsi:type="references:StringReference" value="0."/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.2"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ForLoop">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                        </next>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.4/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      <relationOperators xsi:type="operators:GreaterThan"/>
                    </condition>
                    <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.4/@statement/@statements.0/@variable"/>
                      <operator xsi:type="operators:MinusMinus"/>
                    </updates>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.11"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.4/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <comments>// xx.xx form</comments>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.12"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                        <arguments xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.4/@statement/@statements.0/@variable"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="46"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.2"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.12"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable"/>
                        <arguments xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Subtraction"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.4/@statement/@statements.0/@variable"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.1"/>
                      </next>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@parameters.2"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.37/@constants.1"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                  <comments>// x.xxx form</comments>
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                      <arraySelectors>
                        <position xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                      </arraySelectors>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="literals:CharacterLiteral" value="46"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.2"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:BooleanLiteral" value="true"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.12"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable"/>
                        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                        <arguments xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                            <next xsi:type="references:IdentifierReference"/>
                          </children>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:RelationExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <relationOperators xsi:type="operators:GreaterThan"/>
                </condition>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </value>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="abs">
                      <typeReference xsi:type="types:Long"/>
                      <initialValue xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/Math.class.xmi#//@classifiers.0/@members.30"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.3/@variable"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../lang/Math.class.xmi#//@classifiers.0"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1">
                      <comments>// require sign</comments>
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:RelationExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.3/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                            <relationOperators xsi:type="operators:LessThan"/>
                          </child>
                          <expressionIf xsi:type="literals:CharacterLiteral" value="45"/>
                          <expressionElse xsi:type="literals:CharacterLiteral" value="43"/>
                        </arguments>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Condition">
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                          <arguments xsi:type="literals:CharacterLiteral" value="48"/>
                        </next>
                      </expression>
                    </statement>
                    <condition xsi:type="expressions:RelationExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.4/@elseStatement/@statements.3/@statement/@statements.0/@variable"/>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
                      <relationOperators xsi:type="operators:LessThan"/>
                    </condition>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.16"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.4/@elseStatement/@statements.3/@statement/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.9/@statements.3/@variable"/>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                </condition>
                <elseStatement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.54/@members.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                        <arguments xsi:type="references:StringReference" value="+00"/>
                      </next>
                    </expression>
                  </statements>
                </elseStatement>
              </statements>
            </elseStatement>
          </statements>
        </members>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:ClassMethod" name="adjustWidth">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="width">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="neg">
          <typeReference xsi:type="types:Boolean"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="newW">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.55/@parameters.0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.55/@statements.0/@variable"/>
              <operator xsi:type="operators:MinusMinus"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.55/@statements.0/@variable"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.55/@parameters.2"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.55/@parameters.1">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
                </arguments>
              </next>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.55/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="addDot">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mant">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// Add a '.' to th mantissa if required</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tmp">
            <typeReference xsi:type="types:Char"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@parameters.0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="arrays:ArrayInstantiationBySize">
              <typeReference xsi:type="types:Char"/>
              <sizes xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@parameters.0">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </sizes>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@parameters.0"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@statements.0/@variable"/>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@parameters.0">
                <next xsi:type="references:IdentifierReference"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@statements.0/@variable">
              <arraySelectors>
                <position xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@statements.0/@variable">
                    <next xsi:type="references:IdentifierReference"/>
                  </children>
                  <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </position>
              </arraySelectors>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:CharacterLiteral" value="46"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.56/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="trailingZeros">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mant">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="nzeros">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// Add trailing zeros in the case precision is greater than the number</comments>
          <comments>// of available digits after the decimal separator.</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tmp">
            <typeReference xsi:type="types:Char"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@parameters.0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="arrays:ArrayInstantiationBySize">
                  <typeReference xsi:type="types:Char"/>
                  <sizes xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@parameters.0">
                      <next xsi:type="references:IdentifierReference"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@parameters.1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </sizes>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/System.class.xmi#//@classifiers.0/@members.20"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@parameters.0"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.0/@variable"/>
                  <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@parameters.0">
                    <next xsi:type="references:IdentifierReference"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../lang/System.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.1/@statement/@statements.2/@init"/>
                    </arraySelectors>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:CharacterLiteral" value="48"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.1/@statement/@statements.2/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@parameters.0">
                  <next xsi:type="references:IdentifierReference"/>
                </initialValue>
              </init>
              <updates xsi:type="expressions:SuffixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.1/@statement/@statements.2/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.57/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="s">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// justify based on width</comments>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.28">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
                </next>
              </arguments>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@statements.2/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.70"/>
                </next>
              </value>
            </expression>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.1">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
              </arguments>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.58/@statements.2/@variable"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="print">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../lang/Appendable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Assert">
          <condition xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </expression>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.0"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'H' (00 - 23)</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.1"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'I' (01 - 12)</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.2"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'k' (0 - 23) -- like H</comments>
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'l' (1 - 12) -- like I</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.12"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.3/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="expressions:ConditionalOrExpression">
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.3/@statements.0/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </children>
                          <children xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:Equal"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.3/@statements.0/@statements.0/@variable"/>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
                          </children>
                        </child>
                        <expressionIf xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
                        <expressionElse xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.3/@statements.0/@statements.0/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
                          <multiplicativeOperators xsi:type="operators:Remainder"/>
                        </expressionElse>
                      </expression>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.1"/>
                    </children>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.3"/>
                    </children>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:ConditionalOrExpression">
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.0"/>
                          </children>
                        </children>
                        <children xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.1"/>
                          </children>
                        </children>
                      </child>
                      <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                      </expressionIf>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1"/>
                      </expressionElse>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.3/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.3/@statements.0/@statements.2/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.3"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'M' (00 - 59)</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.13"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.4/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.4/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.4"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'N' (000000000 - 999999999)</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.15"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1000000"/>
                    <multiplicativeOperators xsi:type="operators:Multiplication"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.5/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.5/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="9"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.5"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'L' (000 - 999)</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.15"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.6/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.6/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.6"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Long">
                    <comments>// 'Q' (0 - 99...?)</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.94"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.7/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.7/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.7"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="ampm">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// 'p' (am or pm)</comments>
                      <comments>// Calendar.AM = 0, Calendar.PM = 1, LocaleElements defines upper</comments>
                      <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arrayDimensionsBefore/>
                  <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                    <arrayInitializer>
                      <initialValues xsi:type="references:StringReference" value="AM"/>
                      <initialValues xsi:type="references:StringReference" value="PM"/>
                    </arrayInitializer>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:LocalVariableStatement">
                    <variable name="dfs">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <initialValue xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                      </initialValue>
                    </variable>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.8/@statements.0/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.8/@statements.0/@statements.1/@statement/@statements.0/@variable">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0/@members.25"/>
                        </next>
                      </value>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    <children xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                    </children>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="s">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.8/@statements.0/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                          <arguments xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.10"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                          </arguments>
                        </next>
                      </position>
                    </arraySelectors>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.8/@statements.0/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.67"/>
                        <arguments xsi:type="expressions:ConditionalExpression">
                          <child xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                            <children xsi:type="literals:NullLiteral"/>
                          </child>
                          <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                          <expressionElse xsi:type="references:IdentifierReference">
                            <next xsi:type="references:IdentifierReference">
                              <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                          </expressionElse>
                        </arguments>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.8"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Long">
                    <comments>// 's' (0 - 99...?)</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.94"/>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1000"/>
                    <multiplicativeOperators xsi:type="operators:Division"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.9/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.9/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.9"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'S' (00 - 60 - leap second)</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.14"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.10/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.10/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.10"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'z' ({-|+}####) - ls minus?</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.16"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="neg">
                  <typeReference xsi:type="types:Boolean"/>
                  <initialValue xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:LessThan"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.1/@variable"/>
                      <expressionIf xsi:type="literals:CharacterLiteral" value="45"/>
                      <expressionElse xsi:type="literals:CharacterLiteral" value="43"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Subtraction"/>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.0/@variable"/>
                    </value>
                  </expression>
                </statement>
                <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.1/@variable"/>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="min">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="expressions:MultiplicativeExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60000"/>
                    <multiplicativeOperators xsi:type="operators:Division"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="offset">
                  <typeReference xsi:type="types:Int">
                    <comments>// combine minute and hour into a single integer</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:MultiplicativeExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.4/@variable"/>
                          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                          <multiplicativeOperators xsi:type="operators:Division"/>
                        </expression>
                      </children>
                      <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                      <multiplicativeOperators xsi:type="operators:Multiplication"/>
                    </children>
                    <children xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:MultiplicativeExpression">
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.4/@variable"/>
                        <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="60"/>
                        <multiplicativeOperators xsi:type="operators:Remainder"/>
                      </expression>
                    </children>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.5/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.11/@statements.0/@statements.6/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.12"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="tz">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// 'Z' (symbol)</comments>
                      <target xsi:type="classifiers:Class" href="TimeZone.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.126"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.12/@statements.0/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="TimeZone.class.xmi#//@classifiers.0/@members.25"/>
                        <arguments xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:EqualityExpression">
                            <equalityOperators xsi:type="operators:NotEqual"/>
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                                <arguments xsi:type="references:IdentifierReference">
                                  <next xsi:type="references:IdentifierReference">
                                    <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.17"/>
                                  </next>
                                  <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                                </arguments>
                              </next>
                            </children>
                            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                          </expression>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="TimeZone.class.xmi#//@classifiers.0/@members.0"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="TimeZone.class.xmi#//@classifiers.0"/>
                        </arguments>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.13"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// Date</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.14"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'a'</comments>
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'A'</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.8"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="lt">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </expression>
                      </child>
                      <expressionIf xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                      </expressionIf>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="dfs">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.14/@statements.0/@statements.1/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.14/@statements.0/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.14/@statements.0/@statements.0/@variable"/>
                          </arraySelectors>
                          <target xsi:type="members:ClassMethod" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0/@members.21"/>
                        </next>
                      </arguments>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.15"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.14/@statements.0/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.14/@statements.0/@statements.0/@variable"/>
                          </arraySelectors>
                          <target xsi:type="members:ClassMethod" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0/@members.23"/>
                        </next>
                      </arguments>
                    </next>
                  </expression>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.15"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.16"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'b'</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.21"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'h' -- same b</comments>
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'B'</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.2"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="lt">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </expression>
                      </child>
                      <expressionIf xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                      </expressionIf>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="dfs">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.17/@statements.0/@statements.1/@variable"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.17/@statements.0/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.17/@statements.0/@statements.0/@variable"/>
                          </arraySelectors>
                          <target xsi:type="members:ClassMethod" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0/@members.17"/>
                        </next>
                      </arguments>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.17"/>
                  </children>
                </condition>
                <elseStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.17/@statements.0/@statements.2/@variable">
                        <next xsi:type="references:MethodCall">
                          <arraySelectors>
                            <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.17/@statements.0/@statements.0/@variable"/>
                          </arraySelectors>
                          <target xsi:type="members:ClassMethod" href="../text/DateFormatSymbols.class.xmi#//@classifiers.0/@members.19"/>
                        </next>
                      </arguments>
                    </next>
                  </expression>
                </elseStatement>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.17"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.18"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'C' (00 - 99)</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.24"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'y' (00 - 99)</comments>
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'Y' (0000 - 9999)</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.1"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="size">
                  <typeReference xsi:type="types:Int"/>
                  <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                </variable>
              </statements>
              <statements xsi:type="statements:Switch">
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.20/@statements.0/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:AssignmentDivision"/>
                      <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.18"/>
                  </condition>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.20/@statements.0/@statements.0/@variable"/>
                      <assignmentOperator xsi:type="operators:AssignmentModulo"/>
                      <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="100"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.24"/>
                  </condition>
                </cases>
                <cases xsi:type="statements:NormalSwitchCase">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.20/@statements.0/@statements.1/@variable"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.25"/>
                  </condition>
                </cases>
                <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.20/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.20/@statements.0/@statements.3/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.20/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.25"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.19"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'd' (01 - 31)</comments>
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'e' (1 - 31) -- like d</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.5"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="expressions:NestedExpression">
                    <expression xsi:type="expressions:ConditionalExpression">
                      <child xsi:type="expressions:EqualityExpression">
                        <equalityOperators xsi:type="operators:Equal"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.19"/>
                        </children>
                      </child>
                      <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                      </expressionIf>
                      <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.1"/>
                      </expressionElse>
                    </expression>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.22/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.22/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.20"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'j' (001 - 366)</comments>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                      <arguments xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.7"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                      </arguments>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.23/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.23/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.22"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="i">
                  <typeReference xsi:type="types:Int">
                    <comments>// 'm' (01 - 12)</comments>
                  </typeReference>
                  <initialValue xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="Calendar.class.xmi#//@classifiers.0/@members.96"/>
                        <arguments xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference">
                            <target xsi:type="members:Field" href="Calendar.class.xmi#//@classifiers.0/@members.2"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="Calendar.class.xmi#//@classifiers.0"/>
                        </arguments>
                      </next>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Addition"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="flags">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.40"/>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.7"/>
                    <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.63">
                      <arguments xsi:type="literals:NullLiteral"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.24/@statements.0/@statements.0/@variable"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.24/@statements.0/@statements.1/@variable"/>
                      <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.23"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// Composites</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.11"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// 'T' (24 hour hh:mm:ss - %tH:%tM:%tS)</comments>
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sep">
                  <typeReference xsi:type="types:Char">
                    <comments>// 'R' (hh:mm same as %H:%M)</comments>
                  </typeReference>
                  <initialValue xsi:type="literals:CharacterLiteral" value="58"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.26/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.0"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.4"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.26/@statements.0/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.10"/>
                      </arguments>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                    </expression>
                  </statements>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.11"/>
                  </children>
                </condition>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.27"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sep">
                  <typeReference xsi:type="types:Char">
                    <comments>// 'r' (hh:mm:ss [AP]M)</comments>
                  </typeReference>
                  <initialValue xsi:type="literals:CharacterLiteral" value="58"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.27/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.1"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.27/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.4"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="literals:CharacterLiteral" value="32"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.10"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="tsb">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <comments>// this may be in wrong place for some locales</comments>
                      <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.27/@statements.0/@statements.4/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.8"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.27/@statements.0/@statements.4/@variable">
                      <next xsi:type="references:MethodCall">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.69"/>
                          <arguments xsi:type="expressions:ConditionalExpression">
                            <child xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </child>
                            <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                            <expressionElse xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                            </expressionElse>
                          </arguments>
                        </next>
                        <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
                      </next>
                    </arguments>
                  </next>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.26"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sep">
                  <typeReference xsi:type="types:Char">
                    <comments>// 'c' (Sat Nov 04 12:02:33 EST 1999)</comments>
                  </typeReference>
                  <initialValue xsi:type="literals:CharacterLiteral" value="32"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.28/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.14"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.28/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.16"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.28/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.19"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.28/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.11"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.28/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.13"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.25"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.28"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sep">
                  <typeReference xsi:type="types:Char">
                    <comments>// 'D' (mm/dd/yy)</comments>
                  </typeReference>
                  <initialValue xsi:type="literals:CharacterLiteral" value="47"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.29/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.23"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.29/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.19"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.24"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.29"/>
            </condition>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="sep">
                  <typeReference xsi:type="types:Char">
                    <comments>// 'F' (%Y-%m-%d)</comments>
                  </typeReference>
                  <initialValue xsi:type="literals:CharacterLiteral" value="45"/>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.30/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.25"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="../lang/Appendable.class.xmi#//@classifiers.0/@members.2"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@statements.2/@cases.30/@statements.0/@statements.0/@variable"/>
                  </next>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.23"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.59">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.1"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.19"/>
                  </arguments>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.3"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Break"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.30"/>
            </condition>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Assert">
              <condition xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.2"/>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.59/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="failMismatch">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// -- Methods to support throwing exceptions --</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="fs">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.60/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.20"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="FormatFlagsConversionMismatchException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.60/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.60/@parameters.1"/>
          </throwable>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="failConversion">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="IllegalFormatConversionException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.61/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.61/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
            </arguments>
          </throwable>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getZero">
        <typeReference xsi:type="types:Char"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="dfs">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.62/@parameters.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.62/@statements.0/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0/@members.22"/>
                </next>
              </returnValue>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.62/@parameters.0"/>
                <children xsi:type="literals:NullLiteral"/>
              </expression>
            </children>
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.62/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.56"/>
                  <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
                </next>
              </child>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="localizedMagnitude">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="width">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="va">
            <typeReference xsi:type="types:Char"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../lang/Long.class.xmi#//@classifiers.0/@members.6"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.63/@parameters.1"/>
                <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
              </next>
              <target xsi:type="classifiers:Class" href="../lang/Long.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.64">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.63/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.63/@statements.0/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.63/@parameters.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.63/@parameters.3"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.63/@parameters.4"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="localizedMagnitude">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="value">
          <typeReference xsi:type="types:Char"/>
          <arrayDimensionsBefore/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="width">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="l">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="begin">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/AbstractStringBuilder.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="zero">
            <typeReference xsi:type="types:Char"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.39/@members.62">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="grpSep">
            <typeReference xsi:type="types:Char">
              <comments>// determine localized grouping separator and size</comments>
            </typeReference>
            <initialValue xsi:type="literals:CharacterLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="grpSize">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="decSep">
            <typeReference xsi:type="types:Char"/>
            <initialValue xsi:type="literals:CharacterLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="len">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.1">
              <next xsi:type="references:IdentifierReference"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="dot">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.6/@variable"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.7/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.8/@init"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.1">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.8/@init"/>
                  </arraySelectors>
                </children>
                <children xsi:type="literals:CharacterLiteral" value="46"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.8/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.6/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="j">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.8/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.5/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:CharacterLiteral" value="46"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.56"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="dfs">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.5/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.9/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0/@members.26"/>
                      </next>
                    </value>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.7/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.6/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.3/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:CharacterLiteral" value="44"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4"/>
                  <children xsi:type="literals:NullLiteral"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="Locale.class.xmi#//@classifiers.0/@members.56"/>
                    <arguments xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <target xsi:type="members:Field" href="Locale.class.xmi#//@classifiers.0/@members.18"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="Locale.class.xmi#//@classifiers.0"/>
                    </arguments>
                  </next>
                </children>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="dfs">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="instantiations:NewConstructorCall">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.3/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.10/@statement/@statements.0/@elseStatement/@statements.0/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../text/DecimalFormatSymbols.class.xmi#//@classifiers.0/@members.24"/>
                      </next>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="df">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../text/DecimalFormat.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../text/DecimalFormat.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference">
                        <next xsi:type="references:MethodCall">
                          <target xsi:type="members:ClassMethod" href="../text/NumberFormat.class.xmi#//@classifiers.0/@members.37"/>
                          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.4"/>
                        </next>
                        <target xsi:type="classifiers:Class" href="../text/NumberFormat.class.xmi#//@classifiers.0"/>
                      </child>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.10/@statement/@statements.0/@elseStatement/@statements.2/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../text/DecimalFormat.class.xmi#//@classifiers.0/@members.86"/>
                      </next>
                    </value>
                  </expression>
                </statements>
              </elseStatement>
            </statements>
          </statement>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.2">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
              </arguments>
            </next>
          </condition>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <comments>// localize the digits inserting group separators as necessary</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.5/@variable"/>
                    </next>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.3/@variable">
                      <comments>// no more group separators after the decimal separator</comments>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:CharacterLiteral"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Continue"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.11/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.7/@variable"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="c">
                <typeReference xsi:type="types:Char"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.1">
                  <arraySelectors>
                    <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.11/@init"/>
                  </arraySelectors>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                  <arguments xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:Char"/>
                    <child xsi:type="expressions:NestedExpression">
                      <expression xsi:type="expressions:AdditiveExpression">
                        <children xsi:type="expressions:NestedExpression">
                          <expression xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.11/@statement/@statements.1/@variable"/>
                            <children xsi:type="literals:CharacterLiteral" value="48"/>
                            <additiveOperators xsi:type="operators:Subtraction"/>
                          </expression>
                        </children>
                        <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.2/@variable"/>
                        <additiveOperators xsi:type="operators:Addition"/>
                      </expression>
                    </child>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.3/@variable"/>
                  </next>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.3/@variable"/>
                  <children xsi:type="literals:CharacterLiteral"/>
                </children>
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.11/@init"/>
                  <children xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.7/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </children>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="expressions:MultiplicativeExpression">
                      <children xsi:type="expressions:NestedExpression">
                        <expression xsi:type="expressions:AdditiveExpression">
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.7/@variable"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.11/@init"/>
                          <additiveOperators xsi:type="operators:Subtraction"/>
                        </expression>
                      </children>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.4/@variable"/>
                      <multiplicativeOperators xsi:type="operators:Remainder"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                  </expression>
                </children>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.11/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.6/@variable"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="j">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.11/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.6/@variable">
              <comments>// apply zero padding</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/AbstractStringBuilder.class.xmi#//@classifiers.0/@members.5"/>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ForLoop">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.30"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.1/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.2/@variable"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.13/@statement/@init"/>
              <children xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.3"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.6/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </children>
              <relationOperators xsi:type="operators:LessThan"/>
            </condition>
            <init xsi:type="variables:LocalVariable" name="k">
              <typeReference xsi:type="types:Int"/>
              <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </init>
            <updates xsi:type="expressions:SuffixUnaryModificationExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@statements.13/@statement/@init"/>
              <operator xsi:type="operators:PlusPlus"/>
            </updates>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.3"/>
              <children xsi:type="expressions:UnaryExpression">
                <operators xsi:type="operators:Subtraction"/>
                <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </children>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.2">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
                </arguments>
              </next>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.39/@members.64/@parameters.0"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.35"/>
      </implements>
    </members>
    <members xsi:type="classifiers:Class" name="Flags">
      <members xsi:type="members:Field" name="flags">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
      </members>
      <members xsi:type="members:Field" name="NONE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="LEFT_JUSTIFY">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// ''</comments>
          <comments>// duplicate declarations from Formattable.java</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="UPPERCASE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// '-'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="ALTERNATE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// '^'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PLUS">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// '#'</comments>
          <comments>// numerics</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="LEADING_SPACE">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// '+'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="ZERO_PAD">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// ' '</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="GROUP">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// '0'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PARENTHESES">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// ','</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PREVIOUS">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
          <arguments xsi:type="expressions:ShiftExpression">
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
            <shiftOperators xsi:type="operators:LeftShift"/>
          </arguments>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// '('</comments>
          <comments>// indexing</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="Flags">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.11/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// '&lt;'</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="valueOf">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="contains">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AndExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.13/@parameters.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
                </children>
              </expression>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.13/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
            </children>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="dup">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.40"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="add">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
            <assignmentOperator xsi:type="operators:AssignmentOr"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.15/@parameters.0">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="remove">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.0"/>
            <assignmentOperator xsi:type="operators:AssignmentAnd"/>
            <value xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Complement"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.16/@parameters.0">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.12"/>
              </child>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="parse">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="ca">
            <typeReference xsi:type="types:Char"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.73"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="f">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.40"/>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.40"/>
              </typeReference>
              <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="v">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.40"/>
                </typeReference>
                <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.18">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.2/@init"/>
                    </arraySelectors>
                  </arguments>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="DuplicateFormatFlagsException.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.2/@statement/@statements.0/@variable">
                    <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.20"/>
                  </arguments>
                </throwable>
              </statement>
              <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.1/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.2/@statement/@statements.0/@variable"/>
                </next>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.1/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.15">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.2/@statement/@statements.0/@variable"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.2/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.2/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.17/@statements.1/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="parse">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.40"/>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// parse those flags which may be provided by users</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="45"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="35"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.5"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="43"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.6"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="32"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="48"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="44"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="40"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.10"/>
            </statements>
            <condition xsi:type="literals:CharacterLiteral" value="60"/>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Throw">
              <throwable xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="UnknownFormatFlagsException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../lang/String.class.xmi#//@classifiers.0/@members.82"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.18/@parameters.0"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
                </arguments>
              </throwable>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.18/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="f">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.40"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// Returns a string representation of the current &lt;tt>Flags&lt;/tt>.</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.19/@parameters.0">
            <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.20"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toString">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="sb">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="45"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.2"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="94"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.3"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="35"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.4"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="43"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.5"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="32"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.6"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="48"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.7"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="44"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.8"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="40"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.9"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.14"/>
                <arguments xsi:type="literals:CharacterLiteral" value="60"/>
              </next>
            </expression>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.40/@members.13">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.10"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@members.20/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="classifiers:Class" name="Conversion">
      <members xsi:type="members:Field" name="DECIMAL_INTEGER">
        <initialValue xsi:type="literals:CharacterLiteral" value="100"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// Byte, Short, Integer, Long, BigInteger</comments>
          <comments>// (and associated primitives due to autoboxing)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="OCTAL_INTEGER">
        <initialValue xsi:type="literals:CharacterLiteral" value="111"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HEXADECIMAL_INTEGER">
        <initialValue xsi:type="literals:CharacterLiteral" value="120"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HEXADECIMAL_INTEGER_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="88"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="SCIENTIFIC">
        <initialValue xsi:type="literals:CharacterLiteral" value="101"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// Float, Double, BigDecimal</comments>
          <comments>// (and associated primitives due to autoboxing)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="SCIENTIFIC_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="69"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="GENERAL">
        <initialValue xsi:type="literals:CharacterLiteral" value="103"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="GENERAL_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="71"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DECIMAL_FLOAT">
        <initialValue xsi:type="literals:CharacterLiteral" value="102"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HEXADECIMAL_FLOAT">
        <initialValue xsi:type="literals:CharacterLiteral" value="97"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HEXADECIMAL_FLOAT_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="65"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="CHARACTER">
        <initialValue xsi:type="literals:CharacterLiteral" value="99"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// Character, Byte, Short, Integer</comments>
          <comments>// (and associated primitives due to autoboxing)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="CHARACTER_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="67"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DATE_TIME">
        <initialValue xsi:type="literals:CharacterLiteral" value="116"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// java.util.Date, java.util.Calendar, long</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DATE_TIME_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="84"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="BOOLEAN">
        <initialValue xsi:type="literals:CharacterLiteral" value="98"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// if (arg.TYPE != boolean) return boolean</comments>
          <comments>// if (arg != null) return true; else return false;</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="BOOLEAN_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="66"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="STRING">
        <initialValue xsi:type="literals:CharacterLiteral" value="115"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// if (arg instanceof Formattable) arg.formatTo()</comments>
          <comments>// else arg.toString();</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="STRING_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="83"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HASHCODE">
        <initialValue xsi:type="literals:CharacterLiteral" value="104"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// arg.hashCode()</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HASHCODE_UPPER">
        <initialValue xsi:type="literals:CharacterLiteral" value="72"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="LINE_SEPARATOR">
        <initialValue xsi:type="literals:CharacterLiteral" value="110"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="PERCENT_SIGN">
        <initialValue xsi:type="literals:CharacterLiteral" value="37"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:ClassMethod" name="isValid">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.24">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.23/@parameters.0"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.25">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.23/@parameters.0"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.26">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.23/@parameters.0"/>
              </children>
              <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.41/@members.27">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.23/@parameters.0"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.23/@parameters.0"/>
                <children xsi:type="literals:CharacterLiteral" value="116"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.23/@parameters.0"/>
                <children xsi:type="literals:CharacterLiteral" value="99"/>
              </children>
            </expression>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isGeneral">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// Returns true iff the Conversion is applicable to all objects.</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.15"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.16"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.17"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.18"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.19"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.20"/>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.24/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isInteger">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// Returns true iff the Conversion is an integer type.</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.0"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.1"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.2"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.3"/>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.25/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isFloat">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// Returns true iff the Conversion is a floating-point type.</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.4"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.5"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.6"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.7"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.8"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.9"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.10"/>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.26/@parameters.0"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isText">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// Returns true iff the Conversion does not require an argument</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.21"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.22"/>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@members.27/@parameters.0"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="classifiers:Class" name="DateTime">
      <members xsi:type="members:Field" name="HOUR_OF_DAY_0">
        <initialValue xsi:type="literals:CharacterLiteral" value="72"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HOUR_0">
        <initialValue xsi:type="literals:CharacterLiteral" value="73"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (00 - 23)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HOUR_OF_DAY">
        <initialValue xsi:type="literals:CharacterLiteral" value="107"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (01 - 12)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="HOUR">
        <initialValue xsi:type="literals:CharacterLiteral" value="108"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (0 - 23) -- like H</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="MINUTE">
        <initialValue xsi:type="literals:CharacterLiteral" value="77"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (1 - 12) -- like I</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="NANOSECOND">
        <initialValue xsi:type="literals:CharacterLiteral" value="78"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (00 - 59)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="MILLISECOND">
        <initialValue xsi:type="literals:CharacterLiteral" value="76"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (000000000 - 999999999)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="MILLISECOND_SINCE_EPOCH">
        <initialValue xsi:type="literals:CharacterLiteral" value="81"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// jdk, not in gnu (000 - 999)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="AM_PM">
        <initialValue xsi:type="literals:CharacterLiteral" value="112"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (0 - 99...?)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="SECONDS_SINCE_EPOCH">
        <initialValue xsi:type="literals:CharacterLiteral" value="115"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (am or pm)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="SECOND">
        <initialValue xsi:type="literals:CharacterLiteral" value="83"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (0 - 99...?)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TIME">
        <initialValue xsi:type="literals:CharacterLiteral" value="84"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (00 - 60 - leap second)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="ZONE_NUMERIC">
        <initialValue xsi:type="literals:CharacterLiteral" value="122"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (24 hour hh:mm:ss)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="ZONE">
        <initialValue xsi:type="literals:CharacterLiteral" value="90"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (-1200 - +1200) - ls minus?</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="NAME_OF_DAY_ABBREV">
        <initialValue xsi:type="literals:CharacterLiteral" value="97"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (symbol)</comments>
          <comments>// Date</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="NAME_OF_DAY">
        <initialValue xsi:type="literals:CharacterLiteral" value="65"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// 'a'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="NAME_OF_MONTH_ABBREV">
        <initialValue xsi:type="literals:CharacterLiteral" value="98"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// 'A'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="NAME_OF_MONTH">
        <initialValue xsi:type="literals:CharacterLiteral" value="66"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// 'b'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="CENTURY">
        <initialValue xsi:type="literals:CharacterLiteral" value="67"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// 'B'</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DAY_OF_MONTH_0">
        <initialValue xsi:type="literals:CharacterLiteral" value="100"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (00 - 99)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DAY_OF_MONTH">
        <initialValue xsi:type="literals:CharacterLiteral" value="101"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (01 - 31)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="NAME_OF_MONTH_ABBREV_X">
        <initialValue xsi:type="literals:CharacterLiteral" value="104"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (1 - 31) -- like d</comments>
          <comments>// *    static final char ISO_WEEK_OF_YEAR_2    = 'g'; // cross %y %V</comments>
          <comments>// *    static final char ISO_WEEK_OF_YEAR_4    = 'G'; // cross %Y %V</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DAY_OF_YEAR">
        <initialValue xsi:type="literals:CharacterLiteral" value="106"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// -- same b</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="MONTH">
        <initialValue xsi:type="literals:CharacterLiteral" value="109"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (001 - 366)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="YEAR_2">
        <initialValue xsi:type="literals:CharacterLiteral" value="121"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (01 - 12)</comments>
          <comments>// *    static final char DAY_OF_WEEK_1         = 'u'; // (1 - 7) Monday</comments>
          <comments>// *    static final char WEEK_OF_YEAR_SUNDAY   = 'U'; // (0 - 53) Sunday+</comments>
          <comments>// *    static final char WEEK_OF_YEAR_MONDAY_01 = 'V'; // (01 - 53) Monday+</comments>
          <comments>// *    static final char DAY_OF_WEEK_0         = 'w'; // (0 - 6) Sunday</comments>
          <comments>// *    static final char WEEK_OF_YEAR_MONDAY   = 'W'; // (00 - 53) Monday</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="YEAR_4">
        <initialValue xsi:type="literals:CharacterLiteral" value="89"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (00 - 99)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TIME_12_HOUR">
        <initialValue xsi:type="literals:CharacterLiteral" value="114"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (0000 - 9999)</comments>
          <comments>// Composites</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="TIME_24_HOUR">
        <initialValue xsi:type="literals:CharacterLiteral" value="82"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (hh:mm:ss [AP]M)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DATE_TIME">
        <initialValue xsi:type="literals:CharacterLiteral" value="99"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (hh:mm same as %H:%M)</comments>
          <comments>// *    static final char LOCALE_TIME   = 'X'; // (%H:%M:%S) - parse format?</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="DATE">
        <initialValue xsi:type="literals:CharacterLiteral" value="68"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (Sat Nov 04 12:02:33 EST 1999)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="ISO_STANDARD_DATE">
        <initialValue xsi:type="literals:CharacterLiteral" value="70"/>
        <typeReference xsi:type="types:Char"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (mm/dd/yy)</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:ClassMethod" name="isValid">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:Char"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>// (%Y-%m-%d)</comments>
          <comments>// *    static final char LOCALE_DATE           = 'x'; // (mm/dd/yy)</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Switch">
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.0"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.1"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.2"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.3"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.4"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.5"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.6"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.7"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.8"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.9"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.10"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.11"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.12"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.13"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// Date</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.14"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.15"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.16"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.17"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.18"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.19"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.20"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// *        case ISO_WEEK_OF_YEAR_2:</comments>
            <comments>// *        case ISO_WEEK_OF_YEAR_4:</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.21"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.22"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.23"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// *        case DAY_OF_WEEK_1:</comments>
            <comments>// *        case WEEK_OF_YEAR_SUNDAY:</comments>
            <comments>// *        case WEEK_OF_YEAR_MONDAY_01:</comments>
            <comments>// *        case DAY_OF_WEEK_0:</comments>
            <comments>// *        case WEEK_OF_YEAR_MONDAY:</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.24"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.25"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// Composites</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.26"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.27"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <comments>// *        case LOCALE_TIME:</comments>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.28"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.29"/>
          </cases>
          <cases xsi:type="statements:NormalSwitchCase">
            <statements xsi:type="statements:Return">
              <comments>// *        case LOCALE_DATE:</comments>
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statements>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.30"/>
          </cases>
          <cases xsi:type="statements:DefaultSwitchCase">
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statements>
          </cases>
          <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@members.31/@parameters.0"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An interpreter for printf-style format strings.  This class provides support&#xA; * for layout justification and alignment, common formats for numeric, string,&#xA; * and date/time data, and locale-specific output.  Common Java types such as&#xA; * &lt;tt>byte&lt;/tt>, {@link java.math.BigDecimal BigDecimal}, and {@link Calendar}&#xA; * are supported.  Limited formatting customization for arbitrary user types is&#xA; * provided through the {@link Formattable} interface.&#xA; *&#xA; * &lt;p> Formatters are not necessarily safe for multithreaded access.  Thread&#xA; * safety is optional and is the responsibility of users of methods in this&#xA; * class.&#xA; *&#xA; * &lt;p> Formatted printing for the Java language is heavily inspired by C's&#xA; * &lt;tt>printf&lt;/tt>.  Although the format strings are similar to C, some&#xA; * customizations have been made to accommodate the Java language and exploit&#xA; * some of its features.  Also, Java formatting is more strict than C's; for&#xA; * example, if a conversion is incompatible with a flag, an exception will be&#xA; * thrown.  In C inapplicable flags are silently ignored.  The format strings&#xA; * are thus intended to be recognizable to C programmers but not necessarily&#xA; * completely compatible with those in C.&#xA; *&#xA; * &lt;p> Examples of expected usage:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   StringBuilder sb = new StringBuilder();&#xA; *   // Send all output to the Appendable object sb&#xA; *   Formatter formatter = new Formatter(sb, Locale.US);&#xA; *&#xA; *   // Explicit argument indices may be used to re-order output.&#xA; *   formatter.format(&quot;%4$2s %3$2s %2$2s %1$2s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#xA; *   // -> &quot; d  c  b  a&quot;&#xA; *&#xA; *   // Optional locale as the first argument can be used to get&#xA; *   // locale-specific formatting of numbers.  The precision and width can be&#xA; *   // given to round and align the value.&#xA; *   formatter.format(Locale.FRANCE, &quot;e = %+10.4f&quot;, Math.E);&#xA; *   // -> &quot;e =    +2,7183&quot;&#xA; *&#xA; *   // The '(' numeric flag may be used to format negative numbers with&#xA; *   // parentheses rather than a minus sign.  Group separators are&#xA; *   // automatically inserted.&#xA; *   formatter.format(&quot;Amount gained or lost since last statement: $ %(,.2f&quot;,&#xA; *                    balanceDelta);&#xA; *   // -> &quot;Amount gained or lost since last statement: $ (6,217.58)&quot;&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> Convenience methods for common formatting requests exist as illustrated&#xA; * by the following invocations:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   // Writes a formatted string to System.out.&#xA; *   System.out.format(&quot;Local time: %tT&quot;, Calendar.getInstance());&#xA; *   // -> &quot;Local time: 13:34:18&quot;&#xA; *&#xA; *   // Writes formatted output to System.err.&#xA; *   System.err.printf(&quot;Unable to open file '%1$s': %2$s&quot;,&#xA; *                     fileName, exception.getMessage());&#xA; *   // -> &quot;Unable to open file 'food': No such file or directory&quot;&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> Like C's &lt;tt>sprintf(3)&lt;/tt>, Strings may be formatted using the static&#xA; * method {@link String#format(String,Object...) String.format}:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   // Format a string containing a date.&#xA; *   import java.util.Calendar;&#xA; *   import java.util.GregorianCalendar;&#xA; *   import static java.util.Calendar.*;&#xA; *&#xA; *   Calendar c = new GregorianCalendar(1995, MAY, 23);&#xA; *   String s = String.format(&quot;Duke's Birthday: %1$tm %1$te,%1$tY&quot;, c);&#xA; *   // -> s == &quot;Duke's Birthday: May 23, 1995&quot;&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;a name=&quot;org&quot;>&lt;h3> Organization &lt;/h3>&lt;/a>&#xA; *&#xA; * &lt;p> This specification is divided into two sections.  The first section, &lt;a&#xA; * href=&quot;#summary&quot;>Summary&lt;/a>, covers the basic formatting concepts.  This&#xA; * section is intended for users who want to get started quickly and are&#xA; * familiar with formatted printing in other programming languages.  The second&#xA; * section, &lt;a href=&quot;#detail&quot;>Details&lt;/a>, covers the specific implementation&#xA; * details.  It is intended for users who want more precise specification of&#xA; * formatting behavior.&#xA; *&#xA; * &lt;a name=&quot;summary&quot;>&lt;h3> Summary &lt;/h3>&lt;/a>&#xA; *&#xA; * &lt;p> This section is intended to provide a brief overview of formatting&#xA; * concepts.  For precise behavioral details, refer to the &lt;a&#xA; * href=&quot;#detail&quot;>Details&lt;/a> section.&#xA; *&#xA; * &lt;a name=&quot;syntax&quot;>&lt;h4> Format String Syntax &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> Every method which produces formatted output requires a &lt;i>format&#xA; * string&lt;/i> and an &lt;i>argument list&lt;/i>.  The format string is a {@link&#xA; * String} which may contain fixed text and one or more embedded &lt;i>format&#xA; * specifiers&lt;/i>.  Consider the following example:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   Calendar c = ...;&#xA; *   String s = String.format(&quot;Duke's Birthday: %1$tm %1$te,%1$tY&quot;, c);&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * This format string is the first argument to the &lt;tt>format&lt;/tt> method.  It&#xA; * contains three format specifiers &quot;&lt;tt>%1$tm&lt;/tt>&quot;, &quot;&lt;tt>%1$te&lt;/tt>&quot;, and&#xA; * &quot;&lt;tt>%1$tY&lt;/tt>&quot; which indicate how the arguments should be processed and&#xA; * where they should be inserted in the text.  The remaining portions of the&#xA; * format string are fixed text including &lt;tt>&quot;Dukes Birthday: &quot;&lt;/tt> and any&#xA; * other spaces or punctuation.&#xA; *&#xA; * The argument list consists of all arguments passed to the method after the&#xA; * format string.  In the above example, the argument list is of size one and&#xA; * consists of the new {@link java.util.Calendar Calendar} object.&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li> The format specifiers for general, character, and numeric types have&#xA; * the following syntax:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   %[argument_index$][flags][width][.precision]conversion&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> The optional &lt;i>argument_index&lt;/i> is a decimal integer indicating the&#xA; * position of the argument in the argument list.  The first argument is&#xA; * referenced by &quot;&lt;tt>1$&lt;/tt>&quot;, the second by &quot;&lt;tt>2$&lt;/tt>&quot;, etc.&#xA; *&#xA; * &lt;p> The optional &lt;i>flags&lt;/i> is a set of characters that modify the output&#xA; * format.  The set of valid flags depends on the conversion.&#xA; *&#xA; * &lt;p> The optional &lt;i>width&lt;/i> is a non-negative decimal integer indicating&#xA; * the minimum number of characters to be written to the output.&#xA; *&#xA; * &lt;p> The optional &lt;i>precision&lt;/i> is a non-negative decimal integer usually&#xA; * used to restrict the number of characters.  The specific behavior depends on&#xA; * the conversion.&#xA; *&#xA; * &lt;p> The required &lt;i>conversion&lt;/i> is a character indicating how the&#xA; * argument should be formatted.  The set of valid conversions for a given&#xA; * argument depends on the argument's data type.&#xA; *&#xA; * &lt;li> The format specifiers for types which are used to represents dates and&#xA; * times have the following syntax:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   %[argument_index$][flags][width]conversion&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> The optional &lt;i>argument_index&lt;/i>, &lt;i>flags&lt;/i> and &lt;i>width&lt;/i> are&#xA; * defined as above.&#xA; *&#xA; * &lt;p> The required &lt;i>conversion&lt;/i> is a two character sequence.  The first&#xA; * character is &lt;tt>'t'&lt;/tt> or &lt;tt>'T'&lt;/tt>.  The second character indicates&#xA; * the format to be used.  These characters are similar to but not completely&#xA; * identical to those defined by GNU &lt;tt>date&lt;/tt> and POSIX&#xA; * &lt;tt>strftime(3c)&lt;/tt>.&#xA; *&#xA; * &lt;li> The format specifiers which do not correspond to arguments have the&#xA; * following syntax:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   %[flags][width]conversion&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> The optional &lt;i>flags&lt;/i> and &lt;i>width&lt;/i> is defined as above.&#xA; *&#xA; * &lt;p> The required &lt;i>conversion&lt;/i> is a character indicating content to be&#xA; * inserted in the output.&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;h4> Conversions &lt;/h4>&#xA; *&#xA; * &lt;p> Conversions are divided into the following categories:&#xA; *&#xA; * &lt;ol>&#xA; *&#xA; * &lt;li> &lt;b>General&lt;/b> - may be applied to any argument&#xA; * type&#xA; *&#xA; * &lt;li> &lt;b>Character&lt;/b> - may be applied to basic types which represent&#xA; * Unicode characters: &lt;tt>char&lt;/tt>, {@link Character}, &lt;tt>byte&lt;/tt>, {@link&#xA; * Byte}, &lt;tt>short&lt;/tt>, and {@link Short}. This conversion may also be&#xA; * applied to the types &lt;tt>int&lt;/tt> and {@link Integer} when {@link&#xA; * Character#isValidCodePoint} returns &lt;tt>true&lt;/tt>&#xA; *&#xA; * &lt;li> &lt;b>Numeric&lt;/b>&#xA; *&#xA; * &lt;ol>&#xA; *&#xA; * &lt;li> &lt;b>Integral&lt;/b> - may be applied to Java integral types: &lt;tt>byte&lt;/tt>,&#xA; * {@link Byte}, &lt;tt>short&lt;/tt>, {@link Short}, &lt;tt>int&lt;/tt> and {@link&#xA; * Integer}, &lt;tt>long&lt;/tt>, {@link Long}, and {@link java.math.BigInteger&#xA; * BigInteger}&#xA; *&#xA; * &lt;li>&lt;b>Floating Point&lt;/b> - may be applied to Java floating-point types:&#xA; * &lt;tt>float&lt;/tt>, {@link Float}, &lt;tt>double&lt;/tt>, {@link Double}, and {@link&#xA; * java.math.BigDecimal BigDecimal}&#xA; *&#xA; * &lt;/ol>&#xA; *&#xA; * &lt;li> &lt;b>Date/Time&lt;/b> - may be applied to Java types which are capable of&#xA; * encoding a date or time: &lt;tt>long&lt;/tt>, {@link Long}, {@link Calendar}, and&#xA; * {@link Date}.&#xA; *&#xA; * &lt;li> &lt;b>Percent&lt;/b> - produces a literal &lt;tt>'%'&lt;/tt>&#xA; * (&lt;tt>'&amp;#92;u0025'&lt;/tt>)&#xA; *&#xA; * &lt;li> &lt;b>Line Separator&lt;/b> - produces the platform-specific line separator&#xA; *&#xA; * &lt;/ol>&#xA; *&#xA; * &lt;p> The following table summarizes the supported conversions.  Conversions&#xA; * denoted by an upper-case character (i.e. &lt;tt>'B'&lt;/tt>, &lt;tt>'H'&lt;/tt>,&#xA; * &lt;tt>'S'&lt;/tt>, &lt;tt>'C'&lt;/tt>, &lt;tt>'X'&lt;/tt>, &lt;tt>'E'&lt;/tt>, &lt;tt>'G'&lt;/tt>,&#xA; * &lt;tt>'A'&lt;/tt>, and &lt;tt>'T'&lt;/tt>) are the same as those for the corresponding&#xA; * lower-case conversion characters except that the result is converted to&#xA; * upper case according to the rules of the prevailing {@link java.util.Locale&#xA; * Locale}.  The result is equivalent to the following invocation of {@link&#xA; * String#toUpperCase()}&#xA; *&#xA; * &lt;pre>&#xA; *    out.toUpperCase() &lt;/pre>&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;genConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;th valign=&quot;bottom&quot;> Conversion&#xA; *     &lt;th valign=&quot;bottom&quot;> Argument Category&#xA; *     &lt;th valign=&quot;bottom&quot;> Description&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'b'&lt;/tt>, &lt;tt>'B'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> general&#xA; *     &lt;td> If the argument &lt;i>arg&lt;/i> is &lt;tt>null&lt;/tt>, then the result is&#xA; *     &quot;&lt;tt>false&lt;/tt>&quot;.  If &lt;i>arg&lt;/i> is a &lt;tt>boolean&lt;/tt> or {@link&#xA; *     Boolean}, then the result is the string returned by {@link&#xA; *     String#valueOf(boolean) String.valueOf()}.  Otherwise, the result is&#xA; *     &quot;true&quot;.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'h'&lt;/tt>, &lt;tt>'H'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> general&#xA; *     &lt;td> If the argument &lt;i>arg&lt;/i> is &lt;tt>null&lt;/tt>, then the result is&#xA; *     &quot;&lt;tt>null&lt;/tt>&quot;.  Otherwise, the result is obtained by invoking&#xA; *     &lt;tt>Integer.toHexString(arg.hashCode())&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'s'&lt;/tt>, &lt;tt>'S'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> general&#xA; *     &lt;td> If the argument &lt;i>arg&lt;/i> is &lt;tt>null&lt;/tt>, then the result is&#xA; *     &quot;&lt;tt>null&lt;/tt>&quot;.  If &lt;i>arg&lt;/i> implements {@link Formattable}, then&#xA; *     {@link Formattable#formatTo arg.formatTo} is invoked. Otherwise, the&#xA; *     result is obtained by invoking &lt;tt>arg.toString()&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'c'&lt;/tt>, &lt;tt>'C'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> character&#xA; *     &lt;td> The result is a Unicode character&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'d'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> integral&#xA; *     &lt;td> The result is formatted as a decimal integer&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'o'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> integral&#xA; *     &lt;td> The result is formatted as an octal integer&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'x'&lt;/tt>, &lt;tt>'X'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> integral&#xA; *     &lt;td> The result is formatted as a hexadecimal integer&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'e'&lt;/tt>, &lt;tt>'E'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> floating point&#xA; *     &lt;td> The result is formatted as a decimal number in computerized&#xA; *     scientific notation&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'f'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> floating point&#xA; *     &lt;td> The result is formatted as a decimal number&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'g'&lt;/tt>, &lt;tt>'G'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> floating point&#xA; *     &lt;td> The result is formatted using computerized scientific notation or&#xA; *     decimal format, depending on the precision and the value after rounding.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'a'&lt;/tt>, &lt;tt>'A'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> floating point&#xA; *     &lt;td> The result is formatted as a hexadecimal floating-point number with&#xA; *     a significand and an exponent&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'t'&lt;/tt>, &lt;tt>'T'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> date/time&#xA; *     &lt;td> Prefix for date and time conversion characters.  See &lt;a&#xA; *     href=&quot;#dt&quot;>Date/Time Conversions&lt;/a>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'%'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> percent&#xA; *     &lt;td> The result is a literal &lt;tt>'%'&lt;/tt> (&lt;tt>'&amp;#92;u0025'&lt;/tt>)&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'n'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> line separator&#xA; *     &lt;td> The result is the platform-specific line separator&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> Any characters not explicitly defined as conversions are illegal and are&#xA; * reserved for future extensions.&#xA; *&#xA; * &lt;a name=&quot;dt&quot;>&lt;h4> Date/Time Conversions &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> The following date and time conversion suffix characters are defined for&#xA; * the &lt;tt>'t'&lt;/tt> and &lt;tt>'T'&lt;/tt> conversions.  The types are similar to but&#xA; * not completely identical to those defined by GNU &lt;tt>date&lt;/tt> and POSIX&#xA; * &lt;tt>strftime(3c)&lt;/tt>.  Additional conversion types are provided to access&#xA; * Java-specific functionality (e.g. &lt;tt>'L'&lt;/tt> for milliseconds within the&#xA; * second).&#xA; *&#xA; * &lt;p> The following conversion characters are used for formatting times:&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;time&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'H'&lt;/tt>&#xA; *     &lt;td> Hour of the day for the 24-hour clock, formatted as two digits with&#xA; *     a leading zero as necessary i.e. &lt;tt>00 - 23&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'I'&lt;/tt>&#xA; *     &lt;td> Hour for the 12-hour clock, formatted as two digits with a leading&#xA; *     zero as necessary, i.e.  &lt;tt>01 - 12&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'k'&lt;/tt>&#xA; *     &lt;td> Hour of the day for the 24-hour clock, i.e. &lt;tt>0 - 23&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'l'&lt;/tt>&#xA; *     &lt;td> Hour for the 12-hour clock, i.e. &lt;tt>1 - 12&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'M'&lt;/tt>&#xA; *     &lt;td> Minute within the hour formatted as two digits with a leading zero&#xA; *     as necessary, i.e.  &lt;tt>00 - 59&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'S'&lt;/tt>&#xA; *     &lt;td> Seconds within the minute, formatted as two digits with a leading&#xA; *     zero as necessary, i.e. &lt;tt>00 - 60&lt;/tt> (&quot;&lt;tt>60&lt;/tt>&quot; is a special&#xA; *     value required to support leap seconds).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'L'&lt;/tt>&#xA; *     &lt;td> Millisecond within the second formatted as three digits with&#xA; *     leading zeros as necessary, i.e. &lt;tt>000 - 999&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'N'&lt;/tt>&#xA; *     &lt;td> Nanosecond within the second, formatted as nine digits with leading&#xA; *     zeros as necessary, i.e. &lt;tt>000000000 - 999999999&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'p'&lt;/tt>&#xA; *     &lt;td> Locale-specific {@linkplain&#xA; *     java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker&#xA; *     in lower case, e.g.&quot;&lt;tt>am&lt;/tt>&quot; or &quot;&lt;tt>pm&lt;/tt>&quot;. Use of the conversion&#xA; *     prefix &lt;tt>'T'&lt;/tt> forces this output to upper case.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'z'&lt;/tt>&#xA; *     &lt;td> &lt;a href=&quot;http://www.ietf.org/rfc/rfc0822.txt&quot;>RFC&amp;nbsp;822&lt;/a>&#xA; *     style numeric time zone offset from GMT, e.g. &lt;tt>-0800&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'Z'&lt;/tt>&#xA; *     &lt;td> A string representing the abbreviation for the time zone.  The&#xA; *     Formatter's locale will supersede the locale of the argument (if any).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'s'&lt;/tt>&#xA; *     &lt;td> Seconds since the beginning of the epoch starting at 1 January 1970&#xA; *     &lt;tt>00:00:00&lt;/tt> UTC, i.e. &lt;tt>Long.MIN_VALUE/1000&lt;/tt> to&#xA; *     &lt;tt>Long.MAX_VALUE/1000&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'Q'&lt;/tt>&#xA; *     &lt;td> Milliseconds since the beginning of the epoch starting at 1 January&#xA; *     1970 &lt;tt>00:00:00&lt;/tt> UTC, i.e. &lt;tt>Long.MIN_VALUE&lt;/tt> to&#xA; *     &lt;tt>Long.MAX_VALUE&lt;/tt>.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The following conversion characters are used for formatting dates:&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;date&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'B'&lt;/tt>&#xA; *     &lt;td> Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths&#xA; *     full month name}, e.g. &lt;tt>&quot;January&quot;&lt;/tt>, &lt;tt>&quot;February&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'b'&lt;/tt>&#xA; *     &lt;td> Locale-specific {@linkplain&#xA; *     java.text.DateFormatSymbols#getShortMonths abbreviated month name},&#xA; *     e.g. &lt;tt>&quot;Jan&quot;&lt;/tt>, &lt;tt>&quot;Feb&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'h'&lt;/tt>&#xA; *     &lt;td> Same as &lt;tt>'b'&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'A'&lt;/tt>&#xA; *     &lt;td> Locale-specific full name of the {@linkplain&#xA; *     java.text.DateFormatSymbols#getWeekdays day of the week},&#xA; *     e.g. &lt;tt>&quot;Sunday&quot;&lt;/tt>, &lt;tt>&quot;Monday&quot;&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'a'&lt;/tt>&#xA; *     &lt;td> Locale-specific short name of the {@linkplain&#xA; *     java.text.DateFormatSymbols#getShortWeekdays day of the week},&#xA; *     e.g. &lt;tt>&quot;Sun&quot;&lt;/tt>, &lt;tt>&quot;Mon&quot;&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'C'&lt;/tt>&#xA; *     &lt;td> Four-digit year divided by &lt;tt>100&lt;/tt>, formatted as two digits&#xA; *     with leading zero as necessary, i.e. &lt;tt>00 - 99&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'Y'&lt;/tt>&#xA; *     &lt;td> Year, formatted as at least four digits with leading zeros as&#xA; *     necessary, e.g. &lt;tt>0092&lt;/tt> equals &lt;tt>92&lt;/tt> CE for the Gregorian&#xA; *     calendar.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'y'&lt;/tt>&#xA; *     &lt;td> Last two digits of the year, formatted with leading zeros as&#xA; *     necessary, i.e. &lt;tt>00 - 99&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'j'&lt;/tt>&#xA; *     &lt;td> Day of year, formatted as three digits with leading zeros as&#xA; *     necessary, e.g. &lt;tt>001 - 366&lt;/tt> for the Gregorian calendar.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'m'&lt;/tt>&#xA; *     &lt;td> Month, formatted as two digits with leading zeros as necessary,&#xA; *     i.e. &lt;tt>01 - 13&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'d'&lt;/tt>&#xA; *     &lt;td> Day of month, formatted as two digits with leading zeros as&#xA; *     necessary, i.e. &lt;tt>01 - 31&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'e'&lt;/tt>&#xA; *     &lt;td> Day of month, formatted as two digits, i.e. &lt;tt>1 - 31&lt;/tt>.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The following conversion characters are used for formatting common&#xA; * date/time compositions.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;composites&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'R'&lt;/tt>&#xA; *     &lt;td> Time formatted for the 24-hour clock as &lt;tt>&quot;%tH:%tM&quot;&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'T'&lt;/tt>&#xA; *     &lt;td> Time formatted for the 24-hour clock as &lt;tt>&quot;%tH:%tM:%tS&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'r'&lt;/tt>&#xA; *     &lt;td> Time formatted for the 12-hour clock as &lt;tt>&quot;%tI:%tM:%tS %Tp&quot;&lt;/tt>.&#xA; *     The location of the morning or afternoon marker (&lt;tt>'%Tp'&lt;/tt>) may be&#xA; *     locale-dependent.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'D'&lt;/tt>&#xA; *     &lt;td> Date formatted as &lt;tt>&quot;%tm/%td/%ty&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'F'&lt;/tt>&#xA; *     &lt;td> &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;>ISO&amp;nbsp;8601&lt;/a>&#xA; *     complete date formatted as &lt;tt>&quot;%tY-%tm-%td&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'c'&lt;/tt>&#xA; *     &lt;td> Date and time formatted as &lt;tt>&quot;%ta %tb %td %tT %tZ %tY&quot;&lt;/tt>,&#xA; *     e.g. &lt;tt>&quot;Sun Jul 20 16:17:00 EDT 1969&quot;&lt;/tt>.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> Any characters not explicitly defined as date/time conversion suffixes&#xA; * are illegal and are reserved for future extensions.&#xA; *&#xA; * &lt;h4> Flags &lt;/h4>&#xA; *&#xA; * &lt;p> The following table summarizes the supported flags.  &lt;i>y&lt;/i> means the&#xA; * flag is supported for the indicated argument types.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;genConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;th valign=&quot;bottom&quot;> Flag &lt;th valign=&quot;bottom&quot;> General&#xA; *     &lt;th valign=&quot;bottom&quot;> Character &lt;th valign=&quot;bottom&quot;> Integral&#xA; *     &lt;th valign=&quot;bottom&quot;> Floating Point&#xA; *     &lt;th valign=&quot;bottom&quot;> Date/Time&#xA; *     &lt;th valign=&quot;bottom&quot;> Description&#xA; *&#xA; * &lt;tr>&lt;td> '-' &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td> The result will be left-justified.&#xA; *&#xA; * &lt;tr>&lt;td> '#' &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>1&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>3&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td> The result should use a conversion-dependent alternate form&#xA; *&#xA; * &lt;tr>&lt;td> '+' &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>4&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td> The result will always include a sign&#xA; *&#xA; * &lt;tr>&lt;td> '&amp;nbsp;&amp;nbsp;' &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>4&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td> The result will include a leading space for positive values&#xA; *&#xA; * &lt;tr>&lt;td> '0' &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td> The result will be zero-padded&#xA; *&#xA; * &lt;tr>&lt;td> ',' &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>2&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>5&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td> The result will include locale-specific {@linkplain&#xA; *     java.text.DecimalFormatSymbols#getGroupingSeparator grouping separators}&#xA; *&#xA; * &lt;tr>&lt;td> '(' &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> -&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>4&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot; valign=&quot;top&quot;> y&lt;sup>5&lt;/sup>&#xA; *     &lt;td align=&quot;center&quot;> -&#xA; *     &lt;td> The result will enclose negative numbers in parentheses&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> &lt;sup>1&lt;/sup> Depends on the definition of {@link Formattable}.&#xA; *&#xA; * &lt;p> &lt;sup>2&lt;/sup> For &lt;tt>'d'&lt;/tt> conversion only.&#xA; *&#xA; * &lt;p> &lt;sup>3&lt;/sup> For &lt;tt>'o'&lt;/tt>, &lt;tt>'x'&lt;/tt>, and &lt;tt>'X'&lt;/tt>&#xA; * conversions only.&#xA; *&#xA; * &lt;p> &lt;sup>4&lt;/sup> For &lt;tt>'d'&lt;/tt>, &lt;tt>'o'&lt;/tt>, &lt;tt>'x'&lt;/tt>, and&#xA; * &lt;tt>'X'&lt;/tt> conversions applied to {@link java.math.BigInteger BigInteger}&#xA; * or &lt;tt>'d'&lt;/tt> applied to &lt;tt>byte&lt;/tt>, {@link Byte}, &lt;tt>short&lt;/tt>, {@link&#xA; * Short}, &lt;tt>int&lt;/tt> and {@link Integer}, &lt;tt>long&lt;/tt>, and {@link Long}.&#xA; *&#xA; * &lt;p> &lt;sup>5&lt;/sup> For &lt;tt>'e'&lt;/tt>, &lt;tt>'E'&lt;/tt>, &lt;tt>'f'&lt;/tt>,&#xA; * &lt;tt>'g'&lt;/tt>, and &lt;tt>'G'&lt;/tt> conversions only.&#xA; *&#xA; * &lt;p> Any characters not explicitly defined as flags are illegal and are&#xA; * reserved for future extensions.&#xA; *&#xA; * &lt;h4> Width &lt;/h4>&#xA; *&#xA; * &lt;p> The width is the minimum number of characters to be written to the&#xA; * output.  For the line separator conversion, width is not applicable; if it&#xA; * is provided, an exception will be thrown.&#xA; *&#xA; * &lt;h4> Precision &lt;/h4>&#xA; *&#xA; * &lt;p> For general argument types, the precision is the maximum number of&#xA; * characters to be written to the output.&#xA; *&#xA; * &lt;p> For the floating-point conversions &lt;tt>'e'&lt;/tt>, &lt;tt>'E'&lt;/tt>, and&#xA; * &lt;tt>'f'&lt;/tt> the precision is the number of digits after the decimal&#xA; * separator.  If the conversion is &lt;tt>'g'&lt;/tt> or &lt;tt>'G'&lt;/tt>, then the&#xA; * precision is the total number of digits in the resulting magnitude after&#xA; * rounding.  If the conversion is &lt;tt>'a'&lt;/tt> or &lt;tt>'A'&lt;/tt>, then the&#xA; * precision must not be specified.&#xA; *&#xA; * &lt;p> For character, integral, and date/time argument types and the percent&#xA; * and line separator conversions, the precision is not applicable; if a&#xA; * precision is provided, an exception will be thrown.&#xA; *&#xA; * &lt;h4> Argument Index &lt;/h4>&#xA; *&#xA; * &lt;p> The argument index is a decimal integer indicating the position of the&#xA; * argument in the argument list.  The first argument is referenced by&#xA; * &quot;&lt;tt>1$&lt;/tt>&quot;, the second by &quot;&lt;tt>2$&lt;/tt>&quot;, etc.&#xA; *&#xA; * &lt;p> Another way to reference arguments by position is to use the&#xA; * &lt;tt>'&lt;'&lt;/tt> (&lt;tt>'&amp;#92;u003c'&lt;/tt>) flag, which causes the argument for the&#xA; * previous format specifier to be re-used.  For example, the following two&#xA; * statements would produce identical strings:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   Calendar c = ...;&#xA; *   String s1 = String.format(&quot;Duke's Birthday: %1$tm %1$te,%1$tY&quot;, c);&#xA; *&#xA; *   String s2 = String.format(&quot;Duke's Birthday: %1$tm %&lt;$te,%&lt;$tY&quot;, c);&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;hr>&#xA; * &lt;a name=&quot;detail&quot;>&lt;h3> Details &lt;/h3>&lt;/a>&#xA; *&#xA; * &lt;p> This section is intended to provide behavioral details for formatting,&#xA; * including conditions and exceptions, supported data types, localization, and&#xA; * interactions between flags, conversions, and data types.  For an overview of&#xA; * formatting concepts, refer to the &lt;a href=&quot;#summary&quot;>Summary&lt;/a>&#xA; *&#xA; * &lt;p> Any characters not explicitly defined as conversions, date/time&#xA; * conversion suffixes, or flags are illegal and are reserved for&#xA; * future extensions.  Use of such a character in a format string will&#xA; * cause an {@link UnknownFormatConversionException} or {@link&#xA; * UnknownFormatFlagsException} to be thrown.&#xA; *&#xA; * &lt;p> If the format specifier contains a width or precision with an invalid&#xA; * value or which is otherwise unsupported, then a {@link&#xA; * IllegalFormatWidthException} or {@link IllegalFormatPrecisionException}&#xA; * respectively will be thrown.&#xA; *&#xA; * &lt;p> If a format specifier contains a conversion character that is not&#xA; * applicable to the corresponding argument, then an {@link&#xA; * IllegalFormatConversionException} will be thrown.&#xA; *&#xA; * &lt;p> All specified exceptions may be thrown by any of the &lt;tt>format&lt;/tt>&#xA; * methods of &lt;tt>Formatter&lt;/tt> as well as by any &lt;tt>format&lt;/tt> convenience&#xA; * methods such as {@link String#format(String,Object...) String.format} and&#xA; * {@link java.io.PrintStream#printf(String,Object...) PrintStream.printf}.&#xA; *&#xA; * &lt;p> Conversions denoted by an upper-case character (i.e. &lt;tt>'B'&lt;/tt>,&#xA; * &lt;tt>'H'&lt;/tt>, &lt;tt>'S'&lt;/tt>, &lt;tt>'C'&lt;/tt>, &lt;tt>'X'&lt;/tt>, &lt;tt>'E'&lt;/tt>,&#xA; * &lt;tt>'G'&lt;/tt>, &lt;tt>'A'&lt;/tt>, and &lt;tt>'T'&lt;/tt>) are the same as those for the&#xA; * corresponding lower-case conversion characters except that the result is&#xA; * converted to upper case according to the rules of the prevailing {@link&#xA; * java.util.Locale Locale}.  The result is equivalent to the following&#xA; * invocation of {@link String#toUpperCase()}&#xA; *&#xA; * &lt;pre>&#xA; *    out.toUpperCase() &lt;/pre>&#xA; *&#xA; * &lt;a name=&quot;dgen&quot;>&lt;h4> General &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> The following general conversions may be applied to any argument type:&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;dgConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'b'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0062'&lt;/tt>&#xA; *     &lt;td> Produces either &quot;&lt;tt>true&lt;/tt>&quot; or &quot;&lt;tt>false&lt;/tt>&quot; as returned by&#xA; *     {@link Boolean#toString(boolean)}.&#xA; *&#xA; *     &lt;p> If the argument is &lt;tt>null&lt;/tt>, then the result is&#xA; *     &quot;&lt;tt>false&lt;/tt>&quot;.  If the argument is a &lt;tt>boolean&lt;/tt> or {@link&#xA; *     Boolean}, then the result is the string returned by {@link&#xA; *     String#valueOf(boolean) String.valueOf()}.  Otherwise, the result is&#xA; *     &quot;&lt;tt>true&lt;/tt>&quot;.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given, then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'B'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0042'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'b'&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'h'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0068'&lt;/tt>&#xA; *     &lt;td> Produces a string representing the hash code value of the object.&#xA; *&#xA; *     &lt;p> If the argument, &lt;i>arg&lt;/i> is &lt;tt>null&lt;/tt>, then the&#xA; *     result is &quot;&lt;tt>null&lt;/tt>&quot;.  Otherwise, the result is obtained&#xA; *     by invoking &lt;tt>Integer.toHexString(arg.hashCode())&lt;/tt>.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given, then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'H'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0048'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'h'&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'s'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0073'&lt;/tt>&#xA; *     &lt;td> Produces a string.&#xA; *&#xA; *     &lt;p> If the argument is &lt;tt>null&lt;/tt>, then the result is&#xA; *     &quot;&lt;tt>null&lt;/tt>&quot;.  If the argument implements {@link Formattable}, then&#xA; *     its {@link Formattable#formatTo formatTo} method is invoked.&#xA; *     Otherwise, the result is obtained by invoking the argument's&#xA; *     &lt;tt>toString()&lt;/tt> method.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given and the argument is not a {@link&#xA; *     Formattable} , then a {@link FormatFlagsConversionMismatchException}&#xA; *     will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'S'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0053'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'s'&lt;/tt>.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The following flags apply to general conversions:&#xA; *&#xA; * &lt;a name=&quot;dFlags&quot;>&lt;table cellpadding=5 summary=&quot;dFlags&quot;>&lt;/a>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'-'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u002d'&lt;/tt>&#xA; *     &lt;td> Left justifies the output.  Spaces (&lt;tt>'&amp;#92;u0020'&lt;/tt>) will be&#xA; *     added at the end of the converted value as required to fill the minimum&#xA; *     width of the field.  If the width is not provided, then a {@link&#xA; *     MissingFormatWidthException} will be thrown.  If this flag is not given&#xA; *     then the output will be right-justified.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'#'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0023'&lt;/tt>&#xA; *     &lt;td> Requires the output use an alternate form.  The definition of the&#xA; *     form is specified by the conversion.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;a name=&quot;genWidth&quot;>&lt;/a>&#xA; *&#xA; * &lt;p> The width is the minimum number of characters to be written to the&#xA; * output.  If the length of the converted value is less than the width then&#xA; * the output will be padded by &lt;tt>'&amp;nbsp;&amp;nbsp;'&lt;/tt> (&lt;tt>&amp;#92;u0020'&lt;/tt>)&#xA; * until the total number of characters equals the width.  The padding is on&#xA; * the left by default.  If the &lt;tt>'-'&lt;/tt> flag is given, then the padding&#xA; * will be on the right.  If the width is not specified then there is no&#xA; * minimum.&#xA; *&#xA; * &lt;p> The precision is the maximum number of characters to be written to the&#xA; * output.  The precision is applied before the width, thus the output will be&#xA; * truncated to &lt;tt>precision&lt;/tt> characters even if the width is greater than&#xA; * the precision.  If the precision is not specified then there is no explicit&#xA; * limit on the number of characters.&#xA; *&#xA; * &lt;a name=&quot;dchar&quot;>&lt;h4> Character &lt;/h4>&lt;/a>&#xA; *&#xA; * This conversion may be applied to &lt;tt>char&lt;/tt>, {@link Character},&#xA; * &lt;tt>byte&lt;/tt>, {@link Byte}, &lt;tt>short&lt;/tt>, and {@link Short}. This&#xA; * conversion may also be applied to the types &lt;tt>int&lt;/tt> and {@link Integer}&#xA; * when {@link Character#isValidCodePoint} returns &lt;tt>true&lt;/tt>.  If it&#xA; * returns &lt;tt>false&lt;/tt> then an {@link IllegalFormatCodePointException} will&#xA; * be thrown.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;charConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'c'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0063'&lt;/tt>&#xA; *     &lt;td> Formats the argument as a Unicode character as described in &lt;a&#xA; *     href=&quot;../lang/Character.html#unicode&quot;>Unicode Character&#xA; *     Representation&lt;/a>.  This may be more than one 16-bit &lt;tt>char&lt;/tt> in&#xA; *     the case where the argument represents a supplementary character.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given, then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'C'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0043'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'c'&lt;/tt>.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The &lt;tt>'-'&lt;/tt> flag defined for &lt;a href=&quot;#dFlags&quot;>General&#xA; * conversions&lt;/a> applies.  If the &lt;tt>'#'&lt;/tt> flag is given, then a {@link&#xA; * FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;p> The width is defined as for &lt;a href=&quot;#genWidth&quot;>General conversions&lt;/a>.&#xA; *&#xA; * &lt;p> The precision is not applicable.  If the precision is specified then an&#xA; * {@link IllegalFormatPrecisionException} will be thrown.&#xA; *&#xA; * &lt;a name=&quot;dnum&quot;>&lt;h4> Numeric &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> Numeric conversions are divided into the following categories:&#xA; *&#xA; * &lt;ol>&#xA; *&#xA; * &lt;li> &lt;a href=&quot;#dnint&quot;>&lt;b>Byte, Short, Integer, and Long&lt;/b>&lt;/a>&#xA; *&#xA; * &lt;li> &lt;a href=&quot;#dnbint&quot;>&lt;b>BigInteger&lt;/b>&lt;/a>&#xA; *&#xA; * &lt;li> &lt;a href=&quot;#dndec&quot;>&lt;b>Float and Double&lt;/b>&lt;/a>&#xA; *&#xA; * &lt;li> &lt;a href=&quot;#dndec&quot;>&lt;b>BigDecimal&lt;/b>&lt;/a>&#xA; *&#xA; * &lt;/ol>&#xA; *&#xA; * &lt;p> Numeric types will be formatted according to the following algorithm:&#xA; *&#xA; * &lt;p>&lt;b>&lt;a name=&quot;l10n algorithm&quot;> Number Localization Algorithm&lt;a>&lt;/b>&#xA; *&#xA; * &lt;p> After digits are obtained for the integer part, fractional part, and&#xA; * exponent (as appropriate for the data type), the following transformation&#xA; * is applied:&#xA; *&#xA; * &lt;ol>&#xA; *&#xA; * &lt;li> Each digit character &lt;i>d&lt;/i> in the string is replaced by a&#xA; * locale-specific digit computed relative to the current locale's&#xA; * {@linkplain java.text.DecimalFormatSymbols#getZeroDigit() zero digit}&#xA; * &lt;i>z&lt;/i>; that is &lt;i>d&amp;nbsp;-&amp;nbsp;&lt;/i> &lt;tt>'0'&lt;/tt>&#xA; * &lt;i>&amp;nbsp;+&amp;nbsp;z&lt;/i>.&#xA; *&#xA; * &lt;li> If a decimal separator is present, a locale-specific {@linkplain&#xA; * java.text.DecimalFormatSymbols#getDecimalSeparator decimal separator} is&#xA; * substituted.&#xA; *&#xA; * &lt;li> &lt;a name=&quot;l10n group&quot;>&lt;/a> If the &lt;tt>','&lt;/tt> (&lt;tt>'&amp;#92;u002c'&lt;/tt>)&#xA; * flag is given, then the locale-specific {@linkplain&#xA; * java.text.DecimalFormatSymbols#getGroupingSeparator grouping separator} is&#xA; * inserted by scanning the integer part of the string from least significant&#xA; * to most significant digits and inserting a separator at intervals defined by&#xA; * the locale's {@linkplain java.text.DecimalFormat#getGroupingSize() grouping&#xA; * size}.&#xA; *&#xA; * &lt;li> If the &lt;tt>'0'&lt;/tt> flag is given, then the locale-specific {@linkplain&#xA; * java.text.DecimalFormatSymbols#getZeroDigit() zero digits} are inserted&#xA; * after the sign character, if any, and before the first non-zero digit, until&#xA; * the length of the string is equal to the requested field width.&#xA; *&#xA; * &lt;li> If the value is negative and the &lt;tt>'('&lt;/tt> flag is given, then a&#xA; * &lt;tt>'('&lt;/tt> (&lt;tt>'&amp;#92;u0028'&lt;/tt>) is prepended and a &lt;tt>')'&lt;/tt>&#xA; * (&lt;tt>'&amp;#92;u0029'&lt;/tt>) is appended.&#xA; *&#xA; * &lt;li> If the value is negative (or floating-point negative zero) and&#xA; * &lt;tt>'('&lt;/tt> flag is not given, then a &lt;tt>'-'&lt;/tt> (&lt;tt>'&amp;#92;u002d'&lt;/tt>)&#xA; * is prepended.&#xA; *&#xA; * &lt;li> If the &lt;tt>'+'&lt;/tt> flag is given and the value is positive or zero (or&#xA; * floating-point positive zero), then a &lt;tt>'+'&lt;/tt> (&lt;tt>'&amp;#92;u002b'&lt;/tt>)&#xA; * will be prepended.&#xA; *&#xA; * &lt;/ol>&#xA; *&#xA; * &lt;p> If the value is NaN or positive infinity the literal strings &quot;NaN&quot; or&#xA; * &quot;Infinity&quot; respectively, will be output.  If the value is negative infinity,&#xA; * then the output will be &quot;(Infinity)&quot; if the &lt;tt>'('&lt;/tt> flag is given&#xA; * otherwise the output will be &quot;-Infinity&quot;.  These values are not localized.&#xA; *&#xA; * &lt;p>&lt;a name=&quot;dnint&quot;>&lt;b> Byte, Short, Integer, and Long &lt;/b>&lt;/a>&#xA; *&#xA; * &lt;p> The following conversions may be applied to &lt;tt>byte&lt;/tt>, {@link Byte},&#xA; * &lt;tt>short&lt;/tt>, {@link Short}, &lt;tt>int&lt;/tt> and {@link Integer},&#xA; * &lt;tt>long&lt;/tt>, and {@link Long}.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;IntConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'d'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0054'&lt;/tt>&#xA; *     &lt;td> Formats the argument as a decimal integer. The &lt;a&#xA; *     href=&quot;#l10n algorithm&quot;>localization algorithm&lt;/a> is applied.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'0'&lt;/tt> flag is given and the value is negative, then&#xA; *     the zero padding will occur after the sign.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'o'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u006f'&lt;/tt>&#xA; *     &lt;td> Formats the argument as an integer in base eight.  No localization&#xA; *     is applied.&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is negative then the result will be an unsigned value&#xA; *     generated by adding 2&lt;sup>n&lt;/sup> to the value where &lt;tt>n&lt;/tt> is the&#xA; *     number of bits in the type as returned by the static &lt;tt>SIZE&lt;/tt> field&#xA; *     in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},&#xA; *     {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}&#xA; *     classes as appropriate.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given then the output will always begin&#xA; *     with the radix indicator &lt;tt>'0'&lt;/tt>.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'0'&lt;/tt> flag is given then the output will be padded&#xA; *     with leading zeros to the field width following any indication of sign.&#xA; *&#xA; *     &lt;p> If &lt;tt>'('&lt;/tt>, &lt;tt>'+'&lt;/tt>, '&amp;nbsp&amp;nbsp;', or &lt;tt>','&lt;/tt> flags&#xA; *     are given then a {@link FormatFlagsConversionMismatchException} will be&#xA; *     thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'x'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0078'&lt;/tt>&#xA; *     &lt;td> Formats the argument as an integer in base sixteen. No&#xA; *     localization is applied.&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is negative then the result will be an unsigned value&#xA; *     generated by adding 2&lt;sup>n&lt;/sup> to the value where &lt;tt>n&lt;/tt> is the&#xA; *     number of bits in the type as returned by the static &lt;tt>SIZE&lt;/tt> field&#xA; *     in the {@linkplain Byte#SIZE Byte}, {@linkplain Short#SIZE Short},&#xA; *     {@linkplain Integer#SIZE Integer}, or {@linkplain Long#SIZE Long}&#xA; *     classes as appropriate.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given then the output will always begin&#xA; *     with the radix indicator &lt;tt>&quot;0x&quot;&lt;/tt>.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'0'&lt;/tt> flag is given then the output will be padded to&#xA; *     the field width with leading zeros after the radix indicator or sign (if&#xA; *     present).&#xA; *&#xA; *     &lt;p> If &lt;tt>'('&lt;/tt>, &lt;tt>'&amp;nbsp;&amp;nbsp;'&lt;/tt>, &lt;tt>'+'&lt;/tt>, or&#xA; *     &lt;tt>','&lt;/tt> flags are given then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'X'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0058'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'x'&lt;/tt>.  The entire string&#xA; *     representing the number will be converted to {@linkplain&#xA; *     String#toUpperCase upper case} including the &lt;tt>'x'&lt;/tt> (if any) and&#xA; *     all hexadecimal digits &lt;tt>'a'&lt;/tt> - &lt;tt>'f'&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u0061'&lt;/tt> -  &lt;tt>'&amp;#92;u0066'&lt;/tt>).&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> If the conversion is &lt;tt>'o'&lt;/tt>, &lt;tt>'x'&lt;/tt>, or &lt;tt>'X'&lt;/tt> and&#xA; * both the &lt;tt>'#'&lt;/tt> and the &lt;tt>'0'&lt;/tt> flags are given, then result will&#xA; * contain the radix indicator (&lt;tt>'0'&lt;/tt> for octal and &lt;tt>&quot;0x&quot;&lt;/tt> or&#xA; * &lt;tt>&quot;0X&quot;&lt;/tt> for hexadecimal), some number of zeros (based on the width),&#xA; * and the value.&#xA; *&#xA; * &lt;p> If the &lt;tt>'-'&lt;/tt> flag is not given, then the space padding will occur&#xA; * before the sign.&#xA; *&#xA; * &lt;p> The following flags apply to numeric integral conversions:&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;intFlags&quot;>&lt;a name=&quot;intFlags&quot;>&lt;/a>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'+'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u002b'&lt;/tt>&#xA; *     &lt;td> Requires the output to include a positive sign for all positive&#xA; *     numbers.  If this flag is not given then only negative values will&#xA; *     include a sign.&#xA; *&#xA; *     &lt;p> If both the &lt;tt>'+'&lt;/tt> and &lt;tt>'&amp;nbsp;&amp;nbsp;'&lt;/tt> flags are given&#xA; *     then an {@link IllegalFormatFlagsException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'&amp;nbsp;&amp;nbsp;'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0020'&lt;/tt>&#xA; *     &lt;td> Requires the output to include a single extra space&#xA; *     (&lt;tt>'&amp;#92;u0020'&lt;/tt>) for non-negative values.&#xA; *&#xA; *     &lt;p> If both the &lt;tt>'+'&lt;/tt> and &lt;tt>'&amp;nbsp;&amp;nbsp;'&lt;/tt> flags are given&#xA; *     then an {@link IllegalFormatFlagsException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'0'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0030'&lt;/tt>&#xA; *     &lt;td> Requires the output to be padded with leading {@linkplain&#xA; *     java.text.DecimalFormatSymbols#getZeroDigit zeros} to the minimum field&#xA; *     width following any sign or radix indicator except when converting NaN&#xA; *     or infinity.  If the width is not provided, then a {@link&#xA; *     MissingFormatWidthException} will be thrown.&#xA; *&#xA; *     &lt;p> If both the &lt;tt>'-'&lt;/tt> and &lt;tt>'0'&lt;/tt> flags are given then an&#xA; *     {@link IllegalFormatFlagsException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>','&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u002c'&lt;/tt>&#xA; *     &lt;td> Requires the output to include the locale-specific {@linkplain&#xA; *     java.text.DecimalFormatSymbols#getGroupingSeparator group separators} as&#xA; *     described in the &lt;a href=&quot;#l10n group&quot;>&quot;group&quot; section&lt;/a> of the&#xA; *     localization algorithm.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'('&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0028'&lt;/tt>&#xA; *     &lt;td> Requires the output to prepend a &lt;tt>'('&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u0028'&lt;/tt>) and append a &lt;tt>')'&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u0029'&lt;/tt>) to negative values.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;a name=&quot;intdFlags&quot;>&lt;/a>&lt;p> If no flags are given the default formatting is&#xA; * as follows:&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li> The output is right-justified within the &lt;tt>width&lt;/tt>&#xA; *&#xA; * &lt;li> Negative numbers begin with a &lt;tt>'-'&lt;/tt> (&lt;tt>'&amp;#92;u002d'&lt;/tt>)&#xA; *&#xA; * &lt;li> Positive numbers and zero do not include a sign or extra leading&#xA; * space&#xA; *&#xA; * &lt;li> No grouping separators are included&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;a name=&quot;intWidth&quot;>&lt;/a>&lt;p> The width is the minimum number of characters to&#xA; * be written to the output.  This includes any signs, digits, grouping&#xA; * separators, radix indicator, and parentheses.  If the length of the&#xA; * converted value is less than the width then the output will be padded by&#xA; * spaces (&lt;tt>'&amp;#92;u0020'&lt;/tt>) until the total number of characters equals&#xA; * width.  The padding is on the left by default.  If &lt;tt>'-'&lt;/tt> flag is&#xA; * given then the padding will be on the right.  If width is not specified then&#xA; * there is no minimum.&#xA; *&#xA; * &lt;p> The precision is not applicable.  If precision is specified then an&#xA; * {@link IllegalFormatPrecisionException} will be thrown.&#xA; *&#xA; * &lt;p>&lt;a name=&quot;dnbint&quot;>&lt;b> BigInteger &lt;/b>&lt;/a>&#xA; *&#xA; * &lt;p> The following conversions may be applied to {@link&#xA; * java.math.BigInteger}.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;BIntConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'d'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0054'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted as a decimal integer. The &lt;a&#xA; *     href=&quot;#l10n algorithm&quot;>localization algorithm&lt;/a> is applied.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'o'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u006f'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted as an integer in base eight.&#xA; *     No localization is applied.&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is negative then the result will be a signed value&#xA; *     beginning with &lt;tt>'-'&lt;/tt> (&lt;tt>'&amp;#92;u002d'&lt;/tt>).  Signed output is&#xA; *     allowed for this type because unlike the primitive types it is not&#xA; *     possible to create an unsigned equivalent without assuming an explicit&#xA; *     data-type size.&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is positive or zero and the &lt;tt>'+'&lt;/tt> flag is given&#xA; *     then the result will begin with &lt;tt>'+'&lt;/tt> (&lt;tt>'&amp;#92;u002b'&lt;/tt>).&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given then the output will always begin&#xA; *     with &lt;tt>'0'&lt;/tt> prefix.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'0'&lt;/tt> flag is given then the output will be padded&#xA; *     with leading zeros to the field width following any indication of sign.&#xA; *&#xA; *     &lt;p> If the &lt;tt>','&lt;/tt> flag is given then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'x'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0078'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted as an integer in base&#xA; *     sixteen.  No localization is applied.&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is negative then the result will be a signed value&#xA; *     beginning with &lt;tt>'-'&lt;/tt> (&lt;tt>'&amp;#92;u002d'&lt;/tt>).  Signed output is&#xA; *     allowed for this type because unlike the primitive types it is not&#xA; *     possible to create an unsigned equivalent without assuming an explicit&#xA; *     data-type size.&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is positive or zero and the &lt;tt>'+'&lt;/tt> flag is given&#xA; *     then the result will begin with &lt;tt>'+'&lt;/tt> (&lt;tt>'&amp;#92;u002b'&lt;/tt>).&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given then the output will always begin&#xA; *     with the radix indicator &lt;tt>&quot;0x&quot;&lt;/tt>.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'0'&lt;/tt> flag is given then the output will be padded to&#xA; *     the field width with leading zeros after the radix indicator or sign (if&#xA; *     present).&#xA; *&#xA; *     &lt;p> If the &lt;tt>','&lt;/tt> flag is given then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'X'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0058'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'x'&lt;/tt>.  The entire string&#xA; *     representing the number will be converted to {@linkplain&#xA; *     String#toUpperCase upper case} including the &lt;tt>'x'&lt;/tt> (if any) and&#xA; *     all hexadecimal digits &lt;tt>'a'&lt;/tt> - &lt;tt>'f'&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u0061'&lt;/tt> - &lt;tt>'&amp;#92;u0066'&lt;/tt>).&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> If the conversion is &lt;tt>'o'&lt;/tt>, &lt;tt>'x'&lt;/tt>, or &lt;tt>'X'&lt;/tt> and&#xA; * both the &lt;tt>'#'&lt;/tt> and the &lt;tt>'0'&lt;/tt> flags are given, then result will&#xA; * contain the base indicator (&lt;tt>'0'&lt;/tt> for octal and &lt;tt>&quot;0x&quot;&lt;/tt> or&#xA; * &lt;tt>&quot;0X&quot;&lt;/tt> for hexadecimal), some number of zeros (based on the width),&#xA; * and the value.&#xA; *&#xA; * &lt;p> If the &lt;tt>'0'&lt;/tt> flag is given and the value is negative, then the&#xA; * zero padding will occur after the sign.&#xA; *&#xA; * &lt;p> If the &lt;tt>'-'&lt;/tt> flag is not given, then the space padding will occur&#xA; * before the sign.&#xA; *&#xA; * &lt;p> All &lt;a href=&quot;#intFlags&quot;>flags&lt;/a> defined for Byte, Short, Integer, and&#xA; * Long apply.  The &lt;a href=&quot;#intdFlags&quot;>default behavior&lt;/a> when no flags are&#xA; * given is the same as for Byte, Short, Integer, and Long.&#xA; *&#xA; * &lt;p> The specification of &lt;a href=&quot;#intWidth&quot;>width&lt;/a> is the same as&#xA; * defined for Byte, Short, Integer, and Long.&#xA; *&#xA; * &lt;p> The precision is not applicable.  If precision is specified then an&#xA; * {@link IllegalFormatPrecisionException} will be thrown.&#xA; *&#xA; * &lt;p>&lt;a name=&quot;dndec&quot;>&lt;b> Float and Double&lt;/b>&lt;a>&#xA; *&#xA; * &lt;p> The following conversions may be applied to &lt;tt>float&lt;/tt>, {@link&#xA; * Float}, &lt;tt>double&lt;/tt> and {@link Double}.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;floatConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'e'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0065'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted using &lt;a&#xA; *     name=&quot;scientific&quot;>computerized scientific notation&lt;/a>.  The &lt;a&#xA; *     href=&quot;#l10n algorithm&quot;>localization algorithm&lt;/a> is applied.&#xA; *&#xA; *     &lt;p> The formatting of the magnitude &lt;i>m&lt;/i> depends upon its value.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> is NaN or infinite, the literal strings &quot;NaN&quot; or&#xA; *     &quot;Infinity&quot;, respectively, will be output.  These values are not&#xA; *     localized.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> is positive-zero or negative-zero, then the exponent&#xA; *     will be &lt;tt>&quot;+00&quot;&lt;/tt>.&#xA; *&#xA; *     &lt;p> Otherwise, the result is a string that represents the sign and&#xA; *     magnitude (absolute value) of the argument.  The formatting of the sign&#xA; *     is described in the &lt;a href=&quot;#l10n algorithm&quot;>localization&#xA; *     algorithm&lt;/a>. The formatting of the magnitude &lt;i>m&lt;/i> depends upon its&#xA; *     value.&#xA; *&#xA; *     &lt;p> Let &lt;i>n&lt;/i> be the unique integer such that 10&lt;sup>&lt;i>n&lt;/i>&lt;/sup>&#xA; *     &amp;lt;= &lt;i>m&lt;/i> &amp;lt; 10&lt;sup>&lt;i>n&lt;/i>+1&lt;/sup>; then let &lt;i>a&lt;/i> be the&#xA; *     mathematically exact quotient of &lt;i>m&lt;/i> and 10&lt;sup>&lt;i>n&lt;/i>&lt;/sup> so&#xA; *     that 1 &amp;lt;= &lt;i>a&lt;/i> &amp;lt; 10. The magnitude is then represented as the&#xA; *     integer part of &lt;i>a&lt;/i>, as a single decimal digit, followed by the&#xA; *     decimal separator followed by decimal digits representing the fractional&#xA; *     part of &lt;i>a&lt;/i>, followed by the exponent symbol &lt;tt>'e'&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u0065'&lt;/tt>), followed by the sign of the exponent, followed&#xA; *     by a representation of &lt;i>n&lt;/i> as a decimal integer, as produced by the&#xA; *     method {@link Long#toString(long, int)}, and zero-padded to include at&#xA; *     least two digits.&#xA; *&#xA; *     &lt;p> The number of digits in the result for the fractional part of&#xA; *     &lt;i>m&lt;/i> or &lt;i>a&lt;/i> is equal to the precision.  If the precision is not&#xA; *     specified then the default value is &lt;tt>6&lt;/tt>. If the precision is less&#xA; *     than the number of digits which would appear after the decimal point in&#xA; *     the string returned by {@link Float#toString(float)} or {@link&#xA; *     Double#toString(double)} respectively, then the value will be rounded&#xA; *     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up&#xA; *     algorithm}.  Otherwise, zeros may be appended to reach the precision.&#xA; *     For a canonical representation of the value, use {@link&#xA; *     Float#toString(float)} or {@link Double#toString(double)} as&#xA; *     appropriate.&#xA; *&#xA; *     &lt;p>If the &lt;tt>','&lt;/tt> flag is given, then an {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'E'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0045'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'e'&lt;/tt>.  The exponent symbol&#xA; *     will be &lt;tt>'E'&lt;/tt> (&lt;tt>'&amp;#92;u0045'&lt;/tt>).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'g'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0067'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted in general scientific notation&#xA; *     as described below. The &lt;a href=&quot;#l10n algorithm&quot;>localization&#xA; *     algorithm&lt;/a> is applied.&#xA; *&#xA; *     &lt;p> After rounding for the precision, the formatting of the resulting&#xA; *     magnitude &lt;i>m&lt;/i> depends on its value.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> is greater than or equal to 10&lt;sup>-4&lt;/sup> but less&#xA; *     than 10&lt;sup>precision&lt;/sup> then it is represented in &lt;i>&lt;a&#xA; *     href=&quot;#decimal&quot;>decimal format&lt;/a>&lt;/i>.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> is less than 10&lt;sup>-4&lt;sup> or greater than or equal to&#xA; *     10&lt;sup>precision&lt;/sup>, then it is represented in &lt;i>&lt;a&#xA; *     href=&quot;#scientific&quot;>computerized scientific notation&lt;/a>&lt;/i>.&#xA; *&#xA; *     &lt;p> The total number of significant digits in &lt;i>m&lt;/i> is equal to the&#xA; *     precision.  If the precision is not specified, then the default value is&#xA; *     &lt;tt>6&lt;/tt>.  If the precision is &lt;tt>0&lt;/tt>, then it is taken to be&#xA; *     &lt;tt>1&lt;/tt>.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given then an {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'G'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0047'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'g'&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'f'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0066'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted using &lt;a name=&quot;decimal&quot;>decimal&#xA; *     format&lt;/a>.  The &lt;a href=&quot;#l10n algorithm&quot;>localization algorithm&lt;/a> is&#xA; *     applied.&#xA; *&#xA; *     &lt;p> The result is a string that represents the sign and magnitude&#xA; *     (absolute value) of the argument.  The formatting of the sign is&#xA; *     described in the &lt;a href=&quot;#l10n algorithm&quot;>localization&#xA; *     algorithm&lt;/a>. The formatting of the magnitude &lt;i>m&lt;/i> depends upon its&#xA; *     value.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> NaN or infinite, the literal strings &quot;NaN&quot; or&#xA; *     &quot;Infinity&quot;, respectively, will be output.  These values are not&#xA; *     localized.&#xA; *&#xA; *     &lt;p> The magnitude is formatted as the integer part of &lt;i>m&lt;/i>, with no&#xA; *     leading zeroes, followed by the decimal separator followed by one or&#xA; *     more decimal digits representing the fractional part of &lt;i>m&lt;/i>.&#xA; *&#xA; *     &lt;p> The number of digits in the result for the fractional part of&#xA; *     &lt;i>m&lt;/i> or &lt;i>a&lt;/i> is equal to the precision.  If the precision is not&#xA; *     specified then the default value is &lt;tt>6&lt;/tt>. If the precision is less&#xA; *     than the number of digits which would appear after the decimal point in&#xA; *     the string returned by {@link Float#toString(float)} or {@link&#xA; *     Double#toString(double)} respectively, then the value will be rounded&#xA; *     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up&#xA; *     algorithm}.  Otherwise, zeros may be appended to reach the precision.&#xA; *     For a canonical representation of the value,use {@link&#xA; *     Float#toString(float)} or {@link Double#toString(double)} as&#xA; *     appropriate.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'a'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0061'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted in hexadecimal exponential&#xA; *     form.  No localization is applied.&#xA; *&#xA; *     &lt;p> The result is a string that represents the sign and magnitude&#xA; *     (absolute value) of the argument &lt;i>x&lt;/i>.&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is negative or a negative-zero value then the result&#xA; *     will begin with &lt;tt>'-'&lt;/tt> (&lt;tt>'&amp;#92;u002d'&lt;/tt>).&#xA; *&#xA; *     &lt;p> If &lt;i>x&lt;/i> is positive or a positive-zero value and the&#xA; *     &lt;tt>'+'&lt;/tt> flag is given then the result will begin with &lt;tt>'+'&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u002b'&lt;/tt>).&#xA; *&#xA; *     &lt;p> The formatting of the magnitude &lt;i>m&lt;/i> depends upon its value.&#xA; *&#xA; *     &lt;ul>&#xA; *&#xA; *     &lt;li> If the value is NaN or infinite, the literal strings &quot;NaN&quot; or&#xA; *     &quot;Infinity&quot;, respectively, will be output.&#xA; *&#xA; *     &lt;li> If &lt;i>m&lt;/i> is zero then it is represented by the string&#xA; *     &lt;tt>&quot;0x0.0p0&quot;&lt;/tt>.&#xA; *&#xA; *     &lt;li> If &lt;i>m&lt;/i> is a &lt;tt>double&lt;/tt> value with a normalized&#xA; *     representation then substrings are used to represent the significand and&#xA; *     exponent fields.  The significand is represented by the characters&#xA; *     &lt;tt>&quot;0x1.&quot;&lt;/tt> followed by the hexadecimal representation of the rest&#xA; *     of the significand as a fraction.  The exponent is represented by&#xA; *     &lt;tt>'p'&lt;/tt> (&lt;tt>'&amp;#92;u0070'&lt;/tt>) followed by a decimal string of the&#xA; *     unbiased exponent as if produced by invoking {@link&#xA; *     Integer#toString(int) Integer.toString} on the exponent value.&#xA; *&#xA; *     &lt;li> If &lt;i>m&lt;/i> is a &lt;tt>double&lt;/tt> value with a subnormal&#xA; *     representation then the significand is represented by the characters&#xA; *     &lt;tt>'0x0.'&lt;/tt> followed by the hexadecimal representation of the rest&#xA; *     of the significand as a fraction.  The exponent is represented by&#xA; *     &lt;tt>'p-1022'&lt;/tt>.  Note that there must be at least one nonzero digit&#xA; *     in a subnormal significand.&#xA; *&#xA; *     &lt;/ul>&#xA; *&#xA; *     &lt;p> If the &lt;tt>'('&lt;/tt> or &lt;tt>','&lt;/tt> flags are given, then a {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'A'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0041'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'a'&lt;/tt>.  The entire string&#xA; *     representing the number will be converted to upper case including the&#xA; *     &lt;tt>'x'&lt;/tt> (&lt;tt>'&amp;#92;u0078'&lt;/tt>) and &lt;tt>'p'&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u0070'&lt;/tt> and all hexadecimal digits &lt;tt>'a'&lt;/tt> -&#xA; *     &lt;tt>'f'&lt;/tt> (&lt;tt>'&amp;#92;u0061'&lt;/tt> - &lt;tt>'&amp;#92;u0066'&lt;/tt>).&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> All &lt;a href=&quot;#intFlags&quot;>flags&lt;/a> defined for Byte, Short, Integer, and&#xA; * Long apply.&#xA; *&#xA; * &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given, then the decimal separator will&#xA; * always be present.&#xA; *&#xA; * &lt;a name=&quot;floatdFlags&quot;>&lt;/a>&lt;p> If no flags are given the default formatting&#xA; * is as follows:&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li> The output is right-justified within the &lt;tt>width&lt;/tt>&#xA; *&#xA; * &lt;li> Negative numbers begin with a &lt;tt>'-'&lt;/tt>&#xA; *&#xA; * &lt;li> Positive numbers and positive zero do not include a sign or extra&#xA; * leading space&#xA; *&#xA; * &lt;li> No grouping separators are included&#xA; *&#xA; * &lt;li> The decimal separator will only appear if a digit follows it&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;a name=&quot;floatDWidth&quot;>&lt;/a>&lt;p> The width is the minimum number of characters&#xA; * to be written to the output.  This includes any signs, digits, grouping&#xA; * separators, decimal separators, exponential symbol, radix indicator,&#xA; * parentheses, and strings representing infinity and NaN as applicable.  If&#xA; * the length of the converted value is less than the width then the output&#xA; * will be padded by spaces (&lt;tt>'&amp;#92;u0020'&lt;/tt>) until the total number of&#xA; * characters equals width.  The padding is on the left by default.  If the&#xA; * &lt;tt>'-'&lt;/tt> flag is given then the padding will be on the right.  If width&#xA; * is not specified then there is no minimum.&#xA; *&#xA; * &lt;a name=&quot;floatDPrec&quot;>&lt;/a>&lt;p> If the conversion is &lt;tt>'e'&lt;/tt>,&#xA; * &lt;tt>'E'&lt;/tt> or &lt;tt>'f'&lt;/tt>, then the precision is the number of digits&#xA; * after the decimal separator.  If the precision is not specified, then it is&#xA; * assumed to be &lt;tt>6&lt;/tt>.&#xA; *&#xA; * &lt;p> If the conversion is &lt;tt>'g'&lt;/tt> or &lt;tt>'G'&lt;/tt>, then the precision is&#xA; * the total number of significant digits in the resulting magnitude after&#xA; * rounding.  If the precision is not specified, then the default value is&#xA; * &lt;tt>6&lt;/tt>.  If the precision is &lt;tt>0&lt;/tt>, then it is taken to be&#xA; * &lt;tt>1&lt;/tt>.&#xA; *&#xA; * &lt;p> If the conversion is &lt;tt>'a'&lt;/tt> or &lt;tt>'A'&lt;/tt>, then the precision&#xA; * is the number of hexadecimal digits after the decimal separator.  If the&#xA; * precision is not provided, then all of the digits as returned by {@link&#xA; * Double#toHexString(double)} will be output.&#xA; *&#xA; * &lt;p>&lt;a name=&quot;dndec&quot;>&lt;b> BigDecimal &lt;/b>&lt;a>&#xA; *&#xA; * &lt;p> The following conversions may be applied {@link java.math.BigDecimal&#xA; * BigDecimal}.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;floatConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'e'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0065'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted using &lt;a&#xA; *     name=&quot;scientific&quot;>computerized scientific notation&lt;/a>.  The &lt;a&#xA; *     href=&quot;#l10n algorithm&quot;>localization algorithm&lt;/a> is applied.&#xA; *&#xA; *     &lt;p> The formatting of the magnitude &lt;i>m&lt;/i> depends upon its value.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> is positive-zero or negative-zero, then the exponent&#xA; *     will be &lt;tt>&quot;+00&quot;&lt;/tt>.&#xA; *&#xA; *     &lt;p> Otherwise, the result is a string that represents the sign and&#xA; *     magnitude (absolute value) of the argument.  The formatting of the sign&#xA; *     is described in the &lt;a href=&quot;#l10n algorithm&quot;>localization&#xA; *     algorithm&lt;/a>. The formatting of the magnitude &lt;i>m&lt;/i> depends upon its&#xA; *     value.&#xA; *&#xA; *     &lt;p> Let &lt;i>n&lt;/i> be the unique integer such that 10&lt;sup>&lt;i>n&lt;/i>&lt;/sup>&#xA; *     &amp;lt;= &lt;i>m&lt;/i> &amp;lt; 10&lt;sup>&lt;i>n&lt;/i>+1&lt;/sup>; then let &lt;i>a&lt;/i> be the&#xA; *     mathematically exact quotient of &lt;i>m&lt;/i> and 10&lt;sup>&lt;i>n&lt;/i>&lt;/sup> so&#xA; *     that 1 &amp;lt;= &lt;i>a&lt;/i> &amp;lt; 10. The magnitude is then represented as the&#xA; *     integer part of &lt;i>a&lt;/i>, as a single decimal digit, followed by the&#xA; *     decimal separator followed by decimal digits representing the fractional&#xA; *     part of &lt;i>a&lt;/i>, followed by the exponent symbol &lt;tt>'e'&lt;/tt>&#xA; *     (&lt;tt>'&amp;#92;u0065'&lt;/tt>), followed by the sign of the exponent, followed&#xA; *     by a representation of &lt;i>n&lt;/i> as a decimal integer, as produced by the&#xA; *     method {@link Long#toString(long, int)}, and zero-padded to include at&#xA; *     least two digits.&#xA; *&#xA; *     &lt;p> The number of digits in the result for the fractional part of&#xA; *     &lt;i>m&lt;/i> or &lt;i>a&lt;/i> is equal to the precision.  If the precision is not&#xA; *     specified then the default value is &lt;tt>6&lt;/tt>.  If the precision is&#xA; *     less than the number of digits which would appear after the decimal&#xA; *     point in the string returned by {@link Float#toString(float)} or {@link&#xA; *     Double#toString(double)} respectively, then the value will be rounded&#xA; *     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up&#xA; *     algorithm}.  Otherwise, zeros may be appended to reach the precision.&#xA; *     For a canonical representation of the value, use {@link&#xA; *     BigDecimal#toString()}.&#xA; *&#xA; *     &lt;p> If the &lt;tt>','&lt;/tt> flag is given, then an {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'E'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0045'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'e'&lt;/tt>.  The exponent symbol&#xA; *     will be &lt;tt>'E'&lt;/tt> (&lt;tt>'&amp;#92;u0045'&lt;/tt>).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'g'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0067'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted in general scientific notation&#xA; *     as described below. The &lt;a href=&quot;#l10n algorithm&quot;>localization&#xA; *     algorithm&lt;/a> is applied.&#xA; *&#xA; *     &lt;p> After rounding for the precision, the formatting of the resulting&#xA; *     magnitude &lt;i>m&lt;/i> depends on its value.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> is greater than or equal to 10&lt;sup>-4&lt;/sup> but less&#xA; *     than 10&lt;sup>precision&lt;/sup> then it is represented in &lt;i>&lt;a&#xA; *     href=&quot;#decimal&quot;>decimal format&lt;/a>&lt;/i>.&#xA; *&#xA; *     &lt;p> If &lt;i>m&lt;/i> is less than 10&lt;sup>-4&lt;/sup> or greater than or equal to&#xA; *     10&lt;sup>precision&lt;/sup>, then it is represented in &lt;i>&lt;a&#xA; *     href=&quot;#scientific&quot;>computerized scientific notation&lt;/a>&lt;/i>.&#xA; *&#xA; *     &lt;p> The total number of significant digits in &lt;i>m&lt;/i> is equal to the&#xA; *     precision.  If the precision is not specified, then the default value is&#xA; *     &lt;tt>6&lt;/tt>.  If the precision is &lt;tt>0&lt;/tt>, then it is taken to be&#xA; *     &lt;tt>1&lt;/tt>.&#xA; *&#xA; *     &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given then an {@link&#xA; *     FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'G'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0047'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'g'&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'f'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0066'&lt;/tt>&#xA; *     &lt;td> Requires the output to be formatted using &lt;a name=&quot;decimal&quot;>decimal&#xA; *     format&lt;/a>.  The &lt;a href=&quot;#l10n algorithm&quot;>localization algorithm&lt;/a> is&#xA; *     applied.&#xA; *&#xA; *     &lt;p> The result is a string that represents the sign and magnitude&#xA; *     (absolute value) of the argument.  The formatting of the sign is&#xA; *     described in the &lt;a href=&quot;#l10n algorithm&quot;>localization&#xA; *     algorithm&lt;/a>. The formatting of the magnitude &lt;i>m&lt;/i> depends upon its&#xA; *     value.&#xA; *&#xA; *     &lt;p> The magnitude is formatted as the integer part of &lt;i>m&lt;/i>, with no&#xA; *     leading zeroes, followed by the decimal separator followed by one or&#xA; *     more decimal digits representing the fractional part of &lt;i>m&lt;/i>.&#xA; *&#xA; *     &lt;p> The number of digits in the result for the fractional part of&#xA; *     &lt;i>m&lt;/i> or &lt;i>a&lt;/i> is equal to the precision.  If the precision is not&#xA; *     specified then the default value is &lt;tt>6&lt;/tt>.  If the precision is&#xA; *     less than the number of digits which would appear after the decimal&#xA; *     point in the string returned by {@link Float#toString(float)} or {@link&#xA; *     Double#toString(double)} respectively, then the value will be rounded&#xA; *     using the {@linkplain java.math.BigDecimal#ROUND_HALF_UP round half up&#xA; *     algorithm}.  Otherwise, zeros may be appended to reach the precision.&#xA; *     For a canonical representation of the value, use {@link&#xA; *     BigDecimal#toString()}.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> All &lt;a href=&quot;#intFlags&quot;>flags&lt;/a> defined for Byte, Short, Integer, and&#xA; * Long apply.&#xA; *&#xA; * &lt;p> If the &lt;tt>'#'&lt;/tt> flag is given, then the decimal separator will&#xA; * always be present.&#xA; *&#xA; * &lt;p> The &lt;a href=&quot;#floatdFlags&quot;>default behavior&lt;/a> when no flags are&#xA; * given is the same as for Float and Double.&#xA; *&#xA; * &lt;p> The specification of &lt;a href=&quot;#floatDWidth&quot;>width&lt;/a> and &lt;a&#xA; * href=&quot;#floatDPrec&quot;>precision&lt;/a> is the same as defined for Float and&#xA; * Double.&#xA; *&#xA; * &lt;a name=&quot;ddt&quot;>&lt;h4> Date/Time &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> This conversion may be applied to &lt;tt>long&lt;/tt>, {@link Long}, {@link&#xA; * Calendar}, and {@link Date}.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;DTConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'t'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0074'&lt;/tt>&#xA; *     &lt;td> Prefix for date and time conversion characters.&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'T'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0054'&lt;/tt>&#xA; *     &lt;td> The upper-case variant of &lt;tt>'t'&lt;/tt>.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The following date and time conversion character suffixes are defined&#xA; * for the &lt;tt>'t'&lt;/tt> and &lt;tt>'T'&lt;/tt> conversions.  The types are similar to&#xA; * but not completely identical to those defined by GNU &lt;tt>date&lt;/tt> and&#xA; * POSIX &lt;tt>strftime(3c)&lt;/tt>.  Additional conversion types are provided to&#xA; * access Java-specific functionality (e.g. &lt;tt>'L'&lt;/tt> for milliseconds&#xA; * within the second).&#xA; *&#xA; * &lt;p> The following conversion characters are used for formatting times:&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;time&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;> &lt;tt>'H'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0048'&lt;/tt>&#xA; *     &lt;td> Hour of the day for the 24-hour clock, formatted as two digits with&#xA; *     a leading zero as necessary i.e. &lt;tt>00 - 23&lt;/tt>. &lt;tt>00&lt;/tt>&#xA; *     corresponds to midnight.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'I'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0049'&lt;/tt>&#xA; *     &lt;td> Hour for the 12-hour clock, formatted as two digits with a leading&#xA; *     zero as necessary, i.e.  &lt;tt>01 - 12&lt;/tt>.  &lt;tt>01&lt;/tt> corresponds to&#xA; *     one o'clock (either morning or afternoon).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'k'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u006b'&lt;/tt>&#xA; *     &lt;td> Hour of the day for the 24-hour clock, i.e. &lt;tt>0 - 23&lt;/tt>.&#xA; *     &lt;tt>0&lt;/tt> corresponds to midnight.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'l'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u006c'&lt;/tt>&#xA; *     &lt;td> Hour for the 12-hour clock, i.e. &lt;tt>1 - 12&lt;/tt>.  &lt;tt>1&lt;/tt>&#xA; *     corresponds to one o'clock (either morning or afternoon).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'M'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u004d'&lt;/tt>&#xA; *     &lt;td> Minute within the hour formatted as two digits with a leading zero&#xA; *     as necessary, i.e.  &lt;tt>00 - 59&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'S'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0053'&lt;/tt>&#xA; *     &lt;td> Seconds within the minute, formatted as two digits with a leading&#xA; *     zero as necessary, i.e. &lt;tt>00 - 60&lt;/tt> (&quot;&lt;tt>60&lt;/tt>&quot; is a special&#xA; *     value required to support leap seconds).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'L'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u004c'&lt;/tt>&#xA; *     &lt;td> Millisecond within the second formatted as three digits with&#xA; *     leading zeros as necessary, i.e. &lt;tt>000 - 999&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'N'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u004e'&lt;/tt>&#xA; *     &lt;td> Nanosecond within the second, formatted as nine digits with leading&#xA; *     zeros as necessary, i.e. &lt;tt>000000000 - 999999999&lt;/tt>.  The precision&#xA; *     of this value is limited by the resolution of the underlying operating&#xA; *     system or hardware.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'p'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0070'&lt;/tt>&#xA; *     &lt;td> Locale-specific {@linkplain&#xA; *     java.text.DateFormatSymbols#getAmPmStrings morning or afternoon} marker&#xA; *     in lower case, e.g.&quot;&lt;tt>am&lt;/tt>&quot; or &quot;&lt;tt>pm&lt;/tt>&quot;.  Use of the&#xA; *     conversion prefix &lt;tt>'T'&lt;/tt> forces this output to upper case.  (Note&#xA; *     that &lt;tt>'p'&lt;/tt> produces lower-case output.  This is different from&#xA; *     GNU &lt;tt>date&lt;/tt> and POSIX &lt;tt>strftime(3c)&lt;/tt> which produce&#xA; *     upper-case output.)&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'z'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u007a'&lt;/tt>&#xA; *     &lt;td> &lt;a href=&quot;http://www.ietf.org/rfc/rfc0822.txt&quot;>RFC&amp;nbsp;822&lt;/a>&#xA; *     style numeric time zone offset from GMT, e.g. &lt;tt>-0800&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'Z'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u005a'&lt;/tt>&#xA; *     &lt;td> A string representing the abbreviation for the time zone.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'s'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0073'&lt;/tt>&#xA; *     &lt;td> Seconds since the beginning of the epoch starting at 1 January 1970&#xA; *     &lt;tt>00:00:00&lt;/tt> UTC, i.e. &lt;tt>Long.MIN_VALUE/1000&lt;/tt> to&#xA; *     &lt;tt>Long.MAX_VALUE/1000&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'Q'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u004f'&lt;/tt>&#xA; *     &lt;td> Milliseconds since the beginning of the epoch starting at 1 January&#xA; *     1970 &lt;tt>00:00:00&lt;/tt> UTC, i.e. &lt;tt>Long.MIN_VALUE&lt;/tt> to&#xA; *     &lt;tt>Long.MAX_VALUE&lt;/tt>. The precision of this value is limited by&#xA; *     the resolution of the underlying operating system or hardware.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The following conversion characters are used for formatting dates:&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;date&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'B'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0042'&lt;/tt>&#xA; *     &lt;td> Locale-specific {@linkplain java.text.DateFormatSymbols#getMonths&#xA; *     full month name}, e.g. &lt;tt>&quot;January&quot;&lt;/tt>, &lt;tt>&quot;February&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'b'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0062'&lt;/tt>&#xA; *     &lt;td> Locale-specific {@linkplain&#xA; *     java.text.DateFormatSymbols#getShortMonths abbreviated month name},&#xA; *     e.g. &lt;tt>&quot;Jan&quot;&lt;/tt>, &lt;tt>&quot;Feb&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'h'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0068'&lt;/tt>&#xA; *     &lt;td> Same as &lt;tt>'b'&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'A'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0041'&lt;/tt>&#xA; *     &lt;td> Locale-specific full name of the {@linkplain&#xA; *     java.text.DateFormatSymbols#getWeekdays day of the week},&#xA; *     e.g. &lt;tt>&quot;Sunday&quot;&lt;/tt>, &lt;tt>&quot;Monday&quot;&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'a'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0061'&lt;/tt>&#xA; *     &lt;td> Locale-specific short name of the {@linkplain&#xA; *     java.text.DateFormatSymbols#getShortWeekdays day of the week},&#xA; *     e.g. &lt;tt>&quot;Sun&quot;&lt;/tt>, &lt;tt>&quot;Mon&quot;&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'C'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0043'&lt;/tt>&#xA; *     &lt;td> Four-digit year divided by &lt;tt>100&lt;/tt>, formatted as two digits&#xA; *     with leading zero as necessary, i.e. &lt;tt>00 - 99&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'Y'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0059'&lt;/tt> &lt;td> Year, formatted to at least&#xA; *     four digits with leading zeros as necessary, e.g. &lt;tt>0092&lt;/tt> equals&#xA; *     &lt;tt>92&lt;/tt> CE for the Gregorian calendar.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'y'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0079'&lt;/tt>&#xA; *     &lt;td> Last two digits of the year, formatted with leading zeros as&#xA; *     necessary, i.e. &lt;tt>00 - 99&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'j'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u006a'&lt;/tt>&#xA; *     &lt;td> Day of year, formatted as three digits with leading zeros as&#xA; *     necessary, e.g. &lt;tt>001 - 366&lt;/tt> for the Gregorian calendar.&#xA; *     &lt;tt>001&lt;/tt> corresponds to the first day of the year.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'m'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u006d'&lt;/tt>&#xA; *     &lt;td> Month, formatted as two digits with leading zeros as necessary,&#xA; *     i.e. &lt;tt>01 - 13&lt;/tt>, where &quot;&lt;tt>01&lt;/tt>&quot; is the first month of the&#xA; *     year and (&quot;&lt;tt>13&lt;/tt>&quot; is a special value required to support lunar&#xA; *     calendars).&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'d'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0064'&lt;/tt>&#xA; *     &lt;td> Day of month, formatted as two digits with leading zeros as&#xA; *     necessary, i.e. &lt;tt>01 - 31&lt;/tt>, where &quot;&lt;tt>01&lt;/tt>&quot; is the first day&#xA; *     of the month.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'e'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0065'&lt;/tt>&#xA; *     &lt;td> Day of month, formatted as two digits, i.e. &lt;tt>1 - 31&lt;/tt> where&#xA; *     &quot;&lt;tt>1&lt;/tt>&quot; is the first day of the month.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The following conversion characters are used for formatting common&#xA; * date/time compositions.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;composites&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'R'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0052'&lt;/tt>&#xA; *     &lt;td> Time formatted for the 24-hour clock as &lt;tt>&quot;%tH:%tM&quot;&lt;/tt>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'T'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0054'&lt;/tt>&#xA; *     &lt;td> Time formatted for the 24-hour clock as &lt;tt>&quot;%tH:%tM:%tS&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'r'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0072'&lt;/tt>&#xA; *     &lt;td> Time formatted for the 12-hour clock as &lt;tt>&quot;%tI:%tM:%tS&#xA; *     %Tp&quot;&lt;/tt>.  The location of the morning or afternoon marker&#xA; *     (&lt;tt>'%Tp'&lt;/tt>) may be locale-dependent.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'D'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0044'&lt;/tt>&#xA; *     &lt;td> Date formatted as &lt;tt>&quot;%tm/%td/%ty&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'F'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0046'&lt;/tt>&#xA; *     &lt;td> &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;>ISO&amp;nbsp;8601&lt;/a>&#xA; *     complete date formatted as &lt;tt>&quot;%tY-%tm-%td&quot;&lt;/tt>.&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'c'&lt;/tt>&#xA; *     &lt;td valign=&quot;top&quot;> &lt;tt>'&amp;#92;u0063'&lt;/tt>&#xA; *     &lt;td> Date and time formatted as &lt;tt>&quot;%ta %tb %td %tT %tZ %tY&quot;&lt;/tt>,&#xA; *     e.g. &lt;tt>&quot;Sun Jul 20 16:17:00 EDT 1969&quot;&lt;/tt>.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> The &lt;tt>'-'&lt;/tt> flag defined for &lt;a href=&quot;#dFlags&quot;>General&#xA; * conversions&lt;/a> applies.  If the &lt;tt>'#'&lt;/tt> flag is given, then a {@link&#xA; * FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;a name=&quot;dtWidth&quot;>&lt;/a>&lt;p> The width is the minimum number of characters to&#xA; * be written to the output.  If the length of the converted value is less than&#xA; * the &lt;tt>width&lt;/tt> then the output will be padded by spaces&#xA; * (&lt;tt>'&amp;#92;u0020'&lt;/tt>) until the total number of characters equals width.&#xA; * The padding is on the left by default.  If the &lt;tt>'-'&lt;/tt> flag is given&#xA; * then the padding will be on the right.  If width is not specified then there&#xA; * is no minimum.&#xA; *&#xA; * &lt;p> The precision is not applicable.  If the precision is specified then an&#xA; * {@link IllegalFormatPrecisionException} will be thrown.&#xA; *&#xA; * &lt;a name=&quot;dper&quot;>&lt;h4> Percent &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> The conversion does not correspond to any argument.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;DTConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'%'&lt;/tt>&#xA; *     &lt;td> The result is a literal &lt;tt>'%'&lt;/tt> (&lt;tt>'&amp;#92;u0025'&lt;/tt>)&#xA; *&#xA; * &lt;a name=&quot;dtWidth&quot;>&lt;/a>&lt;p> The width is the minimum number of characters to&#xA; * be written to the output including the &lt;tt>'%'&lt;/tt>.  If the length of the&#xA; * converted value is less than the &lt;tt>width&lt;/tt> then the output will be&#xA; * padded by spaces (&lt;tt>'&amp;#92;u0020'&lt;/tt>) until the total number of&#xA; * characters equals width.  The padding is on the left.  If width is not&#xA; * specified then just the &lt;tt>'%'&lt;/tt> is output.&#xA; *&#xA; * &lt;p> The &lt;tt>'-'&lt;/tt> flag defined for &lt;a href=&quot;#dFlags&quot;>General&#xA; * conversions&lt;/a> applies.  If any other flags are provided, then a&#xA; * {@link FormatFlagsConversionMismatchException} will be thrown.&#xA; *&#xA; * &lt;p> The precision is not applicable.  If the precision is specified an&#xA; * {@link IllegalFormatPrecisionException} will be thrown.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;a name=&quot;dls&quot;>&lt;h4> Line Separator &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> The conversion does not correspond to any argument.&#xA; *&#xA; * &lt;table cellpadding=5 summary=&quot;DTConv&quot;>&#xA; *&#xA; * &lt;tr>&lt;td valign=&quot;top&quot;>&lt;tt>'n'&lt;/tt>&#xA; *     &lt;td> the platform-specific line separator as returned by {@link&#xA; *     System#getProperty System.getProperty(&quot;line.separator&quot;)}.&#xA; *&#xA; * &lt;/table>&#xA; *&#xA; * &lt;p> Flags, width, and precision are not applicable.  If any are provided an&#xA; * {@link IllegalFormatFlagsException}, {@link IllegalFormatWidthException},&#xA; * and {@link IllegalFormatPrecisionException}, respectively will be thrown.&#xA; *&#xA; * &lt;a name=&quot;dpos&quot;>&lt;h4> Argument Index &lt;/h4>&lt;/a>&#xA; *&#xA; * &lt;p> Format specifiers can reference arguments in three ways:&#xA; *&#xA; * &lt;ul>&#xA; *&#xA; * &lt;li> &lt;i>Explicit indexing&lt;/i> is used when the format specifier contains an&#xA; * argument index.  The argument index is a decimal integer indicating the&#xA; * position of the argument in the argument list.  The first argument is&#xA; * referenced by &quot;&lt;tt>1$&lt;/tt>&quot;, the second by &quot;&lt;tt>2$&lt;/tt>&quot;, etc.  An argument&#xA; * may be referenced more than once.&#xA; *&#xA; * &lt;p> For example:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   formatter.format(&quot;%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s&quot;,&#xA; *                    &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#xA; *   // -> &quot;d c b a d c b a&quot;&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;li> &lt;i>Relative indexing&lt;/i> is used when the format specifier contains a&#xA; * &lt;tt>'&lt;'&lt;/tt> (&lt;tt>'&amp;#92;u003c'&lt;/tt>) flag which causes the argument for the&#xA; * previous format specifier to be re-used.  If there is no previous argument,&#xA; * then a {@link MissingFormatArgumentException} is thrown.&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *    formatter.format(&quot;%s %s %&amp;lt;s %&amp;lt;s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#xA; *    // -> &quot;a b b b&quot;&#xA; *    // &quot;c&quot; and &quot;d&quot; are ignored because they are not referenced&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;li> &lt;i>Ordinary indexing&lt;/i> is used when the format specifier contains&#xA; * neither an argument index nor a &lt;tt>'&lt;'&lt;/tt> flag.  Each format specifier&#xA; * which uses ordinary indexing is assigned a sequential implicit index into&#xA; * argument list which is independent of the indices used by explicit or&#xA; * relative indexing.&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   formatter.format(&quot;%s %s %s %s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#xA; *   // -> &quot;a b c d&quot;&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * &lt;p> It is possible to have a format string which uses all forms of indexing,&#xA; * for example:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   formatter.format(&quot;%2$s %s %&amp;lt;s %s&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)&#xA; *   // -> &quot;b a a b&quot;&#xA; *   // &quot;c&quot; and &quot;d&quot; are ignored because they are not referenced&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> The maximum number of arguments is limited by the maximum dimension of a&#xA; * Java array as defined by the &lt;a&#xA; * href=&quot;http://java.sun.com/docs/books/vmspec/&quot;>Java Virtual Machine&#xA; * Specification&lt;/a>.  If the argument index is does not correspond to an&#xA; * available argument, then a {@link MissingFormatArgumentException} is thrown.&#xA; *&#xA; * &lt;p> If there are more arguments than format specifiers, the extra arguments&#xA; * are ignored.&#xA; *&#xA; * &lt;p> Unless otherwise specified, passing a &lt;tt>null&lt;/tt> argument to any&#xA; * method or constructor in this class will cause a {@link&#xA; * NullPointerException} to be thrown.&#xA; *&#xA; * @author  Iris Garcia&#xA; * @version &#x9;1.16, 01/04/05&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Final"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Closeable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Flushable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
