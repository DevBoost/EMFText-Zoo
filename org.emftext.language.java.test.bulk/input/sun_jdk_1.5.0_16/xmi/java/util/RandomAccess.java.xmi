<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:modifiers="http://www.emftext.org/java/modifiers" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/modifiers ../../java.ecore#/11" name="RandomAccess.java">
  <comments>/*&#xA; * @(#)RandomAccess.java&#x9;1.6 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="RandomAccess">
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Marker interface used by &lt;tt>List&lt;/tt> implementations to indicate that&#xA; * they support fast (generally constant time) random access.  The primary&#xA; * purpose of this interface is to allow generic algorithms to alter their&#xA; * behavior to provide good performance when applied to either random or&#xA; * sequential access lists.&#xA; *&#xA; * &lt;p>The best algorithms for manipulating random access lists (such as&#xA; * &lt;tt>ArrayList&lt;/tt>) can produce quadratic behavior when applied to&#xA; * sequential access lists (such as &lt;tt>LinkedList&lt;/tt>).  Generic list&#xA; * algorithms are encouraged to check whether the given list is an&#xA; * &lt;tt>instanceof&lt;/tt> this interface before applying an algorithm that would&#xA; * provide poor performance if it were applied to a sequential access list,&#xA; * and to alter their behavior if necessary to guarantee acceptable&#xA; * performance.&#xA; * &#xA; * &lt;p>It is recognized that the distinction between random and sequential&#xA; * access is often fuzzy.  For example, some &lt;tt>List&lt;/tt> implementations&#xA; * provide asymptotically linear access times if they get huge, but constant&#xA; * access times in practice.  Such a &lt;tt>List&lt;/tt> implementation&#xA; * should generally implement this interface.  As a rule of thumb, a&#xA; * &lt;tt>List&lt;/tt> implementation should implement this interface if,&#xA; * for typical instances of the class, this loop:&#xA; * &lt;pre>&#xA; *     for (int i=0, n=list.size(); i &amp;lt; n; i++)&#xA; *         list.get(i);&#xA; * &lt;/pre>&#xA; * runs faster than this loop:&#xA; * &lt;pre>&#xA; *     for (Iterator i=list.iterator(); i.hasNext(); )&#xA; *         i.next();&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p>This interface is a member of the &#xA; * &lt;a href=&quot;{@docRoot}/../guide/collections/index.html&quot;>&#xA; * Java Collections Framework&lt;/a>.&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
