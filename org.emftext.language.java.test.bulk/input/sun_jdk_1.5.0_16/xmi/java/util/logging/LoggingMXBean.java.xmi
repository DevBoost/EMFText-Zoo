<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="LoggingMXBean.java">
  <comments>/*&#xA; * @(#)LoggingMXBean.java&#x9;1.7 04/04/20&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>logging</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="LoggingMXBean">
    <members xsi:type="members:InterfaceMethod" name="getLoggerNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>util</namespaces>
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the list of currently registered loggers. This method&#xA;     * calls {@link LogManager#getLoggerNames} and returns a list &#xA;     * of the logger names.&#xA;     * &#xA;     * @return A list of &lt;tt>String&lt;/tt> each of which is a&#xA;     *         currently registered &lt;tt>Logger&lt;/tt> name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLoggerLevel">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loggerName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Gets the name of the log level associated with the specified logger.&#xA;     * If the specified logger does not exist, &lt;tt>null&lt;/tt> &#xA;     * is returned. &#xA;     * This method first finds the logger of the given name and &#xA;     * then returns the name of the log level by calling:&#xA;     * &lt;blockquote>&#xA;     *   {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};&#xA;     * &lt;/blockquote>&#xA;     *  &#xA;     * &lt;p>&#xA;     * If the &lt;tt>Level&lt;/tt> of the specified logger is &lt;tt>null&lt;/tt>, &#xA;     * which means that this logger's effective level is inherited &#xA;     * from its parent, an empty string will be returned.&#xA;     * &#xA;     * @param loggerName The name of the &lt;tt>Logger&lt;/tt> to be retrieved.&#xA;     *&#xA;     * @return The name of the log level of the specified logger; or&#xA;     *         an empty string if the log level of the specified logger&#xA;     *         is &lt;tt>null&lt;/tt>.  If the specified logger does not&#xA;     *         exist, &lt;tt>null&lt;/tt> is returned.&#xA;     *&#xA;     * @see Logger#getLevel&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setLoggerLevel">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loggerName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="levelName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Sets the specified logger to the specified new level.&#xA;     * If the &lt;tt>levelName&lt;/tt> is not &lt;tt>null&lt;/tt>, the level&#xA;     * of the specified logger is set to the parsed &lt;tt>Level&lt;/tt>&#xA;     * matching the &lt;tt>levelName&lt;/tt>.&#xA;     * If the &lt;tt>levelName&lt;/tt> is &lt;tt>null&lt;/tt>, the level&#xA;     * of the specified logger is set to &lt;tt>null&lt;/tt> and&#xA;     * the effective level of the logger is inherited from &#xA;     * its nearest ancestor with a specific (non-null) level value.&#xA;     *&#xA;     * @param loggerName The name of the &lt;tt>Logger&lt;/tt> to be set.&#xA;     *                   Must be non-null.&#xA;     * @param levelName The name of the level to set the specified logger to, &#xA;     *                 or &lt;tt>null&lt;/tt> if to set the level to inherit&#xA;     *                 from its nearest ancestor.&#xA;     *&#xA;     * @throws IllegalArgumentException if the specified logger &#xA;     * does not exist, or &lt;tt>levelName&lt;/tt> is not a valid level name.&#xA;     *&#xA;     * @throws SecurityException if a security manager exists and if&#xA;     * the caller does not have LoggingPermission(&quot;control&quot;).&#xA;     *&#xA;     * @see Logger#setLevel&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParentLoggerName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="loggerName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the parent for the specified logger.&#xA;     * If the specified logger does not exist, &lt;tt>null&lt;/tt> is returned. &#xA;     * If the specified logger is the root &lt;tt>Logger&lt;/tt> in the namespace,&#xA;     * the result will be an empty string.&#xA;     *&#xA;     * @param loggerName The name of a &lt;tt>Logger&lt;/tt>.&#xA;     *&#xA;     * @return the name of the nearest existing parent logger;&#xA;     *         an empty string if the specified logger is the root logger.&#xA;     *         If the specified logger does not exist, &lt;tt>null&lt;/tt> &#xA;     *         is returned. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** &#xA; * The management interface for the logging facility.&#xA; *&#xA; * &lt;p>There is a single global instance of the &lt;tt>LoggingMXBean&lt;/tt>.&#xA; * This instance is an &#xA; * &lt;a href=&quot;ManagementFactory.html#MXBean&quot;>MXBean&lt;/a>&#xA; * can be obtained by calling&#xA; * the {@link LogManager#getLoggingMXBean} method or from the &#xA; * {@link java.lang.management.ManagementFactory#getPlatformMBeanServer&#xA; * platform &lt;tt>MBeanServer&lt;/tt>} method.&#xA; *&#xA; * &lt;p>The {@link javax.management.ObjectName ObjectName} for uniquely &#xA; * identifying the &lt;tt>LoggingMXBean&lt;/tt> within an MBeanServer is:&#xA; * &lt;blockquote>&#xA; *    {@link LogManager#LOGGING_MXBEAN_NAME&#xA; *           &lt;tt>java.util.logging:type=Logging&lt;/tt>}&#xA; * &lt;/blockquote>&#xA; *&#xA; * @see java.lang.management.ManagementFactory&#xA; *&#xA; * @author  Ron Mann &#xA; * @author  Mandy Chung&#xA; * @version 1.7, 04/20/04&#xA; * @since   1.5&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
