<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Formattable.java">
  <comments>/*&#xA; * @(#)Formattable.java&#x9;1.3 04/04/21&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Formattable">
    <members xsi:type="members:InterfaceMethod" name="formatTo">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Formats the object using the provided {@link Formatter formatter}.&#xA;     *&#xA;     * @param  formatter&#xA;     *         The {@link Formatter formatter}.  Implementing classes may call&#xA;     *         {@link Formatter#out() formatter.out()} or {@link&#xA;     *         Formatter#locale() formatter.locale()} to obtain the {@link&#xA;     *         Appendable} or {@link Locale} used by this&#xA;     *         &lt;tt>formatter&lt;/tt> respectively. &#xA;     *&#xA;     * @param  flags&#xA;     *         The flags modify the output format.  The value is interpreted as&#xA;     *         a bitmask.  Any combination of the following flags may be set:&#xA;     *         {@link FormattableFlags#LEFT_JUSTIFY}, {@link&#xA;     *         FormattableFlags#UPPERCASE}, and {@link&#xA;     *         FormattableFlags#ALTERNATE}.  If no flags are set, the default&#xA;     *         formatting of the implementing class will apply.&#xA;     *&#xA;     * @param  width&#xA;     *         The minimum number of characters to be written to the output.&#xA;     *         If the length of the converted value is less than the&#xA;     *         &lt;tt>width&lt;/tt> then the output will be padded by&#xA;     *         &lt;tt>'&amp;nbsp;&amp;nbsp;'&lt;/tt> until the total number of characters&#xA;     *         equals width.  The padding is at the beginning by default.  If&#xA;     *         the {@link FormattableFlags#LEFT_JUSTIFY} flag is set then the&#xA;     *         padding will be at the end.  If &lt;tt>width&lt;/tt> is &lt;tt>-1&lt;/tt>&#xA;     *         then there is no minimum.&#xA;     *&#xA;     * @param  precision&#xA;     *         The maximum number of characters to be written to the output.&#xA;     *         The precision is applied before the width, thus the output will&#xA;     *         be truncated to &lt;tt>precision&lt;/tt> characters even if the&#xA;     *         &lt;tt>width&lt;/tt> is greater than the &lt;tt>precision&lt;/tt>.  If&#xA;     *         &lt;tt>precision&lt;/tt> is &lt;tt>-1&lt;/tt> then there is no explicit&#xA;     *         limit on the number of characters.&#xA;     *&#xA;     * @throws  IllegalFormatException&#xA;     *          If any of the parameters are invalid.  For specification of all&#xA;     *          possible formatting errors, see the &lt;a&#xA;     *          href=&quot;../util/Formatter.html#detail&quot;>Details&lt;/a> section of the&#xA;     *          formatter class specification.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="formatter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Formatter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flags">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="width">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="precision">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;tt>Formattable&lt;/tt> interface must be implemented by any class that&#xA; * needs to perform custom formatting using the &lt;tt>'s'&lt;/tt> conversion&#xA; * specifier of {@link java.util.Formatter}.  This interface allows basic&#xA; * control for formatting arbitrary objects.&#xA; *&#xA; * For example, the following class prints out different representations of a&#xA; * stock's name depending on the flags and length constraints:&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   import java.nio.CharBuffer;&#xA; *   import java.util.Formatter;&#xA; *   import java.util.Formattable;&#xA; *   import java.util.Locale;&#xA; *   import static java.util.FormattableFlags.*;&#xA; *&#xA; *  ...&#xA; * &#xA; *   public class StockName implements Formattable {&#xA; *       private String symbol, companyName, frenchCompanyName;&#xA; *       public StockName(String symbol, String companyName,&#xA; *                        String frenchCompanyName) {&#xA; *           ...&#xA; *       }&#xA; *&#xA; *       ...&#xA; *&#xA; *       public void formatTo(Formatter fmt, int f, int width, int precision) {&#xA; *           StringBuilder sb = new StringBuilder();&#xA; *&#xA; *           // decide form of name &#xA; *           String name = companyName;&#xA; *           if (fmt.locale().equals(Locale.FRANCE))&#xA; *               name = frenchCompanyName;&#xA; *           boolean alternate = (f &amp; ALTERNATE) == ALTERNATE;&#xA; *           boolean usesymbol = alternate || (precision != -1 &amp;&amp; precision &lt; 10);&#xA; *           String out = (usesymbol ? symbol : name);&#xA; *&#xA; *           // apply precision&#xA; *           if (precision == -1 || out.length() &lt; precision) {&#xA; *               // write it all&#xA; *               sb.append(out);&#xA; *           } else {&#xA; *               sb.append(out.substring(0, precision - 1)).append('*');&#xA; *           }&#xA; *&#xA; *           // apply width and justification&#xA; *           int len = sb.length(); &#xA; *           if (len &lt; width)&#xA; *               for (int i = 0; i &lt; width - len; i++)&#xA; *                   if ((f &amp; LEFT_JUSTIFY) == LEFT_JUSTIFY)&#xA; *                       sb.append(' ');&#xA; *                   else&#xA; *                       sb.insert(0, ' ');&#xA; *&#xA; *           fmt.format(sb.toString());&#xA; *       }&#xA; *&#xA; *       public String toString() {&#xA; *           return String.format(&quot;%s - %s&quot;, symbol, companyName);&#xA; *       }&#xA; *   }&#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> When used in conjunction with the {@link java.util.Formatter}, the above&#xA; * class produces the following output for various format strings.&#xA; *&#xA; * &lt;blockquote>&lt;pre>&#xA; *   Formatter fmt = new Formatter();&#xA; *   StockName sn = new StockName(&quot;HUGE&quot;, &quot;Huge Fruit, Inc.&quot;,&#xA; *                                &quot;Fruit Titanesque, Inc.&quot;);&#xA; *   fmt.format(&quot;%s&quot;, sn);                   //   -> &quot;Huge Fruit, Inc.&quot;&#xA; *   fmt.format(&quot;%s&quot;, sn.toString());        //   -> &quot;HUGE - Huge Fruit, Inc.&quot;&#xA; *   fmt.format(&quot;%#s&quot;, sn);                  //   -> &quot;HUGE&quot;&#xA; *   fmt.format(&quot;%-10.8s&quot;, sn);              //   -> &quot;HUGE      &quot;&#xA; *   fmt.format(&quot;%.12s&quot;, sn);                //   -> &quot;Huge Fruit,*&quot;&#xA; *   fmt.format(Locale.FRANCE, &quot;%25s&quot;, sn);  //   -> &quot;   Fruit Titanesque, Inc.&quot; &#xA; * &lt;/pre>&lt;/blockquote>&#xA; *&#xA; * &lt;p> Formattables are not necessarily safe for multithreaded access.  Thread&#xA; * safety is optional and may be enforced by classes that extend and implement&#xA; * this interface. &#xA; *&#xA; * &lt;p> Unless otherwise specified, passing a &lt;tt>null&lt;/tt> argument to&#xA; * any method in this interface will cause a {@link&#xA; * NullPointerException} to be thrown.&#xA; *&#xA; * @version &#x9;1.3, 04/21/04&#xA; * @since  1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
