<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Callable.java">
  <comments>/*&#xA; * @(#)Callable.java&#x9;1.5 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>concurrent</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Callable">
    <typeParameters name="V"/>
    <members xsi:type="members:InterfaceMethod" name="call">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0">
          <comments>/**&#xA;     * Computes a result, or throws an exception if unable to do so.&#xA;     *&#xA;     * @return computed result&#xA;     * @throws Exception if unable to compute a result&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Exception.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A task that returns a result and may throw an exception.&#xA; * Implementors define a single method with no arguments called&#xA; * &lt;tt>call&lt;/tt>.&#xA; *&#xA; * &lt;p>The &lt;tt>Callable&lt;/tt> interface is similar to {@link&#xA; * java.lang.Runnable}, in that both are designed for classes whose&#xA; * instances are potentially executed by another thread.  A&#xA; * &lt;tt>Runnable&lt;/tt>, however, does not return a result and cannot&#xA; * throw a checked exception.&#xA; *&#xA; * &lt;p> The {@link Executors} class contains utility methods to&#xA; * convert from other common forms to &lt;tt>Callable&lt;/tt> classes.&#xA; *&#xA; * @see Executor&#xA; * @since 1.5&#xA; * @author Doug Lea&#xA; * @param &lt;V> the result type of method &lt;tt>call&lt;/tt>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
