<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="ScheduledThreadPoolExecutor.java">
  <comments>/*&#xA; * @(#)ScheduledThreadPoolExecutor.java&#x9;1.3 04/04/14&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>concurrent</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <namespaces>concurrent</namespaces>
    <namespaces>atomic</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ScheduledThreadPoolExecutor">
    <members xsi:type="members:Field" name="continueExistingPeriodicTasksAfterShutdown">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * False if should cancel/suppress periodic tasks on shutdown.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:Field" name="executeExistingDelayedTasksAfterShutdown">
      <initialValue xsi:type="literals:BooleanLiteral" value="true"/>
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * False if should cancel non-periodic tasks on shutdown.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:Field" name="sequencer">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="atomic/AtomicLong.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="atomic/AtomicLong.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Sequence number to break scheduling ties, and in turn to&#xA;     * guarantee FIFO order among tied entries.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NANO_ORIGIN">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** Base of nanosecond timings, to avoid wrapping */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="now">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns nanosecond time offset by origin&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/System.class.xmi#//@classifiers.0"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <additiveOperators xsi:type="operators:Subtraction"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="ScheduledFutureTask">
      <typeParameters name="V"/>
      <members xsi:type="members:Field" name="sequenceNumber">
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/** Sequence number to break ties FIFO */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="time">
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/** The time the task is enabled to execute in nanoTime units */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="period">
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Period in nanoseconds for repeating tasks.  A positive&#xA;         * value indicates fixed-rate execution.  A negative value&#xA;         * indicates fixed-delay execution.  A value of 0 indicates a&#xA;         * non-repeating task.&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Constructor" name="ScheduledFutureTask">
        <comments>/**&#xA;         * Creates a one-shot action with given nanoTime-based trigger time&#xA;         */</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.3/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.3/@parameters.1"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.3/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="atomic/AtomicLong.class.xmi#//@classifiers.0/@members.13"/>
              </next>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="r">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="ns">
          <typeReference xsi:type="types:Long"/>
        </parameters>
      </members>
      <members xsi:type="members:Constructor" name="ScheduledFutureTask">
        <comments>/**&#xA;         * Creates a periodic action with given nano time and period&#xA;         */</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.4/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.4/@parameters.1"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.4/@parameters.2"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.4/@parameters.3"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="atomic/AtomicLong.class.xmi#//@classifiers.0/@members.13"/>
              </next>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="r">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="result">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="ns">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="period">
          <typeReference xsi:type="types:Long"/>
        </parameters>
      </members>
      <members xsi:type="members:Constructor" name="ScheduledFutureTask">
        <comments>/**&#xA;         * Creates a one-shot action with given nanoTime-based trigger&#xA;         */</comments>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="instantiations:ExplicitConstructorCall">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.0"/>
            <callTarget xsi:type="literals:Super"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.5/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="atomic/AtomicLong.class.xmi#//@classifiers.0/@members.13"/>
              </next>
            </value>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="callable">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="ns">
          <typeReference xsi:type="types:Long"/>
        </parameters>
      </members>
      <members xsi:type="members:ClassMethod" name="getDelay">
        <typeReference xsi:type="types:Long"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="d">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TimeUnit.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
                  </next>
                  <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
                </arguments>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.6/@statements.0/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="compareTo">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="other">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="Delayed.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <comments>// compare zero ONLY if same object</comments>
            <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.7/@parameters.0"/>
            <children xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="x">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5">
                <typeArguments xsi:type="generics:UnknownTypeArgument"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.5">
                  <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.7/@parameters.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="diff">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.7/@statements.1/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
              </children>
              <additiveOperators xsi:type="operators:Subtraction"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Subtraction"/>
              <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </returnValue>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.7/@statements.2/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.7/@statements.2/@variable"/>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Return">
                <returnValue xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
                </returnValue>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.7/@statements.1/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.0"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <elseStatement xsi:type="statements:Return">
                <returnValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
              </elseStatement>
            </elseStatement>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isPeriodic">
        <typeReference xsi:type="types:Boolean">
          <comments>/**&#xA;         * Returns true if this is a periodic (not a one-shot) action.&#xA;         * @return true if periodic&#xA;         */</comments>
        </typeReference>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="runPeriodic">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Run a periodic task&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="ok">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="FutureTask.class.xmi#//@classifiers.0/@members.12"/>
                </next>
                <self xsi:type="literals:Super"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="down">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.35"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// Reschedule if not cancelled and not shutdown or policy allows</comments>
          <comments>// This might have been the final executed delayed</comments>
          <comments>// task.  Wake up threads to check.</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:Long"/>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.2"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
                  <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.1"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AdditiveExpression">
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                    <additiveOperators xsi:type="operators:Subtraction"/>
                  </value>
                </expression>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0">
                <next xsi:type="references:SelfReference">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="BlockingQueue.class.xmi#//@classifiers.0/@members.6"/>
                      <arguments xsi:type="references:SelfReference">
                        <self xsi:type="literals:This"/>
                      </arguments>
                    </next>
                    <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.44"/>
                  </next>
                  <self xsi:type="literals:Super"/>
                </next>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.9/@statements.0/@variable"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalOrExpression">
                <children xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Negate"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.9/@statements.1/@variable"/>
                </children>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:ConditionalAndExpression">
                    <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
                    <children xsi:type="expressions:UnaryExpression">
                      <operators xsi:type="operators:Negate"/>
                      <child xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.36"/>
                      </child>
                    </children>
                  </expression>
                </children>
              </expression>
            </children>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.26"/>
              </expression>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@members.9/@statements.1/@variable"/>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="run">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Overrides FutureTask version so as to reset/requeue if periodic.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5/@members.9"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.5/@members.8"/>
          <elseStatement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5">
              <next xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="FutureTask.class.xmi#//@classifiers.0/@members.11"/>
                </next>
                <self xsi:type="literals:Super"/>
              </next>
            </expression>
          </elseStatement>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="ScheduledFuture.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="FutureTask.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <members xsi:type="members:ClassMethod" name="delayedExecute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Specialized variant of ThreadPoolExecutor.execute for delayed tasks.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.21"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return"/>
        </statement>
        <condition xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.35"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// Prestart a thread if necessary. We cannot prestart it</comments>
        <comments>// running the task because the task (probably) shouldn't be</comments>
        <comments>// run yet, so thread will just idle until delay elapses.</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.49"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.55"/>
          </children>
          <children xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.48"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="BlockingQueue.class.xmi#//@classifiers.0/@members.6"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
            </next>
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.44"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="cancelUnwantedTasks">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Cancel and clear the queue of all tasks that should not be run&#xA;     * due to shutdown policy.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="keepDelayed">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.24"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="keepPeriodic">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.22"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="../Collection.class.xmi#//@classifiers.0/@members.12"/>
              </next>
              <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.44"/>
            </next>
            <self xsi:type="literals:Super"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Condition">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="entries">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="references:SelfReference">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../Collection.class.xmi#//@classifiers.0/@members.4"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.44"/>
                  </next>
                  <self xsi:type="literals:Super"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ForLoop">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="e">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.0/@variable">
                      <arraySelectors>
                        <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.1/@init"/>
                      </arraySelectors>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:LocalVariableStatement">
                      <variable name="t">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences target="//@classifiers.0/@members.5">
                            <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                          </classifierReferences>
                        </typeReference>
                        <initialValue xsi:type="expressions:CastExpression">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences target="//@classifiers.0/@members.5">
                              <typeArguments xsi:type="generics:UnknownTypeArgument"/>
                            </classifierReferences>
                          </typeReference>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.1/@statement/@statements.0/@variable"/>
                        </initialValue>
                      </variable>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="FutureTask.class.xmi#//@classifiers.0/@members.5"/>
                            <arguments xsi:type="literals:BooleanLiteral"/>
                          </next>
                        </expression>
                      </statement>
                      <condition xsi:type="expressions:ConditionalExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable">
                          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.5/@members.8"/>
                        </child>
                        <expressionIf xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
                        </expressionIf>
                        <expressionElse xsi:type="expressions:UnaryExpression">
                          <operators xsi:type="operators:Negate"/>
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
                        </expressionElse>
                      </condition>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.5"/>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.1/@statement/@statements.0/@variable"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.1/@init"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference"/>
                </children>
                <relationOperators xsi:type="operators:LessThan"/>
              </condition>
              <init xsi:type="variables:LocalVariable" name="i">
                <typeReference xsi:type="types:Int"/>
                <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </init>
              <updates xsi:type="expressions:PrefixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.1/@init"/>
                <operator xsi:type="operators:PlusPlus"/>
              </updates>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.2/@elseStatement/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.46"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable"/>
          </condition>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="remove">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.5"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            </expression>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../Collection.class.xmi#//@classifiers.0/@members.7"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="ScheduledThreadPoolExecutor">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.28"/>
            </typeReference>
          </arguments>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="corePoolSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new ScheduledThreadPoolExecutor with the given core&#xA;     * pool size.&#xA;     * &#xA;     * @param corePoolSize the number of threads to keep in the pool,&#xA;     * even if they are idle.&#xA;     * @throws IllegalArgumentException if corePoolSize less than or&#xA;     * equal to zero&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ScheduledThreadPoolExecutor">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.28"/>
            </typeReference>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="corePoolSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="threadFactory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ThreadFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new ScheduledThreadPoolExecutor with the given&#xA;     * initial parameters.&#xA;     * &#xA;     * @param corePoolSize the number of threads to keep in the pool,&#xA;     * even if they are idle.&#xA;     * @param threadFactory the factory to use when the executor&#xA;     * creates a new thread. &#xA;     * @throws NullPointerException if threadFactory is null&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ScheduledThreadPoolExecutor">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.28"/>
            </typeReference>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.1"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="corePoolSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RejectedExecutionHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new ScheduledThreadPoolExecutor with the given&#xA;     * initial parameters.&#xA;     * &#xA;     * @param corePoolSize the number of threads to keep in the pool,&#xA;     * even if they are idle.&#xA;     * @param handler the handler to use when execution is blocked&#xA;     * because the thread bounds and queue capacities are reached.&#xA;     * @throws NullPointerException if handler is null&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="ScheduledThreadPoolExecutor">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:Field" href="../../lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../lang/Integer.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.28"/>
            </typeReference>
          </arguments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.2"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="corePoolSize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="threadFactory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ThreadFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="RejectedExecutionHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new ScheduledThreadPoolExecutor with the given&#xA;     * initial parameters.&#xA;     * &#xA;     * @param corePoolSize the number of threads to keep in the pool,&#xA;     * even if they are idle.&#xA;     * @param threadFactory the factory to use when the executor&#xA;     * creates a new thread. &#xA;     * @param handler the handler to use when execution is blocked&#xA;     * because the thread bounds and queue capacities are reached.&#xA;     * @throws NullPointerException if threadFactory or handler is null&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="schedule">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="ScheduledFuture.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delay">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="triggerTime">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TimeUnit.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.5">
              <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5">
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.2/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="schedule">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.14/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="ScheduledFuture.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <typeParameters name="V"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="callable">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.14/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delay">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.2"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="triggerTime">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.2">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TimeUnit.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.1"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.5">
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.14/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5">
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.14/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.3/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.3/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scheduleAtFixedRate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="ScheduledFuture.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initialDelay">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="period">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="triggerTime">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TimeUnit.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.5">
              <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5">
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.3/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TimeUnit.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.2"/>
              </next>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.4/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scheduleWithFixedDelay">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="ScheduledFuture.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initialDelay">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delay">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.3"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThanOrEqual"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="triggerTime">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TimeUnit.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.1"/>
              </next>
            </children>
            <additiveOperators xsi:type="operators:Addition"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.5">
              <typeArguments xsi:type="generics:UnknownTypeArgument"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5">
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../lang/Boolean.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.0"/>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.3/@variable"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.3">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="TimeUnit.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="expressions:UnaryExpression">
                  <operators xsi:type="operators:Subtraction"/>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@parameters.2"/>
                </arguments>
              </next>
            </arguments>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.4/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16/@statements.4/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="execute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="command">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Execute command with zero required delay. This has effect&#xA;     * equivalent to &lt;tt>schedule(command, 0, anyUnit)&lt;/tt>.  Note&#xA;     * that inspections of the queue and of the list returned by&#xA;     * &lt;tt>shutdownNow&lt;/tt> will access the zero-delayed&#xA;     * {@link ScheduledFuture}, not the &lt;tt>command&lt;/tt> itself.&#xA;     *&#xA;     * @param command the task to execute&#xA;     * @throws RejectedExecutionException at discretion of&#xA;     * &lt;tt>RejectedExecutionHandler&lt;/tt>, if task cannot be accepted&#xA;     * for execution because the executor has been shut down.&#xA;     * @throws NullPointerException if command is null&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="submit">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Override AbstractExecutorService methods</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="submit">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.19/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.19/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="Executors.class.xmi#//@classifiers.0/@members.14"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.1"/>
            </next>
            <target xsi:type="classifiers:Class" href="Executors.class.xmi#//@classifiers.0"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="submit">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.20/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.20/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <arguments xsi:type="references:IdentifierReference">
            <next xsi:type="references:IdentifierReference">
              <target xsi:type="members:EnumConstant" href="TimeUnit.class.xmi#//@classifiers.0/@constants.0"/>
            </next>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setContinueExistingPeriodicTasksAfterShutdownPolicy">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set policy on whether to continue executing existing periodic&#xA;     * tasks even when this executor has been &lt;tt>shutdown&lt;/tt>. In&#xA;     * this case, these tasks will only terminate upon&#xA;     * &lt;tt>shutdownNow&lt;/tt>, or after setting the policy to&#xA;     * &lt;tt>false&lt;/tt> when already shutdown. This value is by default&#xA;     * false.&#xA;     * @param value if true, continue after shutdown, else don't.&#xA;     * @see #getExecuteExistingDelayedTasksAfterShutdownPolicy&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
          </children>
          <children xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.35"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getContinueExistingPeriodicTasksAfterShutdownPolicy">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the policy on whether to continue executing existing&#xA;     * periodic tasks even when this executor has been&#xA;     * &lt;tt>shutdown&lt;/tt>. In this case, these tasks will only&#xA;     * terminate upon &lt;tt>shutdownNow&lt;/tt> or after setting the policy&#xA;     * to &lt;tt>false&lt;/tt> when already shutdown. This value is by&#xA;     * default false.&#xA;     * @return true if will continue after shutdown.&#xA;     * @see #setContinueExistingPeriodicTasksAfterShutdownPolicy&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setExecuteExistingDelayedTasksAfterShutdownPolicy">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set policy on whether to execute existing delayed&#xA;     * tasks even when this executor has been &lt;tt>shutdown&lt;/tt>. In&#xA;     * this case, these tasks will only terminate upon&#xA;     * &lt;tt>shutdownNow&lt;/tt>, or after setting the policy to&#xA;     * &lt;tt>false&lt;/tt> when already shutdown. This value is by default&#xA;     * true.&#xA;     * @param value if true, execute after shutdown, else don't.&#xA;     * @see #getExecuteExistingDelayedTasksAfterShutdownPolicy&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
          </children>
          <children xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.35"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExecuteExistingDelayedTasksAfterShutdownPolicy">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get policy on whether to execute existing delayed&#xA;     * tasks even when this executor has been &lt;tt>shutdown&lt;/tt>. In&#xA;     * this case, these tasks will only terminate upon&#xA;     * &lt;tt>shutdownNow&lt;/tt>, or after setting the policy to&#xA;     * &lt;tt>false&lt;/tt> when already shutdown. This value is by default&#xA;     * true.&#xA;     * @return true if will execute after shutdown.&#xA;     * @see #setExecuteExistingDelayedTasksAfterShutdownPolicy&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shutdown">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Initiates an orderly shutdown in which previously submitted&#xA;     * tasks are executed, but no new tasks will be accepted. If the&#xA;     * &lt;tt>ExecuteExistingDelayedTasksAfterShutdownPolicy&lt;/tt> has&#xA;     * been set &lt;tt>false&lt;/tt>, existing delayed tasks whose delays&#xA;     * have not yet elapsed are cancelled. And unless the&#xA;     * &lt;tt>ContinueExistingPeriodicTasksAfterShutdownPolicy&lt;/tt> has&#xA;     * been set &lt;tt>true&lt;/tt>, future executions of existing periodic&#xA;     * tasks will be cancelled.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.7"/>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.33"/>
          </next>
          <self xsi:type="literals:Super"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shutdownNow">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attempts to stop all actively executing tasks, halts the&#xA;     * processing of waiting tasks, and returns a list of the tasks that were&#xA;     * awaiting execution. &#xA;     *  &#xA;     * &lt;p>There are no guarantees beyond best-effort attempts to stop&#xA;     * processing actively executing tasks.  This implementation&#xA;     * cancels tasks via {@link Thread#interrupt}, so if any tasks mask or&#xA;     * fail to respond to interrupts, they may never terminate.&#xA;     *&#xA;     * @return list of tasks that never commenced execution.  Each&#xA;     * element of this list is a {@link ScheduledFuture},&#xA;     * including those tasks submitted using &lt;tt>execute&lt;/tt>, which&#xA;     * are for scheduling purposes used as the basis of a zero-delay&#xA;     * &lt;tt>ScheduledFuture&lt;/tt>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.34"/>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getQueue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="BlockingQueue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the task queue used by this executor.  Each element of&#xA;     * this queue is a {@link ScheduledFuture}, including those&#xA;     * tasks submitted using &lt;tt>execute&lt;/tt> which are for scheduling&#xA;     * purposes used as the basis of a zero-delay&#xA;     * &lt;tt>ScheduledFuture&lt;/tt>. Iteration over this queue is&#xA;     * &lt;em>not&lt;/em> guaranteed to traverse tasks in the order in&#xA;     * which they will execute.&#xA;     *&#xA;     * @return the task queue&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:SelfReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="ThreadPoolExecutor.class.xmi#//@classifiers.0/@members.44"/>
          </next>
          <self xsi:type="literals:Super"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="DelayedWorkQueue">
      <members xsi:type="members:Field" name="dq">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.5"/>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Class" href="DelayQueue.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.5"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="DelayQueue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:ClassMethod" name="poll">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.12"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="peek">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.13"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="take">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.10"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="poll">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <parameters xsi:type="parameters:OrdinaryParameter" name="timeout">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.11"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.4/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.4/@parameters.1"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="add">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="x">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.9"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.5"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.5/@parameters.0"/>
              </arguments>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="offer">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="x">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.6"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.5"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.6/@parameters.0"/>
              </arguments>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="put">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="x">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.5"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.7/@parameters.0"/>
              </arguments>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="offer">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="x">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="timeout">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.8"/>
              <arguments xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.5"/>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8/@parameters.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8/@parameters.1"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.8/@parameters.2"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="remove">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../AbstractQueue.class.xmi#//@classifiers.0/@members.2"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="element">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../AbstractQueue.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="clear">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.17"/>
            </next>
          </expression>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="drainTo">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:SuperTypeArgument">
                <superType xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </superType>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="../Collection.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.15"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.12/@parameters.0"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="drainTo">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="c">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:SuperTypeArgument">
                <superType xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </superType>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="../Collection.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="maxElements">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.16"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.13/@parameters.0"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.13/@parameters.1"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="remainingCapacity">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.18"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="remove">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="x">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.21"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.15/@parameters.0"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="contains">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="x">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../AbstractCollection.class.xmi#//@classifiers.0/@members.4"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.16/@parameters.0"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="size">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.14"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isEmpty">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../AbstractCollection.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toArray">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.19"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="toArray">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.28/@members.20/@typeParameters.0"/>
        </typeReference>
        <arrayDimensionsBefore/>
        <typeParameters name="T"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="array">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.28/@members.20/@typeParameters.0"/>
          </typeReference>
          <arrayDimensionsBefore/>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.20"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.20/@parameters.0"/>
            </next>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="iterator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../Iterator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Public"/>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Interface" href="../Iterator.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <anonymousClass>
              <members xsi:type="members:Field" name="it">
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.0">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="DelayQueue.class.xmi#//@classifiers.0/@members.22"/>
                  </next>
                </initialValue>
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <typeArguments xsi:type="generics:QualifiedTypeArgument">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences target="//@classifiers.0/@members.5"/>
                      </typeReference>
                    </typeArguments>
                    <target xsi:type="classifiers:Interface" href="../Iterator.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <annotationsAndModifiers xsi:type="modifiers:Private"/>
              </members>
              <members xsi:type="members:ClassMethod" name="hasNext">
                <typeReference xsi:type="types:Boolean"/>
                <annotationsAndModifiers xsi:type="modifiers:Public"/>
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.21/@statements.0/@returnValue/@anonymousClass/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../Iterator.class.xmi#//@classifiers.0/@members.0"/>
                    </next>
                  </returnValue>
                </statements>
              </members>
              <members xsi:type="members:ClassMethod" name="next">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <annotationsAndModifiers xsi:type="modifiers:Public"/>
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.21/@statements.0/@returnValue/@anonymousClass/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../Iterator.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </returnValue>
                </statements>
              </members>
              <members xsi:type="members:ClassMethod" name="remove">
                <typeReference xsi:type="types:Void"/>
                <annotationsAndModifiers xsi:type="modifiers:Public"/>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.28/@members.21/@statements.0/@returnValue/@anonymousClass/@members.0">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:InterfaceMethod" href="../Iterator.class.xmi#//@classifiers.0/@members.2"/>
                    </next>
                  </expression>
                </statements>
              </members>
            </anonymousClass>
          </returnValue>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * An annoying wrapper class to convince generics compiler to&#xA;     * use a DelayQueue&lt;ScheduledFutureTask> as a BlockingQueue&lt;Runnable>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="BlockingQueue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <extends xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Class" href="../AbstractCollection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </extends>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A {@link ThreadPoolExecutor} that can additionally schedule&#xA; * commands to run after a given delay, or to execute&#xA; * periodically. This class is preferable to {@link java.util.Timer}&#xA; * when multiple worker threads are needed, or when the additional&#xA; * flexibility or capabilities of {@link ThreadPoolExecutor} (which&#xA; * this class extends) are required.&#xA; *&#xA; * &lt;p> Delayed tasks execute no sooner than they are enabled, but&#xA; * without any real-time guarantees about when, after they are&#xA; * enabled, they will commence. Tasks scheduled for exactly the same&#xA; * execution time are enabled in first-in-first-out (FIFO) order of&#xA; * submission.&#xA; *&#xA; * &lt;p>While this class inherits from {@link ThreadPoolExecutor}, a few&#xA; * of the inherited tuning methods are not useful for it. In&#xA; * particular, because it acts as a fixed-sized pool using&#xA; * &lt;tt>corePoolSize&lt;/tt> threads and an unbounded queue, adjustments&#xA; * to &lt;tt>maximumPoolSize&lt;/tt> have no useful effect.&#xA; *&#xA; * @since 1.5&#xA; * @author Doug Lea&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="ScheduledExecutorService.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="ThreadPoolExecutor.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
