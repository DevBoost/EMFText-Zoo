<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ExecutorService.java">
  <comments>/*&#xA; * @(#)ExecutorService.java&#x9;1.6 04/07/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>concurrent</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../List.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../security/PrivilegedExceptionAction.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="ExecutorService">
    <members xsi:type="members:InterfaceMethod" name="shutdown">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Initiates an orderly shutdown in which previously submitted&#xA;     * tasks are executed, but no new tasks will be&#xA;     * accepted. Invocation has no additional effect if already shut&#xA;     * down.&#xA;     * @throws SecurityException if a security manager exists and&#xA;     * shutting down this ExecutorService may manipulate threads that&#xA;     * the caller is not permitted to modify because it does not hold&#xA;     * {@link java.lang.RuntimePermission}&lt;tt>(&quot;modifyThread&quot;)&lt;/tt>,&#xA;     * or the security manager's &lt;tt>checkAccess&lt;/tt>  method denies access.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="shutdownNow">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Attempts to stop all actively executing tasks, halts the&#xA;     * processing of waiting tasks, and returns a list of the tasks that were&#xA;     * awaiting execution. &#xA;     *  &#xA;     * &lt;p>There are no guarantees beyond best-effort attempts to stop&#xA;     * processing actively executing tasks.  For example, typical&#xA;     * implementations will cancel via {@link Thread#interrupt}, so if any&#xA;     * tasks mask or fail to respond to interrupts, they may never terminate.&#xA;     *&#xA;     * @return list of tasks that never commenced execution&#xA;     * @throws SecurityException if a security manager exists and&#xA;     * shutting down this ExecutorService may manipulate threads that&#xA;     * the caller is not permitted to modify because it does not hold&#xA;     * {@link java.lang.RuntimePermission}&lt;tt>(&quot;modifyThread&quot;)&lt;/tt>,&#xA;     * or the security manager's &lt;tt>checkAccess&lt;/tt> method denies access.&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isShutdown">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this executor has been shut down.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if this executor has been shut down&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isTerminated">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if all tasks have completed following shut down.&#xA;     * Note that &lt;tt>isTerminated&lt;/tt> is never &lt;tt>true&lt;/tt> unless&#xA;     * either &lt;tt>shutdown&lt;/tt> or &lt;tt>shutdownNow&lt;/tt> was called first.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if all tasks have completed following shut down&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="awaitTermination">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Blocks until all tasks have completed execution after a shutdown&#xA;     * request, or the timeout occurs, or the current thread is&#xA;     * interrupted, whichever happens first.&#xA;     *&#xA;     * @param timeout the maximum time to wait&#xA;     * @param unit the time unit of the timeout argument&#xA;     * @return &lt;tt>true&lt;/tt> if this executor terminated and &lt;tt>false&lt;/tt>&#xA;     * if the timeout elapsed before termination&#xA;     * @throws InterruptedException if interrupted while waiting&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="submit">
      <comments>/**&#xA;     * Submits a value-returning task for execution and returns a Future&#xA;     * representing the pending results of the task. &#xA;     *&#xA;     * &lt;p>&#xA;     * If you would like to immediately block waiting&#xA;     * for a task, you can use constructions of the form&#xA;     * &lt;tt>result = exec.submit(aCallable).get();&lt;/tt>&#xA;     *&#xA;     * &lt;p> Note: The {@link Executors} class includes a set of methods&#xA;     * that can convert some other common closure-like objects,&#xA;     * for example, {@link java.security.PrivilegedAction} to&#xA;     * {@link Callable} form so they can be submitted.&#xA;     *&#xA;     * @param task the task to submit&#xA;     * @return a Future representing pending completion of the task&#xA;     * @throws RejectedExecutionException if task cannot be scheduled&#xA;     * for execution&#xA;     * @throws NullPointerException if task null&#xA;     */</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.5/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="submit">
      <comments>/**&#xA;     * Submits a Runnable task for execution and returns a Future &#xA;     * representing that task that will upon completion return &#xA;     * the given result&#xA;     *&#xA;     * @param task the task to submit&#xA;     * @param result the result to return&#xA;     * @return a Future representing pending completion of the task,&#xA;     * and whose &lt;tt>get()&lt;/tt> method will return the given result&#xA;     * upon completion.&#xA;     * @throws RejectedExecutionException if task cannot be scheduled&#xA;     * for execution&#xA;     * @throws NullPointerException if task null     &#xA;     */</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.6/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.6/@typeParameters.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="submit">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Submits a Runnable task for execution and returns a Future &#xA;     * representing that task.&#xA;     *&#xA;     * @param task the task to submit&#xA;     * @return a Future representing pending completion of the task,&#xA;     * and whose &lt;tt>get()&lt;/tt> method will return &lt;tt>null&lt;/tt>&#xA;     * upon completion.&#xA;     * @throws RejectedExecutionException if task cannot be scheduled&#xA;     * for execution&#xA;     * @throws NullPointerException if task null&#xA;     */</comments>
          <typeArguments xsi:type="generics:UnknownTypeArgument"/>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeAll">
      <comments>/**&#xA;     * Executes the given tasks, returning a list of Futures holding&#xA;     * their status and results when all complete. &#xA;     * {@link Future#isDone} is &lt;tt>true&lt;/tt> for each &#xA;     * element of the returned list.&#xA;     * Note that a &lt;em>completed&lt;/em> task could have&#xA;     * terminated either normally or by throwing an exception.&#xA;     * The results of this method are undefined if the given&#xA;     * collection is modified while this operation is in progress.&#xA;     * @param tasks the collection of tasks&#xA;     * @return A list of Futures representing the tasks, in the same&#xA;     * sequential order as produced by the iterator for the given task&#xA;     * list, each of which has completed.&#xA;     * @throws InterruptedException if interrupted while waiting, in&#xA;     * which case unfinished tasks are cancelled.&#xA;     * @throws NullPointerException if tasks or any of its elements are &lt;tt>null&lt;/tt>&#xA;     * @throws RejectedExecutionException if any task cannot be scheduled&#xA;     * for execution&#xA;     */</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.8/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tasks">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.8/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeAll">
      <comments>/**&#xA;     * Executes the given tasks, returning a list of Futures holding&#xA;     * their status and results &#xA;     * when all complete or the timeout expires, whichever happens first.&#xA;     * {@link Future#isDone} is &lt;tt>true&lt;/tt> for each &#xA;     * element of the returned list.&#xA;     * Upon return, tasks that have not completed are cancelled.&#xA;     * Note that a &lt;em>completed&lt;/em> task could have&#xA;     * terminated either normally or by throwing an exception.&#xA;     * The results of this method are undefined if the given&#xA;     * collection is modified while this operation is in progress.&#xA;     * @param tasks the collection of tasks&#xA;     * @param timeout the maximum time to wait&#xA;     * @param unit the time unit of the timeout argument&#xA;     * @return A list of Futures representing the tasks, in the same&#xA;     * sequential order as produced by the iterator for the given&#xA;     * task list. If the operation did not time out, each task will&#xA;     * have completed. If it did time out, some of these tasks will&#xA;     * not have completed.&#xA;     * @throws InterruptedException if interrupted while waiting, in&#xA;     * which case unfinished tasks are cancelled.&#xA;     * @throws NullPointerException if tasks, any of its elements, or&#xA;     * unit are &lt;tt>null&lt;/tt>&#xA;     * @throws RejectedExecutionException if any task cannot be scheduled&#xA;     * for execution&#xA;     */</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.9/@typeParameters.0"/>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../List.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tasks">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.9/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeAny">
      <comments>/**&#xA;     * Executes the given tasks, returning the result&#xA;     * of one that has completed successfully (i.e., without throwing&#xA;     * an exception), if any do. Upon normal or exceptional return,&#xA;     * tasks that have not completed are cancelled.&#xA;     * The results of this method are undefined if the given&#xA;     * collection is modified while this operation is in progress.&#xA;     * @param tasks the collection of tasks&#xA;     * @return The result returned by one of the tasks.&#xA;     * @throws InterruptedException if interrupted while waiting&#xA;     * @throws NullPointerException if tasks or any of its elements&#xA;     * are &lt;tt>null&lt;/tt>&#xA;     * @throws IllegalArgumentException if tasks empty&#xA;     * @throws ExecutionException if no task successfully completes&#xA;     * @throws RejectedExecutionException if tasks cannot be scheduled&#xA;     * for execution&#xA;     */</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.10/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tasks">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.10/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ExecutionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invokeAny">
      <comments>/**&#xA;     * Executes the given tasks, returning the result&#xA;     * of one that has completed successfully (i.e., without throwing&#xA;     * an exception), if any do before the given timeout elapses.&#xA;     * Upon normal or exceptional return, tasks that have not&#xA;     * completed are cancelled.&#xA;     * The results of this method are undefined if the given&#xA;     * collection is modified while this operation is in progress.&#xA;     * @param tasks the collection of tasks&#xA;     * @param timeout the maximum time to wait&#xA;     * @param unit the time unit of the timeout argument&#xA;     * @return The result returned by one of the tasks.&#xA;     * @throws InterruptedException if interrupted while waiting&#xA;     * @throws NullPointerException if tasks, any of its elements, or&#xA;     * unit are &lt;tt>null&lt;/tt>&#xA;     * @throws TimeoutException if the given timeout elapses before&#xA;     * any task successfully completes&#xA;     * @throws ExecutionException if no task successfully completes&#xA;     * @throws RejectedExecutionException if tasks cannot be scheduled&#xA;     * for execution&#xA;     */</comments>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.11/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="T"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tasks">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.11/@typeParameters.0"/>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ExecutionException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TimeoutException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An {@link Executor} that provides methods to manage termination and&#xA; * methods that can produce a {@link Future} for tracking progress of&#xA; * one or more asynchronous tasks.&#xA; *&#xA; * &lt;p>&#xA; * An &lt;tt>ExecutorService&lt;/tt> can be shut down, which will cause it&#xA; * to stop accepting new tasks.  After being shut down, the executor&#xA; * will eventually terminate, at which point no tasks are actively&#xA; * executing, no tasks are awaiting execution, and no new tasks can be&#xA; * submitted.&#xA; *&#xA; * &lt;p> Method &lt;tt>submit&lt;/tt> extends base method {@link&#xA; * Executor#execute} by creating and returning a {@link Future} that&#xA; * can be used to cancel execution and/or wait for completion.&#xA; * Methods &lt;tt>invokeAny&lt;/tt> and &lt;tt>invokeAll&lt;/tt> perform the most&#xA; * commonly useful forms of bulk execution, executing a collection of&#xA; * tasks and then waiting for at least one, or all, to&#xA; * complete. (Class {@link ExecutorCompletionService} can be used to&#xA; * write customized variants of these methods.)&#xA; *&#xA; * &lt;p>The {@link Executors} class provides factory methods for the&#xA; * executor services provided in this package.&#xA; *&#xA; * &lt;h3>Usage Example&lt;/h3>&#xA; *&#xA; * Here is a sketch of a network service in which threads in a thread&#xA; * pool service incoming requests. It uses the preconfigured {@link&#xA; * Executors#newFixedThreadPool} factory method:&#xA; *&#xA; * &lt;pre>&#xA; * class NetworkService {&#xA; *    private final ServerSocket serverSocket;&#xA; *    private final ExecutorService pool;&#xA; *&#xA; *    public NetworkService(int port, int poolSize) throws IOException {&#xA; *      serverSocket = new ServerSocket(port);&#xA; *      pool = Executors.newFixedThreadPool(poolSize);&#xA; *    }&#xA; * &#xA; *    public void serve() {&#xA; *      try {&#xA; *        for (;;) {&#xA; *          pool.execute(new Handler(serverSocket.accept()));&#xA; *        }&#xA; *      } catch (IOException ex) {&#xA; *        pool.shutdown();&#xA; *      }&#xA; *    }&#xA; *  }&#xA; *&#xA; *  class Handler implements Runnable {&#xA; *    private final Socket socket;&#xA; *    Handler(Socket socket) { this.socket = socket; }&#xA; *    public void run() {&#xA; *      // read and service request&#xA; *    }&#xA; * }&#xA; * &lt;/pre>&#xA; * @since 1.5&#xA; * @author Doug Lea&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Executor.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
