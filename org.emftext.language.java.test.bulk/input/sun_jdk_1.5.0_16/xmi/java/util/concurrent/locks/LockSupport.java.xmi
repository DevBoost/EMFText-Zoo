<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="LockSupport.java">
  <comments>/*&#xA; * @(#)LockSupport.java&#x9;1.6 04/01/24&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>concurrent</namespaces>
  <namespaces>locks</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <namespaces>concurrent</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="LockSupport">
    <members xsi:type="members:Constructor" name="LockSupport">
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="unsafe">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.4"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Cannot be instantiated.</comments>
        <comments>// Hotspot implementation via intrinsics API</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="unpark">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="thread">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Make available the permit for the given thread, if it&#xA;     * was not already available.  If the thread was blocked on&#xA;     * &lt;tt>park&lt;/tt> then it will unblock.  Otherwise, its next call&#xA;     * to &lt;tt>park&lt;/tt> is guaranteed not to block. This operation&#xA;     * is not guaranteed to have any effect at all if the given&#xA;     * thread has not been started.&#xA;     * @param thread the thread to unpark, or &lt;tt>null&lt;/tt>, in which case&#xA;     * this operation has no effect. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.99"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="park">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Disables the current thread for thread scheduling purposes unless the&#xA;     * permit is available.&#xA;     * &lt;p>If the permit is available then it is consumed and the call returns&#xA;     * immediately; otherwise &#xA;     * the current thread becomes disabled for thread scheduling &#xA;     * purposes and lies dormant until one of three things happens:&#xA;     * &lt;ul>&#xA;     * &lt;li>Some other thread invokes &lt;tt>unpark&lt;/tt> with the current thread &#xA;     * as the target; or&#xA;     * &lt;li>Some other thread {@link Thread#interrupt interrupts} the current&#xA;     * thread; or&#xA;     * &lt;li>The call spuriously (that is, for no reason) returns.&#xA;     * &lt;/ul>&#xA;     * &lt;p>This method does &lt;em>not&lt;/em> report which of these caused the &#xA;     * method to return. Callers should re-check the conditions which caused &#xA;     * the thread to park in the first place. Callers may also determine, &#xA;     * for example, the interrupt status of the thread upon return.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.100"/>
            <arguments xsi:type="literals:BooleanLiteral"/>
            <arguments xsi:type="literals:DecimalLongLiteral" decimalValue="0"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parkNanos">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nanos">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Disables the current thread for thread scheduling purposes, for up to&#xA;     * the specified waiting time, unless the permit is available.&#xA;     * &lt;p>If the permit is available then it is consumed and the call returns&#xA;     * immediately; otherwise &#xA;     * the current thread becomes disabled for thread scheduling &#xA;     * purposes and lies dormant until one of four things happens:&#xA;     * &lt;ul>&#xA;     * &lt;li>Some other thread invokes &lt;tt>unpark&lt;/tt> with the current thread &#xA;     * as the target; or&#xA;     * &lt;li>Some other thread {@link Thread#interrupt interrupts} the current&#xA;     * thread; or&#xA;     * &lt;li>The specified waiting time elapses; or&#xA;     * &lt;li>The call spuriously (that is, for no reason) returns.&#xA;     * &lt;/ul>&#xA;     * &lt;p>This method does &lt;em>not&lt;/em> report which of these caused the &#xA;     * method to return. Callers should re-check the conditions which caused &#xA;     * the thread to park in the first place. Callers may also determine, &#xA;     * for example, the interrupt status of the thread, or the elapsed time&#xA;     * upon return.&#xA;     *&#xA;     * @param nanos the maximum number of nanoseconds to wait&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.100"/>
              <arguments xsi:type="literals:BooleanLiteral"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            </next>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parkUntil">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="deadline">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Disables the current thread for thread scheduling purposes, until&#xA;     * the specified deadline, unless the permit is available.&#xA;     * &lt;p>If the permit is available then it is consumed and the call returns&#xA;     * immediately; otherwise &#xA;     * the current thread becomes disabled for thread scheduling &#xA;     * purposes and lies dormant until one of four things happens:&#xA;     * &lt;ul>&#xA;     * &lt;li>Some other thread invokes &lt;tt>unpark&lt;/tt> with the current thread &#xA;     * as the target; or&#xA;     * &lt;li>Some other thread {@link Thread#interrupt interrupts} the current&#xA;     * thread; or&#xA;     * &lt;li>The specified deadline passes; or&#xA;     * &lt;li>The call spuriously (that is, for no reason) returns.&#xA;     * &lt;/ul>&#xA;     * &lt;p>This method does &lt;em>not&lt;/em> report which of these caused the &#xA;     * method to return. Callers should re-check the conditions which caused &#xA;     * the thread to park in the first place. Callers may also determine, &#xA;     * for example, the interrupt status of the thread, or the current time&#xA;     * upon return.&#xA;     *&#xA;     * @param deadline the absolute time, in milliseconds from the Epoch, to&#xA;     * wait until&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.100"/>
            <arguments xsi:type="literals:BooleanLiteral" value="true"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          </next>
        </expression>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Basic thread blocking primitives for creating locks and other&#xA; * synchronization classes.&#xA; *&#xA; * &lt;p>This class associates with each thread that uses it, a permit&#xA; * (in the sense of the {@link java.util.concurrent.Semaphore&#xA; * Semaphore} class). A call to &lt;tt>park&lt;/tt> will return immediately&#xA; * if the permit is available, consuming it in the process; otherwise&#xA; * it &lt;em>may&lt;/em> block.  A call to &lt;tt>unpark&lt;/tt> makes the permit&#xA; * available, if it was not already available. (Unlike with Semaphores&#xA; * though, permits do not accumulate. There is at most one.)&#xA; *&#xA; * &lt;p>Methods &lt;tt>park&lt;/tt> and &lt;tt>unpark&lt;/tt> provide efficient&#xA; * means of blocking and unblocking threads that do not encounter the&#xA; * problems that cause the deprecated methods &lt;tt>Thread.suspend&lt;/tt>&#xA; * and &lt;tt>Thread.resume&lt;/tt> to be unusable for such purposes: Races&#xA; * between one thread invoking &lt;tt>park&lt;/tt> and another thread trying&#xA; * to &lt;tt>unpark&lt;/tt> it will preserve liveness, due to the&#xA; * permit. Additionally, &lt;tt>park&lt;/tt> will return if the caller's&#xA; * thread was interrupted, and timeout versions are supported. The&#xA; * &lt;tt>park&lt;/tt> method may also return at any other time, for &quot;no&#xA; * reason&quot;, so in general must be invoked within a loop that rechecks&#xA; * conditions upon return. In this sense &lt;tt>park&lt;/tt> serves as an&#xA; * optimization of a &quot;busy wait&quot; that does not waste as much time&#xA; * spinning, but must be paired with an &lt;tt>unpark&lt;/tt> to be&#xA; * effective.&#xA; *&#xA; * &lt;p>These methods are designed to be used as tools for creating&#xA; * higher-level synchronization utilities, and are not in themselves&#xA; * useful for most concurrency control applications.&#xA; *&#xA; * &lt;p>&lt;b>Sample Usage.&lt;/b> Here is a sketch of a First-in-first-out&#xA; * non-reentrant lock class.&#xA; * &lt;pre>&#xA; * class FIFOMutex {&#xA; *   private AtomicBoolean locked = new AtomicBoolean(false);&#xA; *   private Queue&amp;lt;Thread&amp;gt; waiters = new ConcurrentLinkedQueue&amp;lt;Thread&amp;gt;();&#xA; *&#xA; *   public void lock() { &#xA; *     boolean wasInterrupted = false;&#xA; *     Thread current = Thread.currentThread();&#xA; *     waiters.add(current);&#xA; *&#xA; *     // Block while not first in queue or cannot acquire lock&#xA; *     while (waiters.peek() != current || &#xA; *            !locked.compareAndSet(false, true)) { &#xA; *        LockSupport.park();&#xA; *        if (Thread.interrupted()) // ignore interrupts while waiting&#xA; *          wasInterrupted = true;&#xA; *     }&#xA; *&#xA; *     waiters.remove();&#xA; *     if (wasInterrupted)          // reassert interrupt status on exit&#xA; *        current.interrupt();&#xA; *   }&#xA; *&#xA; *   public void unlock() {&#xA; *     locked.set(false);&#xA; *     LockSupport.unpark(waiters.peek());&#xA; *   } &#xA; * }&#xA; * &lt;/pre>&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
