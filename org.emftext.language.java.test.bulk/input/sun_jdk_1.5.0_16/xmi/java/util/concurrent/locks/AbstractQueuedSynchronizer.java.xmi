<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/references ../../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../../java.ecore#/15 http://www.emftext.org/java/types ../../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../../java.ecore#/17" name="AbstractQueuedSynchronizer.java">
  <comments>/*&#xA; * @(#)AbstractQueuedSynchronizer.java&#x9;1.4 07/01/04&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>concurrent</namespaces>
  <namespaces>locks</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <namespaces>concurrent</namespaces>
  </imports>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <namespaces>concurrent</namespaces>
    <namespaces>atomic</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>misc</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="AbstractQueuedSynchronizer">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="7373984972572414691"/>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Constructor" name="AbstractQueuedSynchronizer">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates a new &lt;tt>AbstractQueuedSynchronizer&lt;/tt> instance&#xA;     * with initial synchronization state of zero.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="classifiers:Class" name="Node">
      <members xsi:type="members:Field" name="CANCELLED">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>/** waitStatus value to indicate thread has cancelled */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="SIGNAL">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </initialValue>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>/** waitStatus value to indicate thread needs unparking */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="CONDITION">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
        </initialValue>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>/** waitStatus value to indicate thread is waiting on condition */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="SHARED">
        <initialValue xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
        </initialValue>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>/** Marker to indicate a node is waiting in shared mode */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="EXCLUSIVE">
        <initialValue xsi:type="literals:NullLiteral"/>
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Static">
          <comments>/** Marker to indicate a node is waiting in exclusive mode */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="waitStatus">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Volatile">
          <comments>/**&#xA;         * Status field, taking on only the values:&#xA;         *   SIGNAL:     The successor of this node is (or will soon be) &#xA;         *               blocked (via park), so the current node must &#xA;         *               unpark its successor when it releases or &#xA;         *               cancels. To avoid races, acquire methods must&#xA;         *               first indicate they need a signal, &#xA;         *               then retry the atomic acquire, and then, &#xA;         *               on failure, block.&#xA;         *   CANCELLED:  Node is cancelled due to timeout or interrupt&#xA;         *               Nodes never leave this state. In particular,&#xA;         *               a thread with cancelled node never again blocks.&#xA;         *   CONDITION:  Node is currently on a condition queue&#xA;         *               It will not be used as a sync queue node until&#xA;         *               transferred. (Use of this value here&#xA;         *               has nothing to do with the other uses&#xA;         *               of the field, but simplifies mechanics.)&#xA;         *   0:          None of the above&#xA;         *&#xA;         * The values are arranged numerically to simplify use.&#xA;         * Non-negative values mean that a node doesn't need to&#xA;         * signal. So, most code doesn't need to check for particular&#xA;         * values, just for sign.&#xA;         *&#xA;         * The field is initialized to 0 for normal sync nodes, and&#xA;         * CONDITION for condition nodes.  It is modified only using&#xA;         * CAS.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="prev">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Volatile">
          <comments>/**&#xA;         * Link to predecessor node that current node/thread relies on&#xA;         * for checking waitStatus. Assigned during enqueing, and nulled&#xA;         * out (for sake of GC) only upon dequeuing.  Also, upon&#xA;         * cancellation of a predecessor, we short-circuit while&#xA;         * finding a non-cancelled one, which will always exist&#xA;         * because the head node is never cancelled: A node becomes&#xA;         * head only as a result of successful acquire. A&#xA;         * cancelled thread never succeeds in acquiring, and a thread only&#xA;         * cancels itself, not any other node.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="next">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Volatile">
          <comments>/**&#xA;         * Link to the successor node that the current node/thread&#xA;         * unparks upon release. Assigned once during enqueuing, and&#xA;         * nulled out (for sake of GC) when no longer needed.  Upon&#xA;         * cancellation, we cannot adjust this field, but can notice&#xA;         * status and bypass the node if cancelled.  The enq operation&#xA;         * does not assign next field of a predecessor until after&#xA;         * attachment, so seeing a null next field does not&#xA;         * necessarily mean that node is at end of queue. However, if&#xA;         * a next field appears to be null, we can scan prev's from&#xA;         * the tail to double-check.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="thread">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Volatile">
          <comments>/**&#xA;         * The thread that enqueued this node.  Initialized on&#xA;         * construction and nulled out after use. &#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:Field" name="nextWaiter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2">
            <comments>/** &#xA;         * Link to next node waiting on condition, or the special&#xA;         * value SHARED.  Because condition queues are accessed only&#xA;         * when holding in exclusive mode, we just need a simple&#xA;         * linked queue to hold nodes while they are waiting on&#xA;         * conditions. They are then transferred to the queue to&#xA;         * re-acquire. And because conditions can only be exclusive,&#xA;         * we save a field by using special value to indicate shared&#xA;         * mode.&#xA;         */</comments>
          </classifierReferences>
        </typeReference>
      </members>
      <members xsi:type="members:ClassMethod" name="isShared">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Final">
          <comments>/**&#xA;         * Returns true if node is waiting in shared mode&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.3"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="predecessor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Final">
          <comments>/**&#xA;         * Returns previous node, or throws NullPointerException if&#xA;         * null.  Use when predecessor cannot be null.&#xA;         * @return the predecessor of this node&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="p">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.11/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.11/@statements.0/@variable"/>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:Constructor" name="Node">
        <comments>// Used to establish initial head or SHARED marker</comments>
      </members>
      <members xsi:type="members:Constructor" name="Node">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
              <self xsi:type="literals:This">
                <comments>// Used by addWaiter</comments>
              </self>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.13/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.13/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="thread">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="mode">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
        </parameters>
      </members>
      <members xsi:type="members:Constructor" name="Node">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
              <self xsi:type="literals:This">
                <comments>// Used by Condition</comments>
              </self>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.14/@parameters.1"/>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:SelfReference">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              <self xsi:type="literals:This"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.14/@parameters.0"/>
          </expression>
        </statements>
        <parameters xsi:type="parameters:OrdinaryParameter" name="thread">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="waitStatus">
          <typeReference xsi:type="types:Int"/>
        </parameters>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * Wait queue node class.&#xA;     *&#xA;     * &lt;p> The wait queue is a variant of a &quot;CLH&quot; (Craig, Landin, and&#xA;     * Hagersten) lock queue. CLH locks are normally used for&#xA;     * spinlocks.  We instead use them for blocking synchronizers, but&#xA;     * use the same basic tactic of holding some of the control&#xA;     * information about a thread in the predecessor of its node.  A&#xA;     * &quot;status&quot; field in each node keeps track of whether a thread&#xA;     * should block.  A node is signalled when its predecessor&#xA;     * releases.  Each node of the queue otherwise serves as a&#xA;     * specific-notification-style monitor holding a single waiting&#xA;     * thread. The status field does NOT control whether threads are&#xA;     * granted locks etc though.  A thread may try to acquire if it is&#xA;     * first in the queue. But being first does not guarantee success;&#xA;     * it only gives the right to contend.  So the currently released&#xA;     * contender thread may need to rewait.&#xA;     *&#xA;     * &lt;p>To enqueue into a CLH lock, you atomically splice it in as new&#xA;     * tail. To dequeue, you just set the head field.  &#xA;     * &lt;pre>&#xA;     *      +------+  prev +-----+       +-----+&#xA;     * head |      | &lt;---- |     | &lt;---- |     |  tail&#xA;     *      +------+       +-----+       +-----+&#xA;     * &lt;/pre>&#xA;     *&#xA;     * &lt;p>Insertion into a CLH queue requires only a single atomic&#xA;     * operation on &quot;tail&quot;, so there is a simple atomic point of&#xA;     * demarcation from unqueued to queued. Similarly, dequeing&#xA;     * involves only updating the &quot;head&quot;. However, it takes a bit&#xA;     * more work for nodes to determine who their successors are,&#xA;     * in part to deal with possible cancellation due to timeouts&#xA;     * and interrupts.&#xA;     *&#xA;     * &lt;p>The &quot;prev&quot; links (not used in original CLH locks), are mainly&#xA;     * needed to handle cancellation. If a node is cancelled, its&#xA;     * successor is (normally) relinked to a non-cancelled&#xA;     * predecessor. For explanation of similar mechanics in the case&#xA;     * of spin locks, see the papers by Scott and Scherer at&#xA;     * http://www.cs.rochester.edu/u/scott/synchronization/&#xA;     * &#xA;     * &lt;p>We also use &quot;next&quot; links to implement blocking mechanics.&#xA;     * The thread id for each node is kept in its own node, so a&#xA;     * predecessor signals the next node to wake up by traversing&#xA;     * next link to determine which thread it is.  Determination of&#xA;     * successor must avoid races with newly queued nodes to set&#xA;     * the &quot;next&quot; fields of their predecessors.  This is solved&#xA;     * when necessary by checking backwards from the atomically&#xA;     * updated &quot;tail&quot; when a node's successor appears to be null.&#xA;     * (Or, said differently, the next-links are an optimization&#xA;     * so that we don't usually need a backward scan.)&#xA;     *&#xA;     * &lt;p>Cancellation introduces some conservatism to the basic&#xA;     * algorithms.  Since we must poll for cancellation of other&#xA;     * nodes, we can miss noticing whether a cancelled node is&#xA;     * ahead or behind us. This is dealt with by always unparking&#xA;     * successors upon cancellation, allowing them to stabilize on&#xA;     * a new predecessor.&#xA;     *&#xA;     * &lt;p>CLH queues need a dummy header node to get started. But&#xA;     * we don't create them on construction, because it would be wasted&#xA;     * effort if there is never contention. Instead, the node&#xA;     * is constructed and head and tail pointers are set upon first&#xA;     * contention.&#xA;     *&#xA;     * &lt;p>Threads waiting on Conditions use the same nodes, but&#xA;     * use an additional link. Conditions only need to link nodes&#xA;     * in simple (non-concurrent) linked queues because they are&#xA;     * only accessed when exclusively held.  Upon await, a node is&#xA;     * inserted into a condition queue.  Upon signal, the node is&#xA;     * transferred to the main queue.  A special value of status&#xA;     * field is used to mark which queue a node is on.&#xA;     *&#xA;     * &lt;p>Thanks go to Dave Dice, Mark Moir, Victor Luchangco, Bill&#xA;     * Scherer and Michael Scott, along with members of JSR-166&#xA;     * expert group, for helpful ideas, discussions, and critiques&#xA;     * on the design of this class.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="head">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.2"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Head of the wait queue, lazily initialized.  Except for&#xA;     * initialization, it is modified only via method setHead.  Note:&#xA;     * If head exists, its waitStatus is guaranteed not to be&#xA;     * CANCELLED.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:Field" name="tail">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.2"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Tail of the wait queue, lazily initialized.  Modified only via&#xA;     * method enq to add new wait node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:Field" name="state">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The synchronization state.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getState">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns the current value of synchronization state.&#xA;     * This operation has memory semantics of a &lt;tt>volatile&lt;/tt> read.&#xA;     * @return current state value&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setState">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newState">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Sets the value of synchronization state.&#xA;     * This operation has memory semantics of a &lt;tt>volatile&lt;/tt> write.&#xA;     * @param newState the new state value&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareAndSetState">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expect">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="update">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Atomically sets synchronization state to the given updated&#xA;     * value if the current state value equals the expected value.&#xA;     * This operation has memory semantics of a &lt;tt>volatile&lt;/tt> read&#xA;     * and write.&#xA;     * @param expect the expected value&#xA;     * @param update the new value&#xA;     * @return true if successful. False return indicates that&#xA;     * the actual value was not equal to the expected value.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <comments>// See below for intrinsics setup to support this</comments>
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.79"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.1"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="enq">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.2"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Queuing utilities</comments>
        <comments>/**&#xA;     * Insert node into queue, initializing if necessary. See picture above.&#xA;     * @param node the node to insert&#xA;     * @return node's predecessor&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="t">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.2"/>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="h">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.2">
                      <comments>// Must initialize</comments>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences target="//@classifiers.0/@members.2"/>
                    </typeReference>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable">
                    <comments>// Dummy header</comments>
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                </expression>
              </statements>
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.64">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.0/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                    </expression>
                  </statements>
                  <statements xsi:type="statements:Return">
                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.0/@variable"/>
                  </statements>
                </statement>
                <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
                </condition>
              </statements>
            </elseStatement>
          </statements>
        </statement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addWaiter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.2"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Create and enq node for given thread and mode&#xA;     * @param current the thread&#xA;     * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared&#xA;     * @return the new node&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <arguments xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pred">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2">
              <comments>// Try the fast path of enq; backup to full enq on failure</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
                </expression>
              </statements>
              <statements xsi:type="statements:Return">
                <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
              </statements>
            </statement>
            <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setHead">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Set head of queue to be node, thus dequeuing. Called only by&#xA;     * acquire methods.  Also nulls out unused fields for sake of GC&#xA;     * and to suppress unnecessary signals and traversals.&#xA;     * @param node the node &#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="unparkSuccessor">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Wake up node's successor, if one exists.&#xA;     * @param node the node&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
          <comments>/*&#xA;         * Try to clear status in anticipation of signalling.  It is&#xA;         * OK if this fails or if status is changed by waiting thread.&#xA;         */</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.1"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="thread">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>/*&#xA;         * Thread to unpark is held in successor, which is normally&#xA;         * just the next node.  But if cancelled or apparently null,&#xA;         * traverse backwards from tail to find the actual&#xA;         * non-cancelled successor.&#xA;         */</comments>
              <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:LessThanOrEqual"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
          <statements xsi:type="statements:ForLoop">
            <statement xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
                  </value>
                </expression>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </condition>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
              </children>
            </condition>
            <init xsi:type="expressions:ExpressionList">
              <expressions xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              </expressions>
            </init>
            <updates xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
              </value>
            </updates>
          </statements>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@statements.1/@variable"/>
          </next>
          <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setHeadAndPropagate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propagate">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Set head of queue, and check if successor may be waiting&#xA;     * in shared mode, if so propagating if propagate > 0.&#xA;     * @param pred the node holding waitStatus for node&#xA;     * @param node the node &#xA;     * @param propagate the return value from a tryAcquireShared&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="s">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.2">
                  <comments>/*&#xA;             * Don't bother fully figuring out successor.  If it&#xA;             * looks null, call unparkSuccessor anyway to be safe.&#xA;             */</comments>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:ConditionalOrExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@statement/@statements.0/@variable">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.10"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.1"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="cancelAcquire">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Utilities for various versions of acquire</comments>
        <comments>/**&#xA;     * Cancel an ongoing attempt to acquire.&#xA;     * @param node the node&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>// Ignore if node doesn't exist</comments>
        <statement xsi:type="statements:Return"/>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:NullLiteral"/>
        </expression>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="pred">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2">
              <comments>// Skip cancelled predecessors</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
              </value>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="predNext">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2">
              <comments>// Getting this before setting waitStatus ensures staleness</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
            <comments>// Can use unconditional write instead of CAS here</comments>
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <comments>// If we are the tail, remove ourselves</comments>
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.67">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.4/@variable"/>
              <arguments xsi:type="literals:NullLiteral"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.65">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
          </children>
        </condition>
        <elseStatement xsi:type="statements:Block">
          <comments>// help GC</comments>
          <statements xsi:type="statements:Condition">
            <comments>// If &quot;active&quot; predecessor found...</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="next">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0/@members.2">
                      <comments>// If successor is active, set predecessor's next link</comments>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.67">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.4/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.6/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                  </expression>
                </statement>
                <condition xsi:type="expressions:ConditionalAndExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.6/@elseStatement/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </children>
                  <children xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.6/@elseStatement/@statements.0/@statement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                    </children>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:LessThanOrEqual"/>
                  </children>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </children>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:ConditionalOrExpression">
                  <children xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                    </children>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.1"/>
                    </children>
                  </children>
                  <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable"/>
                    <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.1"/>
                    </arguments>
                  </children>
                </expression>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@statements.2/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </children>
            </condition>
            <elseStatement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
                </expression>
              </statements>
            </elseStatement>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14/@parameters.0"/>
            </expression>
          </statements>
        </elseStatement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shouldParkAfterFailedAcquire">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pred">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Checks and updates status for a node that failed to acquire.&#xA;     * Returns true if thread should block. This is the main signal&#xA;     * control in all acquire loops.  Requires that pred == node.prev&#xA;     * @param pred node's predecessor holding status&#xA;     * @param node the node &#xA;     * @return true if thread should block&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="s">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <comments>/*&#xA;             * This node has already set status asking a release&#xA;             * to signal it, so it can safely park&#xA;             */</comments>
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:DoWhileLoop">
            <comments>/*&#xA;             * Predecessor was cancelled. Skip over predecessors and&#xA;             * indicate retry.&#xA;             */</comments>
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
                  </child>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
                    </value>
                  </value>
                </expression>
              </statements>
            </statement>
            <condition xsi:type="expressions:RelationExpression">
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
              </children>
              <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              <relationOperators xsi:type="operators:GreaterThan"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.1"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@statements.0/@variable"/>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:GreaterThan"/>
        </condition>
        <elseStatement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
            <comments>/*&#xA;             * Indicate that we need a signal, but don't park yet. Caller&#xA;             * will need to retry to make sure it cannot acquire before&#xA;             * parking.&#xA;             */</comments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15/@parameters.0"/>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.1"/>
            </arguments>
          </expression>
        </elseStatement>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="selfInterrupt">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Convenience method to interrupt current thread.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.52"/>
            </next>
            <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="parkAndCheckInterrupt">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Convenience method to park and then check if interrupted&#xA;     * @return true if interrupted&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.3"/>
          </next>
          <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="acquireQueued">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/*&#xA;     * Various flavors of acquire, varying in exclusive/shared and&#xA;     * control modes.  Each is mostly the same, but annoyingly&#xA;     * different.  Only a little bit of factoring is possible due to&#xA;     * interactions of exception mechanics (including ensuring that we&#xA;     * cancel if tryAcquire throws exception) and other control, at&#xA;     * least not without hurting performance too much. &#xA;     */</comments>
        <comments>/**&#xA;     * Acquire in exclusive uninterruptible mode for thread already in&#xA;     * queue. Used by condition wait methods as well as acquire.&#xA;     * @param node the node&#xA;     * @param arg the acquire argument&#xA;     * @return true if interrupted while waiting&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interrupted">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.11"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statements.1/@statement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Return">
                  <comments>// help GC</comments>
                  <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statements.0/@variable"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statements.1/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.1"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@statements.1/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
              </condition>
            </statements>
          </statement>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18/@statements.0/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doAcquireInterruptibly">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Acquire in exclusive interruptible mode&#xA;     * @param arg the acquire argument&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
            </arguments>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.11"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@statements.0/@statement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Return">
                  <comments>// help GC</comments>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@parameters.0"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@statements.0/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
              </condition>
            </statements>
          </statement>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.1/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <comments>// Arrive here only if interrupted</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.19/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doAcquireNanos">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nanosTimeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Acquire in exclusive timed mode&#xA;     * @param arg the acquire argument&#xA;     * @param nanosTimeout max wait time&#xA;     * @return true if acquired&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lastTime">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
            </arguments>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.11"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@statements.0/@statement/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Return">
                  <comments>// help GC</comments>
                  <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:Equal"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.0"/>
                </children>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="literals:BooleanLiteral"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.4"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="now">
                    <typeReference xsi:type="types:Long"/>
                    <initialValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@parameters.1"/>
                    <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@statements.0/@statement/@statements.3/@statement/@statements.2/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@statements.0/@statement/@statements.3/@statement/@statements.2/@variable"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
              </condition>
            </statements>
          </statement>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.2/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <comments>// Arrive here only if interrupted</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.20/@statements.1/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doAcquireShared">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Acquire in shared uninterruptible mode&#xA;     * @param arg the acquire argument&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.3"/>
            </arguments>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interrupted">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.11"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="r">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.1/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:NullLiteral"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Condition">
                      <comments>// help GC</comments>
                      <statement xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
                      </statement>
                      <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.0/@variable"/>
                    </statements>
                    <statements xsi:type="statements:Return"/>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.1/@statement/@statements.1/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.1/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.0/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@statements.1/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
              </condition>
            </statements>
          </statement>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.1/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doAcquireSharedInterruptibly">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Acquire in shared interruptible mode&#xA;     * @param arg the acquire argument&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.3"/>
            </arguments>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.11"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="r">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@parameters.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@statements.0/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:NullLiteral"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <comments>// help GC</comments>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:ConditionalAndExpression">
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@statements.0/@statement/@statements.0/@variable"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
                </children>
                <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.17"/>
              </condition>
            </statements>
          </statement>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.1/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <comments>// Arrive here only if interrupted</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.22/@statements.0/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="doAcquireSharedNanos">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nanosTimeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/** &#xA;     * Acquire in shared timed mode&#xA;     * @param arg the acquire argument&#xA;     * @param nanosTimeout max wait time&#xA;     * @return true if acquired&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="lastTime">
          <typeReference xsi:type="types:Long"/>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.3"/>
            </arguments>
          </initialValue>
          <annotationsAndModifiers xsi:type="modifiers:Final"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="p">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable">
                  <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.11"/>
                </initialValue>
                <annotationsAndModifiers xsi:type="modifiers:Final"/>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="r">
                    <typeReference xsi:type="types:Int"/>
                    <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.13">
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@statements.0/@statement/@statements.0/@variable">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
                        </child>
                        <assignmentOperator xsi:type="operators:Assignment"/>
                        <value xsi:type="literals:NullLiteral"/>
                      </expression>
                    </statements>
                    <statements xsi:type="statements:Return">
                      <comments>// help GC</comments>
                      <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:RelationExpression">
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@statements.0/@statement/@statements.1/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                    <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Return">
                  <returnValue xsi:type="literals:BooleanLiteral"/>
                </statements>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.1"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </condition>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.4"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.1"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:Break"/>
                  <condition xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
                    </next>
                    <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                  </condition>
                </statements>
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="now">
                    <typeReference xsi:type="types:Long"/>
                    <initialValue xsi:type="references:IdentifierReference">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
                      </next>
                      <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@parameters.1"/>
                    <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                    <value xsi:type="expressions:AdditiveExpression">
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@statements.0/@statement/@statements.3/@statement/@statements.2/@variable"/>
                      <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
                      <additiveOperators xsi:type="operators:Subtraction"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.0/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@statements.0/@statement/@statements.3/@statement/@statements.2/@variable"/>
                  </expression>
                </statements>
              </statement>
              <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.15">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@statements.0/@statement/@statements.0/@variable"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable"/>
              </condition>
            </statements>
          </statement>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.2/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.14">
          <comments>// Arrive here only if interrupted</comments>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.23/@statements.1/@variable"/>
        </expression>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="tryAcquire">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>// Main exported methods </comments>
        <comments>/**&#xA;     * Attempts to acquire in exclusive mode. This method should query&#xA;     * if the state of the object permits it to be acquired in the&#xA;     * exclusive mode, and if so to acquire it.&#xA;     *&#xA;     * &lt;p>This method is always invoked by the thread performing&#xA;     * acquire.  If this method reports failure, the acquire method&#xA;     * may queue the thread, if it is not already queued, until it is&#xA;     * signalled by a release from some other thread. This can be used&#xA;     * to implement method {@link Lock#tryLock()}. &#xA;     *&#xA;     * &lt;p>The default&#xA;     * implementation throws {@link UnsupportedOperationException}&#xA;     *&#xA;     * @param arg the acquire argument. This value&#xA;     * is always the one passed to an acquire method,&#xA;     * or is the value saved on entry to a condition wait.&#xA;     * The value is otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @return true if successful. Upon success, this object has been&#xA;     * acquired.&#xA;     * @throws IllegalMonitorStateException if acquiring would place&#xA;     * this synchronizer in an illegal state. This exception must be&#xA;     * thrown in a consistent fashion for synchronization to work&#xA;     * correctly.&#xA;     * @throws UnsupportedOperationException if exclusive mode is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="tryRelease">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Attempts to set the state to reflect a release in exclusive&#xA;     * mode.  &lt;p>This method is always invoked by the thread&#xA;     * performing release.&#xA;     *&#xA;     * &lt;p>The default implementation throws&#xA;     * {@link UnsupportedOperationException}&#xA;     * @param arg the release argument. This value&#xA;     * is always the one passed to a release method,&#xA;     * or the current state value upon entry to a condition wait.&#xA;     * The value is otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @return &lt;tt>true&lt;/tt> if this object is now in a fully released state, &#xA;     * so that any waiting threads may attempt to acquire; and &lt;tt>false&lt;/tt>&#xA;     * otherwise.&#xA;     * @throws IllegalMonitorStateException if releasing would place&#xA;     * this synchronizer in an illegal state. This exception must be&#xA;     * thrown in a consistent fashion for synchronization to work&#xA;     * correctly.&#xA;     * @throws UnsupportedOperationException if exclusive mode is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="tryAcquireShared">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Attempts to acquire in shared mode. This method should query if&#xA;     * the state of the object permits it to be acquired in the shared&#xA;     * mode, and if so to acquire it.  &#xA;     *&#xA;     * &lt;p>This method is always invoked by the thread performing&#xA;     * acquire.  If this method reports failure, the acquire method&#xA;     * may queue the thread, if it is not already queued, until it is&#xA;     * signalled by a release from some other thread.&#xA;     *&#xA;     * &lt;p>The default implementation throws {@link&#xA;     * UnsupportedOperationException}&#xA;     *&#xA;     * @param arg the acquire argument. This value&#xA;     * is always the one passed to an acquire method,&#xA;     * or is the value saved on entry to a condition wait.&#xA;     * The value is otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @return a negative value on failure, zero on exclusive success,&#xA;     * and a positive value if non-exclusively successful, in which&#xA;     * case a subsequent waiting thread must check&#xA;     * availability. (Support for three different return values&#xA;     * enables this method to be used in contexts where acquires only&#xA;     * sometimes act exclusively.)  Upon success, this object has been&#xA;     * acquired.&#xA;     * @throws IllegalMonitorStateException if acquiring would place&#xA;     * this synchronizer in an illegal state. This exception must be&#xA;     * thrown in a consistent fashion for synchronization to work&#xA;     * correctly.&#xA;     * @throws UnsupportedOperationException if shared mode is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="tryReleaseShared">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Attempts to set the state to reflect a release in shared mode.&#xA;     * &lt;p>This method is always invoked by the thread performing release.&#xA;     * &lt;p> The default implementation throws &#xA;     * {@link UnsupportedOperationException}&#xA;     * @param arg the release argument. This value&#xA;     * is always the one passed to a release method,&#xA;     * or the current state value upon entry to a condition wait.&#xA;     * The value is otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @return &lt;tt>true&lt;/tt> if this object is now in a fully released state, &#xA;     * so that any waiting threads may attempt to acquire; and &lt;tt>false&lt;/tt>&#xA;     * otherwise.&#xA;     * @throws IllegalMonitorStateException if releasing would place&#xA;     * this synchronizer in an illegal state. This exception must be&#xA;     * thrown in a consistent fashion for synchronization to work&#xA;     * correctly.&#xA;     * @throws UnsupportedOperationException if shared mode is not supported&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isHeldExclusively">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns true if synchronization is held exclusively with respect&#xA;     * to the current (calling) thread.  This method is invoked&#xA;     * upon each call to a non-waiting {@link ConditionObject} method.&#xA;     * (Waiting methods instead invoke {@link #release}.)&#xA;     * &lt;p>The default implementation throws {@link&#xA;     * UnsupportedOperationException}. This method is invoked&#xA;     * internally only within {@link ConditionObject} methods, so need&#xA;     * not be defined if conditions are not used.&#xA;     *&#xA;     * @return true if synchronization is held exclusively;&#xA;     * else false&#xA;     * @throws UnsupportedOperationException if conditions are not supported&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="acquire">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Acquires in exclusive mode, ignoring interrupts.  Implemented&#xA;     * by invoking at least once {@link #tryAcquire},&#xA;     * returning on success.  Otherwise the thread is queued, possibly&#xA;     * repeatedly blocking and unblocking, invoking {@link&#xA;     * #tryAcquire} until success.  This method can be used&#xA;     * to implement method {@link Lock#lock}&#xA;     * @param arg the acquire argument.&#xA;     * This value is conveyed to {@link #tryAcquire} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
            </child>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
            <arguments xsi:type="references:MethodCall" target="//@classifiers.0/@members.10">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.4"/>
              </arguments>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.29/@parameters.0"/>
          </children>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="acquireInterruptibly">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Acquires in exclusive mode, aborting if interrupted.&#xA;     * Implemented by first checking interrupt status, then invoking&#xA;     * at least once {@link #tryAcquire}, returning on&#xA;     * success.  Otherwise the thread is queued, possibly repeatedly&#xA;     * blocking and unblocking, invoking {@link #tryAcquire}&#xA;     * until success or the thread is interrupted.  This method can be&#xA;     * used to implement method {@link Lock#lockInterruptibly}&#xA;     * @param arg the acquire argument.&#xA;     * This value is conveyed to {@link #tryAcquire} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @throws InterruptedException if the current thread is interrupted&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.19">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.30/@parameters.0"/>
          </child>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="tryAcquireNanos">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nanosTimeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attempts to acquire in exclusive mode, aborting if interrupted,&#xA;     * and failing if the given timeout elapses.  Implemented by first&#xA;     * checking interrupt status, then invoking at least once {@link&#xA;     * #tryAcquire}, returning on success.  Otherwise, the thread is&#xA;     * queued, possibly repeatedly blocking and unblocking, invoking&#xA;     * {@link #tryAcquire} until success or the thread is interrupted&#xA;     * or the timeout elapses.  This method can be used to implement&#xA;     * method {@link Lock#tryLock(long, TimeUnit)}.&#xA;     * @param arg the acquire argument.&#xA;     * This value is conveyed to {@link #tryAcquire} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @param nanosTimeout the maximum number of nanoseconds to wait&#xA;     * @return true if acquired; false if timed out&#xA;     * @throws InterruptedException if the current thread is interrupted&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.24">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.20">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.31/@parameters.1"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="release">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Releases in exclusive mode.  Implemented by unblocking one or&#xA;     * more threads if {@link #tryRelease} returns true.&#xA;     * This method can be used to implement method {@link Lock#unlock}&#xA;     * @param arg the release argument.&#xA;     * This value is conveyed to {@link #tryRelease} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @return the value returned from {@link #tryRelease} &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="h">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.2"/>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@statement/@statements.0/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.25">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.32/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="acquireShared">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Acquires in shared mode, ignoring interrupts.  Implemented by&#xA;     * first invoking at least once {@link #tryAcquireShared},&#xA;     * returning on success.  Otherwise the thread is queued, possibly&#xA;     * repeatedly blocking and unblocking, invoking {@link&#xA;     * #tryAcquireShared} until success.  &#xA;     * @param arg the acquire argument.&#xA;     * This value is conveyed to {@link #tryAcquireShared} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.21">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.33/@parameters.0"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="acquireSharedInterruptibly">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Acquires in shared mode, aborting if interrupted.  Implemented&#xA;     * by first checking interrupt status, then invoking at least once&#xA;     * {@link #tryAcquireShared}, returning on success.  Otherwise the&#xA;     * thread is queued, possibly repeatedly blocking and unblocking,&#xA;     * invoking {@link #tryAcquireShared} until success or the thread&#xA;     * is interrupted.  &#xA;     * @param arg the acquire argument.&#xA;     * This value is conveyed to {@link #tryAcquireShared} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @throws InterruptedException if the current thread is interrupted&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.22">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.34/@parameters.0"/>
          </children>
          <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="tryAcquireSharedNanos">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="nanosTimeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Attempts to acquire in shared mode, aborting if interrupted, and&#xA;     * failing if the given timeout elapses.  Implemented by first&#xA;     * checking interrupt status, then invoking at least once {@link&#xA;     * #tryAcquireShared}, returning on success.  Otherwise, the&#xA;     * thread is queued, possibly repeatedly blocking and unblocking,&#xA;     * invoking {@link #tryAcquireShared} until success or the thread&#xA;     * is interrupted or the timeout elapses.&#xA;     * @param arg the acquire argument.&#xA;     * This value is conveyed to {@link #tryAcquireShared} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @param nanosTimeout the maximum number of nanoseconds to wait&#xA;     * @return true if acquired; false if timed out&#xA;     * @throws InterruptedException if the current thread is interrupted&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="references:IdentifierReference">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
          </next>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.26">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
            </children>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThanOrEqual"/>
          </children>
          <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.23">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.35/@parameters.1"/>
          </children>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="releaseShared">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Releases in shared mode.  Implemented by unblocking one or more&#xA;     * threads if {@link #tryReleaseShared} returns true. &#xA;     * @param arg the release argument.&#xA;     * This value is conveyed to {@link #tryReleaseShared} but is&#xA;     * otherwise uninterpreted and can represent anything&#xA;     * you like.&#xA;     * @return the value returned from {@link #tryReleaseShared} &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="h">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.2"/>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@statements.0/@statement/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </children>
            </condition>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.27">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.36/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hasQueuedThreads">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Queue inspection methods</comments>
        <comments>/**&#xA;     * Queries whether any threads are waiting to acquire. Note that&#xA;     * because cancellations due to interrupts and timeouts may occur&#xA;     * at any time, a &lt;tt>true&lt;/tt> return does not guarantee that any&#xA;     * other thread will ever acquire.&#xA;     *&#xA;     * &lt;p> In this implementation, this operation returns in&#xA;     * constant time.&#xA;     *&#xA;     * @return true if there may be other threads waiting to acquire&#xA;     * the lock.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hasContended">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Queries whether any threads have ever contended to acquire this&#xA;     * synchronizer; that is if an acquire method has ever blocked.&#xA;     *&#xA;     * &lt;p> In this implementation, this operation returns in&#xA;     * constant time.&#xA;     *&#xA;     * @return true if there has ever been contention&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          <children xsi:type="literals:NullLiteral"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getFirstQueuedThread">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the first (longest-waiting) thread in the queue, or&#xA;     * &lt;tt>null&lt;/tt> if no threads are currently queued.&#xA;     *&#xA;     * &lt;p> In this implementation, this operation normally returns in&#xA;     * constant time, but may iterate upon contention if other threads are&#xA;     * concurrently modifying the queue.&#xA;     *&#xA;     * @return the first (longest-waiting) thread in the queue, or&#xA;     * &lt;tt>null&lt;/tt> if no threads are currently queued.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <comments>// handle only fast path, else relay</comments>
        <returnValue xsi:type="expressions:ConditionalExpression">
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
            </expression>
          </child>
          <expressionIf xsi:type="literals:NullLiteral"/>
          <expressionElse xsi:type="references:MethodCall" target="//@classifiers.0/@members.40"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="fullGetFirstQueuedThread">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Version of getFirstQueuedThread called when fastpath fails&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="h">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <comments>// No queue</comments>
          <returnValue xsi:type="literals:NullLiteral"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="s">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2">
              <comments>/*&#xA;             * The first node is normally h.next. Try to get its&#xA;             * thread field, ensuring consistent reads: If thread&#xA;             * field is nulled out or s.prev is no longer head, then&#xA;             * some other thread(s) concurrently performed setHead in&#xA;         * between some of our reads.&#xA;             */</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.0/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="st">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="sp">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.2"/>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.2/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.3/@statement/@statements.0/@variable"/>
            </statement>
            <condition xsi:type="expressions:ConditionalAndExpression">
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.3/@statement/@statements.0/@variable"/>
                <children xsi:type="literals:NullLiteral"/>
              </children>
              <children xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.3/@statement/@statements.1/@variable"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </children>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.2/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2">
              <comments>/*&#xA;         * Head's next field might not have been set yet, or may have&#xA;         * been unset after setHead. So we must check to see if tail&#xA;         * is actually first node. If not, we continue on, safely&#xA;         * traversing from tail back to head to find first,&#xA;         * guaranteeing termination.&#xA;             */</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="firstThread">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="tt">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.4/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.5/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.6/@statement/@statements.0/@variable"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.6/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.4/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.4/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.4/@variable"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.40/@statements.5/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isQueued">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="thread">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if the given thread is currently queued. &#xA;     *&#xA;     * &lt;p> This implementation traverses the queue to determine&#xA;     * presence of the given thread.&#xA;     *&#xA;     * @param thread the thread&#xA;     * @return true if the given thread in on the queue&#xA;     * @throws NullPointerException if thread null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@init">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@parameters.0"/>
          </condition>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@init"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.41/@statements.1/@init">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getQueueLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Instrumentation and monitoring methods</comments>
        <comments>/**&#xA;     * Returns an estimate of the number of threads waiting to&#xA;     * acquire.  The value is only an estimate because the number of&#xA;     * threads may change dynamically while this method traverses&#xA;     * internal data structures.  This method is designed for use in&#xA;     * monitoring system state, not for synchronization&#xA;     * control.&#xA;     *&#xA;     * @return the estimated number of threads waiting for this lock&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="n">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
                <operator xsi:type="operators:PlusPlus"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@init">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@init"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.1/@init">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.42/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getQueuedThreads">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a collection containing threads that may be waiting to&#xA;     * acquire.  Because the actual set of threads may change&#xA;     * dynamically while constructing this result, the returned&#xA;     * collection is only a best-effort estimate.  The elements of the&#xA;     * returned collection are in no particular order.  This method is&#xA;     * designed to facilitate construction of subclasses that provide&#xA;     * more extensive monitoring facilities.&#xA;     * @return the collection of threads&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="list">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="t">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@init">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@statement/@statements.0/@variable"/>
                </next>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@init"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.1/@init">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.43/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getExclusiveQueuedThreads">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a collection containing threads that may be waiting to&#xA;     * acquire in exclusive mode. This has the same properties&#xA;     * as {@link #getQueuedThreads} except that it only returns&#xA;     * those threads waiting due to an exclusive acquire.&#xA;     * @return the collection of threads&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="list">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="t">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@init">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@init">
                <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.10"/>
              </child>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@init"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.1/@init">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.44/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSharedQueuedThreads">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a collection containing threads that may be waiting to&#xA;     * acquire in shared mode. This has the same properties&#xA;     * as {@link #getQueuedThreads} except that it only returns&#xA;     * those threads waiting due to a shared acquire.&#xA;     * @return the collection of threads&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="list">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="t">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@init">
                    <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    </next>
                  </expression>
                </statement>
                <condition xsi:type="expressions:EqualityExpression">
                  <equalityOperators xsi:type="operators:NotEqual"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@statement/@statements.0/@statement/@statements.0/@variable"/>
                  <children xsi:type="literals:NullLiteral"/>
                </condition>
              </statements>
            </statement>
            <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@init">
              <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.2/@members.10"/>
            </condition>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@init"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
        <init xsi:type="variables:LocalVariable" name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </init>
        <updates xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@init"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.1/@init">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
          </value>
        </updates>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.45/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string identifying this synchronizer, as well as its&#xA;     * state.  The state, in brackets, includes the String &amp;quot;State&#xA;     * =&amp;quot; followed by the current value of {@link #getState}, and&#xA;     * either &amp;quot;nonempty&amp;quot; or &amp;quot;empty&amp;quot; depending on&#xA;     * whether the queue is empty.&#xA;     *&#xA;     * @return a string identifying this synchronizer, as well as its state.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="s">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="q">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.37"/>
            <expressionIf xsi:type="references:StringReference" value="non"/>
            <expressionElse xsi:type="references:StringReference" value=""/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:AdditiveExpression">
          <children xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Object.class.xmi#//@classifiers.0/@members.6"/>
            </next>
            <self xsi:type="literals:Super"/>
          </children>
          <children xsi:type="references:StringReference" value="[State = "/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.0/@variable"/>
          <children xsi:type="references:StringReference" value=", "/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.46/@statements.1/@variable"/>
          <children xsi:type="references:StringReference" value="empty queue]"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
          <additiveOperators xsi:type="operators:Addition"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isOnSyncQueue">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>// Internal support methods for Conditions</comments>
        <comments>/**&#xA;     * Returns true if a node, always one that was initially placed on&#xA;     * a condition queue, is now waiting to reacquire on sync queue.&#xA;     * @param node the node&#xA;     * @return true if is reacquiring&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
            </children>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Return">
          <comments>// If has successor, it must be on queue</comments>
          <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.7"/>
          </children>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <comments>/*&#xA;         * node.prev can be non-null, but not yet on queue because&#xA;         * the CAS to place it on queue can fail. So we have to&#xA;         * traverse from tail to make sure it actually made it.  It&#xA;         * will always be near the tail in calls to this method, and&#xA;         * unless the CAS failed (which is unlikely), it will be&#xA;         * there, so we hardly ever traverse much.&#xA;         */</comments>
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.48">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.47/@parameters.0"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="findNodeFromTail">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Returns true if node is on sync queue by searching backwards from tail.&#xA;     * Called only when needed by isOnSyncQueue.&#xA;     * @return true if present&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="t">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
        </variable>
      </statements>
      <statements xsi:type="statements:ForLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@parameters.0"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Return">
              <returnValue xsi:type="literals:BooleanLiteral"/>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.48/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.6"/>
              </value>
            </expression>
          </statements>
        </statement>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="transferForSignal">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Transfers a node from a condition queue onto sync queue. &#xA;     * Returns true if successful.&#xA;     * @param node the node&#xA;     * @return true if successfully transferred (else the node was&#xA;     * cancelled before signal).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <comments>/*&#xA;         * If cannot change waitStatus, the node has been cancelled.&#xA;         */</comments>
        <statement xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
            </arguments>
            <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="p">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2">
              <comments>/*&#xA;         * Splice onto queue and try to set waitStatus of predecessor to&#xA;         * indicate that thread is (probably) waiting. If cancelled or&#xA;         * attempt to set waitStatus fails, wake up to resync (in which&#xA;         * case the waitStatus can be transiently and harmlessly wrong).&#xA;         */</comments>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="c">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@variable">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.2"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
              </arguments>
            </next>
            <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalOrExpression">
          <children xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.2/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
            <relationOperators xsi:type="operators:GreaterThan"/>
          </children>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.1/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.49/@statements.2/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.1"/>
              </arguments>
            </child>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="transferAfterCancelledWait">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Transfers node, if necessary, to sync queue after a cancelled&#xA;     * wait. Returns true if thread was cancelled before being&#xA;     * signalled.&#xA;     * @param current the waiting thread&#xA;     * @param node its node&#xA;     * @return true if cancelled before the node was signalled.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.9">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
            </expression>
          </statements>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.66">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
          </arguments>
          <arguments xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <comments>/*&#xA;         * If we lost out to a signal(), then we can't proceed&#xA;         * until it finishes its enq().  Cancelling during an&#xA;         * incomplete transfer is both rare and transient, so just&#xA;         * spin.&#xA;         */</comments>
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.34"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.50/@parameters.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:BooleanLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="fullyRelease">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Invoke release with current state value; return saved state.&#xA;     * Cancel node and throw exception on failure.&#xA;     * @param node the condition node for this wait&#xA;     * @return previous sync state&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="savedState">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statements.0/@variable"/>
          </statement>
          <condition xsi:type="references:MethodCall" target="//@classifiers.0/@members.32">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@statements.0/@variable"/>
          </condition>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0"/>
              </value>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@statements.0/@catcheBlocks.0/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.51/@parameters.0">
            <comments>// reach here if release fails</comments>
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.0"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../lang/IllegalMonitorStateException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="owns">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="condition">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.56"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Instrumentation methods for conditions</comments>
        <comments>/**&#xA;     * Queries whether the given ConditionObject &#xA;     * uses this synchronizer as its lock.&#xA;     * @param condition the condition&#xA;     * @return &lt;tt>true&lt;/tt> if owned&#xA;     * @throws NullPointerException if condition null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </throwable>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.52/@parameters.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.19">
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hasWaiters">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="condition">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.56"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Queries whether any threads are waiting on the given condition&#xA;     * associated with this synchronizer. Note that because timeouts&#xA;     * and interrupts may occur at any time, a &lt;tt>true&lt;/tt> return&#xA;     * does not guarantee that a future &lt;tt>signal&lt;/tt> will awaken&#xA;     * any threads.  This method is designed primarily for use in&#xA;     * monitoring of the system state.&#xA;     * @param condition the condition&#xA;     * @return &lt;tt>true&lt;/tt> if there are any waiting threads.&#xA;     * @throws IllegalMonitorStateException if exclusive synchronization &#xA;     * is not held&#xA;     * @throws IllegalArgumentException if the given condition is&#xA;     * not associated with this synchronizer&#xA;     * @throws NullPointerException if condition null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Not owner"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.53/@parameters.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.20"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getWaitQueueLength">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="condition">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.56"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an estimate of the number of threads waiting on the&#xA;     * given condition associated with this synchronizer. Note that&#xA;     * because timeouts and interrupts may occur at any time, the&#xA;     * estimate serves only as an upper bound on the actual number of&#xA;     * waiters.  This method is designed for use in monitoring of the&#xA;     * system state, not for synchronization control.&#xA;     * @param condition the condition&#xA;     * @return the estimated number of waiting threads.&#xA;     * @throws IllegalMonitorStateException if exclusive synchronization &#xA;     * is not held&#xA;     * @throws IllegalArgumentException if the given condition is&#xA;     * not associated with this synchronizer&#xA;     * @throws NullPointerException if condition null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Not owner"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.54/@parameters.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.21"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getWaitingThreads">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../Collection.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="condition">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.56"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a collection containing those threads that may be&#xA;     * waiting on the given condition associated with this&#xA;     * synchronizer.  Because the actual set of threads may change&#xA;     * dynamically while constructing this result, the returned&#xA;     * collection is only a best-effort estimate. The elements of the&#xA;     * returned collection are in no particular order.  &#xA;     * @param condition the condition&#xA;     * @return the collection of threads&#xA;     * @throws IllegalMonitorStateException if exclusive synchronization &#xA;     * is not held&#xA;     * @throws IllegalArgumentException if the given condition is&#xA;     * not associated with this synchronizer&#xA;     * @throws NullPointerException if condition null&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Throw">
          <throwable xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arguments xsi:type="references:StringReference" value="Not owner"/>
          </throwable>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.52">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0"/>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.55/@parameters.0">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.22"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="classifiers:Class" name="ConditionObject">
      <members xsi:type="members:Field" name="serialVersionUID">
        <initialValue xsi:type="literals:DecimalLongLiteral" decimalValue="1173984872572414699"/>
        <typeReference xsi:type="types:Long"/>
        <annotationsAndModifiers xsi:type="modifiers:Private"/>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="firstWaiter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/** First node of condition queue. */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Transient"/>
      </members>
      <members xsi:type="members:Field" name="lastWaiter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/** Last node of condition queue. */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Transient"/>
      </members>
      <members xsi:type="members:Constructor" name="ConditionObject">
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Creates a new &lt;tt>ConditionObject&lt;/tt> instance.&#xA;         */</comments>
        </annotationsAndModifiers>
      </members>
      <members xsi:type="members:ClassMethod" name="addConditionWaiter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>// Internal methods</comments>
          <comments>/**&#xA;         * Add a new waiter to wait queue&#xA;         * @return its new wait node&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="t">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.2"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <comments>// If lastWaiter is cancelled, clean out.</comments>
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.9"/>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.2"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
              </children>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
              </children>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.2"/>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </arguments>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
              </arguments>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.2/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <elseStatement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.0/@variable">
                <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
              </child>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.2/@variable"/>
            </expression>
          </elseStatement>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.2/@variable"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.4/@statements.2/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="doSignal">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="first">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Remove and transfer nodes until hit non-cancelled one or&#xA;         * null. Split out from signal in part to encourage compilers&#xA;         * to inline the case of no waiters.&#xA;         * @param first (non-null) the first node on condition queue&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:DoWhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.2"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:NullLiteral"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.5/@parameters.0">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
                    </value>
                  </expression>
                </children>
                <children xsi:type="literals:NullLiteral"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.5/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="expressions:UnaryExpression">
              <operators xsi:type="operators:Negate"/>
              <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.5/@parameters.0"/>
              </child>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="expressions:NestedExpression">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.5/@parameters.0"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
                </expression>
              </children>
              <children xsi:type="literals:NullLiteral"/>
            </children>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="doSignalAll">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="first">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Remove and transfer all nodes.&#xA;         * @param first (non-null) the first node on condition queue&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.2"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:NullLiteral"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:DoWhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="next">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.6/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.6/@parameters.0">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
                </child>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="literals:NullLiteral"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.49">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.6/@parameters.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.6/@parameters.0"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.6/@statements.1/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.6/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="signal">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>// public methods</comments>
          <comments>/**&#xA;         * Moves the longest-waiting thread, if one exists, from the&#xA;         * wait queue for this condition to the wait queue for the&#xA;         * owning lock.&#xA;         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}&#xA;         * returns false&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/IllegalMonitorStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="first">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.5">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.7/@statements.1/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.7/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="signalAll">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Moves all threads from the wait queue for this condition to&#xA;         * the wait queue for the owning lock.&#xA;         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}&#xA;         * returns false&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/IllegalMonitorStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="first">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.6">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.8/@statements.1/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.8/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="unlinkCancelledWaiters">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Unlinks cancelled waiter nodes from condition queue.&#xA;         * Called only while holding lock. This is called when&#xA;         * cancellation occurred during condition wait, and upon&#xA;         * insertion of a new waiter when lastWaiter is seen to have&#xA;         * been cancelled. This method is needed to avoid garbage&#xA;         * retention in the absence of signals. So even though it may&#xA;         * require a full traversal, it comes into play only when&#xA;         * timeouts or cancellations occur in the absence of&#xA;         * signals. It traverses all nodes rather than stopping at a&#xA;         * particular target to unlink all pointers to garbage nodes&#xA;         * without requiring many re-traversals during cancellation&#xA;         * storms.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="t">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="trail">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="literals:NullLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="next">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@members.2"/>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.0/@variable">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
                    </child>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="literals:NullLiteral"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.1/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                  <elseStatement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.1/@variable">
                        <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
                      </child>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                    </expression>
                  </elseStatement>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.2"/>
                      <assignmentOperator xsi:type="operators:Assignment"/>
                      <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.1/@variable"/>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:Equal"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.2/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.0/@variable">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
                </children>
              </condition>
              <elseStatement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.1/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.0/@variable"/>
                </expression>
              </elseStatement>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.2/@statement/@statements.0/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.9/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="awaitUninterruptibly">
        <typeReference xsi:type="types:Void"/>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Implements uninterruptible condition wait.&#xA;         * &lt;ol>&#xA;         * &lt;li> Save lock state returned by {@link #getState} &#xA;         * &lt;li> Invoke {@link #release} with &#xA;         *      saved state as argument, throwing &#xA;         *      IllegalMonitorStateException  if it fails.&#xA;         * &lt;li> Block until signalled&#xA;         * &lt;li> Reacquire by invoking specialized version of&#xA;         *      {@link #acquire} with saved state as argument.&#xA;         * &lt;/ol>&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.4"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="savedState">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.10/@statements.0/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interrupted">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.10/@statements.2/@variable"/>
                  <assignmentOperator xsi:type="operators:Assignment"/>
                  <value xsi:type="literals:BooleanLiteral" value="true"/>
                </expression>
              </statement>
              <condition xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.10/@statements.0/@variable"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.16"/>
          </statement>
          <condition xsi:type="expressions:ConditionalOrExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.10/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.10/@statements.1/@variable"/>
            </children>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.10/@statements.2/@variable"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:Field" name="REINTERRUPT">
        <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/*&#xA;         * For interruptible waits, we need to track whether to throw&#xA;         * InterruptedException, if interrupted while blocked on&#xA;         * condition, versus reinterrupt current thread, if&#xA;         * interrupted while blocked waiting to re-acquire.&#xA;         */</comments>
          <comments>/** Mode meaning to reinterrupt on exit from wait */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:Field" name="THROW_IE">
        <initialValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </initialValue>
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/** Mode meaning to throw InterruptedException on exit from wait */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Static"/>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </members>
      <members xsi:type="members:ClassMethod" name="checkInterruptWhileWaiting">
        <typeReference xsi:type="types:Int"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="node">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@members.2"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Check for interrupt, returning THROW_IE if interrupted&#xA;         * before signalled, REINTERRUPT if after signalled, or&#xA;         * 0 if not interrupted.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:ConditionalExpression">
            <child xsi:type="expressions:NestedExpression">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </expression>
            </child>
            <expressionIf xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:ConditionalExpression">
                <child xsi:type="expressions:NestedExpression">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.13/@parameters.0"/>
                  </expression>
                </child>
                <expressionIf xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.12"/>
                <expressionElse xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.11"/>
              </expression>
            </expressionIf>
            <expressionElse xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="reportInterruptAfterWait">
        <typeReference xsi:type="types:Void"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="interruptMode">
          <typeReference xsi:type="types:Int"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Private">
          <comments>/**&#xA;         * Throw InterruptedException, reinterrupt current thread, or&#xA;         * do nothing, depending on mode.&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.14/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.12"/>
          </condition>
          <elseStatement xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.52"/>
                  </next>
                  <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.14/@parameters.0"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.11"/>
            </condition>
          </elseStatement>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="await">
        <typeReference xsi:type="types:Void"/>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Implements interruptible condition wait.&#xA;         * &lt;ol>&#xA;         * &lt;li> If current thread is interrupted, throw InterruptedException&#xA;         * &lt;li> Save lock state returned by {@link #getState} &#xA;         * &lt;li> Invoke {@link #release} with &#xA;         *      saved state as argument, throwing &#xA;         *      IllegalMonitorStateException  if it fails.&#xA;         * &lt;li> Block until signalled or interrupted&#xA;         * &lt;li> Reacquire by invoking specialized version of&#xA;         *      {@link #acquire} with saved state as argument.&#xA;         * &lt;li> If interrupted while blocked in step 4, throw exception&#xA;         * &lt;/ol>&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.4"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="savedState">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.1/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interruptMode">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.3"/>
                </next>
                <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.3/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.1/@variable"/>
                    </value>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.1/@variable"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.3/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.11"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.1/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.2/@variable"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.3/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.12"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.9"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.3/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.15/@statements.3/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="awaitNanos">
        <typeReference xsi:type="types:Long"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="nanosTimeout">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Implements timed condition wait.&#xA;         * &lt;ol>&#xA;         * &lt;li> If current thread is interrupted, throw InterruptedException&#xA;         * &lt;li> Save lock state returned by {@link #getState} &#xA;         * &lt;li> Invoke {@link #release} with &#xA;         *      saved state as argument, throwing &#xA;         *      IllegalMonitorStateException  if it fails.&#xA;         * &lt;li> Block until signalled, interrupted, or timed out&#xA;         * &lt;li> Reacquire by invoking specialized version of&#xA;         *      {@link #acquire} with saved state as argument.&#xA;         * &lt;li> If interrupted while blocked in step 4, throw InterruptedException&#xA;         * &lt;/ol>&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.4"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="savedState">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.1/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="lastTime">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interruptMode">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.1/@variable"/>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@parameters.0"/>
                <children xsi:type="literals:DecimalLongLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@parameters.0"/>
                </next>
                <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.4/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.1/@variable"/>
                    </value>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="now">
                <typeReference xsi:type="types:Long"/>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@parameters.0"/>
                <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.5/@statement/@statements.3/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.3/@variable"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.3/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.5/@statement/@statements.3/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.1/@variable"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.4/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.11"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.1/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.2/@variable"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.4/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.12"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.9"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.1/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.4/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.4/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:AdditiveExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@parameters.0"/>
            <children xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.16/@statements.3/@variable"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expression>
            </children>
            <additiveOperators xsi:type="operators:Subtraction"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="awaitUntil">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="deadline">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../Date.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Implements absolute timed condition wait.&#xA;         * &lt;ol>&#xA;         * &lt;li> If current thread is interrupted, throw InterruptedException&#xA;         * &lt;li> Save lock state returned by {@link #getState} &#xA;         * &lt;li> Invoke {@link #release} with &#xA;         *      saved state as argument, throwing &#xA;         *      IllegalMonitorStateException  if it fails.&#xA;         * &lt;li> Block until signalled, interrupted, or timed out&#xA;         * &lt;li> Reacquire by invoking specialized version of&#xA;         *      {@link #acquire} with saved state as argument.&#xA;         * &lt;li> If interrupted while blocked in step 4, throw InterruptedException&#xA;         * &lt;li> If timed out while blocked in step 4, return false, else true&#xA;         * &lt;/ol>&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@parameters.0"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="abstime">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@parameters.0">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../Date.class.xmi#//@classifiers.0/@members.30"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.4"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="savedState">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.3/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="timedout">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interruptMode">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.5/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.3/@variable"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.18"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.1/@variable"/>
                <relationOperators xsi:type="operators:GreaterThan"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.5"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.1/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.6/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.3/@variable"/>
                    </value>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.3/@variable"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.6/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.11"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.3/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.4/@variable"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.6/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.12"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.9"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.3/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.6/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.6/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.17/@statements.5/@variable"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="await">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="time">
          <typeReference xsi:type="types:Long"/>
        </parameters>
        <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Enumeration" href="../TimeUnit.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </parameters>
        <exceptions>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </exceptions>
        <annotationsAndModifiers xsi:type="modifiers:Public">
          <comments>/**&#xA;         * Implements timed condition wait. &#xA;         * &lt;ol>&#xA;         * &lt;li> If current thread is interrupted, throw InterruptedException&#xA;         * &lt;li> Save lock state returned by {@link #getState} &#xA;         * &lt;li> Invoke {@link #release} with &#xA;         *      saved state as argument, throwing &#xA;         *      IllegalMonitorStateException  if it fails.&#xA;         * &lt;li> Block until signalled, interrupted, or timed out&#xA;         * &lt;li> Reacquire by invoking specialized version of&#xA;         *      {@link #acquire} with saved state as argument.&#xA;         * &lt;li> If interrupted while blocked in step 4, throw InterruptedException&#xA;         * &lt;li> If timed out while blocked in step 4, return false, else true&#xA;         * &lt;/ol>&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/NullPointerException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@parameters.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="nanosTimeout">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../TimeUnit.class.xmi#//@classifiers.0/@members.9"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@parameters.0"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../lang/Thread.class.xmi#//@classifiers.0/@members.53"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="node">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.4"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="savedState">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.51">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.3/@variable"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="lastTime">
            <typeReference xsi:type="types:Long"/>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="timedout">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="literals:BooleanLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="interruptMode">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:WhileLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.6/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.50">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.3/@variable"/>
                    </value>
                  </expression>
                </statements>
                <statements xsi:type="statements:Break"/>
              </statement>
              <condition xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.1/@variable"/>
                <children xsi:type="literals:DecimalLongLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThanOrEqual"/>
              </condition>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="LockSupport.class.xmi#//@classifiers.0/@members.4"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.1/@variable"/>
                </next>
                <target xsi:type="classifiers:Class" href="LockSupport.class.xmi#//@classifiers.0"/>
              </expression>
            </statements>
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Break"/>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:NotEqual"/>
                <children xsi:type="expressions:NestedExpression">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.7/@variable"/>
                    <assignmentOperator xsi:type="operators:Assignment"/>
                    <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.13">
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.3/@variable"/>
                    </value>
                  </expression>
                </children>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
              </condition>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="now">
                <typeReference xsi:type="types:Long"/>
                <initialValue xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../lang/System.class.xmi#//@classifiers.0/@members.19"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../../../lang/System.class.xmi#//@classifiers.0"/>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.1/@variable"/>
                <assignmentOperator xsi:type="operators:AssignmentMinus"/>
                <value xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.8/@statement/@statements.3/@variable"/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.5/@variable"/>
                  <additiveOperators xsi:type="operators:Subtraction"/>
                </value>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.5/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.8/@statement/@statements.3/@variable"/>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.47">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.3/@variable"/>
            </child>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.7/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.11"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:ConditionalAndExpression">
            <children xsi:type="references:MethodCall" target="//@classifiers.0/@members.18">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.3/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.4/@variable"/>
            </children>
            <children xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:NotEqual"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.7/@variable"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.12"/>
            </children>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.9"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.3/@variable">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            </children>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.56/@members.14">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.7/@variable"/>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.7/@variable"/>
            <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </condition>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.18/@statements.6/@variable"/>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="isOwnedBy">
        <typeReference xsi:type="types:Boolean"/>
        <parameters xsi:type="parameters:OrdinaryParameter" name="sync">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </parameters>
        <annotationsAndModifiers xsi:type="modifiers:Final">
          <comments>//  support for instrumentation</comments>
          <comments>/**&#xA;         * Returns true if this condition was created by the given&#xA;         * synchronization object&#xA;         * @return true if owned&#xA;         */</comments>
        </annotationsAndModifiers>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.19/@parameters.0"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0">
              <next xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </next>
            </children>
          </returnValue>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="hasWaiters">
        <typeReference xsi:type="types:Boolean"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;         * Queries whether any threads are waiting on this condition.&#xA;         * Implements {@link AbstractQueuedSynchronizer#hasWaiters}&#xA;         * @return &lt;tt>true&lt;/tt> if there are any waiting threads.&#xA;         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}&#xA;         * returns false&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/IllegalMonitorStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Return">
                <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.20/@statements.1/@init">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
                </children>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.20/@statements.1/@init"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="w">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
          </init>
          <updates xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.20/@statements.1/@init"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.20/@statements.1/@init">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            </value>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="literals:BooleanLiteral"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getWaitQueueLength">
        <typeReference xsi:type="types:Int"/>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;         * Returns an estimate of the number of threads waiting on&#xA;         * this condition. &#xA;         * Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength}&#xA;         * @return the estimated number of waiting threads.&#xA;         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}&#xA;         * returns false&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/IllegalMonitorStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="n">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:PrefixUnaryModificationExpression">
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.21/@statements.1/@variable"/>
                  <operator xsi:type="operators:PlusPlus"/>
                </expression>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.21/@statements.2/@init">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
                </children>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.21/@statements.2/@init"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="w">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
          </init>
          <updates xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.21/@statements.2/@init"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.21/@statements.2/@init">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            </value>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.21/@statements.1/@variable"/>
        </statements>
      </members>
      <members xsi:type="members:ClassMethod" name="getWaitingThreads">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Protected">
          <comments>/**&#xA;         * Returns a collection containing those threads that may be&#xA;         * waiting on this Condition.  &#xA;         * Implements {@link AbstractQueuedSynchronizer#getWaitingThreads}&#xA;         * @return the collection of threads&#xA;         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}&#xA;         * returns false&#xA;         */</comments>
        </annotationsAndModifiers>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/IllegalMonitorStateException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statement>
          <condition xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Negate"/>
            <child xsi:type="references:MethodCall" target="//@classifiers.0/@members.28"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="list">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <typeArguments xsi:type="generics:QualifiedTypeArgument">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </typeArguments>
                <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <typeArguments xsi:type="generics:QualifiedTypeArgument">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </typeArguments>
                  <target xsi:type="classifiers:Class" href="../../ArrayList.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:LocalVariableStatement">
                  <variable name="t">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../lang/Thread.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.2/@init">
                      <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.8"/>
                    </initialValue>
                  </variable>
                </statements>
                <statements xsi:type="statements:Condition">
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.1/@variable">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../../ArrayList.class.xmi#//@classifiers.0/@members.18"/>
                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.2/@statement/@statements.0/@statement/@statements.0/@variable"/>
                      </next>
                    </expression>
                  </statement>
                  <condition xsi:type="expressions:EqualityExpression">
                    <equalityOperators xsi:type="operators:NotEqual"/>
                    <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.2/@statement/@statements.0/@statement/@statements.0/@variable"/>
                    <children xsi:type="literals:NullLiteral"/>
                  </condition>
                </statements>
              </statement>
              <condition xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.2/@init">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.5"/>
                </children>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.2"/>
                </children>
              </condition>
            </statements>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.2/@init"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="w">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@members.2"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.1"/>
          </init>
          <updates xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.2/@init"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.2/@init">
              <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@members.9"/>
            </value>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.56/@members.22/@statements.1/@variable"/>
        </statements>
      </members>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Condition implementation for a {@link&#xA;     * AbstractQueuedSynchronizer} serving as the basis of a {@link&#xA;     * Lock} implementation.&#xA;     *&#xA;     * &lt;p> Method documentation for this class describes mechanics,&#xA;     * not behavioral specifications from the point of view of Lock&#xA;     * and Condition users. Exported versions of this class will in&#xA;     * general need to be accompanied by documentation describing&#xA;     * condition semantics that rely on those of the associated&#xA;     * &lt;tt>AbstractQueuedSynchronizer&lt;/tt>.&#xA;     * &#xA;     * &lt;p> This class is Serializable, but all fields are transient,&#xA;     * so deserialized conditions have no waiters.&#xA;     */</comments>
      </annotationsAndModifiers>
      <implements xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Condition.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
      <implements xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </implements>
    </members>
    <members xsi:type="members:Field" name="unsafe">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.4"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * Setup to support compareAndSet. We need to natively implement&#xA;     * this here: For the sake of permitting future enhancements, we&#xA;     * cannot explicitly subclass AtomicInteger, which would be&#xA;     * efficient and useful otherwise. So, as the lesser of evils, we&#xA;     * natively implement using hotspot intrinsics API. And while we&#xA;     * are at it, we do the same for other CASable fields (which could&#xA;     * otherwise be done with atomic field updaters).&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="stateOffset">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="headOffset">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="tailOffset">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="waitStatusOffset">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="nextOffset">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="statements:Block">
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.58"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.65"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                  <next xsi:type="references:ReflectiveClassReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Class.class.xmi#//@classifiers.0/@members.84"/>
                      <arguments xsi:type="references:StringReference" value="state"/>
                    </next>
                  </next>
                </arguments>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.65"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                  <next xsi:type="references:ReflectiveClassReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Class.class.xmi#//@classifiers.0/@members.84"/>
                      <arguments xsi:type="references:StringReference" value="head"/>
                    </next>
                  </next>
                </arguments>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.65"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0">
                  <next xsi:type="references:ReflectiveClassReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Class.class.xmi#//@classifiers.0/@members.84"/>
                      <arguments xsi:type="references:StringReference" value="tail"/>
                    </next>
                  </next>
                </arguments>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.65"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <next xsi:type="references:ReflectiveClassReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Class.class.xmi#//@classifiers.0/@members.84"/>
                      <arguments xsi:type="references:StringReference" value="waitStatus"/>
                    </next>
                  </next>
                </arguments>
              </next>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.65"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2">
                  <next xsi:type="references:ReflectiveClassReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../lang/Class.class.xmi#//@classifiers.0/@members.84"/>
                      <arguments xsi:type="references:StringReference" value="next"/>
                    </next>
                  </next>
                </arguments>
              </next>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../lang/Error.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.63/@statements.0/@catcheBlocks.0/@parameter"/>
            </throwable>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <modifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:ClassMethod" name="compareAndSetHead">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="update">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * CAS head field. Used only by enq&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.78"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.59"/>
            <arguments xsi:type="literals:NullLiteral"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.64/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareAndSetTail">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expect">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="update">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * CAS tail field. Used only by enq&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.78"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.60"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.65/@parameters.1"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareAndSetWaitStatus">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expect">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="update">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * CAS waitStatus field of a node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.79"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.61"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.66/@parameters.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="compareAndSetNext">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="node">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="expect">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="update">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@members.2"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * CAS next field of a node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.57">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../../../sun/misc/Unsafe.class.xmi#//@classifiers.0/@members.78"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.62"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.1"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.67/@parameters.2"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Provides a framework for implementing blocking locks and related&#xA; * synchronizers (semaphores, events, etc) that rely on&#xA; * first-in-first-out (FIFO) wait queues.  This class is designed to&#xA; * be a useful basis for most kinds of synchronizers that rely on a&#xA; * single atomic &lt;tt>int&lt;/tt> value to represent state. Subclasses&#xA; * must define the protected methods that change this state, and which&#xA; * define what that state means in terms of this object being acquired&#xA; * or released.  Given these, the other methods in this class carry&#xA; * out all queuing and blocking mechanics. Subclasses can maintain&#xA; * other state fields, but only the atomically updated &lt;tt>int&lt;/tt>&#xA; * value manipulated using methods {@link #getState}, {@link&#xA; * #setState} and {@link #compareAndSetState} is tracked with respect&#xA; * to synchronization.&#xA; *&#xA; * &lt;p>Subclasses should be defined as non-public internal helper&#xA; * classes that are used to implement the synchronization properties&#xA; * of their enclosing class.  Class&#xA; * &lt;tt>AbstractQueuedSynchronizer&lt;/tt> does not implement any&#xA; * synchronization interface.  Instead it defines methods such as&#xA; * {@link #acquireInterruptibly} that can be invoked as&#xA; * appropriate by concrete locks and related synchronizers to&#xA; * implement their public methods. &#xA; *&#xA; * &lt;p>This class supports either or both a default &lt;em>exclusive&lt;/em>&#xA; * mode and a &lt;em>shared&lt;/em> mode. When acquired in exclusive mode,&#xA; * attempted acquires by other threads cannot succeed. Shared mode&#xA; * acquires by multiple threads may (but need not) succeed. This class&#xA; * does not &amp;quot;understand&amp;quot; these differences except in the&#xA; * mechanical sense that when a shared mode acquire succeeds, the next&#xA; * waiting thread (if one exists) must also determine whether it can&#xA; * acquire as well. Threads waiting in the different modes share the&#xA; * same FIFO queue. Usually, implementation subclasses support only&#xA; * one of these modes, but both can come into play for example in a&#xA; * {@link ReadWriteLock}. Subclasses that support only exclusive or&#xA; * only shared modes need not define the methods supporting the unused mode.&#xA; *&#xA; * &lt;p>This class defines a nested {@link ConditionObject} class that&#xA; * can be used as a {@link Condition} implementation by subclasses&#xA; * supporting exclusive mode for which method {@link&#xA; * #isHeldExclusively} reports whether synchronization is exclusively&#xA; * held with respect to the current thread, method {@link #release}&#xA; * invoked with the current {@link #getState} value fully releases&#xA; * this object, and {@link #acquire}, given this saved state value,&#xA; * eventually restores this object to its previous acquired state.  No&#xA; * &lt;tt>AbstractQueuedSynchronizer&lt;/tt> method otherwise creates such a&#xA; * condition, so if this constraint cannot be met, do not use it.  The&#xA; * behavior of {@link ConditionObject} depends of course on the&#xA; * semantics of its synchronizer implementation.&#xA; * &#xA; * &lt;p> This class provides inspection, instrumentation, and monitoring&#xA; * methods for the internal queue, as well as similar methods for&#xA; * condition objects. These can be exported as desired into classes&#xA; * using an &lt;tt>AbstractQueuedSynchronizer&lt;/tt> for their&#xA; * synchronization mechanics.&#xA; *&#xA; * &lt;p> Serialization of this class stores only the underlying atomic&#xA; * integer maintaining state, so deserialized objects have empty&#xA; * thread queues. Typical subclasses requiring serializability will&#xA; * define a &lt;tt>readObject&lt;/tt> method that restores this to a known&#xA; * initial state upon deserialization.&#xA; *&#xA; * &lt;h3>Usage&lt;/h3>&#xA; *&#xA; * &lt;p> To use this class as the basis of a synchronizer, redefine the&#xA; * following methods, as applicable, by inspecting and/or modifying&#xA; * the synchronization state using {@link #getState}, {@link&#xA; * #setState} and/or {@link #compareAndSetState}: &#xA; *&#xA; * &lt;ul>&#xA; * &lt;li> {@link #tryAcquire}&#xA; * &lt;li> {@link #tryRelease}&#xA; * &lt;li> {@link #tryAcquireShared}&#xA; * &lt;li> {@link #tryReleaseShared}&#xA; * &lt;li> {@link #isHeldExclusively}&#xA; *&lt;/ul>&#xA; *&#xA; * Each of these methods by default throws {@link&#xA; * UnsupportedOperationException}.  Implementations of these methods&#xA; * must be internally thread-safe, and should in general be short and&#xA; * not block. Defining these methods is the &lt;em>only&lt;/em> supported&#xA; * means of using this class. All other methods are declared&#xA; * &lt;tt>final&lt;/tt> because they cannot be independently varied.&#xA; *&#xA; * &lt;p> Even though this class is based on an internal FIFO queue, it&#xA; * does not automatically enforce FIFO acquisition policies.  The core&#xA; * of exclusive synchronization takes the form:&#xA; *&#xA; * &lt;pre>&#xA; * Acquire:&#xA; *     while (!tryAcquire(arg)) {&#xA; *        &lt;em>enqueue thread if it is not already queued&lt;/em>;&#xA; *        &lt;em>possibly block current thread&lt;/em>;&#xA; *     }&#xA; *&#xA; * Release:&#xA; *     if (tryRelease(arg))&#xA; *        &lt;em>unblock the first queued thread&lt;/em>;&#xA; * &lt;/pre>&#xA; *&#xA; * (Shared mode is similar but may involve cascading signals.)&#xA; *&#xA; * &lt;p> Because checks in acquire are invoked before enqueuing, a newly&#xA; * acquiring thread may &lt;em>barge&lt;/em> ahead of others that are&#xA; * blocked and queued. However, you can, if desired, define&#xA; * &lt;tt>tryAcquire&lt;/tt> and/or &lt;tt>tryAcquireShared&lt;/tt> to disable&#xA; * barging by internally invoking one or more of the inspection&#xA; * methods. In particular, a strict FIFO lock can define&#xA; * &lt;tt>tryAcquire&lt;/tt> to immediately return &lt;tt>false&lt;/tt> if {@link&#xA; * #getFirstQueuedThread} does not return the current thread.  A&#xA; * normally preferable non-strict fair version can immediately return&#xA; * &lt;tt>false&lt;/tt> only if {@link #hasQueuedThreads} returns&#xA; * &lt;tt>true&lt;/tt> and &lt;tt>getFirstQueuedThread&lt;/tt> is not the current&#xA; * thread; or equivalently, that &lt;tt>getFirstQueuedThread&lt;/tt> is both&#xA; * non-null and not the current thread.  Further variations are&#xA; * possible.&#xA; *&#xA; * &lt;p> Throughput and scalability are generally highest for the&#xA; * default barging (also known as &lt;em>greedy&lt;/em>,&#xA; * &lt;em>renouncement&lt;/em>, and &lt;em>convoy-avoidance&lt;/em>) strategy.&#xA; * While this is not guaranteed to be fair or starvation-free, earlier&#xA; * queued threads are allowed to recontend before later queued&#xA; * threads, and each recontention has an unbiased chance to succeed&#xA; * against incoming threads.  Also, while acquires do not&#xA; * &amp;quot;spin&amp;quot; in the usual sense, they may perform multiple&#xA; * invocations of &lt;tt>tryAcquire&lt;/tt> interspersed with other&#xA; * computations before blocking.  This gives most of the benefits of&#xA; * spins when exclusive synchronization is only briefly held, without&#xA; * most of the liabilities when it isn't. If so desired, you can&#xA; * augment this by preceding calls to acquire methods with&#xA; * &quot;fast-path&quot; checks, possibly prechecking {@link #hasContended}&#xA; * and/or {@link #hasQueuedThreads} to only do so if the synchronizer&#xA; * is likely not to be contended.&#xA; *&#xA; * &lt;p> This class provides an efficient and scalable basis for&#xA; * synchronization in part by specializing its range of use to&#xA; * synchronizers that can rely on &lt;tt>int&lt;/tt> state, acquire, and&#xA; * release parameters, and an internal FIFO wait queue. When this does&#xA; * not suffice, you can build synchronizers from a lower level using&#xA; * {@link java.util.concurrent.atomic atomic} classes, your own custom&#xA; * {@link java.util.Queue} classes, and {@link LockSupport} blocking&#xA; * support.&#xA; * &#xA; * &lt;h3>Usage Examples&lt;/h3>&#xA; *&#xA; * &lt;p>Here is a non-reentrant mutual exclusion lock class that uses&#xA; * the value zero to represent the unlocked state, and one to&#xA; * represent the locked state. It also supports conditions and exposes&#xA; * one of the instrumentation methods:&#xA; *&#xA; * &lt;pre>&#xA; * class Mutex implements Lock, java.io.Serializable {&#xA; *&#xA; *    // Our internal helper class&#xA; *    private static class Sync extends AbstractQueuedSynchronizer {&#xA; *      // Report whether in locked state&#xA; *      protected boolean isHeldExclusively() { &#xA; *        return getState() == 1; &#xA; *      }&#xA; *&#xA; *      // Acquire the lock if state is zero&#xA; *      public boolean tryAcquire(int acquires) {&#xA; *        assert acquires == 1; // Otherwise unused&#xA; *        return compareAndSetState(0, 1);&#xA; *      }&#xA; *&#xA; *      // Release the lock by setting state to zero&#xA; *      protected boolean tryRelease(int releases) {&#xA; *        assert releases == 1; // Otherwise unused&#xA; *        if (getState() == 0) throw new IllegalMonitorStateException();&#xA; *        setState(0);&#xA; *        return true;&#xA; *      }&#xA; *       &#xA; *      // Provide a Condition&#xA; *      Condition newCondition() { return new ConditionObject(); }&#xA; *&#xA; *      // Deserialize properly&#xA; *      private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {&#xA; *        s.defaultReadObject();&#xA; *        setState(0); // reset to unlocked state&#xA; *      }&#xA; *    }&#xA; *&#xA; *    // The sync object does all the hard work. We just forward to it.&#xA; *    private final Sync sync = new Sync();&#xA; *&#xA; *    public void lock()                { sync.acquire(1); }&#xA; *    public boolean tryLock()          { return sync.tryAcquire(1); }&#xA; *    public void unlock()              { sync.release(1); }&#xA; *    public Condition newCondition()   { return sync.newCondition(); }&#xA; *    public boolean isLocked()         { return sync.isHeldExclusively(); }&#xA; *    public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }&#xA; *    public void lockInterruptibly() throws InterruptedException { &#xA; *      sync.acquireInterruptibly(1);&#xA; *    }&#xA; *    public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException {&#xA; *      return sync.tryAcquireNanos(1, unit.toNanos(timeout));&#xA; *    }&#xA; * }&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p> Here is a latch class that is like a {@link CountDownLatch}&#xA; * except that it only requires a single &lt;tt>signal&lt;/tt> to&#xA; * fire. Because a latch is non-exclusive, it uses the &lt;tt>shared&lt;/tt>&#xA; * acquire and release methods.&#xA; *&#xA; * &lt;pre>&#xA; * class BooleanLatch {&#xA; *&#xA; *    private static class Sync extends AbstractQueuedSynchronizer {&#xA; *      boolean isSignalled() { return getState() != 0; }&#xA; *&#xA; *      protected int tryAcquireShared(int ignore) {&#xA; *        return isSignalled()? 1 : -1;&#xA; *      }&#xA; *        &#xA; *      protected boolean tryReleaseShared(int ignore) {&#xA; *        setState(1);&#xA; *        return true;&#xA; *      }&#xA; *    }&#xA; *&#xA; *    private final Sync sync = new Sync();&#xA; *    public boolean isSignalled() { return sync.isSignalled(); }&#xA; *    public void signal()         { sync.releaseShared(1); }&#xA; *    public void await() throws InterruptedException {&#xA; *      sync.acquireSharedInterruptibly(1);&#xA; *    }&#xA; * }&#xA; *&#xA; * &lt;/pre>&#xA; *&#xA; * @since 1.5&#xA; * @author Doug Lea&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
