<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="CompletionService.java">
  <comments>/*&#xA; * @(#)CompletionService.java&#x9;1.1 04/01/12&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>concurrent</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="CompletionService">
    <typeParameters name="V"/>
    <members xsi:type="members:InterfaceMethod" name="submit">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Submits a value-returning task for execution and returns a Future&#xA;     * representing the pending results of the task. Upon completion,&#xA;     * this task may be taken or polled.&#xA;     *&#xA;     * @param task the task to submit&#xA;     * @return a Future representing pending completion of the task&#xA;     * @throws RejectedExecutionException if task cannot be scheduled&#xA;     * for execution&#xA;     * @throws NullPointerException if task null     &#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Callable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="submit">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Submits a Runnable task for execution and returns a Future &#xA;     * representing that task.Upon completion,&#xA;     * this task may be taken or polled.&#xA;     *&#xA;     * @param task the task to submit&#xA;     * @param result the result to return upon successful completion&#xA;     * @return a Future representing pending completion of the task,&#xA;     * and whose &lt;tt>get()&lt;/tt> method will return the given result value &#xA;     * upon completion&#xA;     * @throws RejectedExecutionException if task cannot be scheduled&#xA;     * for execution&#xA;     * @throws NullPointerException if task null     &#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="task">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../lang/Runnable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="take">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves and removes the Future representing the next&#xA;     * completed task, waiting if none are yet present.&#xA;     * @return the Future representing the next completed task&#xA;     * @throws InterruptedException if interrupted while waiting.&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="poll">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves and removes the Future representing the next&#xA;     * completed task or &lt;tt>null&lt;/tt> if none are present.&#xA;     *&#xA;     * @return the Future representing the next completed task, or&#xA;     * &lt;tt>null&lt;/tt> if none are present.&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="poll">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves and removes the Future representing the next&#xA;     * completed task, waiting if necessary up to the specified wait&#xA;     * time if none are yet present.&#xA;     * @param timeout how long to wait before giving up, in units of&#xA;     * &lt;tt>unit&lt;/tt>&#xA;     * @param unit a &lt;tt>TimeUnit&lt;/tt> determining how to interpret the&#xA;     * &lt;tt>timeout&lt;/tt> parameter&#xA;     * @return the Future representing the next completed task or&#xA;     * &lt;tt>null&lt;/tt> if the specified waiting time elapses before one&#xA;     * is present.&#xA;     * @throws InterruptedException if interrupted while waiting.&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Future.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="timeout">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unit">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Enumeration" href="TimeUnit.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/InterruptedException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A service that decouples the production of new asynchronous tasks&#xA; * from the consumption of the results of completed tasks.  Producers&#xA; * &lt;tt>submit&lt;/tt> tasks for execution. Consumers &lt;tt>take&lt;/tt>&#xA; * completed tasks and process their results in the order they&#xA; * complete.  A &lt;tt>CompletionService&lt;/tt> can for example be used to&#xA; * manage asynchronous IO, in which tasks that perform reads are&#xA; * submitted in one part of a program or system, and then acted upon&#xA; * in a different part of the program when the reads complete,&#xA; * possibly in a different order than they were requested.&#xA;&#xA; * &lt;p>&#xA; *&#xA; * Typically, a &lt;tt>CompletionService&lt;/tt> relies on a separate {@link&#xA; * Executor} to actually execute the tasks, in which case the&#xA; * &lt;tt>CompletionService&lt;/tt> only manages an internal completion&#xA; * queue. The {@link ExecutorCompletionService} class provides an&#xA; * implementation of this approach.&#xA; *&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
