<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Comparator.java">
  <comments>/*&#xA; * @(#)Comparator.java&#x9;1.22 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Comparator">
    <typeParameters name="T"/>
    <members xsi:type="members:InterfaceMethod" name="compare">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Compares its two arguments for order.  Returns a negative integer,&#xA;     * zero, or a positive integer as the first argument is less than, equal&#xA;     * to, or greater than the second.&lt;p>&#xA;     *&#xA;     * The implementor must ensure that &lt;tt>sgn(compare(x, y)) ==&#xA;     * -sgn(compare(y, x))&lt;/tt> for all &lt;tt>x&lt;/tt> and &lt;tt>y&lt;/tt>.  (This&#xA;     * implies that &lt;tt>compare(x, y)&lt;/tt> must throw an exception if and only&#xA;     * if &lt;tt>compare(y, x)&lt;/tt> throws an exception.)&lt;p>&#xA;     *&#xA;     * The implementor must also ensure that the relation is transitive:&#xA;     * &lt;tt>((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))&lt;/tt> implies&#xA;     * &lt;tt>compare(x, z)&amp;gt;0&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Finally, the implementer must ensure that &lt;tt>compare(x, y)==0&lt;/tt>&#xA;     * implies that &lt;tt>sgn(compare(x, z))==sgn(compare(y, z))&lt;/tt> for all&#xA;     * &lt;tt>z&lt;/tt>.&lt;p>&#xA;     *&#xA;     * It is generally the case, but &lt;i>not&lt;/i> strictly required that &#xA;     * &lt;tt>(compare(x, y)==0) == (x.equals(y))&lt;/tt>.  Generally speaking,&#xA;     * any comparator that violates this condition should clearly indicate&#xA;     * this fact.  The recommended language is &quot;Note: this comparator&#xA;     * imposes orderings that are inconsistent with equals.&quot;&#xA;     * &#xA;     * @param o1 the first object to be compared.&#xA;     * @param o2 the second object to be compared.&#xA;     * @return a negative integer, zero, or a positive integer as the&#xA;     * &#x9;       first argument is less than, equal to, or greater than the&#xA;     *&#x9;       second. &#xA;     * @throws ClassCastException if the arguments' types prevent them from&#xA;     * &#x9;       being compared by this Comparator.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o1">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o2">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * &#xA;     * Indicates whether some other object is &amp;quot;equal to&amp;quot; this&#xA;     * Comparator.  This method must obey the general contract of&#xA;     * &lt;tt>Object.equals(Object)&lt;/tt>.  Additionally, this method can return&#xA;     * &lt;tt>true&lt;/tt> &lt;i>only&lt;/i> if the specified Object is also a comparator&#xA;     * and it imposes the same ordering as this comparator.  Thus,&#xA;     * &lt;code>comp1.equals(comp2)&lt;/code> implies that &lt;tt>sgn(comp1.compare(o1,&#xA;     * o2))==sgn(comp2.compare(o1, o2))&lt;/tt> for every object reference&#xA;     * &lt;tt>o1&lt;/tt> and &lt;tt>o2&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Note that it is &lt;i>always&lt;/i> safe &lt;i>not&lt;/i> to override&#xA;     * &lt;tt>Object.equals(Object)&lt;/tt>.  However, overriding this method may,&#xA;     * in some cases, improve performance by allowing programs to determine&#xA;     * that two distinct Comparators impose the same order.&#xA;     *&#xA;     * @param   obj   the reference object with which to compare.&#xA;     * @return  &lt;code>true&lt;/code> only if the specified object is also&#xA;     *&#x9;&#x9;a comparator and it imposes the same ordering as this&#xA;     *&#x9;&#x9;comparator.&#xA;     * @see     java.lang.Object#equals(java.lang.Object)&#xA;     * @see java.lang.Object#hashCode()&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A comparison function, which imposes a &lt;i>total ordering&lt;/i> on some&#xA; * collection of objects.  Comparators can be passed to a sort method (such as&#xA; * &lt;tt>Collections.sort&lt;/tt>) to allow precise control over the sort order.&#xA; * Comparators can also be used to control the order of certain data&#xA; * structures (such as &lt;tt>TreeSet&lt;/tt> or &lt;tt>TreeMap&lt;/tt>).&lt;p>&#xA; *&#xA; * The ordering imposed by a Comparator &lt;tt>c&lt;/tt> on a set of elements&#xA; * &lt;tt>S&lt;/tt> is said to be &lt;i>consistent with equals&lt;/i> if and only if&#xA; * &lt;tt>(compare((Object)e1, (Object)e2)==0)&lt;/tt> has the same boolean value as&#xA; * &lt;tt>e1.equals((Object)e2)&lt;/tt> for every &lt;tt>e1&lt;/tt> and &lt;tt>e2&lt;/tt> in&#xA; * &lt;tt>S&lt;/tt>.&lt;p>&#xA; *&#xA; * Caution should be exercised when using a comparator capable of imposing an&#xA; * ordering inconsistent with equals to order a sorted set (or sorted map).&#xA; * Suppose a sorted set (or sorted map) with an explicit Comparator &lt;tt>c&lt;/tt>&#xA; * is used with elements (or keys) drawn from a set &lt;tt>S&lt;/tt>.  If the&#xA; * ordering imposed by &lt;tt>c&lt;/tt> on &lt;tt>S&lt;/tt> is inconsistent with equals,&#xA; * the sorted set (or sorted map) will behave &quot;strangely.&quot;  In particular the&#xA; * sorted set (or sorted map) will violate the general contract for set (or&#xA; * map), which is defined in terms of &lt;tt>equals&lt;/tt>.&lt;p>&#xA; * &#xA; * For example, if one adds two keys &lt;tt>a&lt;/tt> and &lt;tt>b&lt;/tt> such that&#xA; * &lt;tt>(a.equals((Object)b) &amp;&amp; c.compare((Object)a, (Object)b) != 0)&lt;/tt> to a&#xA; * sorted set with comparator &lt;tt>c&lt;/tt>, the second &lt;tt>add&lt;/tt> operation&#xA; * will return false (and the size of the sorted set will not increase)&#xA; * because &lt;tt>a&lt;/tt> and &lt;tt>b&lt;/tt> are equivalent from the sorted set's&#xA; * perspective.&lt;p>&#xA; *&#xA; * Note: It is generally a good idea for comparators to implement&#xA; * &lt;tt>java.io.Serializable&lt;/tt>, as they may be used as ordering methods in&#xA; * serializable data structures (like &lt;tt>TreeSet&lt;/tt>, &lt;tt>TreeMap&lt;/tt>).  In&#xA; * order for the data structure to serialize successfully, the comparator (if&#xA; * provided) must implement &lt;tt>Serializable&lt;/tt>.&lt;p>&#xA; *&#xA; * For the mathematically inclined, the &lt;i>relation&lt;/i> that defines&#xA; * the &lt;i>total order&lt;/i> that a given comparator &lt;tt>c&lt;/tt> imposes on a&#xA; * given set of objects &lt;tt>S&lt;/tt> is:&lt;pre>&#xA; *       {(x, y) such that c.compare((Object)x, (Object)y) &amp;lt;= 0}.&#xA; * &lt;/pre> The &lt;i>quotient&lt;/i> for this total order is:&lt;pre>&#xA; *       {(x, y) such that c.compare((Object)x, (Object)y) == 0}.&#xA; * &lt;/pre>&#xA; *&#xA; * It follows immediately from the contract for &lt;tt>compare&lt;/tt> that the&#xA; * quotient is an &lt;i>equivalence relation&lt;/i> on &lt;tt>S&lt;/tt>, and that the&#xA; * natural ordering is a &lt;i>total order&lt;/i> on &lt;tt>S&lt;/tt>.  When we say that&#xA; * the ordering imposed by &lt;tt>c&lt;/tt> on &lt;tt>S&lt;/tt> is &lt;i>consistent with&#xA; * equals&lt;/i>, we mean that the quotient for the natural ordering is the&#xA; * equivalence relation defined by the objects' &lt;tt>equals(Object)&lt;/tt>&#xA; * method(s):&lt;pre>&#xA; *       {(x, y) such that x.equals((Object)y)}.&#xA; * &lt;/pre>&lt;p>&#xA; *&#xA; * This interface is a member of the &#xA; * &lt;a href=&quot;{@docRoot}/../guide/collections/index.html&quot;>&#xA; * Java Collections Framework&lt;/a>.&#xA; *&#xA; * @author  Josh Bloch&#xA; * @author  Neal Gafter&#xA; * @version 1.22, 12/19/03&#xA; * @see Comparable&#xA; * @see Arrays#sort(Object[], Comparator)&#xA; * @see TreeMap&#xA; * @see TreeSet&#xA; * @see SortedMap&#xA; * @see SortedSet&#xA; * @see java.io.Serializable&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
