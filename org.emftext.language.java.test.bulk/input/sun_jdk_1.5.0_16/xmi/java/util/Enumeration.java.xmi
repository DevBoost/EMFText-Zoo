<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/types ../../java.ecore#/16" name="Enumeration.java">
  <comments>/*&#xA; * @(#)Enumeration.java&#x9;1.22 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Enumeration">
    <typeParameters name="E"/>
    <members xsi:type="members:InterfaceMethod" name="hasMoreElements">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Tests if this enumeration contains more elements.&#xA;     *&#xA;     * @return  &lt;code>true&lt;/code> if and only if this enumeration object&#xA;     *           contains at least one more element to provide;&#xA;     *          &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="nextElement">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0">
          <comments>/**&#xA;     * Returns the next element of this enumeration if this enumeration&#xA;     * object has at least one more element to provide.&#xA;     *&#xA;     * @return     the next element of this enumeration.&#xA;     * @exception  NoSuchElementException  if no more elements exist.&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object that implements the Enumeration interface generates a&#xA; * series of elements, one at a time. Successive calls to the&#xA; * &lt;code>nextElement&lt;/code> method return successive elements of the&#xA; * series.&#xA; * &lt;p>&#xA; * For example, to print all elements of a vector &lt;i>v&lt;/i>:&#xA; * &lt;blockquote>&lt;pre>&#xA; *     for (Enumeration e = v.elements() ; e.hasMoreElements() ;) {&#xA; *         System.out.println(e.nextElement());&lt;br>&#xA; *     }&#xA; * &lt;/pre>&lt;/blockquote>&#xA; * &lt;p>&#xA; * Methods are provided to enumerate through the elements of a&#xA; * vector, the keys of a hashtable, and the values in a hashtable.&#xA; * Enumerations are also used to specify the input streams to a&#xA; * &lt;code>SequenceInputStream&lt;/code>.&#xA; * &lt;p>&#xA; * NOTE: The functionality of this interface is duplicated by the Iterator&#xA; * interface.  In addition, Iterator adds an optional remove operation, and&#xA; * has shorter method names.  New implementations should consider using&#xA; * Iterator in preference to Enumeration.&#xA; *&#xA; * @see     java.util.Iterator&#xA; * @see     java.io.SequenceInputStream&#xA; * @see     java.util.Enumeration#nextElement()&#xA; * @see     java.util.Hashtable&#xA; * @see     java.util.Hashtable#elements()&#xA; * @see     java.util.Hashtable#keys()&#xA; * @see     java.util.Vector&#xA; * @see     java.util.Vector#elements()&#xA; *&#xA; * @author  Lee Boynton&#xA; * @version 1.22, 12/19/03&#xA; * @since   JDK1.0&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
