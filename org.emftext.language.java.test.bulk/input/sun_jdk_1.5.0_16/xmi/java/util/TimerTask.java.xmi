<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="TimerTask.java">
  <comments>/*&#xA; * @(#)TimerTask.java&#x9;1.10 04/02/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Class" name="TimerTask">
    <members xsi:type="members:Field" name="lock">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * This object is used to control access to the TimerTask internals.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="state">
      <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * The state of this task, chosen from the constants below.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="VIRGIN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * This task has not yet been scheduled.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SCHEDULED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * This task is scheduled for execution.  If it is a non-repeating task,&#xA;     * it has not yet been executed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="EXECUTED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * This non-repeating task has already executed (or is currently&#xA;     * executing) and has not been cancelled.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CANCELLED">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>/**&#xA;     * This task has been cancelled (with a call to TimerTask.cancel).&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="nextExecutionTime">
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;     * Next execution time for this task in the format returned by&#xA;     * System.currentTimeMillis, assuming this task is scheduled for execution.&#xA;     * For repeating tasks, this field is updated prior to each task execution.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Field" name="period">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Long">
        <comments>/**&#xA;     * Period in milliseconds for repeating tasks.  A positive value indicates&#xA;     * fixed-rate execution.  A negative value indicates fixed-delay execution.&#xA;     * A value of 0 indicates a non-repeating task.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:Constructor" name="TimerTask">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Creates a new timer task.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="run">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The action to be performed by this timer task.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="cancel">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Cancels this timer task.  If the task has been scheduled for one-time&#xA;     * execution and has not yet run, or has not yet been scheduled, it will&#xA;     * never run.  If the task has been scheduled for repeated execution, it&#xA;     * will never run again.  (If the task is running when this call occurs,&#xA;     * the task will run to completion, but will never run again.)&#xA;     *&#xA;     * &lt;p>Note that calling this method from within the &lt;tt>run&lt;/tt> method of&#xA;     * a repeating timer task absolutely guarantees that the timer task will&#xA;     * not run again.&#xA;     *&#xA;     * &lt;p>This method may be called repeatedly; the second and subsequent &#xA;     * calls have no effect.&#xA;     *&#xA;     * @return true if this task is scheduled for one-time execution and has&#xA;     *         not yet run, or this task is scheduled for repeated execution.&#xA;     *         Returns false if the task was scheduled for one-time execution&#xA;     *         and has already run, or if the task was never scheduled, or if&#xA;     *         the task was already cancelled.  (Loosely speaking, this method&#xA;     *         returns &lt;tt>true&lt;/tt> if it prevents one or more scheduled&#xA;     *         executions from taking place.)&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="result">
            <typeReference xsi:type="types:Boolean"/>
            <initialValue xsi:type="expressions:NestedExpression">
              <expression xsi:type="expressions:EqualityExpression">
                <equalityOperators xsi:type="operators:Equal"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </expression>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5"/>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@statements.0/@variable"/>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="scheduledExecutionTime">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;i>scheduled&lt;/i> execution time of the most recent&#xA;     * &lt;i>actual&lt;/i> execution of this task.  (If this method is invoked&#xA;     * while task execution is in progress, the return value is the scheduled&#xA;     * execution time of the ongoing task execution.)&#xA;     *&#xA;     * &lt;p>This method is typically invoked from within a task's run method, to&#xA;     * determine whether the current execution of the task is sufficiently&#xA;     * timely to warrant performing the scheduled activity:&#xA;     * &lt;pre>&#xA;     *   public void run() {&#xA;     *       if (System.currentTimeMillis() - scheduledExecutionTime() >=&#xA;     *           MAX_TARDINESS)&#xA;     *               return;  // Too late; skip this execution.&#xA;     *       // Perform the task&#xA;     *   }&#xA;     * &lt;/pre>&#xA;     * This method is typically &lt;i>not&lt;/i> used in conjunction with&#xA;     * &lt;i>fixed-delay execution&lt;/i> repeating tasks, as their scheduled&#xA;     * execution times are allowed to drift over time, and so are not terribly&#xA;     * significant.&#xA;     *&#xA;     * @return the time at which the most recent execution of this task was&#xA;     *         scheduled to occur, in the format returned by Date.getTime().&#xA;     *         The return value is undefined if the task has yet to commence&#xA;     *         its first execution.&#xA;     * @see Date#getTime()&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:SynchronizedBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:ConditionalExpression">
              <child xsi:type="expressions:RelationExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <children xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
                <relationOperators xsi:type="operators:LessThan"/>
              </child>
              <expressionIf xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </expressionIf>
              <expressionElse xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6"/>
                <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
                <additiveOperators xsi:type="operators:Subtraction"/>
              </expressionElse>
            </expression>
          </returnValue>
        </statements>
        <lockProvider xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A task that can be scheduled for one-time or repeated execution by a Timer.&#xA; *&#xA; * @author  Josh Bloch&#xA; * @version 1.10, 02/19/04&#xA; * @see&#x9;    Timer&#xA; * @since   1.3&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../lang/Runnable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
