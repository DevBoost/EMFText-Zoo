<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="AbstractSequentialList.java">
  <comments>/*&#xA; * @(#)AbstractSequentialList.java&#x9;1.33 04/02/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Class" name="AbstractSequentialList">
    <typeParameters name="E"/>
    <members xsi:type="members:Constructor" name="AbstractSequentialList">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Sole constructor.  (For invocation by subclass constructors, typically&#xA;     * implicit.)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="get">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the element at the specified position in this list. &lt;p>&#xA;     *&#xA;     * This implementation first gets a list iterator pointing to the indexed&#xA;     * element (with &lt;tt>listIterator(index)&lt;/tt>).  Then, it gets the element&#xA;     * using &lt;tt>ListIterator.next&lt;/tt> and returns it.&#xA;     * @param index index of element to return.&#xA;     *&#xA;     * @return the element at the specified position in this list.  &#xA;     * @throws IndexOutOfBoundsException if the specified index is out of&#xA;     *         range (&lt;tt>index &amp;lt; 0 || index &amp;gt;= size()&lt;/tt>).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="ListIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:NestedExpression">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="ListIterator.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </expression>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="expressions:NestedExpression">
              <expression xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="Index: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </expression>
            </throwable>
          </statements>
          <parameter name="exc">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="set">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="element">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Replaces the element at the specified position in this list with the&#xA;     * specified element. &lt;p>&#xA;     *&#xA;     * This implementation first gets a list iterator pointing to the&#xA;     * indexed element (with &lt;tt>listIterator(index)&lt;/tt>).  Then, it gets&#xA;     * the current element using &lt;tt>ListIterator.next&lt;/tt> and replaces it&#xA;     * with &lt;tt>ListIterator.set&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Note that this implementation will throw an&#xA;     * UnsupportedOperationException if list iterator does not implement&#xA;     * the set operation.&#xA;     *&#xA;     * @param index index of element to replace.&#xA;     * @param element element to be stored at the specified position.&#xA;     * @return the element previously at the specified position.&#xA;     * @throws    UnsupportedOperationException set is not supported&#xA;     *&#x9;&#x9;  by this list.&#xA;     * @throws    NullPointerException this list does not permit null&#xA;     * &#x9;&#x9;  elements and one of the elements of &lt;code>c&lt;/code> is null.&#xA;     * @throws    ClassCastException class of the specified element&#xA;     * &#x9;&#x9;  prevents it from being added to this list.&#xA;     * @throws    IllegalArgumentException some aspect of the specified&#xA;     *&#x9;&#x9;  element prevents it from being added to this list.&#xA;     * @throws    IndexOutOfBoundsException index out of range&#xA;     *&#x9;&#x9;  &lt;tt>(index &amp;lt; 0 || index &amp;gt;= size()&lt;/tt>).&#xA;     * @throws    IllegalArgumentException fromIndex &amp;gt; toIndex.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="ListIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="oldVal">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="ListIterator.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="ListIterator.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
            </next>
          </expression>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.1/@statements.0/@variable"/>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="expressions:NestedExpression">
              <expression xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="Index: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </expression>
            </throwable>
          </statements>
          <parameter name="exc">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="add">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="element">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the specified element at the specified position in this list.&#xA;     * Shifts the element currently at that position (if any) and any&#xA;     * subsequent elements to the right (adds one to their indices).&lt;p>&#xA;     *&#xA;     * This implementation first gets a list iterator pointing to the&#xA;     * indexed element (with &lt;tt>listIterator(index)&lt;/tt>).  Then, it inserts&#xA;     * the specified element with &lt;tt>ListIterator.add&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Note that this implementation will throw an&#xA;     * &lt;tt>UnsupportedOperationException&lt;/tt> if list iterator does not&#xA;     * implement the &lt;tt>add&lt;/tt> operation.&#xA;     *&#xA;     * @param index index at which the specified element is to be inserted.&#xA;     * @param element element to be inserted.&#xA;     * @throws UnsupportedOperationException if the &lt;tt>add&lt;/tt> operation is&#xA;     *&#x9;&#x9;  not supported by this list.&#xA;     * @throws NullPointerException this list does not permit &lt;tt>null&lt;/tt>&#xA;     * &#x9;&#x9;  elements and one of the elements of &lt;code>c&lt;/code> is&#xA;     * &#x9;&#x9;  &lt;tt>null&lt;/tt>.&#xA;     * @throws    ClassCastException if the class of the specified element&#xA;     * &#x9;&#x9;  prevents it from being added to this list.&#xA;     * @throws    IllegalArgumentException if some aspect of the specified&#xA;     *&#x9;&#x9;  element prevents it from being added to this list.&#xA;     * @throws IndexOutOfBoundsException if the specified index is out of&#xA;     *            range (&lt;tt>index &amp;lt; 0 || index &amp;gt; size()&lt;/tt>).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="ListIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="ListIterator.class.xmi#//@classifiers.0/@members.8"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.1"/>
          </next>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="remove">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the element at the specified position in this list.  Shifts any&#xA;     * subsequent elements to the left (subtracts one from their indices).&lt;p>&#xA;     *&#xA;     * This implementation first gets a list iterator pointing to the&#xA;     * indexed element (with &lt;tt>listIterator(index)&lt;/tt>).  Then, it removes&#xA;     * the element with &lt;tt>ListIterator.remove&lt;/tt>.&lt;p>&#xA;     *&#xA;     * Note that this implementation will throw an&#xA;     * &lt;tt>UnsupportedOperationException&lt;/tt> if list iterator does not&#xA;     * implement the &lt;tt>remove&lt;/tt> operation.&#xA;     *&#xA;     * @param  index index of the element to be removed from the List.&#xA;     * @return the element that was removed from the list.&#xA;     * @throws UnsupportedOperationException if the &lt;tt>remove&lt;/tt> operation&#xA;     *&#x9;&#x9;  is not supported by this list.&#xA;     * @throws IndexOutOfBoundsException if the specified index is out of&#xA;     * &#x9;&#x9;  range (index &amp;lt; 0 || index &amp;gt;= size()).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="e">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="ListIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="outCast">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="ListIterator.class.xmi#//@classifiers.0/@members.1"/>
              </next>
            </value>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="expressions:NestedExpression">
              <expression xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../lang/IndexOutOfBoundsException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="Index: "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </expression>
            </throwable>
          </statements>
          <parameter name="exc">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NoSuchElementException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="ListIterator.class.xmi#//@classifiers.0/@members.6"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:NestedExpression">
          <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@statements.1/@variable"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="addAll">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:ExtendsTypeArgument">
              <extendTypes xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
              </extendTypes>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Bulk Operations</comments>
        <comments>/**&#xA;     * Inserts all of the elements in the specified collection into this&#xA;     * list at the specified position.  Shifts the element currently at that&#xA;     * position (if any) and any subsequent elements to the right (increases&#xA;     * their indices).  The new elements will appear in the list in the order&#xA;     * that they are returned by the specified collection's iterator.  The&#xA;     * behavior of this operation is unspecified if the specified collection&#xA;     * is modified while the operation is in progress.  (Note that this will&#xA;     * occur if the specified collection is this list, and it's nonempty.)&#xA;     * Optional operation.&lt;p>&#xA;     *&#xA;     * This implementation gets an iterator over the specified collection and&#xA;     * a list iterator over this list pointing to the indexed element (with&#xA;     * &lt;tt>listIterator(index)&lt;/tt>).  Then, it iterates over the specified&#xA;     * collection, inserting the elements obtained from the iterator into this&#xA;     * list, one at a time, using &lt;tt>ListIterator.add&lt;/tt> followed by&#xA;     * &lt;tt>ListIterator.next&lt;/tt> (to skip over the added element).&lt;p>&#xA;     *&#xA;     * Note that this implementation will throw an&#xA;     * &lt;tt>UnsupportedOperationException&lt;/tt> if the list iterator returned by&#xA;     * the &lt;tt>listIterator&lt;/tt> method does not implement the &lt;tt>add&lt;/tt>&#xA;     * operation.&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if this list changed as a result of the call.&#xA;     * @param index index at which to insert first element from the specified&#xA;     *&#x9;&#x9;    collection.&#xA;     * @param c elements to be inserted into this list.&#xA;     * @throws UnsupportedOperationException if the &lt;tt>addAll&lt;/tt> operation&#xA;     *&#x9;&#x9;  is not supported by this list.&#xA;     * @throws NullPointerException this list does not permit &lt;tt>null&lt;/tt>&#xA;     * &#x9;&#x9;  elements and one of the elements of the specified collection&#xA;     * &#x9;&#x9;  is &lt;tt>null&lt;/tt>.&#xA;     * @throws    ClassCastException if the class of the specified element&#xA;     * &#x9;&#x9;  prevents it from being added to this list.&#xA;     * @throws    IllegalArgumentException if some aspect of the specified&#xA;     *&#x9;&#x9;  element prevents it from being added to this list.&#xA;     * @throws IndexOutOfBoundsException if the specified index is out of&#xA;     *            range (&lt;tt>index &amp;lt; 0 || index &amp;gt; size()&lt;/tt>).&#xA;     * @throws NullPointerException if the specified collection is null.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="modified">
          <typeReference xsi:type="types:Boolean"/>
          <initialValue xsi:type="literals:BooleanLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="e1">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:QualifiedTypeArgument">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </typeReference>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="ListIterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="e2">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <typeArguments xsi:type="generics:ExtendsTypeArgument">
                <extendTypes xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
                </extendTypes>
              </typeArguments>
              <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.1">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="Collection.class.xmi#//@classifiers.0/@members.3"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.1/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:InterfaceMethod" href="ListIterator.class.xmi#//@classifiers.0/@members.8"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.1"/>
                  </next>
                </arguments>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="literals:BooleanLiteral" value="true"/>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.2/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="Iterator.class.xmi#//@classifiers.0/@members.0"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="iterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Iterators</comments>
        <comments>/**&#xA;     * Returns an iterator over the elements in this list (in proper&#xA;     * sequence).&lt;p> &#xA;     *&#xA;     * This implementation merely returns a list iterator over the list.&#xA;     *&#xA;     * @return an iterator over the elements in this list (in proper sequence).&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="AbstractList.class.xmi#//@classifiers.0/@members.12"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="listIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="ListIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a list iterator over the elements in this list (in proper&#xA;     * sequence).&#xA;     *&#xA;     * @param  index index of first element to be returned from the list &#xA;     *&#x9;&#x9;iterator (by a call to the &lt;code>next&lt;/code> method)&#xA;     * @return a list iterator over the elements in this list (in proper&#xA;     *      sequence).&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class provides a skeletal implementation of the &lt;tt>List&lt;/tt>&#xA; * interface to minimize the effort required to implement this interface&#xA; * backed by a &quot;sequential access&quot; data store (such as a linked list).  For&#xA; * random access data (such as an array), &lt;tt>AbstractList&lt;/tt> should be used&#xA; * in preference to this class.&lt;p>&#xA; *&#xA; * This class is the opposite of the &lt;tt>AbstractList&lt;/tt> class in the sense&#xA; * that it implements the &quot;random access&quot; methods (&lt;tt>get(int index)&lt;/tt>,&#xA; * &lt;tt>set(int index, Object element)&lt;/tt>, &lt;tt>set(int index, Object&#xA; * element)&lt;/tt>, &lt;tt>add(int index, Object element)&lt;/tt> and &lt;tt>remove(int&#xA; * index)&lt;/tt>) on top of the list's list iterator, instead of the other way&#xA; * around.&lt;p>&#xA; *&#xA; * To implement a list the programmer needs only to extend this class and&#xA; * provide implementations for the &lt;tt>listIterator&lt;/tt> and &lt;tt>size&lt;/tt>&#xA; * methods.  For an unmodifiable list, the programmer need only implement the&#xA; * list iterator's &lt;tt>hasNext&lt;/tt>, &lt;tt>next&lt;/tt>, &lt;tt>hasPrevious&lt;/tt>,&#xA; * &lt;tt>previous&lt;/tt> and &lt;tt>index&lt;/tt> methods.&lt;p>&#xA; *&#xA; * For a modifiable list the programmer should additionally implement the list&#xA; * iterator's &lt;tt>set&lt;/tt> method.  For a variable-size list the programmer&#xA; * should additionally implement the list iterator's &lt;tt>remove&lt;/tt> and&#xA; * &lt;tt>add&lt;/tt> methods.&lt;p>&#xA; *&#xA; * The programmer should generally provide a void (no argument) and collection&#xA; * constructor, as per the recommendation in the &lt;tt>Collection&lt;/tt> interface&#xA; * specification.&lt;p>&#xA; *&#xA; * This class is a member of the &#xA; * &lt;a href=&quot;{@docRoot}/../guide/collections/index.html&quot;>&#xA; * Java Collections Framework&lt;/a>.&#xA; *&#xA; * @author  Josh Bloch&#xA; * @author  Neal Gafter&#xA; * @version 1.33, 02/19/04&#xA; * @see Collection&#xA; * @see List&#xA; * @see AbstractList&#xA; * @see AbstractCollection&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Class" href="AbstractList.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
