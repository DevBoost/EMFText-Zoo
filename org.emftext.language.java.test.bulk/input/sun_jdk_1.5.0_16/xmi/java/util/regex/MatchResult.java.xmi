<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="MatchResult.java">
  <comments>/*&#xA; * @(#)MatchResult.java&#x9;1.5 04/06/28&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <namespaces>regex</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="MatchResult">
    <members xsi:type="members:InterfaceMethod" name="start">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the start index of the match.&#xA;     *&#xA;     * @return  The index of the first character matched&#xA;     *&#xA;     * @throws  IllegalStateException&#xA;     *          If no match has yet been attempted,&#xA;     *          or if the previous match operation failed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="start">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the start index of the subsequence captured by the given group&#xA;     * during this match.&#xA;     *&#xA;     * &lt;p> &lt;a href=&quot;Pattern.html#cg&quot;>Capturing groups&lt;/a> are indexed from left&#xA;     * to right, starting at one.  Group zero denotes the entire pattern, so&#xA;     * the expression &lt;i>m.&lt;/i>&lt;tt>start(0)&lt;/tt> is equivalent to&#xA;     * &lt;i>m.&lt;/i>&lt;tt>start()&lt;/tt>.  &lt;/p>&#xA;     *&#xA;     * @param  group&#xA;     *         The index of a capturing group in this matcher's pattern&#xA;     *&#xA;     * @return  The index of the first character captured by the group,&#xA;     *          or &lt;tt>-1&lt;/tt> if the match was successful but the group&#xA;     *          itself did not match anything&#xA;     *&#xA;     * @throws  IllegalStateException&#xA;     *          If no match has yet been attempted,&#xA;     *          or if the previous match operation failed&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          If there is no capturing group in the pattern&#xA;     *          with the given index&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="end">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the offset after the last character matched.  &lt;/p>&#xA;     *&#xA;     * @return  @return  The offset after the last character matched &#xA;     *&#xA;     * @throws  IllegalStateException&#xA;     *          If no match has yet been attempted,&#xA;     *          or if the previous match operation failed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="end">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the offset after the last character of the subsequence &#xA;     * captured by the given group during this match.&#xA;     *&#xA;     * &lt;p> &lt;a href=&quot;Pattern.html#cg&quot;>Capturing groups&lt;/a> are indexed from left&#xA;     * to right, starting at one.  Group zero denotes the entire pattern, so&#xA;     * the expression &lt;i>m.&lt;/i>&lt;tt>end(0)&lt;/tt> is equivalent to&#xA;     * &lt;i>m.&lt;/i>&lt;tt>end()&lt;/tt>.  &lt;/p>&#xA;     *&#xA;     * @param  group&#xA;     *         The index of a capturing group in this matcher's pattern&#xA;     *&#xA;     * @return  The offset after the last character captured by the group,&#xA;     *          or &lt;tt>-1&lt;/tt> if the match was successful &#xA;     *          but the group itself did not match anything&#xA;     *&#xA;     * @throws  IllegalStateException&#xA;     *          If no match has yet been attempted,&#xA;     *          or if the previous match operation failed&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          If there is no capturing group in the pattern&#xA;     *          with the given index&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="group">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the input subsequence matched by the previous match.&#xA;     *&#xA;     * &lt;p> For a matcher &lt;i>m&lt;/i> with input sequence &lt;i>s&lt;/i>, &#xA;     * the expressions &lt;i>m.&lt;/i>&lt;tt>group()&lt;/tt> and&#xA;     * &lt;i>s.&lt;/i>&lt;tt>substring(&lt;/tt>&lt;i>m.&lt;/i>&lt;tt>start(),&lt;/tt>&amp;nbsp;&lt;i>m.&lt;/i>&lt;tt>end())&lt;/tt>&#xA;     * are equivalent.  &lt;/p>&#xA;     *&#xA;     * &lt;p> Note that some patterns, for example &lt;tt>a*&lt;/tt>, match the empty&#xA;     * string.  This method will return the empty string when the pattern&#xA;     * successfully matches the empty string in the input.  &lt;/p>&#xA;     *&#xA;     * @return The (possibly empty) subsequence matched by the previous match,&#xA;     *         in string form&#xA;     *&#xA;     * @throws  IllegalStateException&#xA;     *          If no match has yet been attempted,&#xA;     *          or if the previous match operation failed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="group">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="group">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the input subsequence captured by the given group during the&#xA;     * previous match operation.&#xA;     *&#xA;     * &lt;p> For a matcher &lt;i>m&lt;/i>, input sequence &lt;i>s&lt;/i>, and group index&#xA;     * &lt;i>g&lt;/i>, the expressions &lt;i>m.&lt;/i>&lt;tt>group(&lt;/tt>&lt;i>g&lt;/i>&lt;tt>)&lt;/tt> and&#xA;     * &lt;i>s.&lt;/i>&lt;tt>substring(&lt;/tt>&lt;i>m.&lt;/i>&lt;tt>start(&lt;/tt>&lt;i>g&lt;/i>&lt;tt>),&lt;/tt>&amp;nbsp;&lt;i>m.&lt;/i>&lt;tt>end(&lt;/tt>&lt;i>g&lt;/i>&lt;tt>))&lt;/tt>&#xA;     * are equivalent.  &lt;/p>&#xA;     * &#xA;     * &lt;p> &lt;a href=&quot;Pattern.html#cg&quot;>Capturing groups&lt;/a> are indexed from left&#xA;     * to right, starting at one.  Group zero denotes the entire pattern, so&#xA;     * the expression &lt;tt>m.group(0)&lt;/tt> is equivalent to &lt;tt>m.group()&lt;/tt>.&#xA;     * &lt;/p>&#xA;     *&#xA;     * &lt;p> If the match was successful but the group specified failed to match&#xA;     * any part of the input sequence, then &lt;tt>null&lt;/tt> is returned. Note&#xA;     * that some groups, for example &lt;tt>(a*)&lt;/tt>, match the empty string.&#xA;     * This method will return the empty string when such a group successfully&#xA;     * matches the empty string in the input.  &lt;/p>&#xA;     *&#xA;     * @param  group&#xA;     *         The index of a capturing group in this matcher's pattern&#xA;     *&#xA;     * @return  The (possibly empty) subsequence captured by the group&#xA;     *          during the previous match, or &lt;tt>null&lt;/tt> if the group&#xA;     *          failed to match part of the input&#xA;     *&#xA;     * @throws  IllegalStateException&#xA;     *          If no match has yet been attempted,&#xA;     *          or if the previous match operation failed&#xA;     *&#xA;     * @throws  IndexOutOfBoundsException&#xA;     *          If there is no capturing group in the pattern&#xA;     *          with the given index&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="groupCount">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of capturing groups in this match result's pattern.&#xA;     *&#xA;     * &lt;p> Group zero denotes the entire pattern by convention. It is not&#xA;     * included in this count.&#xA;     *&#xA;     * &lt;p> Any non-negative integer smaller than or equal to the value&#xA;     * returned by this method is guaranteed to be a valid group index for&#xA;     * this matcher.  &lt;/p>&#xA;     *&#xA;     * @return The number of capturing groups in this matcher's pattern&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The result of a match operation.&#xA; *&#xA; * &lt;p>This interface contains query methods used to determine the&#xA; * results of a match against a regular expression. The match boundaries,&#xA; * groups and group boundaries can be seen but not modified through&#xA; * a &lt;code>MatchResult&lt;/code>.&#xA; *&#xA; * @author  Michael McCloskey&#xA; * @version 1.5 06/28/04&#xA; * @see Matcher&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
