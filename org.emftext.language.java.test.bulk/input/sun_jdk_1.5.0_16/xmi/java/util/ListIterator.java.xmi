<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="ListIterator.java">
  <comments>/*&#xA; * @(#)ListIterator.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>util</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ListIterator">
    <typeParameters name="E"/>
    <members xsi:type="members:InterfaceMethod" name="hasNext">
      <typeReference xsi:type="types:Boolean">
        <comments>// Query Operations</comments>
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this list iterator has more elements when&#xA;     * traversing the list in the forward direction. (In other words, returns&#xA;     * &lt;tt>true&lt;/tt> if &lt;tt>next&lt;/tt> would return an element rather than&#xA;     * throwing an exception.)&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if the list iterator has more elements when&#xA;     *&#x9;&#x9;traversing the list in the forward direction.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="next">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0">
          <comments>/**&#xA;     * Returns the next element in the list.  This method may be called&#xA;     * repeatedly to iterate through the list, or intermixed with calls to&#xA;     * &lt;tt>previous&lt;/tt> to go back and forth.  (Note that alternating calls&#xA;     * to &lt;tt>next&lt;/tt> and &lt;tt>previous&lt;/tt> will return the same element&#xA;     * repeatedly.)&#xA;     *&#xA;     * @return the next element in the list.&#xA;     * @exception NoSuchElementException if the iteration has no next element.&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasPrevious">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns &lt;tt>true&lt;/tt> if this list iterator has more elements when&#xA;     * traversing the list in the reverse direction.  (In other words, returns&#xA;     * &lt;tt>true&lt;/tt> if &lt;tt>previous&lt;/tt> would return an element rather than&#xA;     * throwing an exception.)&#xA;     *&#xA;     * @return &lt;tt>true&lt;/tt> if the list iterator has more elements when&#xA;     *&#x9;       traversing the list in the reverse direction.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="previous">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@typeParameters.0">
          <comments>/**&#xA;     * Returns the previous element in the list.  This method may be called&#xA;     * repeatedly to iterate through the list backwards, or intermixed with&#xA;     * calls to &lt;tt>next&lt;/tt> to go back and forth.  (Note that alternating&#xA;     * calls to &lt;tt>next&lt;/tt> and &lt;tt>previous&lt;/tt> will return the same&#xA;     * element repeatedly.)&#xA;     *&#xA;     * @return the previous element in the list.&#xA;     * &#xA;     * @exception NoSuchElementException if the iteration has no previous&#xA;     *            element.&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="nextIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the index of the element that would be returned by a subsequent&#xA;     * call to &lt;tt>next&lt;/tt>. (Returns list size if the list iterator is at the&#xA;     * end of the list.)&#xA;     *&#xA;     * @return the index of the element that would be returned by a subsequent&#xA;     * &#x9;       call to &lt;tt>next&lt;/tt>, or list size if list iterator is at end&#xA;     *&#x9;       of list. &#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="previousIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the index of the element that would be returned by a subsequent&#xA;     * call to &lt;tt>previous&lt;/tt>. (Returns -1 if the list iterator is at the&#xA;     * beginning of the list.)&#xA;     *&#xA;     * @return the index of the element that would be returned by a subsequent&#xA;     * &#x9;       call to &lt;tt>previous&lt;/tt>, or -1 if list iterator is at&#xA;     *&#x9;       beginning of list.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:Void">
        <comments>// Modification Operations</comments>
        <comments>/**&#xA;     * Removes from the list the last element that was returned by&#xA;     * &lt;tt>next&lt;/tt> or &lt;tt>previous&lt;/tt> (optional operation).  This call can&#xA;     * only be made once per call to &lt;tt>next&lt;/tt> or &lt;tt>previous&lt;/tt>.  It&#xA;     * can be made only if &lt;tt>ListIterator.add&lt;/tt> has not been called after&#xA;     * the last call to &lt;tt>next&lt;/tt> or &lt;tt>previous&lt;/tt>.&#xA;     *&#xA;     * @exception UnsupportedOperationException if the &lt;tt>remove&lt;/tt>&#xA;     * &#x9;&#x9;  operation is not supported by this list iterator.&#xA;     * @exception IllegalStateException neither &lt;tt>next&lt;/tt> nor&#xA;     *&#x9;&#x9;  &lt;tt>previous&lt;/tt> have been called, or &lt;tt>remove&lt;/tt> or&#xA;     *&#x9;&#x9;  &lt;tt>add&lt;/tt> have been called after the last call to *&#xA;     *&#x9;&#x9;  &lt;tt>next&lt;/tt> or &lt;tt>previous&lt;/tt>.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Replaces the last element returned by &lt;tt>next&lt;/tt> or&#xA;     * &lt;tt>previous&lt;/tt> with the specified element (optional operation).&#xA;     * This call can be made only if neither &lt;tt>ListIterator.remove&lt;/tt> nor&#xA;     * &lt;tt>ListIterator.add&lt;/tt> have been called after the last call to&#xA;     * &lt;tt>next&lt;/tt> or &lt;tt>previous&lt;/tt>.&#xA;     *&#xA;     * @param o the element with which to replace the last element returned by&#xA;     *          &lt;tt>next&lt;/tt> or &lt;tt>previous&lt;/tt>.&#xA;     * @exception UnsupportedOperationException if the &lt;tt>set&lt;/tt> operation&#xA;     * &#x9;&#x9;  is not supported by this list iterator.&#xA;     * @exception ClassCastException if the class of the specified element&#xA;     * &#x9;&#x9;  prevents it from being added to this list.&#xA;     * @exception IllegalArgumentException if some aspect of the specified&#xA;     *&#x9;&#x9;  element prevents it from being added to this list.&#xA;     * @exception IllegalStateException if neither &lt;tt>next&lt;/tt> nor&#xA;     *&#x9;          &lt;tt>previous&lt;/tt> have been called, or &lt;tt>remove&lt;/tt> or&#xA;     *&#x9;&#x9;  &lt;tt>add&lt;/tt> have been called after the last call to&#xA;     * &#x9;&#x9;  &lt;tt>next&lt;/tt> or &lt;tt>previous&lt;/tt>.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Inserts the specified element into the list (optional operation).  The&#xA;     * element is inserted immediately before the next element that would be&#xA;     * returned by &lt;tt>next&lt;/tt>, if any, and after the next element that&#xA;     * would be returned by &lt;tt>previous&lt;/tt>, if any.  (If the list contains&#xA;     * no elements, the new element becomes the sole element on the list.)&#xA;     * The new element is inserted before the implicit cursor: a subsequent&#xA;     * call to &lt;tt>next&lt;/tt> would be unaffected, and a subsequent call to&#xA;     * &lt;tt>previous&lt;/tt> would return the new element.  (This call increases&#xA;     * by one the value that would be returned by a call to &lt;tt>nextIndex&lt;/tt>&#xA;     * or &lt;tt>previousIndex&lt;/tt>.)&#xA;     *&#xA;     * @param o the element to insert.&#xA;     * @exception UnsupportedOperationException if the &lt;tt>add&lt;/tt> method is&#xA;     * &#x9;&#x9;  not supported by this list iterator.&#xA;     * &#xA;     * @exception ClassCastException if the class of the specified element&#xA;     * &#x9;&#x9;  prevents it from being added to this list.&#xA;     * &#xA;     * @exception IllegalArgumentException if some aspect of this element&#xA;     *            prevents it from being added to this list.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &#xA; * An iterator for lists that allows the programmer &#xA; * to traverse the list in either direction, modify &#xA; * the list during iteration, and obtain the iterator's &#xA; * current position in the list. A &lt;TT>ListIterator&lt;/TT> &#xA; * has no current element; its &lt;I>cursor position&lt;/I> always &#xA; * lies between the element that would be returned by a call &#xA; * to &lt;TT>previous()&lt;/TT> and the element that would be &#xA; * returned by a call to &lt;TT>next()&lt;/TT>. In a list of &#xA; * length &lt;TT>n&lt;/TT>, there are &lt;TT>n+1&lt;/TT> valid &#xA; * index values, from &lt;TT>0&lt;/TT> to &lt;TT>n&lt;/TT>, inclusive. &#xA; * &lt;PRE>&#xA; *&#xA; *          Element(0)   Element(1)   Element(2)   ... Element(n)   &#xA; *        ^            ^            ^            ^               ^&#xA; * Index: 0            1            2            3               n+1&#xA; *&#xA; * &lt;/PRE>&#xA; * &lt;P>&#xA; * Note that the {@link #remove} and {@link #set(Object)} methods are&#xA; * &lt;i>not&lt;/i> defined in terms of the cursor position;  they are defined to&#xA; * operate on the last element returned by a call to {@link #next} or {@link&#xA; * #previous()}.&#xA; * &lt;P>&#xA; * This interface is a member of the &#xA; * &lt;a href=&quot;{@docRoot}/../guide/collections/index.html&quot;>&#xA; * Java Collections Framework&lt;/a>.&#xA; *&#xA; * @author  Josh Bloch&#xA; * @version 1.23, 12/19/03&#xA; * @see Collection&#xA; * @see List&#xA; * @see Iterator&#xA; * @see Enumeration&#xA; * @since   1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <typeArguments xsi:type="generics:QualifiedTypeArgument">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0/@typeParameters.0"/>
          </typeReference>
        </typeArguments>
        <target xsi:type="classifiers:Interface" href="Iterator.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
