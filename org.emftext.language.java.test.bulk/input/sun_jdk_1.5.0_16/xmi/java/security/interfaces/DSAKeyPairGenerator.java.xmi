<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DSAKeyPairGenerator.java">
  <comments>/*&#xA; * @(#)DSAKeyPairGenerator.java&#x9;1.13 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <namespaces>interfaces</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DSAKeyPairGenerator">
    <members xsi:type="members:InterfaceMethod" name="initialize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="params">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DSAParams.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="random">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SecureRandom.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidParameterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Initializes the key pair generator using p, q and g, the DSA&#xA;     * family parameters.&#xA;     *&#xA;     * @param params the parameters to use to generate the keys.&#xA;     *&#xA;     * @param random the random bit source to use to generate &#xA;     * key bits.&#xA;     *&#xA;     * @exception InvalidParameterException if the parameters passed are&#xA;     * invalid or null.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initialize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="modlen">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="genParams">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="random">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../SecureRandom.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidParameterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Initializes the key pair generator for a given modulus length,&#xA;     * without parameters. &#xA;     *&#xA;     * &lt;p>If &lt;code>genParams&lt;/code> is true, this method will generate new &#xA;     * p, q and g parameters. If it is false, the method will use precomputed&#xA;     * parameters for the modulus length requested. If there are no&#xA;     * precomputed parameters for that modulus length, an exception will be &#xA;     * thrown. It is guaranteed that there will always be&#xA;     * default parameters for modulus lengths of 512 and 1024 bits.&#xA;     *&#xA;     * @param modlen the modulus length, in bits. Valid values are any&#xA;     * multiple of 8 between 512 and 1024, inclusive.&#xA;     *&#xA;     * @param random the random bit source to use to generate &#xA;     * key bits.&#xA;     *&#xA;     * @param genParams whether or not to generate new parameters for&#xA;     * the modulus length requested.&#xA;     *&#xA;     * @exception InvalidParameterException if the modulus length is not&#xA;     * between 512 and 1024, or if genParams is false and there are&#xA;     * not precomputed parameters for the modulus length requested.  &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An interface to an object capable of generating DSA key pairs. &#xA; *&#xA; * &lt;p>The &lt;code>initialize&lt;/code> methods may each be called any number &#xA; * of times. If no &lt;code>initialize&lt;/code> method is called on a &#xA; * DSAKeyPairGenerator, the default is to generate 1024-bit keys, using &#xA; * precomputed p, q and g parameters and an instance of SecureRandom as &#xA; * the random bit source.&#xA; * &#xA; * &lt;p>Users wishing to indicate DSA-specific parameters, and to generate a key &#xA; * pair suitable for use with the DSA algorithm typically&#xA; * &#xA; * &lt;ol>&#xA; * &#xA; * &lt;li>Get a key pair generator for the DSA algorithm by calling the &#xA; * KeyPairGenerator &lt;code>getInstance&lt;/code> method with &quot;DSA&quot; &#xA; * as its argument.&lt;p> &#xA; * &#xA; * &lt;li>Initialize the generator by casting the result to a DSAKeyPairGenerator&#xA; * and calling one of the &#xA; * &lt;code>initialize&lt;/code> methods from this DSAKeyPairGenerator interface.&lt;p>&#xA; * &#xA; * &lt;li>Generate a key pair by calling the &lt;code>generateKeyPair&lt;/code> &#xA; * method from the KeyPairGenerator class.&#xA; * &#xA; * &lt;/ol> &#xA; *&#xA; * &lt;p>Note: it is not always necessary to do do algorithm-specific&#xA; * initialization for a DSA key pair generator. That is, it is not always&#xA; * necessary to call an &lt;code>initialize&lt;/code> method in this interface.&#xA; * Algorithm-independent initialization using the &lt;code>initialize&lt;/code> method&#xA; * in the KeyPairGenerator&#xA; * interface is all that is needed when you accept defaults for algorithm-specific&#xA; * parameters.&#xA; * &#xA; * @see java.security.KeyPairGenerator&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
