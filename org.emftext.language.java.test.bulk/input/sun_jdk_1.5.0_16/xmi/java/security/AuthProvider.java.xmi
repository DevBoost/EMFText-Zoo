<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="AuthProvider.java">
  <comments>/*&#xA; * @(#)AuthProvider.java&#x9;1.3 04/02/03&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../javax/security/auth/Subject.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <namespaces>login</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../javax/security/auth/login/LoginException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <namespaces>callback</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../javax/security/auth/callback/CallbackHandler.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="AuthProvider">
    <members xsi:type="members:Constructor" name="AuthProvider">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.0"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.1"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0/@parameters.2"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="info">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a provider with the specified name, version number,&#xA;     * and information.&#xA;     *&#xA;     * @param name the provider name.&#xA;     * @param version the provider version number.&#xA;     * @param info a description of the provider and its services.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="login">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="subject">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../javax/security/auth/Subject.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/security/auth/callback/CallbackHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../javax/security/auth/login/LoginException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Log in to this provider.&#xA;     *&#xA;     * &lt;p> The provider relies on a &lt;code>CallbackHandler&lt;/code>&#xA;     * to obtain authentication information from the caller&#xA;     * (a PIN, for example).  If the caller passes a &lt;code>null&lt;/code>&#xA;     * handler to this method, the provider uses the handler set in the&#xA;     * &lt;code>setCallbackHandler&lt;/code> method.&#xA;     * If no handler was set in that method, the provider queries the&#xA;     * &lt;i>auth.login.defaultCallbackHandler&lt;/i> security property&#xA;     * for the fully qualified class name of a default handler implementation.&#xA;     * If the security property is not set,&#xA;     * the provider is assumed to have alternative means&#xA;     * for obtaining authentication information.&#xA;     *&#xA;     * @param subject the &lt;code>Subject&lt;/code> which may contain&#xA;     *&#x9;&#x9;principals/credentials used for authentication,&#xA;     *&#x9;&#x9;or may be populated with additional principals/credentials&#xA;     *&#x9;&#x9;after successful authentication has completed.&#xA;     *&#x9;&#x9;This parameter may be &lt;code>null&lt;/code>.&#xA;     * @param handler the &lt;code>CallbackHandler&lt;/code> used by&#xA;     *&#x9;&#x9;this provider to obtain authentication information&#xA;     *&#x9;&#x9;from the caller, which may be &lt;code>null&lt;/code>&#xA;     *&#xA;     * @exception LoginException if the login operation fails&#xA;     * @exception SecurityException if the caller does not pass a&#xA;     *&#x9;security check for&#xA;     *&#x9;&lt;code>SecurityPermission(&quot;authProvider.&lt;i>name&lt;/i>&quot;)&lt;/code>,&#xA;     *&#x9;where &lt;i>name&lt;/i> is the value returned by&#xA;     *&#x9;this provider's &lt;code>getName&lt;/code> method&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="logout">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../javax/security/auth/login/LoginException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Log out from this provider.&#xA;     *&#xA;     * @exception LoginException if the logout operation fails&#xA;     * @exception SecurityException if the caller does not pass a&#xA;     *&#x9;security check for&#xA;     *&#x9;&lt;code>SecurityPermission(&quot;authProvider.&lt;i>name&lt;/i>&quot;)&lt;/code>,&#xA;     *&#x9;where &lt;i>name&lt;/i> is the value returned by&#xA;     *&#x9;this provider's &lt;code>getName&lt;/code> method&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCallbackHandler">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="handler">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../javax/security/auth/callback/CallbackHandler.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set a &lt;code>CallbackHandler&lt;/code>.&#xA;     *&#xA;     * &lt;p> The provider uses this handler if one is not passed to the&#xA;     * &lt;code>login&lt;/code> method.  The provider also uses this handler&#xA;     * if it invokes &lt;code>login&lt;/code> on behalf of callers.&#xA;     * In either case if a handler is not set via this method,&#xA;     * the provider queries the&#xA;     * &lt;i>auth.login.defaultCallbackHandler&lt;/i> security property&#xA;     * for the fully qualified class name of a default handler implementation.&#xA;     * If the security property is not set,&#xA;     * the provider is assumed to have alternative means&#xA;     * for obtaining authentication information.&#xA;     *&#xA;     * @param handler a &lt;code>CallbackHandler&lt;/code> for obtaining&#xA;     *&#x9;&#x9;authentication information, which may be &lt;code>null&lt;/code>&#xA;     *&#xA;     * @exception SecurityException if the caller does not pass a&#xA;     *&#x9;security check for&#xA;     *&#x9;&lt;code>SecurityPermission(&quot;authProvider.&lt;i>name&lt;/i>&quot;)&lt;/code>,&#xA;     *&#x9;where &lt;i>name&lt;/i> is the value returned by&#xA;     *&#x9;this provider's &lt;code>getName&lt;/code> method&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class defines login and logout methods for a provider.&#xA; *&#xA; * &lt;p> While callers may invoke &lt;code>login&lt;/code> directly,&#xA; * the provider may also invoke &lt;code>login&lt;/code> on behalf of callers&#xA; * if it determines that a login must be performed&#xA; * prior to certain operations.&#xA; *&#xA; * @version 1.3, 02/03/04&#xA; * @since 1.5&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="Provider.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
