<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="Certificate.java">
  <comments>/*&#xA; * @(#)Certificate.java&#x9;1.37 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../util/Date.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Certificate">
    <members xsi:type="members:InterfaceMethod" name="getGuarantor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Principal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Returns the guarantor of the certificate, that is, the principal&#xA;     * guaranteeing that the public key associated with this certificate&#xA;     * is that of the principal associated with this certificate. For X.509&#xA;     * certificates, the guarantor will typically be a Certificate Authority&#xA;     * (such as the United States Postal Service or Verisign, Inc.).&#xA;     *&#xA;     * @return the guarantor which guaranteed the principal-key&#xA;     * binding.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrincipal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Principal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the principal of the principal-key pair being guaranteed by&#xA;     * the guarantor.&#xA;     *&#xA;     * @return the principal to which this certificate is bound.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPublicKey">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PublicKey.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the key of the principal-key pair being guaranteed by&#xA;     * the guarantor.&#xA;     * &#xA;     * @return the public key that this certificate certifies belongs&#xA;     * to a particular principal.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="encode">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="KeyException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Encodes the certificate to an output stream in a format that can&#xA;     * be decoded by the &lt;code>decode&lt;/code> method.&#xA;     *&#xA;     * @param stream the output stream to which to encode the&#xA;     * certificate.&#xA;     *&#xA;     * @exception KeyException if the certificate is not&#xA;     * properly initialized, or data is missing, etc.&#xA;     *&#xA;     * @exception IOException if a stream exception occurs while&#xA;     * trying to output the encoded certificate to the output stream.&#xA;     *&#xA;     * @see #decode &#xA;     * @see #getFormat&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="decode">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="KeyException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Decodes a certificate from an input stream. The format should be&#xA;     * that returned by &lt;code>getFormat&lt;/code> and produced by &#xA;     * &lt;code>encode&lt;/code>.&#xA;     *&#xA;     * @param stream the input stream from which to fetch the data&#xA;     * being decoded.&#xA;     * &#xA;     * @exception KeyException if the certificate is not properly initialized,&#xA;     * or data is missing, etc.&#xA;     *&#xA;     * @exception IOException if an exception occurs while trying to input&#xA;     * the encoded certificate from the input stream.&#xA;     *&#xA;     * @see #encode &#xA;     * @see #getFormat&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFormat">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of the coding format. This is used as a hint to find&#xA;     * an appropriate parser. It could be &quot;X.509&quot;, &quot;PGP&quot;, etc. This is&#xA;     * the format produced and understood by the &lt;code>encode&lt;/code>&#xA;     * and &lt;code>decode&lt;/code> methods.&#xA;     * &#xA;     * @return the name of the coding format.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="detailed">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string that represents the contents of the certificate.&#xA;     *&#xA;     * @param detailed whether or not to give detailed information&#xA;     * about the certificate&#xA;     * &#xA;     * @return a string representing the contents of the certificate&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
      <comments>/**&#xA; * &lt;p>This is an interface of abstract methods for managing a&#xA; * variety of identity certificates.&#xA; * An identity certificate is a guarantee by a principal that&#xA; * a public key is that of another principal.  (A principal represents&#xA; * an entity such as an individual user, a group, or a corporation.)&#xA; *&#xA; * &lt;p>In particular, this interface is intended to be a common&#xA; * abstraction for constructs that have different formats but&#xA; * important common uses.  For example, different types of&#xA; * certificates, such as X.509 certificates and PGP certificates,&#xA; * share general certificate functionality (the need to encode and&#xA; * decode certificates) and some types of information, such as a&#xA; * public key, the principal whose key it is, and the guarantor&#xA; * guaranteeing that the public key is that of the specified&#xA; * principal. So an implementation of X.509 certificates and an&#xA; * implementation of PGP certificates can both utilize the Certificate&#xA; * interface, even though their formats and additional types and&#xA; * amounts of information stored are different.&#xA; *&#xA; * &lt;p>&lt;b>Important&lt;/b>: This interface is useful for cataloging and&#xA; * grouping objects sharing certain common uses. It does not have any&#xA; * semantics of its own. In particular, a Certificate object does not&#xA; * make any statement as to the &lt;i>validity&lt;/i> of the binding. It is&#xA; * the duty of the application implementing this interface to verify&#xA; * the certificate and satisfy itself of its validity.&#xA; *&#xA; * @version &#x9;1.37, 05/18/04&#xA; * @author Benjamin Renaud &#xA; * @deprecated A new certificate handling package is created in the Java 2 platform.&#xA; *             This Certificate interface is entirely deprecated and&#xA; *             is here to allow for a smooth transition to the new&#xA; *             package.&#xA; * @see java.security.cert.Certificate&#xA; */</comments>
      <annotation xsi:type="classifiers:Annotation" href="../lang/Deprecated.class.xmi#//@classifiers.0"/>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
  </classifiers>
</containers:CompilationUnit>
