<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="DomainCombiner.java">
  <comments>/*&#xA; * @(#)DomainCombiner.java&#x9;1.7 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DomainCombiner">
    <members xsi:type="members:InterfaceMethod" name="combine">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Modify or update the provided ProtectionDomains.&#xA;     * ProtectionDomains may be added to or removed from the given&#xA;     * ProtectionDomains.  The ProtectionDomains may be re-ordered.&#xA;     * Individual ProtectionDomains may be may be modified (with a new&#xA;     * set of Permissions, for example).&#xA;     *&#xA;     * &lt;p>&#xA;     *&#xA;     * @param currentDomains the ProtectionDomains associated with the&#xA;     *&#x9;&#x9;current execution Thread, up to the most recent&#xA;     *&#x9;&#x9;privileged &lt;code>ProtectionDomain&lt;/code>.&#xA;     *&#x9;&#x9;The ProtectionDomains are are listed in order of execution,&#xA;     *&#x9;&#x9;with the most recently executing &lt;code>ProtectionDomain&lt;/code>&#xA;     *&#x9;&#x9;residing at the beginning of the array. This parameter may&#xA;     *&#x9;&#x9;be &lt;code>null&lt;/code> if the current execution Thread&#xA;     *&#x9;&#x9;has no associated ProtectionDomains.&lt;p>&#xA;     *&#xA;     * @param assignedDomains an array of inherited ProtectionDomains.&#xA;     *&#x9;&#x9;ProtectionDomains may be inherited from a parent Thread,&#xA;     *&#x9;&#x9;or from a privileged &lt;code>AccessControlContext&lt;/code>.&#xA;     *&#x9;&#x9;This parameter may be &lt;code>null&lt;/code>&#xA;     *&#x9;&#x9;if there are no inherited ProtectionDomains.&#xA;     *&#xA;     * @return a new array consisting of the updated ProtectionDomains,&#xA;     *&#x9;&#x9;or &lt;code>null&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="ProtectionDomain.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="currentDomains">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ProtectionDomain.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="assignedDomains">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ProtectionDomain.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A &lt;code>DomainCombiner&lt;/code> provides a means to dynamically&#xA; * update the ProtectionDomains associated with the current&#xA; * &lt;code>AccessControlContext&lt;/code>.&#xA; *&#xA; * &lt;p> A &lt;code>DomainCombiner&lt;/code> is passed as a parameter to the&#xA; * appropriate constructor for &lt;code>AccessControlContext&lt;/code>.&#xA; * The newly constructed context is then passed to the&#xA; * &lt;code>AccessController.doPrivileged(..., context)&lt;/code> method&#xA; * to bind the provided context (and associated &lt;code>DomainCombiner&lt;/code>)&#xA; * with the current execution Thread.  Subsequent calls to&#xA; * &lt;code>AccessController.getContext&lt;/code> or&#xA; * &lt;code>AccessController.checkPermission&lt;/code>&#xA; * cause the &lt;code>DomainCombiner.combine&lt;/code> to get invoked.&#xA; *&#xA; * &lt;p> The combine method takes two arguments.  The first argument represents&#xA; * an array of ProtectionDomains from the current execution Thread,&#xA; * since the most recent call to &lt;code>AccessController.doPrivileged&lt;/code>.&#xA; * If no call to doPrivileged was made, then the first argument will contain&#xA; * all the ProtectionDomains from the current execution Thread.&#xA; * The second argument represents an array of inherited ProtectionDomains,&#xA; * which may be &lt;code>null&lt;/code>.  ProtectionDomains may be inherited&#xA; * from a parent Thread, or from a privileged context.  If no call to&#xA; * doPrivileged was made, then the second argument will contain the&#xA; * ProtectionDomains inherited from the parent Thread.  If one or more calls&#xA; * to doPrivileged were made, and the most recent call was to&#xA; * doPrivileged(action, context), then the second argument will contain the&#xA; * ProtectionDomains from the privileged context.  If the most recent call&#xA; * was to doPrivileged(action), then there is no privileged context,&#xA; * and the second argument will be &lt;code>null&lt;/code>.&#xA; *&#xA; * &lt;p> The &lt;code>combine&lt;/code> method investigates the two input arrays&#xA; * of ProtectionDomains and returns a single array containing the updated&#xA; * ProtectionDomains.  In the simplest case, the &lt;code>combine&lt;/code>&#xA; * method merges the two stacks into one.  In more complex cases,&#xA; * the &lt;code>combine&lt;/code> method returns a modified&#xA; * stack of ProtectionDomains.  The modification may have added new&#xA; * ProtectionDomains, removed certain ProtectionDomains, or simply&#xA; * updated existing ProtectionDomains.  Re-ordering and other optimizations&#xA; * to the ProtectionDomains are also permitted.  Typically the&#xA; * &lt;code>combine&lt;/code> method bases its updates on the information&#xA; * encapsulated in the &lt;code>DomainCombiner&lt;/code>.&#xA; *&#xA; * &lt;p> After the &lt;code>AccessController.getContext&lt;/code> method&#xA; * receives the combined stack of ProtectionDomains back from&#xA; * the &lt;code>DomainCombiner&lt;/code>, it returns a new&#xA; * AccessControlContext that has both the combined ProtectionDomains&#xA; * as well as the &lt;code>DomainCombiner&lt;/code>.&#xA; * &#xA; * @see AccessController&#xA; * @see AccessControlContext&#xA; * @version 1.7, 12/19/03&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
