<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="KeyPairGeneratorSpi.java">
  <comments>/*&#xA; * @(#)KeyPairGeneratorSpi.java&#x9;1.14 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <namespaces>spec</namespaces>
    <classifier xsi:type="classifiers:Interface" href="spec/AlgorithmParameterSpec.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="KeyPairGeneratorSpi">
    <members xsi:type="members:InterfaceMethod" name="initialize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keysize">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="random">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SecureRandom.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Initializes the key pair generator for a certain keysize, using&#xA;     * the default parameter set.&#xA;     *&#xA;     * @param keysize the keysize. This is an&#xA;     * algorithm-specific metric, such as modulus length, specified in&#xA;     * number of bits.&#xA;     *&#xA;     * @param random the source of randomness for this generator.&#xA;     *&#xA;     * @exception InvalidParameterException if the &lt;code>keysize&lt;/code> is not&#xA;     * supported by this KeyPairGeneratorSpi object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="initialize">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="params">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="spec/AlgorithmParameterSpec.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="random">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SecureRandom.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidAlgorithmParameterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Initializes the key pair generator using the specified parameter&#xA;     * set and user-provided source of randomness.&#xA;     *&#xA;     * &lt;p>This concrete method has been added to this previously-defined&#xA;     * abstract class. (For backwards compatibility, it cannot be abstract.)&#xA;     * It may be overridden by a provider to initialize the key pair &#xA;     * generator. Such an override&#xA;     * is expected to throw an InvalidAlgorithmParameterException if&#xA;     * a parameter is inappropriate for this key pair generator.&#xA;     * If this method is not overridden, it always throws an&#xA;     * UnsupportedOperationException.&#xA;     *&#xA;     * @param params the parameter set used to generate the keys.&#xA;     *&#xA;     * @param random the source of randomness for this generator.&#xA;     *&#xA;     * @exception InvalidAlgorithmParameterException if the given parameters&#xA;     * are inappropriate for this key pair generator.&#xA;     *&#xA;     * @since 1.2&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/UnsupportedOperationException.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="generateKeyPair">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="KeyPair.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Generates a key pair. Unless an initialization method is called&#xA;     * using a KeyPairGenerator interface, algorithm-specific defaults&#xA;     * will be used. This will generate a new key pair every time it&#xA;     * is called.&#xA;     *&#xA;     * @return the newly generated &lt;tt>KeyPair&lt;/tt>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p> This class defines the &lt;i>Service Provider Interface&lt;/i> (&lt;b>SPI&lt;/b>)&#xA; * for the &lt;code>KeyPairGenerator&lt;/code> class, which is used to generate&#xA; * pairs of public and private keys.&#xA; *&#xA; * &lt;p> All the abstract methods in this class must be implemented by each&#xA; * cryptographic service provider who wishes to supply the implementation&#xA; * of a key pair generator for a particular algorithm.&#xA; * &#xA; * &lt;p> In case the client does not explicitly initialize the KeyPairGenerator&#xA; * (via a call to an &lt;code>initialize&lt;/code> method), each provider must&#xA; * supply (and document) a default initialization.&#xA; * For example, the &lt;i>Sun&lt;/i> provider uses a default modulus size (keysize)&#xA; * of 1024 bits.&#xA; *&#xA; * @author Benjamin Renaud&#xA; *&#xA; * @version 1.14, 12/19/03&#xA; *&#xA; * @see KeyPairGenerator&#xA; * @see java.security.spec.AlgorithmParameterSpec&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
