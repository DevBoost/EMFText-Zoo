<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="KeyFactorySpi.java">
  <comments>/*&#xA; * @(#)KeyFactorySpi.java&#x9;1.12 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <namespaces>spec</namespaces>
    <classifier xsi:type="classifiers:Interface" href="spec/KeySpec.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <namespaces>spec</namespaces>
    <classifier xsi:type="classifiers:Class" href="spec/InvalidKeySpecException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="KeyFactorySpi">
    <members xsi:type="members:InterfaceMethod" name="engineGeneratePublic">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PublicKey.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keySpec">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="spec/KeySpec.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="spec/InvalidKeySpecException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Generates a public key object from the provided key&#xA;     * specification (key material).&#xA;     *&#xA;     * @param keySpec the specification (key material) of the public key.&#xA;     *&#xA;     * @return the public key.&#xA;     *&#xA;     * @exception InvalidKeySpecException if the given key specification&#xA;     * is inappropriate for this key factory to produce a public key.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="engineGeneratePrivate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="PrivateKey.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keySpec">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="spec/KeySpec.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="spec/InvalidKeySpecException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Generates a private key object from the provided key&#xA;     * specification (key material).&#xA;     *&#xA;     * @param keySpec the specification (key material) of the private key.&#xA;     *&#xA;     * @return the private key.&#xA;     *&#xA;     * @exception InvalidKeySpecException if the given key specification&#xA;     * is inappropriate for this key factory to produce a private key.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="engineGetKeySpec">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0/@members.2/@typeParameters.0"/>
      </typeReference>
      <typeParameters name="T">
        <extendTypes xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="spec/KeySpec.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </extendTypes>
      </typeParameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Key.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keySpec">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0/@members.2/@typeParameters.0"/>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="spec/InvalidKeySpecException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Returns a specification (key material) of the given key&#xA;     * object.&#xA;     * &lt;code>keySpec&lt;/code> identifies the specification class in which &#xA;     * the key material should be returned. It could, for example, be&#xA;     * &lt;code>DSAPublicKeySpec.class&lt;/code>, to indicate that the&#xA;     * key material should be returned in an instance of the &#xA;     * &lt;code>DSAPublicKeySpec&lt;/code> class.&#xA;     *&#xA;     * @param key the key.&#xA;     *&#xA;     * @param keySpec the specification class in which &#xA;     * the key material should be returned.&#xA;     *&#xA;     * @return the underlying key specification (key material) in an instance&#xA;     * of the requested specification class.&#xA;&#xA;     * @exception InvalidKeySpecException if the requested key specification is&#xA;     * inappropriate for the given key, or the given key cannot be dealt with&#xA;     * (e.g., the given key has an unrecognized format).&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="engineTranslateKey">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Key.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Key.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidKeyException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Translates a key object, whose provider may be unknown or&#xA;     * potentially untrusted, into a corresponding key object of this key&#xA;     * factory.&#xA;     *&#xA;     * @param key the key whose provider is unknown or untrusted.&#xA;     *&#xA;     * @return the translated key.&#xA;     *&#xA;     * @exception InvalidKeyException if the given key cannot be processed&#xA;     * by this key factory.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This class defines the &lt;i>Service Provider Interface&lt;/i> (&lt;b>SPI&lt;/b>)&#xA; * for the &lt;code>KeyFactory&lt;/code> class.&#xA; * All the abstract methods in this class must be implemented by each &#xA; * cryptographic service provider who wishes to supply the implementation&#xA; * of a key factory for a particular algorithm.&#xA; *&#xA; * &lt;P> Key factories are used to convert &lt;I>keys&lt;/I> (opaque&#xA; * cryptographic keys of type &lt;code>Key&lt;/code>) into &lt;I>key specifications&lt;/I>&#xA; * (transparent representations of the underlying key material), and vice&#xA; * versa.&#xA; *&#xA; * &lt;P> Key factories are bi-directional. That is, they allow you to build an&#xA; * opaque key object from a given key specification (key material), or to&#xA; * retrieve the underlying key material of a key object in a suitable format.&#xA; *&#xA; * &lt;P> Multiple compatible key specifications may exist for the same key.&#xA; * For example, a DSA public key may be specified using&#xA; * &lt;code>DSAPublicKeySpec&lt;/code> or&#xA; * &lt;code>X509EncodedKeySpec&lt;/code>. A key factory can be used to translate&#xA; * between compatible key specifications.&#xA; *&#xA; * &lt;P> A provider should document all the key specifications supported by its&#xA; * key factory.&#xA; *&#xA; * @author Jan Luehe&#xA; *&#xA; * @version 1.12, 05/05/04&#xA; *&#xA; * @see KeyFactory&#xA; * @see Key&#xA; * @see PublicKey&#xA; * @see PrivateKey&#xA; * @see java.security.spec.KeySpec&#xA; * @see java.security.spec.DSAPublicKeySpec&#xA; * @see java.security.spec.X509EncodedKeySpec&#xA; *&#xA; * @since 1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
