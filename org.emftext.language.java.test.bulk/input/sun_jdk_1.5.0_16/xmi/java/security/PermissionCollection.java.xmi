<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/generics ../../java.ecore#/6 http://www.emftext.org/java/imports ../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="PermissionCollection.java">
  <comments>/*&#xA; * @(#)PermissionCollection.java&#x9;1.35 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="PermissionCollection">
    <members xsi:type="members:Field" name="serialVersionUID">
      <initialValue xsi:type="expressions:UnaryExpression">
        <operators xsi:type="operators:Subtraction"/>
        <child xsi:type="literals:DecimalLongLiteral" decimalValue="6727011328946861783"/>
      </initialValue>
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="readOnly">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// when set, add will throw an exception.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Volatile"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="permission">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a permission object to the current collection of permission objects.&#xA;     *&#xA;     * @param permission the Permission object to add.&#xA;     *&#xA;     * @exception SecurityException -  if this PermissionCollection object&#xA;     *                                 has been marked readonly&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="implies">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="permission">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks to see if the specified permission is implied by&#xA;     * the collection of Permission objects held in this PermissionCollection.&#xA;     *&#xA;     * @param permission the Permission object to compare.&#xA;     *&#xA;     * @return true if &quot;permission&quot; is implied by the  permissions in&#xA;     * the collection, false if not.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="elements">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="Permission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an enumeration of all the Permission objects in the collection.&#xA;     *&#xA;     * @return an enumeration of all the Permissions.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="setReadOnly">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Marks this PermissionCollection object as &quot;readonly&quot;. After&#xA;     * a PermissionCollection object&#xA;     * is marked as readonly, no new Permission objects can be added to it&#xA;     * using &lt;code>add&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="literals:BooleanLiteral" value="true"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="isReadOnly">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true if this PermissionCollection object is marked as readonly.&#xA;     * If it is readonly, no new Permission objects can be added to it&#xA;     * using &lt;code>add&lt;/code>.&#xA;     *&#xA;     * &lt;p>By default, the object is &lt;i>not&lt;/i> readonly. It can be set to&#xA;     * readonly by a call to &lt;code>setReadOnly&lt;/code>.&#xA;     *&#xA;     * @return true if this PermissionCollection object is marked as readonly,&#xA;     * false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string describing this PermissionCollection object,&#xA;     * providing information about all the permissions it contains.&#xA;     * The format is:&#xA;     * &lt;pre>&#xA;     * super.toString() (&#xA;     *   // enumerate all the Permission&#xA;     *   // objects and call toString() on them,&#xA;     *   // one per line..&#xA;     * )&lt;/pre>&#xA;     *&#xA;     * &lt;code>super.toString&lt;/code> is a call to the &lt;code>toString&lt;/code>&#xA;     * method of this&#xA;     * object's superclass, which is Object. The result is&#xA;     * this PermissionCollection's type name followed by this object's&#xA;     * hashcode, thus enabling clients to differentiate different&#xA;     * PermissionCollections object, even if they contain the same permissions.&#xA;     *&#xA;     * @return information about this PermissionCollection object,&#xA;     *         as described above.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="enum_">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="../util/Enumeration.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.4"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/StringBuilder.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:SelfReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.6"/>
                </next>
                <self xsi:type="literals:Super"/>
              </children>
              <children xsi:type="references:StringReference" value=" (&#xA;"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:WhileLoop">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:TryBlock">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                  <arguments xsi:type="references:StringReference" value=" "/>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable">
                    <next xsi:type="references:MethodCall">
                      <next xsi:type="references:MethodCall">
                        <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.6"/>
                      </next>
                      <target xsi:type="members:InterfaceMethod" href="../util/Enumeration.class.xmi#//@classifiers.0/@members.1"/>
                    </next>
                  </arguments>
                </next>
              </expression>
            </statements>
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
                  <arguments xsi:type="references:StringReference" value="&#xA;"/>
                </next>
              </expression>
            </statements>
            <catcheBlocks>
              <comments>// ignore</comments>
              <parameter name="e">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../util/NoSuchElementException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
        </statement>
        <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="../util/Enumeration.class.xmi#//@classifiers.0/@members.0"/>
          </next>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:StringReference" value=")&#xA;"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.1/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../lang/StringBuilder.class.xmi#//@classifiers.0/@members.40"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Abstract class representing a collection of Permission objects.&#xA; *&#xA; * &lt;p>With a PermissionCollection, you can:&#xA; * &lt;UL>&#xA; * &lt;LI> add a permission to the collection using the &lt;code>add&lt;/code> method.&#xA; * &lt;LI> check to see if a particular permission is implied in the&#xA; *      collection, using the &lt;code>implies&lt;/code> method.&#xA; * &lt;LI> enumerate all the permissions, using the &lt;code>elements&lt;/code> method.&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; *&#xA; * &lt;p>When it is desirable to group together a number of Permission objects&#xA; * of the same type, the &lt;code>newPermissionCollection&lt;/code> method on that&#xA; * particular type of Permission object should first be called. The default&#xA; * behavior (from the Permission class) is to simply return null.&#xA; * Subclasses of class Permission override the method if they need to store&#xA; * their permissions in a particular PermissionCollection object in order&#xA; * to provide the correct semantics when the&#xA; * &lt;code>PermissionCollection.implies&lt;/code> method is called.&#xA; * If a non-null value is returned, that PermissionCollection must be used.&#xA; * If null is returned, then the caller of &lt;code>newPermissionCollection&lt;/code>&#xA; * is free to store permissions of the&#xA; * given type in any PermissionCollection they choose&#xA; * (one that uses a Hashtable, one that uses a Vector, etc).&#xA; *&#xA; * &lt;p>The PermissionCollection returned by the&#xA; * &lt;code>Permission.newPermissionCollection&lt;/code>&#xA; * method is a homogeneous collection, which stores only Permission objects&#xA; * for a given Permission type.  A PermissionCollection may also be&#xA; * heterogeneous.  For example, Permissions is a PermissionCollection&#xA; * subclass that represents a collection of PermissionCollections.&#xA; * That is, its members are each a homogeneous PermissionCollection.&#xA; * For example, a Permissions object might have a FilePermissionCollection&#xA; * for all the FilePermission objects, a SocketPermissionCollection for all the&#xA; * SocketPermission objects, and so on. Its &lt;code>add&lt;/code> method adds a&#xA; * permission to the appropriate collection.&#xA; *&#xA; * &lt;p>Whenever a permission is added to a heterogeneous PermissionCollection&#xA; * such as Permissions, and the PermissionCollection doesn't yet contain a&#xA; * PermissionCollection of the specified permission's type, the&#xA; * PermissionCollection should call&#xA; * the &lt;code>newPermissionCollection&lt;/code> method on the permission's class&#xA; * to see if it requires a special PermissionCollection. If&#xA; * &lt;code>newPermissionCollection&lt;/code>&#xA; * returns null, the PermissionCollection&#xA; * is free to store the permission in any type of PermissionCollection it&#xA; * desires (one using a Hashtable, one using a Vector, etc.). For example,&#xA; * the Permissions object uses a default PermissionCollection implementation&#xA; * that stores the permission objects in a Hashtable.&#xA; *&#xA; * &lt;p> Subclass implementations of PermissionCollection should assume&#xA; * that they may be called simultaneously from multiple threads,&#xA; * and therefore should be synchronized properly.  Furthermore,&#xA; * Enumerations returned via the &lt;code>elements&lt;/code> method are&#xA; * not &lt;em>fail-fast&lt;/em>.  Modifications to a collection should not be&#xA; * performed while enumerating over that collection.&#xA; *&#xA; * @see Permission&#xA; * @see Permissions&#xA; *&#xA; * @version 1.35 04/05/05&#xA; *&#xA; * @author Roland Schemers&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>java</namespaces>
      <namespaces>io</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../io/Serializable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
