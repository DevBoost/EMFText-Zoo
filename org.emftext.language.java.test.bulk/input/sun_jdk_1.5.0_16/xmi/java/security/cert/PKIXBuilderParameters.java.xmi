<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="PKIXBuilderParameters.java">
  <comments>/*&#xA; * @(#)PKIXBuilderParameters.java&#x9;1.15 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <namespaces>cert</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../KeyStore.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../KeyStoreException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../InvalidAlgorithmParameterException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../InvalidParameterException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="PKIXBuilderParameters">
    <members xsi:type="members:Field" name="maxPathLength">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Constructor" name="PKIXBuilderParameters">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="PKIXParameters.class.xmi#//@classifiers.0/@members.39"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="trustAnchors">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="TrustAnchor.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="targetConstraints">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CertSelector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidAlgorithmParameterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an instance of &lt;code>PKIXBuilderParameters&lt;/code> with&#xA;     * the specified &lt;code>Set&lt;/code> of most-trusted CAs. &#xA;     * Each element of the set is a {@link TrustAnchor TrustAnchor}.&#xA;     *&#xA;     * &lt;p>Note that the &lt;code>Set&lt;/code> is copied to protect against&#xA;     * subsequent modifications.&#xA;     *&#xA;     * @param trustAnchors a &lt;code>Set&lt;/code> of &lt;code>TrustAnchor&lt;/code>s&#xA;     * @param targetConstraints a &lt;code>CertSelector&lt;/code> specifying the &#xA;     * constraints on the target certificate &#xA;     * @throws InvalidAlgorithmParameterException if &lt;code>trustAnchors&lt;/code> &#xA;     * is empty &lt;code>(trustAnchors.isEmpty() == true)&lt;/code>&#xA;     * @throws NullPointerException if &lt;code>trustAnchors&lt;/code> is &#xA;     * &lt;code>null&lt;/code>&#xA;     * @throws ClassCastException if any of the elements of&#xA;     * &lt;code>trustAnchors&lt;/code> are not of type &#xA;     * &lt;code>java.security.cert.TrustAnchor&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="PKIXBuilderParameters">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="PKIXParameters.class.xmi#//@classifiers.0/@members.39"/>
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.1"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="keystore">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../KeyStore.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="targetConstraints">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="CertSelector.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../KeyStoreException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidAlgorithmParameterException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an instance of &lt;code>PKIXBuilderParameters&lt;/code> that&#xA;     * populates the set of most-trusted CAs from the trusted&#xA;     * certificate entries contained in the specified &lt;code>KeyStore&lt;/code>.&#xA;     * Only keystore entries that contain trusted &lt;code>X509Certificate&lt;/code>s&#xA;     * are considered; all other certificate types are ignored.&#xA;     *&#xA;     * @param keystore a &lt;code>KeyStore&lt;/code> from which the set of &#xA;     * most-trusted CAs will be populated&#xA;     * @param targetConstraints a &lt;code>CertSelector&lt;/code> specifying the &#xA;     * constraints on the target certificate &#xA;     * @throws KeyStoreException if &lt;code>keystore&lt;/code> has not been &#xA;     * initialized&#xA;     * @throws InvalidAlgorithmParameterException if &lt;code>keystore&lt;/code> does&#xA;     * not contain at least one trusted certificate entry&#xA;     * @throws NullPointerException if &lt;code>keystore&lt;/code> is &#xA;     * &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setMaxPathLength">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maxPathLength">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the value of the maximum number of non-self-issued intermediate&#xA;     * certificates that may exist in a certification path. A certificate&#xA;     * is self-issued if the DNs that appear in the subject and issuer&#xA;     * fields are identical and are not empty. Note that the last certificate&#xA;     * in a certification path is not an intermediate certificate, and is not&#xA;     * included in this limit. Usually the last certificate is an end entity&#xA;     * certificate, but it can be a CA certificate. A PKIX &#xA;     * &lt;code>CertPathBuilder&lt;/code> instance must not build &#xA;     * paths longer than the length specified.&#xA;     *&#xA;     * &lt;p> A value of 0 implies that the path can only contain&#xA;     * a single certificate. A value of -1 implies that the&#xA;     * path length is unconstrained (i.e. there is no maximum).&#xA;     * The default maximum path length, if not specified, is 5.&#xA;     * Setting a value less than -1 will cause an exception to be thrown.&#xA;     *&#xA;     * &lt;p> If any of the CA certificates contain the &#xA;     * &lt;code>BasicConstraintsExtension&lt;/code>, the value of the&#xA;     * &lt;code>pathLenConstraint&lt;/code> field of the extension overrides&#xA;     * the maximum path length parameter whenever the result is a&#xA;     * certification path of smaller length.&#xA;     *&#xA;     * @param maxPathLength the maximum number of non-self-issued intermediate&#xA;     *  certificates that may exist in a certification path&#xA;     * @throws InvalidParameterException if &lt;code>maxPathLength&lt;/code> is set &#xA;     *  to a value less than -1&#xA;     *&#xA;     * @see #getMaxPathLength&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../InvalidParameterException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="expressions:AdditiveExpression">
                <children xsi:type="references:StringReference" value="the maximum path "/>
                <children xsi:type="references:StringReference" value="length parameter can not be less than -1"/>
                <additiveOperators xsi:type="operators:Addition"/>
              </arguments>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:RelationExpression">
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
          <children xsi:type="expressions:UnaryExpression">
            <operators xsi:type="operators:Subtraction"/>
            <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </children>
          <relationOperators xsi:type="operators:LessThan"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMaxPathLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the value of the maximum number of intermediate non-self-issued&#xA;     * certificates that may exist in a certification path. See&#xA;     * the {@link #setMaxPathLength} method for more details.&#xA;     *&#xA;     * @return the maximum number of non-self-issued intermediate certificates &#xA;     *  that may exist in a certification path, or -1 if there is no limit&#xA;     *&#xA;     * @see #setMaxPathLength&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a formatted string describing the parameters.&#xA;     *&#xA;     * @return a formatted string describing the parameters&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="sb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../lang/StringBuffer.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="instantiations:NewConstructorCall">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/StringBuffer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:StringReference" value="[&#xA;"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="PKIXParameters.class.xmi#//@classifiers.0/@members.41"/>
              </next>
              <self xsi:type="literals:Super"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="expressions:AdditiveExpression">
              <children xsi:type="references:StringReference" value="  Maximum Path Length: "/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <children xsi:type="references:StringReference" value="&#xA;"/>
              <additiveOperators xsi:type="operators:Addition"/>
              <additiveOperators xsi:type="operators:Addition"/>
            </arguments>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/StringBuffer.class.xmi#//@classifiers.0/@members.19"/>
            <arguments xsi:type="references:StringReference" value="]&#xA;"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:ClassMethod" href="../../lang/StringBuffer.class.xmi#//@classifiers.0/@members.55"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Parameters used as input for the PKIX &lt;code>CertPathBuilder&lt;/code> &#xA; * algorithm.&#xA; * &lt;p>&#xA; * A PKIX &lt;code>CertPathBuilder&lt;/code> uses these parameters to {@link &#xA; * CertPathBuilder#build build} a &lt;code>CertPath&lt;/code> which has been &#xA; * validated according to the PKIX certification path validation algorithm.&#xA; *&#xA; * &lt;p>To instantiate a &lt;code>PKIXBuilderParameters&lt;/code> object, an&#xA; * application must specify one or more &lt;i>most-trusted CAs&lt;/i> as defined by&#xA; * the PKIX certification path validation algorithm. The most-trusted CA &#xA; * can be specified using one of two constructors. An application &#xA; * can call {@link #PKIXBuilderParameters(Set, CertSelector) &#xA; * PKIXBuilderParameters(Set, CertSelector)}, specifying a &#xA; * &lt;code>Set&lt;/code> of &lt;code>TrustAnchor&lt;/code> objects, each of which &#xA; * identifies a most-trusted CA. Alternatively, an application can call &#xA; * {@link #PKIXBuilderParameters(KeyStore, CertSelector)&#xA; * PKIXBuilderParameters(KeyStore, CertSelector)}, specifying a &#xA; * &lt;code>KeyStore&lt;/code> instance containing trusted certificate entries, each &#xA; * of which will be considered as a most-trusted CA.&#xA; *&#xA; * &lt;p>In addition, an application must specify constraints on the target &#xA; * certificate that the &lt;code>CertPathBuilder&lt;/code> will attempt &#xA; * to build a path to. The constraints are specified as a &#xA; * &lt;code>CertSelector&lt;/code> object. These constraints should provide the &#xA; * &lt;code>CertPathBuilder&lt;/code> with enough search criteria to find the target &#xA; * certificate. Minimal criteria for an &lt;code>X509Certificate&lt;/code> usually &#xA; * include the subject name and/or one or more subject alternative names.&#xA; * If enough criteria is not specified, the &lt;code>CertPathBuilder&lt;/code> &#xA; * may throw a &lt;code>CertPathBuilderException&lt;/code>.&#xA; * &lt;p>&#xA; * &lt;b>Concurrent Access&lt;/b>&#xA; * &lt;p>&#xA; * Unless otherwise specified, the methods defined in this class are not&#xA; * thread-safe. Multiple threads that need to access a single&#xA; * object concurrently should synchronize amongst themselves and&#xA; * provide the necessary locking. Multiple threads each manipulating&#xA; * separate objects need not synchronize.&#xA; *&#xA; * @see CertPathBuilder&#xA; * &#xA; * @version &#x9;1.15 12/19/03&#xA; * @since &#x9;1.4&#xA; * @author&#x9;Sean Mullan&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="PKIXParameters.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
