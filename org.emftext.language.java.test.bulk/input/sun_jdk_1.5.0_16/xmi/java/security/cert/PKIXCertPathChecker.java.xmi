<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="PKIXCertPathChecker.java">
  <comments>/*&#xA; * @(#)PKIXCertPathChecker.java&#x9;1.7 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <namespaces>cert</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="PKIXCertPathChecker">
    <members xsi:type="members:Constructor" name="PKIXCertPathChecker">
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Default constructor.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="init">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="forward">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CertPathValidatorException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Initializes the internal state of this &lt;code>PKIXCertPathChecker&lt;/code>.&#xA;     * &lt;p> &#xA;     * The &lt;code>forward&lt;/code> flag specifies the order that&#xA;     * certificates will be passed to the {@link #check check} method&#xA;     * (forward or reverse). A &lt;code>PKIXCertPathChecker&lt;/code> &lt;b>must&lt;/b> &#xA;     * support reverse checking and &lt;b>may&lt;/b> support forward checking. &#xA;     *&#xA;     * @param forward the order that certificates are presented to&#xA;     * the &lt;code>check&lt;/code> method. If &lt;code>true&lt;/code>, certificates &#xA;     * are presented from target to most-trusted CA (forward); if &#xA;     * &lt;code>false&lt;/code>, from most-trusted CA to target (reverse).&#xA;     * @throws CertPathValidatorException if this &#xA;     * &lt;code>PKIXCertPathChecker&lt;/code> is unable to check certificates in &#xA;     * the specified order; it should never be thrown if the forward flag &#xA;     * is false since reverse checking must be supported&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isForwardCheckingSupported">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Indicates if forward checking is supported. Forward checking refers&#xA;     * to the ability of the &lt;code>PKIXCertPathChecker&lt;/code> to perform &#xA;     * its checks when certificates are presented to the &lt;code>check&lt;/code>&#xA;     * method in the forward direction (from target to most-trusted CA).&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if forward checking is supported, &#xA;     * &lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSupportedExtensions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an immutable &lt;code>Set&lt;/code> of X.509 certificate extensions &#xA;     * that this &lt;code>PKIXCertPathChecker&lt;/code> supports (i.e. recognizes, is &#xA;     * able to process), or &lt;code>null&lt;/code> if no extensions are supported. &#xA;     * &lt;p>&#xA;     * Each element of the set is a &lt;code>String&lt;/code> representing the&#xA;     * Object Identifier (OID) of the X.509 extension that is supported.&#xA;     * The OID is represented by a set of nonnegative integers separated by&#xA;     * periods.&#xA;     * &lt;p>&#xA;     * All X.509 certificate extensions that a &lt;code>PKIXCertPathChecker&lt;/code>&#xA;     * might possibly be able to process should be included in the set.&#xA;     *&#xA;     * @return an immutable &lt;code>Set&lt;/code> of X.509 extension OIDs (in&#xA;     * &lt;code>String&lt;/code> format) supported by this &#xA;     * &lt;code>PKIXCertPathChecker&lt;/code>, or &lt;code>null&lt;/code> if no &#xA;     * extensions are supported&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="check">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cert">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Certificate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unresolvedCritExts">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <typeArguments xsi:type="generics:QualifiedTypeArgument">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </typeArguments>
            <target xsi:type="classifiers:Interface" href="../../util/Collection.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CertPathValidatorException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Performs the check(s) on the specified certificate using its internal &#xA;     * state and removes any critical extensions that it processes from the &#xA;     * specified collection of OID strings that represent the unresolved &#xA;     * critical extensions. The certificates are presented in the order &#xA;     * specified by the &lt;code>init&lt;/code> method.&#xA;     *&#xA;     * @param cert the &lt;code>Certificate&lt;/code> to be checked&#xA;     * @param unresolvedCritExts a &lt;code>Collection&lt;/code> of OID strings &#xA;     * representing the current set of unresolved critical extensions&#xA;     * @exception CertPathValidatorException if the specified certificate does &#xA;     * not pass the check&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="clone">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a clone of this object. Calls the &lt;code>Object.clone()&lt;/code>&#xA;     * method.&#xA;     * All subclasses which maintain state must support and&#xA;     * override this method, if necessary.&#xA;     * &#xA;     * @return a copy of this &lt;code>PKIXCertPathChecker&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:SelfReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../lang/Object.class.xmi#//@classifiers.0/@members.5"/>
            </next>
            <self xsi:type="literals:Super"/>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <comments>/* Cannot happen */</comments>
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../lang/InternalError.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../lang/Throwable.class.xmi#//@classifiers.0/@members.13"/>
                </next>
              </arguments>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/CloneNotSupportedException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An abstract class that performs one or more checks on an &#xA; * &lt;code>X509Certificate&lt;/code>. &#xA; * &#xA; * &lt;p>A concrete implementation of the &lt;code>PKIXCertPathChecker&lt;/code> class &#xA; * can be created to extend the PKIX certification path validation algorithm.&#xA; * For example, an implementation may check for and process a critical private&#xA; * extension of each certificate in a certification path.&#xA; *&#xA; * &lt;p>Instances of &lt;code>PKIXCertPathChecker&lt;/code> are passed as parameters&#xA; * using the {@link PKIXParameters#setCertPathCheckers setCertPathCheckers}&#xA; * or {@link PKIXParameters#addCertPathChecker addCertPathChecker} methods &#xA; * of the &lt;code>PKIXParameters&lt;/code> and &lt;code>PKIXBuilderParameters&lt;/code>&#xA; * class. Each of the &lt;code>PKIXCertPathChecker&lt;/code>s {@link #check check}&#xA; * methods will be called, in turn, for each certificate processed by a PKIX &#xA; * &lt;code>CertPathValidator&lt;/code> or &lt;code>CertPathBuilder&lt;/code> &#xA; * implementation.&#xA; * &#xA; * &lt;p>A &lt;code>PKIXCertPathChecker&lt;/code> may be called multiple times on &#xA; * successive certificates in a certification path. Concrete subclasses&#xA; * are expected to maintain any internal state that may be necessary to &#xA; * check successive certificates. The {@link #init init} method is used &#xA; * to initialize the internal state of the checker so that the certificates &#xA; * of a new certification path may be checked. A stateful implementation&#xA; * &lt;b>must&lt;/b> override the {@link #clone clone} method if necessary in &#xA; * order to allow a PKIX &lt;code>CertPathBuilder&lt;/code> to efficiently &#xA; * backtrack and try other paths. In these situations, the &#xA; * &lt;code>CertPathBuilder&lt;/code> is able to restore prior path validation &#xA; * states by restoring the cloned &lt;code>PKIXCertPathChecker&lt;/code>s.&#xA; *&#xA; * &lt;p>The order in which the certificates are presented to the &#xA; * &lt;code>PKIXCertPathChecker&lt;/code> may be either in the forward direction &#xA; * (from target to most-trusted CA) or in the reverse direction (from &#xA; * most-trusted CA to target). A &lt;code>PKIXCertPathChecker&lt;/code> implementation&#xA; * &lt;b>must&lt;/b> support reverse checking (the ability to perform its checks when&#xA; * it is presented with certificates in the reverse direction) and &lt;b>may&lt;/b> &#xA; * support forward checking (the ability to perform its checks when it is &#xA; * presented with certificates in the forward direction). The &#xA; * {@link #isForwardCheckingSupported isForwardCheckingSupported} method &#xA; * indicates whether forward checking is supported.&#xA; * &lt;p>&#xA; * Additional input parameters required for executing the check may be &#xA; * specified through constructors of concrete implementations of this class.&#xA; * &lt;p>&#xA; * &lt;b>Concurrent Access&lt;/b>&#xA; * &lt;p>&#xA; * Unless otherwise specified, the methods defined in this class are not&#xA; * thread-safe. Multiple threads that need to access a single&#xA; * object concurrently should synchronize amongst themselves and&#xA; * provide the necessary locking. Multiple threads each manipulating&#xA; * separate objects need not synchronize.&#xA; *&#xA; * @see PKIXParameters &#xA; * @see PKIXBuilderParameters&#xA; *&#xA; * @version &#x9;1.7 12/19/03&#xA; * @since&#x9;1.4&#xA; * @author&#x9;Yassir Elley&#xA; * @author&#x9;Sean Mullan&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
