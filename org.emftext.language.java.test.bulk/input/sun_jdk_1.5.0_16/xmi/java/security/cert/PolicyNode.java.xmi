<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="PolicyNode.java">
  <comments>/*&#xA; * @(#)PolicyNode.java&#x9;1.9 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <namespaces>cert</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Iterator.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="PolicyNode">
    <members xsi:type="members:InterfaceMethod" name="getParent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * Returns the parent of this node, or &lt;code>null&lt;/code> if this is the &#xA;     * root node.&#xA;     *&#xA;     * @return the parent of this node, or &lt;code>null&lt;/code> if this is the &#xA;     * root node&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getChildren">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an iterator over the children of this node. Any attempts to &#xA;     * modify the children of this node through the &#xA;     * &lt;code>Iterator&lt;/code>'s remove method must throw an&#xA;     * &lt;code>UnsupportedOperationException&lt;/code>.&#xA;     *&#xA;     * @return an iterator over the children of this node&#xA;     */</comments>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Iterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDepth">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns the depth of this node in the valid policy tree.&#xA;     *&#xA;     * @return the depth of this node (0 for the root node, 1 for its&#xA;     * children, and so on)&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValidPolicy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the valid policy represented by this node.&#xA;     *&#xA;     * @return the &lt;code>String&lt;/code> OID of the valid policy&#xA;     * represented by this node, or the special value &quot;any-policy&quot;. For &#xA;     * the root node, this method always returns the special value &quot;any-policy&quot;.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPolicyQualifiers">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the set of policy qualifiers associated with the&#xA;     * valid policy represented by this node.&#xA;     *&#xA;     * @return an immutable &lt;code>Set&lt;/code> of &#xA;     * &lt;code>PolicyQualifierInfo&lt;/code>s. For the root node, this&#xA;     * is always an empty &lt;code>Set&lt;/code>.&#xA;     */</comments>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="PolicyQualifierInfo.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getExpectedPolicies">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the set of expected policies that would satisfy this&#xA;     * node's valid policy in the next certificate to be processed.&#xA;     *&#xA;     * @return an immutable &lt;code>Set&lt;/code> of expected policy &#xA;     * &lt;code>String&lt;/code> OIDs, or an immutable &lt;code>Set&lt;/code> with&#xA;     * the single special value &quot;any-policy&quot;. For the root node, this method &#xA;     * always returns a &lt;code>Set&lt;/code> with the single value &quot;any-policy&quot;.&#xA;     */</comments>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isCritical">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Returns the criticality indicator of the certificate policy extension&#xA;     * in the most recently processed certificate.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if extension marked critical, &#xA;     * &lt;code>false&lt;/code> otherwise. For the root node, &lt;code>false&lt;/code>&#xA;     * is always returned.&#xA;     */</comments>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An immutable valid policy tree node as defined by the PKIX certification &#xA; * path validation algorithm.&#xA; *&#xA; * &lt;p>One of the outputs of the PKIX certification path validation &#xA; * algorithm is a valid policy tree, which includes the policies that&#xA; * were determined to be valid, how this determination was reached,&#xA; * and any policy qualifiers encountered. This tree is of depth&#xA; * &lt;i>n&lt;/i>, where &lt;i>n&lt;/i> is the length of the certification&#xA; * path that has been validated.&#xA; *&#xA; * &lt;p>Most applications will not need to examine the valid policy tree.&#xA; * They can achieve their policy processing goals by setting the &#xA; * policy-related parameters in &lt;code>PKIXParameters&lt;/code>. However,&#xA; * the valid policy tree is available for more sophisticated applications,&#xA; * especially those that process policy qualifiers.&#xA; *&#xA; * &lt;p>{@link PKIXCertPathValidatorResult#getPolicyTree() &#xA; * PKIXCertPathValidatorResult.getPolicyTree} returns the root node of the&#xA; * valid policy tree. The tree can be traversed using the &#xA; * {@link #getChildren getChildren} and {@link #getParent getParent} methods. &#xA; * Data about a particular node can be retrieved using other methods of &#xA; * &lt;code>PolicyNode&lt;/code>.&#xA; *&#xA; * &lt;p>&lt;b>Concurrent Access&lt;/b>&#xA; * &lt;p>All &lt;code>PolicyNode&lt;/code> objects must be immutable and &#xA; * thread-safe. Multiple threads may concurrently invoke the methods defined &#xA; * in this class on a single &lt;code>PolicyNode&lt;/code> object (or more than one) &#xA; * with no ill effects. This stipulation applies to all public fields and &#xA; * methods of this class and any added or overridden by subclasses. &#xA; *&#xA; * @version     1.9 12/19/03&#xA; * @since       1.4&#xA; * @author      Sean Mullan&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
