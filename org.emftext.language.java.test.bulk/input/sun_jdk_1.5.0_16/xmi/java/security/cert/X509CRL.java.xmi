<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xmlns:variables="http://www.emftext.org/java/variables" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16 http://www.emftext.org/java/variables ../../../java.ecore#/17" name="X509CRL.java">
  <comments>/*&#xA; * @(#)X509CRL.java&#x9;1.29 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <namespaces>cert</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NoSuchAlgorithmException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../NoSuchProviderException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../InvalidKeyException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SignatureException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PublicKey.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>javax</namespaces>
    <namespaces>security</namespaces>
    <namespaces>auth</namespaces>
    <namespaces>x500</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../javax/security/auth/x500/X500Principal.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>math</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/Date.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/Arrays.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>x509</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="X509CRL">
    <members xsi:type="members:Field" name="issuerPrincipal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/security/auth/x500/X500Principal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:Constructor" name="X509CRL">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="instantiations:ExplicitConstructorCall">
          <arguments xsi:type="references:StringReference" value="X.509"/>
          <callTarget xsi:type="literals:Super"/>
        </expression>
      </statements>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructor for X.509 CRLs.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="other">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Compares this CRL for equality with the given &#xA;     * object. If the &lt;code>other&lt;/code> object is an &#xA;     * &lt;code>instanceof&lt;/code> &lt;code>X509CRL&lt;/code>, then&#xA;     * its encoded form is retrieved and compared with the&#xA;     * encoded form of this CRL.&#xA;     * &#xA;     * @param other the object to test for equality with this CRL.&#xA;     * &#xA;     * @return true iff the encoded forms of the two CRLs&#xA;     * match, false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral" value="true"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:SelfReference">
            <self xsi:type="literals:This"/>
          </children>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Negate"/>
          <child xsi:type="expressions:NestedExpression">
            <expression xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences target="//@classifiers.0"/>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
            </expression>
          </child>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="thisCRL">
            <typeReference xsi:type="types:Byte"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0/@members.58"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="otherCRL">
            <typeReference xsi:type="types:Byte"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0/@members.58"/>
                <arguments xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences target="//@classifiers.0"/>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../util/Arrays.class.xmi#//@classifiers.0/@members.70"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@statements.0/@variable"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@statements.2/@statements.1/@variable"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../util/Arrays.class.xmi#//@classifiers.0"/>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:BooleanLiteral"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="CRLException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hashcode value for this CRL from its&#xA;     * encoded form.&#xA;     *&#xA;     * @return the hashcode value.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="retval">
          <typeReference xsi:type="types:Int"/>
          <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="crlData">
            <typeReference xsi:type="types:Byte"/>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0/@members.58"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:ForLoop">
          <statement xsi:type="statements:Block">
            <statements xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:AssignmentPlus"/>
                <value xsi:type="expressions:MultiplicativeExpression">
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@statements.0/@variable">
                    <arraySelectors>
                      <position xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@statements.1/@init"/>
                    </arraySelectors>
                  </children>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@statements.1/@init"/>
                  <multiplicativeOperators xsi:type="operators:Multiplication"/>
                </value>
              </expression>
            </statements>
          </statement>
          <condition xsi:type="expressions:RelationExpression">
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@statements.1/@init"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@statements.0/@variable">
              <next xsi:type="references:IdentifierReference"/>
            </children>
            <relationOperators xsi:type="operators:LessThan"/>
          </condition>
          <init xsi:type="variables:LocalVariable" name="i">
            <typeReference xsi:type="types:Int"/>
            <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
          </init>
          <updates xsi:type="expressions:SuffixUnaryModificationExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.1/@statements.1/@init"/>
            <operator xsi:type="operators:PlusPlus"/>
          </updates>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@statements.0/@variable"/>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="CRLException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEncoded">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CRLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the ASN.1 DER-encoded form of this CRL.&#xA;     *&#xA;     * @return the encoded form of this certificate&#xA;     * @exception CRLException if an encoding error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="verify">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../PublicKey.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CRLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NoSuchAlgorithmException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidKeyException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NoSuchProviderException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SignatureException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Verifies that this CRL was signed using the &#xA;     * private key that corresponds to the given public key.&#xA;     *&#xA;     * @param key the PublicKey used to carry out the verification.&#xA;     *&#xA;     * @exception NoSuchAlgorithmException on unsupported signature&#xA;     * algorithms.&#xA;     * @exception InvalidKeyException on incorrect key.&#xA;     * @exception NoSuchProviderException if there's no default provider.&#xA;     * @exception SignatureException on signature errors.&#xA;     * @exception CRLException on encoding errors.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="verify">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="key">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../PublicKey.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="sigProvider">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CRLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NoSuchAlgorithmException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../InvalidKeyException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../NoSuchProviderException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SignatureException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Verifies that this CRL was signed using the &#xA;     * private key that corresponds to the given public key.&#xA;     * This method uses the signature verification engine&#xA;     * supplied by the given provider.&#xA;     *&#xA;     * @param key the PublicKey used to carry out the verification.&#xA;     * @param sigProvider the name of the signature provider.&#xA;     * &#xA;     * @exception NoSuchAlgorithmException on unsupported signature&#xA;     * algorithms.&#xA;     * @exception InvalidKeyException on incorrect key.&#xA;     * @exception NoSuchProviderException on incorrect provider.&#xA;     * @exception SignatureException on signature errors.&#xA;     * @exception CRLException on encoding errors.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getVersion">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>version&lt;/code> (version number) value from the CRL.&#xA;     * The ASN.1 definition for this is:&#xA;     * &lt;pre>&#xA;     * version    Version OPTIONAL,&#xA;     *             -- if present, must be v2&lt;p>&#xA;     * Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }&#xA;     *             -- v3 does not apply to CRLs but appears for consistency&#xA;     *             -- with definition of Version for certs&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @return the version number, i.e. 1 or 2.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIssuerDN">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * &lt;strong>Denigrated&lt;/strong>, replaced by {@linkplain&#xA;     * #getIssuerX500Principal()}. This method returns the &lt;code>issuer&lt;/code>&#xA;     * as an implementation specific Principal object, which should not be&#xA;     * relied upon by portable code.&#xA;     *&#xA;     * &lt;p>&#xA;     * Gets the &lt;code>issuer&lt;/code> (issuer distinguished name) value from &#xA;     * the CRL. The issuer name identifies the entity that signed (and&#xA;     * issued) the CRL. &#xA;     * &#xA;     * &lt;p>The issuer name field contains an&#xA;     * X.500 distinguished name (DN).&#xA;     * The ASN.1 definition for this is:&#xA;     * &lt;pre>&#xA;     * issuer    Name&#xA;     *&#xA;     * Name ::= CHOICE { RDNSequence }&#xA;     * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName&#xA;     * RelativeDistinguishedName ::=&#xA;     *     SET OF AttributeValueAssertion&#xA;     *&#xA;     * AttributeValueAssertion ::= SEQUENCE {&#xA;     *                               AttributeType,&#xA;     *                               AttributeValue }&#xA;     * AttributeType ::= OBJECT IDENTIFIER&#xA;     * AttributeValue ::= ANY&#xA;     * &lt;/pre>&#xA;     * The &lt;code>Name&lt;/code> describes a hierarchical name composed of&#xA;     * attributes,&#xA;     * such as country name, and corresponding values, such as US.&#xA;     * The type of the &lt;code>AttributeValue&lt;/code> component is determined by&#xA;     * the &lt;code>AttributeType&lt;/code>; in general it will be a &#xA;     * &lt;code>directoryString&lt;/code>. A &lt;code>directoryString&lt;/code> is usually &#xA;     * one of &lt;code>PrintableString&lt;/code>,&#xA;     * &lt;code>TeletexString&lt;/code> or &lt;code>UniversalString&lt;/code>.&#xA;     * &#xA;     * @return a Principal whose name is the issuer distinguished name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getIssuerX500Principal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../javax/security/auth/x500/X500Principal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the issuer (issuer distinguished name) value from the&#xA;     * CRL as an &lt;code>X500Principal&lt;/code>.&#xA;     * &lt;p>&#xA;     * It is recommended that subclasses override this method.&#xA;     *&#xA;     * @return an &lt;code>X500Principal&lt;/code> representing the issuer&#xA;     *&#x9;&#x9;distinguished name&#xA;     * @since 1.4&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0/@members.57"/>
                  <arguments xsi:type="references:SelfReference">
                    <self xsi:type="literals:This"/>
                  </arguments>
                </next>
                <target xsi:type="classifiers:Class" href="../../../sun/security/x509/X509CRLImpl.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getThisUpdate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../util/Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>thisUpdate&lt;/code> date from the CRL.&#xA;     * The ASN.1 definition for this is:&#xA;     * &lt;pre>&#xA;     * thisUpdate   ChoiceOfTime&#xA;     * ChoiceOfTime ::= CHOICE {&#xA;     *     utcTime        UTCTime,&#xA;     *     generalTime    GeneralizedTime }&#xA;     * &lt;/pre>&#xA;     *&#xA;     * @return the &lt;code>thisUpdate&lt;/code> date from the CRL.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNextUpdate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../util/Date.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>nextUpdate&lt;/code> date from the CRL.&#xA;     *&#xA;     * @return the &lt;code>nextUpdate&lt;/code> date from the CRL, or null if&#xA;     * not present.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRevokedCertificate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="X509CRLEntry.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="serialNumber">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../math/BigInteger.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the CRL entry, if any, with the given certificate serialNumber.&#xA;     *&#xA;     * @param serialNumber the serial number of the certificate for which a CRL entry&#xA;     * is to be looked up&#xA;     * @return the entry with the given serial number, or null if no such entry&#xA;     * exists in this CRL.&#xA;     * @see X509CRLEntry&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getRevokedCertificate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="X509CRLEntry.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="certificate">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="X509Certificate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the CRL entry, if any, for the given certificate.&#xA;     *&#xA;     * &lt;p>This method can be used to lookup CRL entries in indirect CRLs,&#xA;     * that means CRLs that contain entries from issuers other than the CRL&#xA;     * issuer. The default implementation will only return entries for&#xA;     * certificates issued by the CRL issuer. Subclasses that wish to&#xA;     * support indirect CRLs should override this method.&#xA;     *&#xA;     * @param certificate the certificate for which a CRL entry is to be looked &#xA;     *   up&#xA;     * @return the entry for the given certificate, or null if no such entry&#xA;     *   exists in this CRL.&#xA;     * @exception NullPointerException if certificate is null&#xA;     *&#xA;     * @since 1.5&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="certIssuer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../javax/security/auth/x500/X500Principal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="X509Certificate.class.xmi#//@classifiers.0/@members.9"/>
            </next>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="crlIssuer">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../javax/security/auth/x500/X500Principal.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.9"/>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../javax/security/auth/x500/X500Principal.class.xmi#//@classifiers.0/@members.13"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@statements.1/@variable"/>
            </next>
          </children>
          <children xsi:type="literals:BooleanLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.13/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="X509Certificate.class.xmi#//@classifiers.0/@members.7"/>
            </next>
          </arguments>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRevokedCertificates">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:ExtendsTypeArgument">
            <extendTypes xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="X509CRLEntry.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </extendTypes>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Set.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets all the entries from this CRL.&#xA;     * This returns a Set of X509CRLEntry objects.&#xA;     *&#xA;     * @return all the entries or null if there are none present.&#xA;     * @see X509CRLEntry&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTBSCertList">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CRLException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the DER-encoded CRL information, the&#xA;     * &lt;code>tbsCertList&lt;/code> from this CRL.&#xA;     * This can be used to verify the signature independently.&#xA;     *&#xA;     * @return the DER-encoded CRL information.&#xA;     * @exception CRLException if an encoding error occurs.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSignature">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the &lt;code>signature&lt;/code> value (the raw signature bits) from &#xA;     * the CRL.&#xA;     * The ASN.1 definition for this is:&#xA;     * &lt;pre>&#xA;     * signature     BIT STRING  &#xA;     * &lt;/pre>&#xA;     *&#xA;     * @return the signature.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSigAlgName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the signature algorithm name for the CRL&#xA;     * signature algorithm. An example is the string &quot;SHA-1/DSA&quot;.&#xA;     * The ASN.1 definition for this is:&#xA;     * &lt;pre>&#xA;     * signatureAlgorithm   AlgorithmIdentifier&lt;p>&#xA;     * AlgorithmIdentifier  ::=  SEQUENCE  {&#xA;     *     algorithm               OBJECT IDENTIFIER,&#xA;     *     parameters              ANY DEFINED BY algorithm OPTIONAL  }&#xA;     *                             -- contains a value of the type&#xA;     *                             -- registered for use with the&#xA;     *                             -- algorithm object identifier value&#xA;     * &lt;/pre>&#xA;     * &#xA;     * &lt;p>The algorithm name is determined from the &lt;code>algorithm&lt;/code>&#xA;     * OID string.&#xA;     *&#xA;     * @return the signature algorithm name.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSigAlgOID">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the signature algorithm OID string from the CRL.&#xA;     * An OID is represented by a set of nonnegative whole numbers separated&#xA;     * by periods.&#xA;     * For example, the string &quot;1.2.840.10040.4.3&quot; identifies the SHA-1&#xA;     * with DSA signature algorithm, as per RFC 2459.&#xA;     * &#xA;     * &lt;p>See {@link #getSigAlgName() getSigAlgName} for &#xA;     * relevant ASN.1 definitions.&#xA;     *&#xA;     * @return the signature algorithm OID string.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSigAlgParams">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Gets the DER-encoded signature algorithm parameters from this&#xA;     * CRL's signature algorithm. In most cases, the signature&#xA;     * algorithm parameters are null; the parameters are usually&#xA;     * supplied with the public key.&#xA;     * If access to individual parameter values is needed then use&#xA;     * {@link java.security.AlgorithmParameters AlgorithmParameters}&#xA;     * and instantiate with the name returned by&#xA;     * {@link #getSigAlgName() getSigAlgName}.&#xA;     * &#xA;     * &lt;p>See {@link #getSigAlgName() getSigAlgName} for &#xA;     * relevant ASN.1 definitions.&#xA;     *&#xA;     * @return the DER-encoded signature algorithm parameters, or&#xA;     *         null if no parameters are present.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&#xA; * Abstract class for an X.509 Certificate Revocation List (CRL).&#xA; * A CRL is a time-stamped list identifying revoked certificates.&#xA; * It is signed by a Certificate Authority (CA) and made freely&#xA; * available in a public repository.  &#xA; * &#xA; * &lt;p>Each revoked certificate is&#xA; * identified in a CRL by its certificate serial number. When a&#xA; * certificate-using system uses a certificate (e.g., for verifying a&#xA; * remote user's digital signature), that system not only checks the&#xA; * certificate signature and validity but also acquires a suitably-&#xA; * recent CRL and checks that the certificate serial number is not on&#xA; * that CRL.  The meaning of &quot;suitably-recent&quot; may vary with local&#xA; * policy, but it usually means the most recently-issued CRL.  A CA&#xA; * issues a new CRL on a regular periodic basis (e.g., hourly, daily, or&#xA; * weekly).  Entries are added to CRLs as revocations occur, and an&#xA; * entry may be removed when the certificate expiration date is reached.&#xA; * &lt;p>&#xA; * The X.509 v2 CRL format is described below in ASN.1:&#xA; * &lt;pre>&#xA; * CertificateList  ::=  SEQUENCE  {&#xA; *     tbsCertList          TBSCertList,&#xA; *     signatureAlgorithm   AlgorithmIdentifier,&#xA; *     signature            BIT STRING  }&#xA; * &lt;/pre>&#xA; * &lt;p>&#xA; * More information can be found in RFC 2459,&#xA; * &quot;Internet X.509 Public Key Infrastructure Certificate and CRL&#xA; * Profile&quot; at &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2459.txt&quot;>&#xA; * http://www.ietf.org/rfc/rfc2459.txt &lt;/A>.    &#xA; * &lt;p>&#xA; * The ASN.1 definition of &lt;code>tbsCertList&lt;/code> is:&#xA; * &lt;pre>&#xA; * TBSCertList  ::=  SEQUENCE  {&#xA; *     version                 Version OPTIONAL,&#xA; *                             -- if present, must be v2&#xA; *     signature               AlgorithmIdentifier,&#xA; *     issuer                  Name,&#xA; *     thisUpdate              ChoiceOfTime,&#xA; *     nextUpdate              ChoiceOfTime OPTIONAL,&#xA; *     revokedCertificates     SEQUENCE OF SEQUENCE  {&#xA; *         userCertificate         CertificateSerialNumber,&#xA; *         revocationDate          ChoiceOfTime,&#xA; *         crlEntryExtensions      Extensions OPTIONAL&#xA; *                                 -- if present, must be v2&#xA; *         }  OPTIONAL,&#xA; *     crlExtensions           [0]  EXPLICIT Extensions OPTIONAL&#xA; *                                  -- if present, must be v2&#xA; *     }&#xA; * &lt;/pre>&#xA; * &lt;p>&#xA; * CRLs are instantiated using a certificate factory. The following is an&#xA; * example of how to instantiate an X.509 CRL:&#xA; * &lt;pre>&lt;code> &#xA; * InputStream inStream = new FileInputStream(&quot;fileName-of-crl&quot;);&#xA; * CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);&#xA; * X509CRL crl = (X509CRL)cf.generateCRL(inStream);&#xA; * inStream.close();&#xA; * &lt;/code>&lt;/pre>&#xA; *&#xA; * @author Hemma Prafullchandra&#xA; *&#xA; * @version 1.29, 12/19/03&#xA; *&#xA; * @see CRL&#xA; * @see CertificateFactory&#xA; * @see X509Extension&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="X509Extension.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Class" href="CRL.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
