<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:generics="http://www.emftext.org/java/generics" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/generics ../../../java.ecore#/6 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Acl.java">
  <comments>/*&#xA; * @(#)Acl.java&#x9;1.23 04/05/05&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>security</namespaces>
  <namespaces>acl</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Acl">
    <members xsi:type="members:InterfaceMethod" name="setName">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="caller">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NotOwnerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the name of this ACL.&#xA;     *&#xA;     * @param caller the principal invoking this method. It must be an&#xA;     * owner of this ACL.&#xA;     *&#xA;     * @param name the name to be given to this ACL.&#xA;     *&#xA;     * @exception NotOwnerException if the caller principal&#xA;     * is not an owner of this ACL.  &#xA;     *&#xA;     * @see #getName&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the name of this ACL. &#xA;     *&#xA;     * @return the name of this ACL.&#xA;     *&#xA;     * @see #setName&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addEntry">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="caller">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entry">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AclEntry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NotOwnerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an ACL entry to this ACL. An entry associates a principal&#xA;     * (e.g., an individual or a group) with a set of&#xA;     * permissions. Each principal can have at most one positive ACL&#xA;     * entry (specifying permissions to be granted to the principal)&#xA;     * and one negative ACL entry (specifying permissions to be&#xA;     * denied). If there is already an ACL entry of the same type&#xA;     * (negative or positive) already in the ACL, false is returned.&#xA;     * &#xA;     * @param caller the principal invoking this method. It must be an&#xA;     * owner of this ACL.&#xA;     *&#xA;     * @param entry the ACL entry to be added to this ACL.&#xA;     *&#xA;     * @return true on success, false if an entry of the same type&#xA;     * (positive or negative) for the same principal is already&#xA;     * present in this ACL.&#xA;     *&#xA;     * @exception NotOwnerException if the caller principal&#xA;     *  is not an owner of this ACL.  &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeEntry">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="caller">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entry">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AclEntry.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NotOwnerException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes an ACL entry from this ACL.&#xA;     * &#xA;     * @param caller the principal invoking this method. It must be an&#xA;     * owner of this ACL.&#xA;     *  &#xA;     * @param entry the ACL entry to be removed from this ACL.&#xA;     * &#xA;     * @return true on success, false if the entry is not part of this ACL.&#xA;     * &#xA;     * @exception NotOwnerException if the caller principal is not&#xA;     * an owner of this Acl.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPermissions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="Permission.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="user">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an enumeration for the set of allowed permissions for the &#xA;     * specified principal (representing an entity such as an individual or &#xA;     * a group). This set of allowed permissions is calculated as&#xA;     * follows:&lt;p>&#xA;     *&#xA;     * &lt;ul>&#xA;     *  &#xA;     * &lt;li>If there is no entry in this Access Control List for the &#xA;     * specified principal, an empty permission set is returned.&lt;p>&#xA;     * &#xA;     * &lt;li>Otherwise, the principal's group permission sets are determined.&#xA;     * (A principal can belong to one or more groups, where a group is a &#xA;     * group of principals, represented by the Group interface.)&#xA;     * The group positive permission set is the union of all &#xA;     * the positive permissions of each group that the principal belongs to.&#xA;     * The group negative permission set is the union of all &#xA;     * the negative permissions of each group that the principal belongs to.&#xA;     * If there is a specific permission that occurs in both &#xA;     * the positive permission set and the negative permission set, &#xA;     * it is removed from both.&lt;p>&#xA;     *&#xA;     * The individual positive and negative permission sets are also &#xA;     * determined. The positive permission set contains the permissions &#xA;     * specified in the positive ACL entry (if any) for the principal. &#xA;     * Similarly, the negative permission set contains the permissions&#xA;     * specified in the negative ACL entry (if any) for the principal. &#xA;     * The individual positive (or negative) permission set is considered &#xA;     * to be null if there is not a positive (negative) ACL entry for the&#xA;     * principal in this ACL.&lt;p>&#xA;     *&#xA;     * The set of permissions granted to the principal is then calculated &#xA;     * using the simple rule that individual permissions always override &#xA;     * the group permissions. That is, the principal's individual negative&#xA;     * permission set (specific denial of permissions) overrides the group &#xA;     * positive permission set, and the principal's individual positive &#xA;     * permission set overrides the group negative permission set. &#xA;     * &#xA;     * &lt;/ul>&#xA;     *&#xA;     * @param user the principal whose permission set is to be returned.&#xA;     * &#xA;     * @return the permission set specifying the permissions the principal &#xA;     * is allowed. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="entries">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <typeArguments xsi:type="generics:QualifiedTypeArgument">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="AclEntry.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </typeArguments>
          <target xsi:type="classifiers:Interface" href="../../util/Enumeration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns an enumeration of the entries in this ACL. Each element in &#xA;     * the enumeration is of type AclEntry.&#xA;     * &#xA;     * @return an enumeration of the entries in this ACL.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="checkPermission">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="principal">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Principal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="permission">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Permission.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks whether or not the specified principal has the specified &#xA;     * permission. If it does, true is returned, otherwise false is returned.&#xA;     * &#xA;     * More specifically, this method checks whether the passed permission&#xA;     * is a member of the allowed permission set of the specified principal.&#xA;     * The allowed permission set is determined by the same algorithm as is &#xA;     * used by the &lt;code>getPermissions&lt;/code> method.&#xA;     * &#xA;     * @param principal the principal, assumed to be a valid authenticated &#xA;     * Principal.&#xA;     * &#xA;     * @param permission the permission to be checked for.&#xA;     * &#xA;     * @return true if the principal has the specified permission, false &#xA;     * otherwise.&#xA;     * &#xA;     * @see #getPermissions&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a string representation of the &#xA;     * ACL contents.&#xA;     * &#xA;     * @return a string representation of the ACL contents.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface representing an Access Control List (ACL).  An Access&#xA; * Control List is a data structure used to guard access to&#xA; * resources.&lt;p>&#xA; *&#xA; * An ACL can be thought of as a data structure with multiple ACL&#xA; * entries.  Each ACL entry, of interface type AclEntry, contains a&#xA; * set of permissions associated with a particular principal. (A&#xA; * principal represents an entity such as an individual user or a&#xA; * group). Additionally, each ACL entry is specified as being either&#xA; * positive or negative. If positive, the permissions are to be&#xA; * granted to the associated principal. If negative, the permissions&#xA; * are to be denied.&lt;p>&#xA; *&#xA; * The ACL Entries in each ACL observe the following rules:&lt;p>&#xA; *&#xA; * &lt;ul> &lt;li>Each principal can have at most one positive ACL entry and&#xA; * one negative entry; that is, multiple positive or negative ACL&#xA; * entries are not allowed for any principal.  Each entry specifies&#xA; * the set of permissions that are to be granted (if positive) or&#xA; * denied (if negative). &lt;p>&#xA; * &#xA; * &lt;li>If there is no entry for a particular principal, then the&#xA; * principal is considered to have a null (empty) permission set.&lt;p>&#xA; *&#xA; * &lt;li>If there is a positive entry that grants a principal a&#xA; * particular permission, and a negative entry that denies the&#xA; * principal the same permission, the result is as though the&#xA; * permission was never granted or denied. &lt;p>&#xA; *&#xA; * &lt;li>Individual permissions always override permissions of the&#xA; * group(s) to which the individual belongs. That is, individual&#xA; * negative permissions (specific denial of permissions) override the&#xA; * groups' positive permissions. And individual positive permissions&#xA; * override the groups' negative permissions.&lt;p>&#xA; *&#xA; * &lt;/ul>&#xA; *&#xA; * The &lt;code> java.security.acl &lt;/code> package provides the&#xA; * interfaces to the ACL and related data structures (ACL entries,&#xA; * groups, permissions, etc.), and the &lt;code> sun.security.acl &lt;/code>&#xA; * classes provide a default implementation of the interfaces. For&#xA; * example, &lt;code> java.security.acl.Acl &lt;/code> provides the&#xA; * interface to an ACL and the &lt;code> sun.security.acl.AclImpl &lt;/code>&#xA; * class provides the default implementation of the interface.&lt;p>&#xA; * &#xA; * The &lt;code> java.security.acl.Acl &lt;/code> interface extends the&#xA; * &lt;code> java.security.acl.Owner &lt;/code> interface. The Owner&#xA; * interface is used to maintain a list of owners for each ACL.  Only&#xA; * owners are allowed to modify an ACL. For example, only an owner can&#xA; * call the ACL's &lt;code>addEntry&lt;/code> method to add a new ACL entry &#xA; * to the ACL.&#xA; * &#xA; * @see java.security.acl.AclEntry&#xA; * @see java.security.acl.Owner&#xA; * @see java.security.acl.Acl#getPermissions&#xA; * &#xA; * @version 1.23, 04/05/05&#xA; * @author Satish Dharmaraj &#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Owner.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
