<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/types ../../java.ecore#/16" name="BeanInfo.java">
  <comments>/*&#xA; * @(#)BeanInfo.java&#x9;1.28 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>beans</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="BeanInfo">
    <members xsi:type="members:InterfaceMethod" name="getBeanDescriptor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the beans &lt;code>BeanDescriptor&lt;/code>.&#xA;     * &#xA;     * @return  A BeanDescriptor providing overall information about&#xA;     * the bean, such as its displayName, its customizer, etc.  May&#xA;     * return null if the information should be obtained by automatic&#xA;     * analysis.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="BeanDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEventSetDescriptors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the beans &lt;code>EventSetDescriptor&lt;/code>s.&#xA;     * &#xA;     * @return  An array of EventSetDescriptors describing the kinds of &#xA;     * events fired by this bean.  May return null if the information&#xA;     * should be obtained by automatic analysis.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="EventSetDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDefaultEventIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * A bean may have a &quot;default&quot; event that is the event that will&#xA;     * mostly commonly be used by humans when using the bean. &#xA;     * @return Index of default event in the EventSetDescriptor array&#xA;     *&#x9;&#x9;returned by getEventSetDescriptors.&#xA;     * &lt;P>&#x9;Returns -1 if there is no default event.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPropertyDescriptors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the beans &lt;code>PropertyDescriptor&lt;/code>s.&#xA;     * &#xA;     * @return An array of PropertyDescriptors describing the editable&#xA;     * properties supported by this bean.  May return null if the&#xA;     * information should be obtained by automatic analysis.&#xA;     * &lt;p>&#xA;     * If a property is indexed, then its entry in the result array will&#xA;     * belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.&#xA;     * A client of getPropertyDescriptors can use &quot;instanceof&quot; to check&#xA;     * if a given PropertyDescriptor is an IndexedPropertyDescriptor.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="PropertyDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getDefaultPropertyIndex">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * A bean may have a &quot;default&quot; property that is the property that will&#xA;     * mostly commonly be initially chosen for update by human's who are &#xA;     * customizing the bean.&#xA;     * @return  Index of default property in the PropertyDescriptor array&#xA;     * &#x9;&#x9;returned by getPropertyDescriptors.&#xA;     * &lt;P>&#x9;Returns -1 if there is no default property.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMethodDescriptors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the beans &lt;code>MethodDescriptor&lt;/code>s.&#xA;     * &#xA;     * @return An array of MethodDescriptors describing the externally&#xA;     * visible methods supported by this bean.  May return null if&#xA;     * the information should be obtained by automatic analysis.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="MethodDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAdditionalBeanInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0">
          <comments>/**&#xA;     * This method allows a BeanInfo object to return an arbitrary collection&#xA;     * of other BeanInfo objects that provide additional information on the&#xA;     * current bean.&#xA;     * &lt;P>&#xA;     * If there are conflicts or overlaps between the information provided&#xA;     * by different BeanInfo objects, then the current BeanInfo takes precedence&#xA;     * over the getAdditionalBeanInfo objects, and later elements in the array&#xA;     * take precedence over earlier ones.&#xA;     *&#xA;     * @return an array of BeanInfo objects.  May return null.&#xA;     */</comments>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIcon">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * This method returns an image object that can be used to&#xA;     * represent the bean in toolboxes, toolbars, etc.   Icon images&#xA;     * will typically be GIFs, but may in future include other formats.&#xA;     * &lt;p>&#xA;     * Beans aren't required to provide icons and may return null from&#xA;     * this method.&#xA;     * &lt;p>&#xA;     * There are four possible flavors of icons (16x16 color,&#xA;     * 32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only&#xA;     * support a single icon we recommend supporting 16x16 color.&#xA;     * &lt;p>&#xA;     * We recommend that icons have a &quot;transparent&quot; background&#xA;     * so they can be rendered onto an existing background.&#xA;     *&#xA;     * @param  iconKind  The kind of icon requested.  This should be&#xA;     *    one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32, &#xA;     *    ICON_MONO_16x16, or ICON_MONO_32x32.&#xA;     * @return  An image object representing the requested icon.  May&#xA;     *    return null if no suitable icon is available.&#xA;     */</comments>
        <namespaces>java</namespaces>
        <namespaces>awt</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../awt/Image.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="iconKind">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:Field" name="ICON_COLOR_16x16">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Constant to indicate a 16 x 16 color icon.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="ICON_COLOR_32x32">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Constant to indicate a 32 x 32 color icon.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="ICON_MONO_16x16">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Constant to indicate a 16 x 16 monochrome icon.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <members xsi:type="members:Field" name="ICON_MONO_32x32">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Constant to indicate a 32 x 32 monochrome icon.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A bean implementor who wishes to provide explicit information about&#xA; * their bean may provide a BeanInfo class that implements this BeanInfo&#xA; * interface and provides explicit information about the methods,&#xA; * properties, events, etc, of their  bean.&#xA; * &lt;p>&#xA; * A bean implementor doesn't need to provide a complete set of&#xA; * explicit information.  You can pick and choose which information&#xA; * you want to provide and the rest will be obtained by automatic&#xA; * analysis using low-level reflection of the bean classes' methods&#xA; * and applying standard design patterns.&#xA; * &lt;p>&#xA; * You get the opportunity to provide lots and lots of different&#xA; * information as part of the various XyZDescriptor classes.  But&#xA; * don't panic, you only really need to provide the minimal core&#xA; * information required by the various constructors.&#xA; * &lt;P>&#xA; * See also the SimpleBeanInfo class which provides a convenient&#xA; * &quot;noop&quot; base class for BeanInfo classes, which you can override&#xA; * for those specific places where you want to return explicit info.&#xA; * &lt;P>&#xA; * To learn about all the behaviour of a bean see the Introspector class.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
