<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../java.ecore#/2 http://www.emftext.org/java/containers ../../java.ecore#/4 http://www.emftext.org/java/expressions ../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../java.ecore#/8 http://www.emftext.org/java/literals ../../java.ecore#/9 http://www.emftext.org/java/members ../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../java.ecore#/11 http://www.emftext.org/java/operators ../../java.ecore#/12 http://www.emftext.org/java/parameters ../../java.ecore#/13 http://www.emftext.org/java/references ../../java.ecore#/14 http://www.emftext.org/java/statements ../../java.ecore#/15 http://www.emftext.org/java/types ../../java.ecore#/16" name="SimpleBeanInfo.java">
  <comments>/*&#xA; * @(#)SimpleBeanInfo.java&#x9;1.27 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>beans</namespaces>
  <classifiers xsi:type="classifiers:Class" name="SimpleBeanInfo">
    <members xsi:type="members:ClassMethod" name="getBeanDescriptor">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BeanDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Deny knowledge about the class and customizer of the bean.&#xA;     * You can override this if you wish to provide explicit info.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPropertyDescriptors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PropertyDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Deny knowledge of properties. You can override this&#xA;     * if you wish to provide explicit property info.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDefaultPropertyIndex">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Deny knowledge of a default property. You can override this&#xA;     * if you wish to define a default property for the bean.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEventSetDescriptors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="EventSetDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Deny knowledge of event sets. You can override this&#xA;     * if you wish to provide explicit event set info.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getDefaultEventIndex">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Deny knowledge of a default event. You can override this&#xA;     * if you wish to define a default event for the bean.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="expressions:UnaryExpression">
          <operators xsi:type="operators:Subtraction"/>
          <child xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getMethodDescriptors">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MethodDescriptor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Deny knowledge of methods. You can override this&#xA;     * if you wish to provide explicit method info.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getAdditionalBeanInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="BeanInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Claim there are no other relevant BeanInfo objects.  You&#xA;     * may override this if you want to (for example) return a&#xA;     * BeanInfo for a base class.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getIcon">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>awt</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../awt/Image.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="iconKind">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Claim there are no icons available.  You can override&#xA;     * this if you want to provide icons for your bean.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="literals:NullLiteral"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="loadImage">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>awt</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../awt/Image.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="resourceName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This is a utility method to help in loading icon images.&#xA;     * It takes the name of a resource file associated with the&#xA;     * current object's class file and loads an image object&#xA;     * from that file.  Typically images will be GIFs.&#xA;     * &lt;p>&#xA;     * @param resourceName  A pathname relative to the directory&#xA;     *&#x9;&#x9;holding the class file of the current class.  For example,&#xA;     *&#x9;&#x9;&quot;wombat.gif&quot;.&#xA;     * @return  an image object.  May be null if the load failed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="c">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../lang/Object.class.xmi#//@classifiers.0/@members.2"/>
            </initialValue>
            <annotationsAndModifiers xsi:type="modifiers:Final"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="ip">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>awt</namespaces>
              <namespaces>image</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Interface" href="../awt/image/ImageProducer.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>java</namespaces>
                <namespaces>awt</namespaces>
                <namespaces>image</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Interface" href="../awt/image/ImageProducer.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:IdentifierReference">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                      <arguments xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <namespaces>java</namespaces>
                          <namespaces>security</namespaces>
                          <classifierReferences>
                            <target xsi:type="classifiers:Interface" href="../security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <anonymousClass>
                          <members xsi:type="members:ClassMethod" name="run">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../lang/Object.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <annotationsAndModifiers xsi:type="modifiers:Public"/>
                            <statements xsi:type="statements:LocalVariableStatement">
                              <variable name="url">
                                <typeReference xsi:type="types:NamespaceClassifierReference">
                                  <namespaces>java</namespaces>
                                  <namespaces>net</namespaces>
                                  <classifierReferences>
                                    <target xsi:type="classifiers:Class" href="../net/URL.class.xmi#//@classifiers.0"/>
                                  </classifierReferences>
                                </typeReference>
                              </variable>
                            </statements>
                            <statements xsi:type="statements:Condition">
                              <statement xsi:type="statements:Block">
                                <statements xsi:type="statements:Return">
                                  <returnValue xsi:type="literals:NullLiteral"/>
                                </statements>
                              </statement>
                              <condition xsi:type="expressions:EqualityExpression">
                                <equalityOperators xsi:type="operators:Equal"/>
                                <children xsi:type="expressions:NestedExpression">
                                  <expression xsi:type="expressions:AssignmentExpression">
                                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@statements.1/@variable/@initialValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable"/>
                                    <assignmentOperator xsi:type="operators:Assignment"/>
                                    <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@statements.0/@variable">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="../lang/Class.class.xmi#//@classifiers.0/@members.88"/>
                                        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                                      </next>
                                    </value>
                                  </expression>
                                </children>
                                <children xsi:type="literals:NullLiteral"/>
                              </condition>
                              <elseStatement xsi:type="statements:Block">
                                <statements xsi:type="statements:TryBlock">
                                  <statements xsi:type="statements:Return">
                                    <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@statements.1/@variable/@initialValue/@child/@next/@next/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@variable">
                                      <next xsi:type="references:MethodCall">
                                        <target xsi:type="members:ClassMethod" href="../net/URL.class.xmi#//@classifiers.0/@members.46"/>
                                      </next>
                                    </returnValue>
                                  </statements>
                                  <catcheBlocks>
                                    <statements xsi:type="statements:Return">
                                      <returnValue xsi:type="literals:NullLiteral"/>
                                    </statements>
                                    <parameter name="ioe">
                                      <typeReference xsi:type="types:NamespaceClassifierReference">
                                        <namespaces>java</namespaces>
                                        <namespaces>io</namespaces>
                                        <classifierReferences>
                                          <target xsi:type="classifiers:Class" href="../io/IOException.class.xmi#//@classifiers.0"/>
                                        </classifierReferences>
                                      </typeReference>
                                    </parameter>
                                  </catcheBlocks>
                                </statements>
                              </elseStatement>
                            </statements>
                          </members>
                        </anonymousClass>
                      </arguments>
                    </next>
                    <target xsi:type="classifiers:Class" href="../security/AccessController.class.xmi#//@classifiers.0"/>
                  </next>
                </next>
              </child>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@statements.1/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="tk">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>awt</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../awt/Toolkit.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:IdentifierReference">
                <next xsi:type="references:IdentifierReference">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../awt/Toolkit.class.xmi#//@classifiers.0/@members.51"/>
                  </next>
                  <target xsi:type="classifiers:Class" href="../awt/Toolkit.class.xmi#//@classifiers.0"/>
                </next>
              </next>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@statements.3/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../awt/Toolkit.class.xmi#//@classifiers.0/@members.58"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@statements.1/@variable"/>
            </next>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="literals:NullLiteral"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This is a support class to make it easier for people to provide&#xA; * BeanInfo classes.&#xA; * &lt;p>&#xA; * It defaults to providing &quot;noop&quot; information, and can be selectively&#xA; * overriden to provide more explicit information on chosen topics.&#xA; * When the introspector sees the &quot;noop&quot; values, it will apply low&#xA; * level introspection and design patterns to automatically analyze&#xA; * the target bean.&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="BeanInfo.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
