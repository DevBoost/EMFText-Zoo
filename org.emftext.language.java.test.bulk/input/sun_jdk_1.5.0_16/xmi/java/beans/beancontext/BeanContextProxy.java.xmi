<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="BeanContextProxy.java">
  <comments>/*&#xA; * @(#)BeanContextProxy.java&#x9;1.11 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>beans</namespaces>
  <namespaces>beancontext</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="BeanContextProxy">
    <members xsi:type="members:InterfaceMethod" name="getBeanContextProxy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the &lt;code>BeanContextChild&lt;/code> (or subinterface) &#xA;     * associated with this object. &#xA;     * @return the &lt;code>BeanContextChild&lt;/code> (or subinterface) &#xA;     * associated with this object&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="BeanContextChild.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&#xA; * This interface is implemented by a JavaBean that does &#xA; * not directly have a BeanContext(Child) associated with &#xA; * it (via implementing that interface or a subinterface thereof), &#xA; * but has a public BeanContext(Child) delegated from it.&#xA; * For example, a subclass of java.awt.Container may have a BeanContext &#xA; * associated with it that all Component children of that Container shall&#xA; * be contained within.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * An Object may not implement this interface and the &#xA; * BeanContextChild interface&#xA; * (or any subinterfaces thereof) they are mutually exclusive.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * Callers of this interface shall examine the return type in order to &#xA; * obtain a particular subinterface of BeanContextChild as follows:&#xA; * &lt;code>&#xA; * BeanContextChild bcc = o.getBeanContextProxy();&#xA; *&#xA; * if (bcc instanceof BeanContext) {&#xA; * &#x9;// ...&#xA; * }&#xA; * &lt;/code>&#xA; * or&#xA; * &lt;code>&#xA; * BeanContextChild bcc = o.getBeanContextProxy();&#xA; * BeanContext      bc  = null;&#xA; *&#xA; * try {&#xA; *     bc = (BeanContext)bcc; &#xA; * } catch (ClassCastException cce) {&#xA; *     // cast failed, bcc is not an instanceof BeanContext &#xA; * }&#xA; * &lt;/code>&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * The return value is a constant for the lifetime of the implementing&#xA; * instance&#xA; * &lt;/p>&#xA; * @author Laurence P. G. Cable&#xA; * @version 1.11, 12/19/03&#xA; * @since 1.2&#xA; *&#xA; * @see java.beans.beancontext.BeanContextChild&#xA; * @see java.beans.beancontext.BeanContextChildSupport&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
