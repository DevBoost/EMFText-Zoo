<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="BeanContext.java">
  <comments>/*&#xA; * @(#)BeanContext.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>beans</namespaces>
  <namespaces>beancontext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DesignMode.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Visibility.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>net</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../net/URL.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../util/Collection.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../util/Locale.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="BeanContext">
    <members xsi:type="members:InterfaceMethod" name="instantiateChild">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Instantiate the javaBean named as a &#xA;     * child of this &lt;code>BeanContext&lt;/code>.&#xA;     * The implementation of the JavaBean is &#xA;     * derived from the value of the beanName parameter, &#xA;     * and is defined by the &#xA;     * &lt;code>java.beans.Beans.instantiate()&lt;/code> method.&#xA;     *&#xA;     * @param beanName The name of the JavaBean to instantiate &#xA;     * as a child of this &lt;code>BeanContext&lt;/code>&#xA;     * @throws &lt;code>IOException&lt;/code>&#xA;     * @throws &lt;code>ClassNotFoundException&lt;/code> if the class identified&#xA;     * by the beanName parameter is not found&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="beanName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../io/IOException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/ClassNotFoundException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResourceAsStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Analagous to &lt;code>java.lang.ClassLoader.getResourceAsStream()&lt;/code>, &#xA;     * this method allows a &lt;code>BeanContext&lt;/code> implementation &#xA;     * to interpose behavior between the child &lt;code>Component&lt;/code> &#xA;     * and underlying &lt;code>ClassLoader&lt;/code>.&#xA;     * &#xA;     * @param name the resource name&#xA;     * @param bcc the specified child&#xA;     * @return an &lt;code>InputStream&lt;/code> for reading the resource, &#xA;     * or &lt;code>null&lt;/code> if the resource could not&#xA;     * be found.&#xA;     * @throws &lt;code>IllegalArgumentException&lt;/code> if &#xA;     * the resource is not valid&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bcc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="BeanContextChild.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getResource">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Analagous to &lt;code>java.lang.ClassLoader.getResource()&lt;/code>, this&#xA;     * method allows a &lt;code>BeanContext&lt;/code> implementation to interpose&#xA;     * behavior between the child &lt;code>Component&lt;/code> &#xA;     * and underlying &lt;code>ClassLoader&lt;/code>.&#xA;     * &#xA;     * @param name the resource name&#xA;     * @param bcc the specified child&#xA;     * @return a &lt;code>URL&lt;/code> for the named &#xA;     * resource for the specified child&#xA;     * @throws &lt;code>IllegalArgumentException&lt;/code> &#xA;     * if the resource is not valid&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../net/URL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bcc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="BeanContextChild.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/IllegalArgumentException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addBeanContextMembershipListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;      * Adds the specified &lt;code>BeanContextMembershipListener&lt;/code> &#xA;      * to receive &lt;code>BeanContextMembershipEvents&lt;/code> from &#xA;      * this &lt;code>BeanContext&lt;/code> whenever it adds&#xA;      * or removes a child &lt;code>Component&lt;/code>(s).&#xA;      * &#xA;      * @param bcml the &lt;code>BeanContextMembershipListener&lt;/code> to be added&#xA;      */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bcml">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="BeanContextMembershipListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeBeanContextMembershipListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;      * Removes the specified &lt;code>BeanContextMembershipListener&lt;/code> &#xA;      * so that it no longer receives &lt;code>BeanContextMembershipEvent&lt;/code>s &#xA;      * when the child &lt;code>Component&lt;/code>(s) are added or removed.&#xA;      * &#xA;      * @param bcml the &lt;code>BeanContextMembershipListener&lt;/code> &#xA;      * to be removed&#xA;      */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bcml">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="BeanContextMembershipListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:Field" name="globalHierarchyLock">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This global lock is used by both &lt;code>BeanContext&lt;/code> &#xA;     * and &lt;code>BeanContextServices&lt;/code> implementors &#xA;     * to serialize changes in a &lt;code>BeanContext&lt;/code> &#xA;     * hierarchy and any service requests etc.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&#xA; * The BeanContext acts a logical hierarchical container for JavaBeans.&#xA; * &lt;/p>&#xA; *&#xA; * @author Laurence P. G. Cable&#xA; * @version 1.23, 12/19/03&#xA; * @since 1.2&#xA; *&#xA; * @see java.beans.Beans&#xA; * @see java.beans.beancontext.BeanContextChild&#xA; * @see java.beans.beancontext.BeanContextMembershipListener&#xA; * @see java.beans.PropertyChangeEvent&#xA; * @see java.beans.VetoableChangeEvent&#xA; * @see java.beans.DesignMode&#xA; * @see java.beans.Visibility&#xA; * @see java.util.Collection&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="BeanContextChild.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../util/Collection.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../DesignMode.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../Visibility.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
