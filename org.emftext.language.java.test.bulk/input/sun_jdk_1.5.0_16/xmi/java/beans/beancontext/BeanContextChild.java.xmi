<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="BeanContextChild.java">
  <comments>/*&#xA; * @(#)BeanContextChild.java&#x9;1.20 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>java</namespaces>
  <namespaces>beans</namespaces>
  <namespaces>beancontext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../PropertyChangeListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../VetoableChangeListener.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
    <classifier xsi:type="classifiers:Class" href="../PropertyVetoException.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>beans</namespaces>
    <namespaces>beancontext</namespaces>
    <classifier xsi:type="classifiers:Interface" href="BeanContext.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="BeanContextChild">
    <members xsi:type="members:InterfaceMethod" name="setBeanContext">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * &lt;p>&#xA;     * Objects that implement this interface, &#xA;     * shall fire a java.beans.PropertyChangeEvent, with parameters:&#xA;     *&#xA;     * propertyName &quot;beanContext&quot;, oldValue (the previous nesting &#xA;     * &lt;code>BeanContext&lt;/code> instance, or &lt;code>null&lt;/code>), &#xA;     * newValue (the current nesting &#xA;     * &lt;code>BeanContext&lt;/code> instance, or &lt;code>null&lt;/code>).&#xA;     * &lt;p>&#xA;     * A change in the value of the nesting BeanContext property of this&#xA;     * BeanContextChild may be vetoed by throwing the appropriate exception.&#xA;     * &lt;/p>&#xA;     * @param bc The &lt;code>BeanContext&lt;/code> with which &#xA;     * to associate this &lt;code>BeanContextChild&lt;/code>.&#xA;     * @throws &lt;code>PropertyVetoException&lt;/code> if the &#xA;     * addition of the specified &lt;code>BeanContext&lt;/code> is refused.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="BeanContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../PropertyVetoException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBeanContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Gets the &lt;code>BeanContext&lt;/code> associated &#xA;     * with this &lt;code>BeanContextChild&lt;/code>.&#xA;     * @return the &lt;code>BeanContext&lt;/code> associated &#xA;     * with this &lt;code>BeanContextChild&lt;/code>.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="BeanContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addPropertyChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a &lt;code>PropertyChangeListener&lt;/code> &#xA;     * to this &lt;code>BeanContextChild&lt;/code> &#xA;     * in order to receive a &lt;code>PropertyChangeEvent&lt;/code> &#xA;     * whenever the specified property has changed.&#xA;     * @param name the name of the property to listen on&#xA;     * @param pcl the &lt;code>PropertyChangeListener&lt;/code> to add&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pcl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../PropertyChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removePropertyChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes a &lt;code>PropertyChangeListener&lt;/code> from this &#xA;     * &lt;code>BeanContextChild&lt;/code>  so that it no longer &#xA;     * receives &lt;code>PropertyChangeEvents&lt;/code> when the &#xA;     * specified property is changed.&#xA;     * &#xA;     * @param name the name of the property that was listened on&#xA;     * @param pcl the &lt;code>PropertyChangeListener&lt;/code> to remove&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="pcl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../PropertyChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="addVetoableChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Adds a &lt;code>VetoableChangeListener&lt;/code> to &#xA;     * this &lt;code>BeanContextChild&lt;/code>  &#xA;     * to receive events whenever the specified property changes.&#xA;     * @param name the name of the property to listen on&#xA;     * @param vcl the &lt;code>VetoableChangeListener&lt;/code> to add&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vcl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../VetoableChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeVetoableChangeListener">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Removes a &lt;code>VetoableChangeListener&lt;/code> from this &#xA;     * &lt;code>BeanContextChild&lt;/code> so that it no longer receives &#xA;     * events when the specified property changes.&#xA;     * @param name the name of the property that was listened on.&#xA;     * @param vcl the &lt;code>VetoableChangeListener&lt;/code> to remove.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="vcl">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../VetoableChangeListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;p>&#xA; * JavaBeans wishing to be nested within, and obtain a reference to their&#xA; * execution environment, or context, as defined by the BeanContext&#xA; * sub-interface shall implement this interface.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * Conformant BeanContexts shall as a side effect of adding a BeanContextChild&#xA; * object shall pass a reference to itself via the setBeanContext() method of&#xA; * this interface.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * Note that a BeanContextChild may refuse a change in state by throwing&#xA; * PropertyVetoedException in response.&#xA; * &lt;/p>&#xA; * &lt;p>&#xA; * In order for persistence mechanisms to function properly on BeanContextChild&#xA; * instances across a broad variety of scenarios, implementing classes of this&#xA; * interface are required to define as transient, any or all fields, or&#xA; * instance variables, that may contain, or represent, references to the&#xA; * nesting BeanContext instance or other resources obtained&#xA; * from the BeanContext via any unspecified mechanisms.&#xA; * &lt;/p>&#xA; *&#xA; * @author&#x9;Laurence P. G. Cable&#xA; * @version&#x9;1.20, 12/19/03&#xA; * @since&#x9;1.2&#xA; * &#xA; * @see&#x9;java.beans.beancontext.BeanContext&#xA; * @see&#x9;java.beans.PropertyChangeEvent&#xA; * @see&#x9;java.beans.PropertyChangeListener&#xA; * @see&#x9;java.beans.PropertyVetoEvent&#xA; * @see&#x9;java.beans.PropertyVetoListener&#xA; * @see&#x9;java.beans.PropertyVetoException&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
