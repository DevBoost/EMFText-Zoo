<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ClientRequestInfoOperations.java">
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>PortableInterceptor</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ClientRequestInfoOperations">
    <members xsi:type="members:InterfaceMethod" name="target">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns the object which the client called to perform the &#xA;     * operation. &#xA;     *&#xA;     * @see #effective_target&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="effective_target">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns the actual object on which the operation will be invoked. &#xA;     * If the &lt;code>reply_status&lt;/code> is &lt;code>LOCATION_FORWARD&lt;/code>, &#xA;     * then on subsequent requests, &lt;code>effective_target&lt;/code> will &#xA;     * contain the forwarded IOR while target will remain unchanged. &#xA;     *&#xA;     * @see #target&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="effective_profile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns the profile that will be used to send the request. If a &#xA;     * location forward has occurred for this operation's object and &#xA;     * that object's profile changed accordingly, then this profile will &#xA;     * be that located profile.&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IOP/TaggedProfile.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="received_exception">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** &#xA;     * Returns an any which contains the exception to be returned to &#xA;     * the client. &#xA;     * &lt;p>&#xA;     * If the exception is a user exception which cannot be inserted &#xA;     * into an any (e.g., it is unknown or the bindings don t provide &#xA;     * the &lt;code>TypeCode&lt;/code>), then this attribute will be an any &#xA;     * containing the system exception &lt;code>UNKNOWN&lt;/code> with a &#xA;     * standard minor code of 1. However, the repository id of &#xA;     * the exception is available in the &lt;code>received_exception_id&lt;/code> &#xA;     * attribute.&#xA;     * &#xA;     * @see #received_exception_id&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="received_exception_id">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the repository id of the exception to be returned to &#xA;     * the client.&#xA;     *&#xA;     * @see #received_exception&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_effective_component">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** &#xA;     * Returns the &lt;code>IOP.TaggedComponent&lt;/code> with the given ID from &#xA;     * the profile selected for this request. &#xA;     * &lt;p>&#xA;     * If there is more than one component for a given component ID, it &#xA;     * is undefined which component this operation returns. If there is &#xA;     * more than one component for a given component ID, &#xA;     * &lt;code>get_effective_components&lt;/code> should be called instead. &#xA;     * &#xA;     * @param id The component id of the component which &#xA;     *     is to be returned. &#xA;     * @return The &lt;code>IOP.TaggedComponent&lt;/code> obtained with the &#xA;     *     given identifier.&#xA;     * @exception BAD_PARAM thrown, with a standard minor code of 28, if&#xA;     *     no component exists for the given component ID.&#xA;     * @see #get_effective_components&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IOP/TaggedComponent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_effective_components">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns an array of all tagged components with the given ID from the &#xA;     * profile selected for this request. &#xA;     * &#xA;     * @param id The component id of the components which are to be returned. &#xA;     * @return An array of &lt;code>TaggedComponent&lt;/code> objects, each of &#xA;     *     which contains the given identifier.&#xA;     * @exception BAD_PARAM thrown, with a standard minor code of 28, if&#xA;     *     no component exists for the given component ID.&#xA;     * @see #get_effective_component&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IOP/TaggedComponent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_request_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns the given policy in effect for this operation. &#xA;     * &#xA;     * @exception INV_POLICY thrown, with a standard minor code of 1, if the &#xA;     *     policy type is not valid either because the specified type is &#xA;     *     not supported by this ORB or because a policy object of that type &#xA;     *     is not associated with this Object&#xA;     * @param type The policy type which specifies the policy to be &#xA;     *     returned. &#xA;     * @return The &lt;code>CORBA.Policy&lt;/code> obtained with the given type.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Policy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_request_service_context">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Allows Interceptors to add service contexts to the request. &#xA;     * &lt;p>&#xA;     * There is no declaration of the order of the service contexts. &#xA;     * They may or may not appear in the order that they are added. &#xA;     *&#xA;     * @param service_context The &lt;code>IOP.ServiceContext&lt;/code> to be &#xA;     *     added to the request. &#xA;     * @param replace Indicates the behavior of this operation when a &#xA;     *     service context already exists with the given ID. If false, &#xA;     *     then &lt;code>BAD_INV_ORDER&lt;/code> with a standard minor code of 15 &#xA;     *     is thrown. If true, then the existing service context is &#xA;     *     replaced by the new one.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="service_context">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>IOP</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../IOP/ServiceContext.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="replace">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xD;&#xA;* org/omg/PortableInterceptor/ClientRequestInfoOperations.java .&#xD;&#xA;* Generated by the IDL-to-Java compiler (portable), version &quot;3.2&quot;&#xD;&#xA;* from ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl&#xD;&#xA;* Wednesday, May 28, 2008 8:37:40 AM GMT&#xD;&#xA;*/</comments>
      <comments>/**&#xA;   * Request Information, accessible to client-side request interceptors.&#xA;   * &lt;p>&#xA;   * Some attributes and operations on &lt;code>ClientRequestInfo&lt;/code> are &#xA;   * not valid at all interception points.  The following table shows the &#xA;   * validity of each attribute or operation.  If it is not valid, attempting &#xA;   * to access it will result in a &lt;code>BAD_INV_ORDER&lt;/code> being thrown&#xA;   * with a standard minor code of 14.&#xA;   * &lt;p>&#xA;   *&#xA;   * &lt;table border=1 summary=&quot;Shows the validity of each attribute or operation&quot;>&#xA;   *  &lt;thead>&#xA;   *    &lt;tr>&#xA;   *      &lt;th>&amp;nbsp;&lt;/th>&#xA;   *      &lt;th id=&quot;send_req&quot;>send_request&lt;/th>&#xA;   *      &lt;th id=&quot;send_poll&quot;>send_poll&lt;/th>&#xA;   *      &lt;th id=&quot;rec_reply&quot;>receive_reply&lt;/th>&#xA;   *      &lt;th id=&quot;rec_ex&quot;>receive_exception&lt;/th>&#xA;   *      &lt;th id=&quot;rec_oth&quot;>receive_other&lt;/th>&#xA;   *    &lt;/tr>&#xA;   *  &lt;/thead>&#xA;   *  &lt;tbody>&#xA;   *&#xA;   *  &lt;tr>&#xA;   *     &lt;td id=&quot;ri&quot; colspan=6>&lt;i>Inherited from RequestInfo:&lt;/i>&lt;/td>&#xA;   *  &lt;/tr>&#xA;   * &#xA;   *  &lt;tr>&lt;th id=&quot;req_id&quot;>&lt;p align=&quot;left&quot;>request_id&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri req_id send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri req_id send_poll&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri req_id rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri req_id rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri req_id rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   * &#xA;   *  &lt;tr>&lt;th id=&quot;op&quot;>&lt;p align=&quot;left&quot;>operation&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri op send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri op send_poll&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri op rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri op rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri op rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;arg&quot;>&lt;p align=&quot;left&quot;>arguments&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri arg send_req&quot;>yes&lt;sub>1&lt;/sub>&lt;/td>&#xA;   *  &lt;td headers=&quot;ri arg send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri arg rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri arg rec_ex&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri arg rec_oth&quot;>no &lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;exc&quot;>&lt;p align=&quot;left&quot;>exceptions&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri exc send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri exc send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri exc rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri exc rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri exc rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;con&quot;>&lt;p align=&quot;left&quot;>contexts&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri con send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri con send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri con rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri con rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri con rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;op_con&quot;>&lt;p align=&quot;left&quot;>operation_context&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri op_con send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri op_con send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri op_con rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri op_con rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri op_con rec_oth&quot;>yes&lt;/td>&#xA;   *  &lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;result&quot;>&lt;p align=&quot;left&quot;>result&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri result send_req&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri result send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri result rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri result rec_ex&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri result rec_oth&quot;>no &lt;/td>&#xA;   *  &lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;res_exp&quot;>&lt;p align=&quot;left&quot;>response_expected&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri res_exp send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri res_exp send_poll&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri res_exp rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri res_exp rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri res_exp rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;sync_sco&quot;>&lt;p align=&quot;left&quot;>sync_scope&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri sync_sco send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri sync_sco send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri sync_sco rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri sync_sco rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri sync_sco rec_oth&quot;>yes&lt;/td>&#xA;   *  &lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;rep_stat&quot;>&lt;p align=&quot;left&quot;>reply_status&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri rep_stat send_req&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri rep_stat send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri rep_stat rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri rep_stat rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri rep_stat rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;for_ref&quot;>&lt;p align=&quot;left&quot;>forward_reference&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri for_ref send_req&quot;>no &lt;/td>&#xA;   *  &lt;td headers=&quot;ri for_ref send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri for_ref rec_reply&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri for_ref rec_ex&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri for_ref rec_oth&quot;>yes&lt;sub>2&lt;/sub>&#xA;   *  &lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;get_slot&quot;>&lt;p align=&quot;left&quot;>get_slot&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri get_slot send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri get_slot send_poll&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri get_slot rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri get_slot rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri get_slot rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;grsc&quot;>&lt;p align=&quot;left&quot;>get_request_service_context&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri grsc send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri grsc send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri grsc rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri grsc rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri grsc rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;gpsc&quot;>&lt;p align=&quot;left&quot;>get_reply_service_context&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;ri gpsc send_req&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri gpsc send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;ri gpsc rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri gpsc rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;ri gpsc rec_oth&quot;>yes&lt;/td>&#xA;   *  &lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&#xA;   *    &lt;td id=&quot;cri&quot; colspan=6>&lt;i>ClientRequestInfo-specific:&lt;/i>&lt;/td>&#xA;   *  &lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;target&quot;>&lt;p align=&quot;left&quot;>target&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri target send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri target send_poll&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri target rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri target rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri target rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;eftarget&quot;>&lt;p align=&quot;left&quot;>effective_target&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri eftarget send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri eftarget send_poll&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri eftarget rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri eftarget rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri eftarget rec_oth&quot;>yes&lt;/td>&#xA;   *  &lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;efprof&quot;>&lt;p align=&quot;left&quot;>effective_profile&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri efprof send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri efprof send_poll&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri efprof rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri efprof rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri efprof rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;rxp&quot;>&lt;p align=&quot;left&quot;>received_exception&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri rxp send_req&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri rxp send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri rxp rec_reply&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri rxp rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri rxp rec_oth&quot;>no &lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;rei&quot;>&lt;p align=&quot;left&quot;>received_exception_id&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri rei send_req&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri rei send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri rei rec_reply&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri rei rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri rei rec_oth&quot;>no &lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;gec&quot;>&lt;p align=&quot;left&quot;>get_effective_component&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri gec send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri gec send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri gec rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri gec rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri gec rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;gecs&quot;>&lt;p align=&quot;left&quot;>get_effective_components&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri gecs send_req&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri gecs send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri gecs rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri gecs rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri gecs rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;grpcy&quot;>&lt;p align=&quot;left&quot;>get_request_policy&lt;/p>&lt;/th>&#xA;   *  &lt;td headers=&quot;cri grpcy send_req&quot;>yes&lt;/td>&#xA;   *  &lt;td headers=&quot;cri grpcy send_poll&quot;>no &lt;/td> &#xA;   *  &lt;td headers=&quot;cri grpcy rec_reply&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri grpcy rec_ex&quot;>yes&lt;/td> &#xA;   *  &lt;td headers=&quot;cri grpcy rec_oth&quot;>yes&lt;/td>&lt;/tr>&#xA;   *&#xA;   *  &lt;tr>&lt;th id=&quot;arsc&quot;>&lt;p align=&quot;left&quot;>add_request_service_context&lt;/p>&lt;/th>&#xA;   *    &lt;td headers=&quot;cri arsc send_req&quot;>yes&lt;/td> &#xA;   *    &lt;td headers=&quot;cri arsc send_poll&quot;>no &lt;/td> &#xA;   *    &lt;td headers=&quot;cri arsc rec_reply&quot;>no &lt;/td> &#xA;   *    &lt;td headers=&quot;cri arsc rec_ex&quot;>no &lt;/td> &#xA;   *    &lt;td headers=&quot;cri arsc rec_oth&quot;>no &lt;/td>&lt;/tr>&#xA;   *&#xA;   *   &lt;/tbody>&#xA;   * &lt;/table>&#xA;   *&#xA;   * &lt;ol>&#xA;   *   &lt;li>When &lt;code>ClientRequestInfo&lt;/code> is passed to &#xA;   *       &lt;code>send_request&lt;/code>, there is an entry in the list for every &#xA;   *       argument, whether in, inout, or out.  But only the in and inout &#xA;   *       arguments will be available.&lt;/li>&#xA;   *   &lt;li>If the &lt;code>reply_status&lt;/code> atribute is not &#xA;   *       &lt;code>LOCATION_FORWARD&lt;/code>, accessing this attribute will &#xA;   *       throw &lt;code>BAD_INV_ORDER&lt;/code> with a standard minor code of &#xA;   *       14.&lt;/li>&#xA;   * &lt;/ol>&#xA;   *&#xA;   * @see ClientRequestInterceptor&#xA;   */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>org</namespaces>
      <namespaces>omg</namespaces>
      <namespaces>PortableInterceptor</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="RequestInfoOperations.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
