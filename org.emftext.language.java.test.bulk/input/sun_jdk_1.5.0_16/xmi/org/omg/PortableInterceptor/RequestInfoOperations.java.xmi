<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="RequestInfoOperations.java">
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>PortableInterceptor</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="RequestInfoOperations">
    <members xsi:type="members:InterfaceMethod" name="request_id">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns an id that uniquely identifies an active request/reply &#xA;     * sequence. Once a request/reply sequence is concluded this ID may be &#xA;     * reused. Note that this id is not the same as the GIOP &#xA;     * &lt;code>request_id&lt;/code>. If GIOP is the transport mechanism used, &#xA;     * then these IDs may very well be the same, but this is not guaranteed &#xA;     * nor required.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="operation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the name of the operation being invoked.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="arguments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns an array of &lt;code>Parameter&lt;/code> objects, containing the &#xA;     * arguments on the operation being invoked.  If there are no arguments, &#xA;     * this attribute will be a zero length array. &#xA;     * &lt;p>&#xA;     * Not all environments provide access to the arguments. With the Java &#xA;     * portable bindings, for example, the arguments are not available. &#xA;     * In these environments, when this attribute is accessed, &#xA;     * &lt;code>NO_RESOURCES&lt;/code> will be thrown with a standard minor code &#xA;     * of 1.&#xA;     * &lt;p>&#xA;     * &lt;i>Note: Arguments are available for DSI/DII calls.&lt;/i>&#xA;     *&#xA;     * @exception NO_RESOURCES thrown if arguments are not available.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>Dynamic</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../Dynamic/Parameter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="exceptions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns an array of &lt;code>TypeCode&lt;/code> objects describing the &#xA;     * &lt;code>TypeCode&lt;/code>s of the user exceptions that this operation &#xA;     * invocation may throw. If there are no user exceptions, this &#xA;     * will return a zero length array. &#xA;     * &lt;p>&#xA;     * Not all environments provide access to the exception list. With &#xA;     * the Java portable bindings, for example, the exception list is &#xA;     * not available. In these environments, when this attribute is &#xA;     * accessed, &lt;code>NO_RESOURCES&lt;/code> will be thrown with a &#xA;     * standard minor code of 1.&#xA;     * &lt;p>&#xA;     * &lt;i>Note: Exceptions are available for DSI/DII calls.&lt;/i>&#xA;     *&#xA;     * @exception NO_RESOURCES thrown if exceptions are not available.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="contexts">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an array of &lt;code>String&lt;/code> objects describing the &#xA;     * contexts that may be passed on this operation invocation.  If there &#xA;     * are no contexts, this will return a zero length array. &#xA;     * &lt;p>&#xA;     * Not all environments provide access to the context list. With the &#xA;     * Java portable bindings, for example, the context list is not &#xA;     * available. In these environments, when this attribute is accessed, &#xA;     * &lt;code>NO_RESOURCES&lt;/code> will be thrown with a standard minor code &#xA;     * of 1.&#xA;     * &lt;p>&#xA;     * &lt;i>Note: Contexts are available for DSI/DII calls.&lt;/i>&#xA;     *&#xA;     * @exception NO_RESOURCES thrown if contexts are not available.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="operation_context">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns an array of &lt;code>String&lt;/code> objects containing the &#xA;     * contexts being sent on the request.&#xA;     * &lt;p>&#xA;     * Not all environments provide access to the context. With the Java &#xA;     * portable bindings, for example, the context is not available. In &#xA;     * these environments, when this attribute is accessed, NO_RESOURCES will &#xA;     * be thrown with standard minor code of 1.&#xA;     * &lt;p>&#xA;     * &lt;i>Note: &lt;code>operation_context&lt;/code> is available for &#xA;     * DSI/DII calls.&lt;/i>&#xA;     *&#xA;     * @exception NO_RESOURCES thrown if operation context is not available.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="result">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns an any containing the result of the operation invocation. &#xA;     * If the operation return type is void, this attribute will be an any &#xA;     * containing a type code with a &lt;code>TCKind&lt;/code> value of &#xA;     * &lt;code>tk_void&lt;/code> and no value. &#xA;     * &lt;p>&#xA;     * Not all environments provide access to the result. With the Java &#xA;     * portable bindings, for example, the result is not available. In &#xA;     * these environments, when this attribute is accessed, &#xA;     * &lt;code>NO_RESOURCES&lt;/code> will be thrown with a standard minor code of &#xA;     * 1.&#xA;     * &lt;p>&#xA;     * &lt;i>Note: Result is available for DSI/DII calls.&lt;/i>&#xA;     *&#xA;     * @exception NO_RESOURCES thrown if result is not available.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="response_expected">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Indicates whether a response is expected. &#xA;     * &lt;p>&#xA;     * On the client, a reply is not returned when &#xA;     * &lt;code>response_expected&lt;/code> is false, so &lt;code>receive_reply&lt;/code> &#xA;     * cannot be called. &lt;code>receive_other&lt;/code> is called unless an &#xA;     * exception occurs, in which case &lt;code>receive_exception&lt;/code> is &#xA;     * called. &#xA;     * &lt;p>&#xA;     * On the client, within &lt;code>send_poll&lt;/code>, this attribute is true.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="sync_scope">
      <typeReference xsi:type="types:Short">
        <comments>/**&#xA;     * Defines how far the request shall progress before control is returned&#xA;     * to the client.  This is defined in the Messaging specification, and &#xA;     * is pertinent only when &lt;code>response_expected&lt;/code> is false. If &#xA;     * &lt;code>response_expected&lt;/code> is true, the value of &#xA;     * &lt;code>sync_scope&lt;/code> is undefined. This attribute may have one of &#xA;     * the following values: &#xA;     * &lt;ul>&#xA;     *   &lt;li>&lt;code>Messaging.SYNC_NONE&lt;/code>&lt;/li>&#xA;     *   &lt;li>&lt;code>Messaging.SYNC_WITH_TRANSPORT&lt;/code>&lt;/li>&#xA;     *   &lt;li>&lt;code>Messaging.SYNC_WITH_SERVER&lt;/code>&lt;/li>&#xA;     *   &lt;li>&lt;code>Messaging.SYNC_WITH_TARGET&lt;/code>&lt;/li>&#xA;     * &lt;/ul>&#xA;     * On the server, for all scopes, a reply will be created from the &#xA;     * return of the target operation call, but the reply will not return &#xA;     * to the client. Although it does not return to the client, it does &#xA;     * occur, so the normal server-side interception points are &#xA;     * followed (i.e., &lt;code>receive_request_service_contexts&lt;/code>, &#xA;     * &lt;code>receive_request&lt;/code>, &lt;code>send_reply&lt;/code> or &#xA;     * &lt;code>send_exception&lt;/code>). &#xA;     * &lt;p>&#xA;     * For &lt;code>SYNC_WITH_SERVER&lt;/code> and &lt;code>SYNC_WITH_TARGET&lt;/code>, &#xA;     * the server does send an empty reply back to the client before the &#xA;     * target is invoked. This reply is not intercepted by server-side &#xA;     * Interceptors.&#xA;     * &#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&#xA;     *     &lt;code>PortableInterceptor&lt;/code> package comments for &#xA;     *     limitations / unimplemented features&lt;/a>&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="reply_status">
      <typeReference xsi:type="types:Short">
        <comments>/**&#xA;     * Describes the state of the result of the operation invocation. The&#xA;     * return value can be one of the following: &#xA;     * &lt;ul>&#xA;     *   &lt;li>&lt;code>PortableInterceptor.SUCCESSFUL&lt;/code>&lt;/li>&#xA;     *   &lt;li>&lt;code>PortableInterceptor.SYSTEM_EXCEPTION&lt;/code>&lt;/li>&#xA;     *   &lt;li>&lt;code>PortableInterceptor.USER_EXCEPTION&lt;/code>&lt;/li>&#xA;     *   &lt;li>&lt;code>PortableInterceptor.LOCATION_FORWARD&lt;/code>&lt;/li>&#xA;     *   &lt;li>&lt;code>PortableInterceptor.TRANSPORT_RETRY&lt;/code>&lt;/li>&#xA;     * &lt;/ul>&#xA;     * On the client:&#xA;     * &lt;ul>&#xA;     *   &lt;li>Within the &lt;code>receive_reply&lt;/code> interception point, this &#xA;     *       will only return &lt;code>SUCCESSFUL&lt;/code>&lt;/li>.&#xA;     *   &lt;li>Within the &lt;code>receive_exception&lt;/code> interception point, &#xA;     *       this will be either &lt;code>SYSTEM_EXCEPTION&lt;/code> or &#xA;     *       &lt;code>USER_EXCEPTION&lt;/code>.&lt;/li>&#xA;     *   &lt;li>Within the &lt;code>receive_other&lt;/code> interception point, this &#xA;     *       will be any of: &lt;code>SUCCESSFUL&lt;/code>, &#xA;     *       &lt;code>LOCATION_FORWARD&lt;/code>, or &lt;code>TRANSPORT_RETRY&lt;/code>. &#xA;     *       &lt;code>SUCCESSFUL&lt;/code> means an asynchronous request returned &#xA;     *       successfully. &lt;code>LOCATION_FORWARD&lt;/code> means that a reply &#xA;     *       came back with &lt;code>LOCATION_FORWARD&lt;/code> as its status. &#xA;     *       &lt;code>TRANSPORT_RETRY&lt;/code> means that the transport &#xA;     *       mechanism indicated a retry - a GIOP reply with a status of &#xA;     *       &lt;code>NEEDS_ADDRESSING_MODE&lt;/code>, for instance. &lt;/li>&#xA;     * &lt;/ul>&#xA;     * On the server: &#xA;     * &lt;ul>&#xA;     *   &lt;li>Within the &lt;code>send_reply&lt;/code> interception point, this &#xA;     *       will only be &lt;code>SUCCESSFUL&lt;/code>.&lt;/li>&#xA;     *   &lt;li>Within the &lt;code>send_exception&lt;/code> interception point, &#xA;     *       this will be either &lt;code>SYSTEM_EXCEPTION&lt;/code> or &#xA;     *       &lt;code>USER_EXCEPTION&lt;/code>.&lt;/li>&#xA;     *   &lt;li>Within the &lt;code>send_other&lt;/code> interception point, this &#xA;     *       attribute will be any of: &lt;code>SUCCESSFUL&lt;/code>, or &#xA;     *       &lt;code>LOCATION_FORWARD&lt;/code>. &lt;code>SUCCESSFUL&lt;/code> means &#xA;     *       an asynchronous request returned successfully. &#xA;     *       &lt;code>LOCATION_FORWARD&lt;/code> means that a reply came back &#xA;     *       with &lt;code>LOCATION_FORWARD&lt;/code> as its status.&lt;/li>&#xA;     * &lt;/ul>&#xA;     * &#xA;     * @see SUCCESSFUL&#xA;     * @see SYSTEM_EXCEPTION&#xA;     * @see USER_EXCEPTION&#xA;     * @see LOCATION_FORWARD&#xA;     * @see TRANSPORT_RETRY&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="forward_reference">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** &#xA;     * Contains the object to which the request will be forwarded, if the &#xA;     * &lt;code>reply_status&lt;/code> attribute is &lt;code>LOCATION_FORWARD&lt;/code>.&#xA;     * It is indeterminate whether a forwarded request will actually occur.&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_slot">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns the data from the given slot of the &#xA;     * &lt;code>PortableInterceptor.Current&lt;/code> that is in the scope of &#xA;     * the request. &#xA;     * &lt;p>&#xA;     * If the given slot has not been set, then an any containing a &#xA;     * type code with a &lt;code>TCKind&lt;/code> value of &lt;code>tk_null&lt;/code> is &#xA;     * returned. &#xA;     *&#xA;     * @param id The &lt;code>SlotId&lt;/code> of the slot which is to be &#xA;     *     returned. &#xA;     * @return The slot data, in the form of an any, obtained with the &#xA;     *     given identifier.&#xA;     * @exception InvalidSlot thrown if the ID does not define an &#xA;     *    allocated slot.&#xA;     * @see Current&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableInterceptor</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="InvalidSlot.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_request_service_context">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns a copy of the service context with the given ID that &#xA;     * is associated with the request. &#xA;     * &lt;p>&#xA;     * @param id The &lt;code>IOP.ServiceId&lt;/code> of the service context &#xA;     *     which is to be returned. &#xA;     * @return The &lt;code>IOP.ServiceContext&lt;/code> obtained with the &#xA;     *     given identifier.&#xA;     * @exception BAD_PARAM thrown with a standard minor code of 26, if the &#xA;     *     request's service context does not contain an entry for that ID.&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IOP/ServiceContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_reply_service_context">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns a copy of the service context with the given ID that &#xA;     * is associated with the reply. &#xA;     * &#xA;     * @param id The &lt;code>IOP.ServiceId&lt;/code> of the service context &#xA;     *     which is to be returned. &#xA;     * @return The &lt;code>IOP.ServiceContext&lt;/code> obtained with the given &#xA;     *     identifier. &#xA;     * @exception BAD_PARAM thrown with a standard minor code of 26 if the &#xA;     *     request's service context does not contain an entry for that ID.&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../IOP/ServiceContext.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xD;&#xA;* org/omg/PortableInterceptor/RequestInfoOperations.java .&#xD;&#xA;* Generated by the IDL-to-Java compiler (portable), version &quot;3.2&quot;&#xD;&#xA;* from ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl&#xD;&#xA;* Wednesday, May 28, 2008 8:37:40 AM GMT&#xD;&#xA;*/</comments>
      <comments>/**&#xA;   * Request Information, accessible to Interceptors.&#xA;   * &lt;p>&#xA;   * Each interception point is given an object through which the &#xA;   * Interceptor can access request information. Client-side and server-side &#xA;   * interception points are concerned with different information, so there &#xA;   * are two information objects: &lt;code>ClientRequestInfo&lt;/code> is passed &#xA;   * to the client-side interception points and &lt;code>ServerRequestInfo&lt;/code>&#xA;   * is passed to the server-side interception points. But there is &#xA;   * information that is common to both, so they both inherit from a common &#xA;   * interface: &lt;code>RequestInfo&lt;/code>.&#xA;   *&#xA;   * @see ClientRequestInfo&#xA;   * @see ServerRequestInfo&#xA;   */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
