<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ORBInitInfoOperations.java">
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>PortableInterceptor</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ORBInitInfoOperations">
    <members xsi:type="members:InterfaceMethod" name="arguments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Returns the arguments passed to &lt;code>ORB.init&lt;/code>.  They may or&#xA;     * may not contain the ORB's arguments.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="orb_id">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** &#xA;     * Returns the ID of the ORB being initialized.&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="codec_factory">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** &#xA;     * Returns the &lt;code>IOP.CodecFactory&lt;/code>. The &#xA;     * &lt;code>CodecFactory&lt;/code> is normally obtained via a call to &#xA;     * &lt;code>ORB.resolve_initial_references( &quot;CodecFactory&quot; )&lt;/code>, but &#xA;     * since the ORB is not yet available and Interceptors, particularly when &#xA;     * processing service contexts, will require a &lt;code>Codec&lt;/code>, a &#xA;     * means of obtaining a &lt;code>Codec&lt;/code> is necessary during ORB &#xA;     * initialization.&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../IOP/CodecFactory.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="register_initial_reference">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Identical to &lt;code>ORB.register_initial_reference&lt;/code>. This same &#xA;     * functionality exists here because the ORB, not yet fully initialized, &#xA;     * is not yet available but initial references may need to be &#xA;     * registered as part of Interceptor registration. The only difference &#xA;     * is that the version of this operation on the ORB uses PIDL &#xA;     * (&lt;code>CORBA.ORB.ObjectId&lt;/code>) and &#xA;     * (&lt;code>CORBA.ORB.InvalidName&lt;/code>) whereas the version in this &#xA;     * interface uses IDL defined in this interface; the semantics are &#xA;     * identical.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableInterceptor</namespaces>
        <namespaces>ORBInitInfoPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBInitInfoPackage/InvalidName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="resolve_initial_references">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Identical to &lt;code>ORB.resolve_initial_references&lt;/code>. This same &#xA;     * functionality exists here because the ORB, not yet fully initialized, &#xA;     * is not yet available but initial references may be required from the &#xA;     * ORB as part of Interceptor registration. The only difference is that &#xA;     * the version of this operation on the ORB uses PIDL &#xA;     * (&lt;code>CORBA::ORB::ObjectId&lt;/code> and &#xA;     * &lt;code>CORBA::ORB::InvalidName&lt;/code>) whereas the version in this &#xA;     * interface uses IDL defined in this interface; the semantics &#xA;     * are identical.&#xA;     * &lt;p>&#xA;     * This operation is only valid during post_init.&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableInterceptor</namespaces>
        <namespaces>ORBInitInfoPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBInitInfoPackage/InvalidName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_client_request_interceptor">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Used to add a client-side request Interceptor to the list of &#xA;     * client-side request Interceptors.  &#xA;     *&#xA;     * @param interceptor The &lt;code>ClientRequestInterceptor&lt;/code> to be &#xA;     *     added.&#xA;     * @exception DuplicateName thrown if a client-side request Interceptor &#xA;     *     has already been registered with this Interceptor's name.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="interceptor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableInterceptor</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ClientRequestInterceptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableInterceptor</namespaces>
        <namespaces>ORBInitInfoPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBInitInfoPackage/DuplicateName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_server_request_interceptor">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;     * Used to add a server-side request Interceptor to the list of &#xA;     * server-side request Interceptors.&#xA;     *&#xA;     * @param interceptor The ServerRequestInterceptor to be added.&#xA;     * @exception DuplicateName thrown if a server-side request Interceptor &#xA;     *     has already been registered with this Interceptor's name&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="interceptor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableInterceptor</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ServerRequestInterceptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableInterceptor</namespaces>
        <namespaces>ORBInitInfoPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBInitInfoPackage/DuplicateName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_ior_interceptor">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Used to add an IOR Interceptor to the list of IOR Interceptors. &#xA;     *&#xA;     * @param interceptor The IORInterceptor to be added.&#xA;     * @exception DuplicateName thrown if an IOR Interceptor has already &#xA;     *     been registered with this Interceptor's name. &#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="interceptor">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableInterceptor</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="IORInterceptor.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableInterceptor</namespaces>
        <namespaces>ORBInitInfoPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBInitInfoPackage/DuplicateName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="allocate_slot_id">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Called to allocate a slot on &lt;code>PortableInterceptor.Current&lt;/code>. &#xA;     * &lt;p>&#xA;     * Note that while slot id's can be allocated within an ORB initializer, &#xA;     * the slots themselves cannot be initialized. &#xA;     *&#xA;     * @return The index to the slot which has been allocated.&#xA;     * @exception BAD_INV_ORDER thrown, with a standard minor code of 14, if &#xA;     *     &lt;code>set_slot&lt;/code> or &lt;code>get_slot&lt;/code> is called on the &#xA;     *     &lt;code>PICurrent&lt;/code> within an ORB initializer. &#xA;     * @see Current&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="register_policy_factory">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Registers a &lt;code>PolicyFactory&lt;/code> for the given &#xA;     * &lt;code>PolicyType&lt;/code>. &#xA;     * &#xA;     * @param type The policy type that the given &lt;code>PolicyFactory&lt;/code> &#xA;     *     serves. &#xA;     * @param policy_factory The factory for the given policy type.&#xA;     * @exception BAD_INV_ORDER thrown, with a standard minor code of 16, if &#xA;     *     a &lt;code>PolicyFactory&lt;/code> already exists for the given &#xA;     *     &lt;code>PolicyType&lt;/code>.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policy_factory">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableInterceptor</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="PolicyFactory.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xD;&#xA;* org/omg/PortableInterceptor/ORBInitInfoOperations.java .&#xD;&#xA;* Generated by the IDL-to-Java compiler (portable), version &quot;3.2&quot;&#xD;&#xA;* from ../../../../src/share/classes/org/omg/PortableInterceptor/Interceptors.idl&#xD;&#xA;* Wednesday, May 28, 2008 8:37:40 AM GMT&#xD;&#xA;*/</comments>
      <comments>/** &#xA;   * Passed to each &lt;code>ORBInitializer&lt;/code>, allowing it to&#xA;   * to register interceptors and perform other duties while the ORB is &#xA;   * initializing.&#xA;   * &lt;p>&#xA;   * The &lt;code>ORBInitInfo&lt;/code> object is only valid during &#xA;   * &lt;code>ORB.init&lt;/code>.  If a service keeps a reference to its &#xA;   * &lt;code>ORBInitInfo&lt;/code> object and tries to use it after &#xA;   * &lt;code>ORB.init&lt;/code> returns, the object no longer exists and an &#xA;   * &lt;code>OBJECT_NOT_EXIST&lt;/code> exception shall be thrown.&#xA;   *&#xA;   * @see ORBInitializer&#xA;   */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
