<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="CodecOperations.java">
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>IOP</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="CodecOperations">
    <members xsi:type="members:InterfaceMethod" name="encode">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Converts the given any into a byte array based on the encoding &#xA;     * format effective for this &lt;code>Codec&lt;/code>. &#xA;     *&#xA;     * @param data The data, in the form of an any, to be encoded into &#xA;     *     a byte array.&#xA;     * @return A byte array containing the encoded Any. This byte array &#xA;     *     contains both the &lt;code>TypeCode&lt;/code> and the data of the type.&#xA;     * @exception InvalidTypeForEncoding thrown if the type is not valid for &#xA;     *     the encoding format effective for this &lt;code>Codec&lt;/code>.&#xA;     */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <namespaces>CodecPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodecPackage/InvalidTypeForEncoding.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="decode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Decodes the given byte array into an Any based on the encoding &#xA;     * format effective for this &lt;code>Codec&lt;/code>. &#xA;     * &#xA;     * @param data The data, in the form of a byte array, to be decoded into &#xA;     *     an Any. &#xA;     * @return An Any containing the data from the decoded byte array.&#xA;     * @exception FormatMismatch is thrown if the byte array cannot be &#xA;     *     decoded into an Any. &#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <namespaces>CodecPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodecPackage/FormatMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="encode_value">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;     * Converts the given any into a byte array based on the encoding &#xA;     * format effective for this Codec. Only the data from the Any is &#xA;     * encoded, not the &lt;code>TypeCode&lt;/code>. &#xA;     *&#xA;     * @param data The data, in the form of an Any, to be encoded into &#xA;     *     a byte array. &#xA;     * @return A byte array containing the data from the encoded any.&#xA;     * @exception InvalidTypeForEncoding thrown if the type is not valid for &#xA;     *     the encoding format effective for this &lt;code>Codec&lt;/code>.&#xA;     */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <namespaces>CodecPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodecPackage/InvalidTypeForEncoding.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="decode_value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Decodes the given byte array into an Any based on the given &#xA;     * &lt;code>TypeCode&lt;/code> and the encoding format effective for &#xA;     * this &lt;code>Codec&lt;/code>. &#xA;     *&#xA;     * @param data The data, in the form of a byte array, to be decoded &#xA;     *     into an Any. &#xA;     * @param tc The TypeCode to be used to decode the data. &#xA;     * @return An Any containing the data from the decoded byte array.&#xA;     * @exception FormatMismatch thrown if the byte array cannot be &#xA;     *     decoded into an Any. &#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CORBA/TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <namespaces>CodecPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodecPackage/FormatMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>IOP</namespaces>
        <namespaces>CodecPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="CodecPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xD;&#xA;* org/omg/IOP/CodecOperations.java .&#xD;&#xA;* Generated by the IDL-to-Java compiler (portable), version &quot;3.2&quot;&#xD;&#xA;* from ../../../../src/share/classes/org/omg/PortableInterceptor/IOP.idl&#xD;&#xA;* Wednesday, May 28, 2008 8:37:36 AM GMT&#xD;&#xA;*/</comments>
      <comments>/**&#xA;   * The formats of IOR components and service context data used by ORB &#xA;   * services are often defined as CDR encapsulations encoding instances &#xA;   * of IDL defined data types. The &lt;code>Codec&lt;/code> provides a mechanism &#xA;   * to transfer these components between their IDL data types and their CDR &#xA;   * encapsulation representations. &#xA;   * &lt;p>&#xA;   * A &lt;code>Codec&lt;/code> is obtained from the &lt;code>CodecFactory&lt;/code>. &#xA;   * The &lt;code>CodecFactory&lt;/code> is obtained through a call to &#xA;   * &lt;code>ORB.resolve_initial_references( &quot;CodecFactory&quot; )&lt;/code>.&#xA;   */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
