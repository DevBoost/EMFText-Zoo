<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ORB.java">
  <comments>/*&#xA; * @(#)ORB.java&#x9;1.132 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>ORBPackage</namespaces>
    <classifier xsi:type="classifiers:Class" href="ORBPackage/InvalidName.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>applet</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/applet/Applet.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/FileInputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>security</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="ORB">
    <members xsi:type="members:Field" name="ORBClassKey">
      <initialValue xsi:type="references:StringReference" value="org.omg.CORBA.ORBClass"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//</comments>
        <comments>// This is the ORB implementation used when nothing else is specified.</comments>
        <comments>// Whoever provides this class customizes this string to</comments>
        <comments>// point at their ORB implementation.</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ORBSingletonClassKey">
      <initialValue xsi:type="references:StringReference" value="org.omg.CORBA.ORBSingletonClass"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="defaultORB">
      <initialValue xsi:type="references:StringReference" value="com.sun.corba.se.impl.orb.ORBImpl"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>//</comments>
        <comments>// The last resort fallback ORB implementation classes in case</comments>
        <comments>// no ORB implementation class is dynamically configured through</comments>
        <comments>// properties or applet parameters. Change these values to</comments>
        <comments>// vendor-specific class names.</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="defaultORBSingleton">
      <initialValue xsi:type="references:StringReference" value="com.sun.corba.se.impl.orb.ORBSingleton"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="singleton">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Static">
        <comments>//</comments>
        <comments>// The global instance of the singleton ORB implementation which</comments>
        <comments>// acts as a factory for typecodes for generated Helper classes.</comments>
        <comments>// TypeCodes should be immutable since they may be shared across</comments>
        <comments>// different security contexts (applets). There should be no way to</comments>
        <comments>// use a TypeCode as a storage depot for illicitly passing</comments>
        <comments>// information or Java objects between different security contexts.</comments>
        <comments>//</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:ClassMethod" name="getSystemProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Get System property</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="propValue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// This will not throw a SecurityException because this</comments>
              <comments>// class was loaded from rt.jar using the bootstrap classloader.</comments>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>java</namespaces>
                        <namespaces>lang</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:Return">
                        <returnValue xsi:type="references:IdentifierReference">
                          <next xsi:type="references:MethodCall">
                            <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
                          </next>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
                        </returnValue>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPropertyFromFile">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <annotationsAndModifiers xsi:type="modifiers:Final"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>// Get property from orb.properties in either &lt;user.home> or &lt;java-home>/lib</comments>
        <comments>// directories.</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="propValue">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>// This will not throw a SecurityException because this</comments>
              <comments>// class was loaded from rt.jar using the bootstrap classloader.</comments>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/security/AccessController.class.xmi#//@classifiers.0/@members.1"/>
                <arguments xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Interface" href="../../../java/security/PrivilegedAction.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <anonymousClass>
                    <members xsi:type="members:ClassMethod" name="getFileProperties">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <parameters xsi:type="parameters:OrdinaryParameter" name="fileName">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </parameters>
                      <annotationsAndModifiers xsi:type="modifiers:Private"/>
                      <statements xsi:type="statements:TryBlock">
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="propFile">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <initialValue xsi:type="instantiations:NewConstructorCall">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@parameters.0"/>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:Condition">
                          <statement xsi:type="statements:Return">
                            <returnValue xsi:type="literals:NullLiteral"/>
                          </statement>
                          <condition xsi:type="expressions:UnaryExpression">
                            <operators xsi:type="operators:Negate"/>
                            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@statements.0/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/io/File.class.xmi#//@classifiers.0/@members.33"/>
                              </next>
                            </child>
                          </condition>
                        </statements>
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="props">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <initialValue xsi:type="instantiations:NewConstructorCall">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:LocalVariableStatement">
                          <variable name="fis">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../java/io/FileInputStream.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                            <initialValue xsi:type="instantiations:NewConstructorCall">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../java/io/FileInputStream.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@statements.0/@variable"/>
                            </initialValue>
                          </variable>
                        </statements>
                        <statements xsi:type="statements:TryBlock">
                          <statements xsi:type="statements:ExpressionStatement">
                            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@statements.2/@variable">
                              <next xsi:type="references:MethodCall">
                                <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.6"/>
                                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@statements.3/@variable"/>
                              </next>
                            </expression>
                          </statements>
                          <finallyBlock>
                            <statements xsi:type="statements:ExpressionStatement">
                              <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@statements.3/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../java/io/FileInputStream.class.xmi#//@classifiers.0/@members.12"/>
                                </next>
                              </expression>
                            </statements>
                          </finallyBlock>
                        </statements>
                        <statements xsi:type="statements:Return">
                          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0/@statements.0/@statements.2/@variable"/>
                        </statements>
                        <catcheBlocks>
                          <statements xsi:type="statements:Return">
                            <returnValue xsi:type="literals:NullLiteral"/>
                          </statements>
                          <parameter name="exc">
                            <typeReference xsi:type="types:NamespaceClassifierReference">
                              <classifierReferences>
                                <target xsi:type="classifiers:Class" href="../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                              </classifierReferences>
                            </typeReference>
                          </parameter>
                        </catcheBlocks>
                      </statements>
                    </members>
                    <members xsi:type="members:ClassMethod" name="run">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <namespaces>java</namespaces>
                        <namespaces>lang</namespaces>
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <annotationsAndModifiers xsi:type="modifiers:Public"/>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="userHome">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
                              <arguments xsi:type="references:StringReference" value="user.home"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="fileName">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.0/@variable"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../../../java/io/File.class.xmi#//@classifiers.0/@members.4"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
                            </children>
                            <children xsi:type="references:StringReference" value="orb.properties"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="props">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.1/@variable"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Block">
                          <statements xsi:type="statements:LocalVariableStatement">
                            <variable name="value">
                              <typeReference xsi:type="types:NamespaceClassifierReference">
                                <classifierReferences>
                                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                                </classifierReferences>
                              </typeReference>
                              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.2/@variable">
                                <next xsi:type="references:MethodCall">
                                  <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.15"/>
                                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
                                </next>
                              </initialValue>
                            </variable>
                          </statements>
                          <statements xsi:type="statements:Condition">
                            <statement xsi:type="statements:Return">
                              <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.3/@statement/@statements.0/@variable"/>
                            </statement>
                            <condition xsi:type="expressions:EqualityExpression">
                              <equalityOperators xsi:type="operators:NotEqual"/>
                              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.3/@statement/@statements.0/@variable"/>
                              <children xsi:type="literals:NullLiteral"/>
                            </condition>
                          </statements>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:NotEqual"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.2/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </condition>
                      </statements>
                      <statements xsi:type="statements:LocalVariableStatement">
                        <variable name="javaHome">
                          <typeReference xsi:type="types:NamespaceClassifierReference">
                            <classifierReferences>
                              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                            </classifierReferences>
                          </typeReference>
                          <initialValue xsi:type="references:IdentifierReference">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/lang/System.class.xmi#//@classifiers.0/@members.25"/>
                              <arguments xsi:type="references:StringReference" value="java.home"/>
                            </next>
                            <target xsi:type="classifiers:Class" href="../../../java/lang/System.class.xmi#//@classifiers.0"/>
                          </initialValue>
                        </variable>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.1/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="expressions:AdditiveExpression">
                            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.4/@variable"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../../../java/io/File.class.xmi#//@classifiers.0/@members.4"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
                            </children>
                            <children xsi:type="references:StringReference" value="lib"/>
                            <children xsi:type="references:IdentifierReference">
                              <next xsi:type="references:IdentifierReference">
                                <target xsi:type="members:Field" href="../../../java/io/File.class.xmi#//@classifiers.0/@members.4"/>
                              </next>
                              <target xsi:type="classifiers:Class" href="../../../java/io/File.class.xmi#//@classifiers.0"/>
                            </children>
                            <children xsi:type="references:StringReference" value="orb.properties"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                            <additiveOperators xsi:type="operators:Addition"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:ExpressionStatement">
                        <expression xsi:type="expressions:AssignmentExpression">
                          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.2/@variable"/>
                          <assignmentOperator xsi:type="operators:Assignment"/>
                          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.0">
                            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.1/@variable"/>
                          </value>
                        </expression>
                      </statements>
                      <statements xsi:type="statements:Condition">
                        <statement xsi:type="statements:Return">
                          <returnValue xsi:type="literals:NullLiteral"/>
                        </statement>
                        <condition xsi:type="expressions:EqualityExpression">
                          <equalityOperators xsi:type="operators:Equal"/>
                          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.2/@variable"/>
                          <children xsi:type="literals:NullLiteral"/>
                        </condition>
                        <elseStatement xsi:type="statements:Return">
                          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable/@initialValue/@child/@next/@arguments.0/@anonymousClass/@members.1/@statements.2/@variable">
                            <next xsi:type="references:MethodCall">
                              <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.15"/>
                              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
                            </next>
                          </returnValue>
                        </elseStatement>
                      </statements>
                    </members>
                  </anonymousClass>
                </arguments>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/security/AccessController.class.xmi#//@classifiers.0"/>
            </child>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@statements.0/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>ORB&lt;/code> singleton object. This method always returns the&#xA;     * same ORB instance, which is an instance of the class described by the&#xA;     * &lt;code>org.omg.CORBA.ORBSingletonClass&lt;/code> system property.&#xA;     * &lt;P>&#xA;     * This no-argument version of the method &lt;code>init&lt;/code> is used primarily&#xA;     * as a factory for &lt;code>TypeCode&lt;/code> objects, which are used by&#xA;     * &lt;code>Helper&lt;/code> classes to implement the method &lt;code>type&lt;/code>.&#xA;     * It is also used to create &lt;code>Any&lt;/code> objects that are used to&#xA;     * describe &lt;code>union&lt;/code> labels (as part of creating a &lt;code>&#xA;     * TypeCode&lt;/code> object for a &lt;code>union&lt;/code>).&#xA;     * &lt;P>&#xA;     * This method is not intended to be used by applets, and in the event&#xA;     * that it is called in an applet environment, the ORB it returns&#xA;     * is restricted so that it can be used only as a factory for&#xA;     * &lt;code>TypeCode&lt;/code> objects.  Any &lt;code>TypeCode&lt;/code> objects&#xA;     * it produces can be safely shared among untrusted applets.&#xA;     * &lt;P>&#xA;     * If an ORB is created using this method from an applet,&#xA;     * a system exception will be thrown if&#xA;     * methods other than those for&#xA;     * creating &lt;code>TypeCode&lt;/code> objects are invoked.&#xA;     *&#xA;     * @return the singleton ORB&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="className">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
                </value>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@variable"/>
                <assignmentOperator xsi:type="operators:Assignment"/>
                <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
              </expression>
            </statement>
            <condition xsi:type="expressions:EqualityExpression">
              <equalityOperators xsi:type="operators:Equal"/>
              <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@variable"/>
              <children xsi:type="literals:NullLiteral"/>
            </condition>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7/@statements.0/@statement/@statements.0/@variable"/>
              </value>
            </expression>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_impl">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="className">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="cl">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:IdentifierReference">
            <next xsi:type="references:MethodCall">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.76"/>
              </next>
              <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
            </next>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Thread.class.xmi#//@classifiers.0"/>
          </initialValue>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences target="//@classifiers.0"/>
            </typeReference>
            <child xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.35"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.0/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </child>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="systemException">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="SystemException.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="instantiations:NewConstructorCall">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="INITIALIZE.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arguments xsi:type="expressions:AdditiveExpression">
                  <children xsi:type="references:StringReference" value="can't instantiate default ORB implementation "/>
                  <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
                  <additiveOperators xsi:type="operators:Addition"/>
                </arguments>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:ExpressionStatement">
            <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@catcheBlocks.0/@statements.0/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0/@members.12"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@catcheBlocks.0/@parameter"/>
              </next>
            </expression>
          </statements>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@statements.2/@catcheBlocks.0/@statements.0/@variable"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="args">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>ORB&lt;/code> instance for a standalone&#xA;     * application.  This method may be called from applications&#xA;     * only and returns a new fully functional &lt;code>ORB&lt;/code> object&#xA;     * each time it is called.&#xA;     * @param args command-line arguments for the application's &lt;code>main&lt;/code>&#xA;     *             method; may be &lt;code>null&lt;/code>&#xA;     * @param props application-specific properties; may be &lt;code>null&lt;/code>&#xA;     * @return the newly-created ORB instance&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="className">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <comments>//</comments>
              <comments>// Note that there is no standard command-line argument for</comments>
              <comments>// specifying the default ORB implementation. For an</comments>
              <comments>// application you can choose an implementation either by</comments>
              <comments>// setting the CLASSPATH to pick a different org.omg.CORBA</comments>
              <comments>// and it's baked-in ORB implementation default or by</comments>
              <comments>// setting an entry in the properties object or in the</comments>
              <comments>// system properties.</comments>
              <comments>//</comments>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="literals:NullLiteral"/>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="orb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:NotEqual"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@variable">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.11">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.1"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="init">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="app">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/applet/Applet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>ORB&lt;/code> instance for an applet.  This&#xA;     * method may be called from applets only and returns a new&#xA;     * fully-functional &lt;code>ORB&lt;/code> object each time it is called.&#xA;     * @param app the applet; may be &lt;code>null&lt;/code>&#xA;     * @param props applet-specific properties; may be &lt;code>null&lt;/code>&#xA;     * @return the newly-created ORB instance&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="className">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="orb">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences target="//@classifiers.0"/>
          </typeReference>
        </variable>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../../../java/applet/Applet.class.xmi#//@classifiers.0/@members.9"/>
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </next>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/util/Properties.class.xmi#//@classifiers.0/@members.15"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
              </next>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:ConditionalAndExpression">
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
          <children xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:NotEqual"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
            <children xsi:type="literals:NullLiteral"/>
          </children>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
              <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
            </value>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </expression>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.0/@variable"/>
          </value>
        </expression>
      </statements>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable">
          <next xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.1"/>
          </next>
        </expression>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@statements.1/@variable"/>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set_parameters">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="args">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Allows the ORB implementation to be initialized with the given&#xA;     * parameters and properties. This method, used in applications only,&#xA;     * is implemented by subclass ORB implementations and called&#xA;     * by the appropriate &lt;code>init&lt;/code> method to pass in its parameters.&#xA;     *&#xA;     * @param args command-line arguments for the application's &lt;code>main&lt;/code>&#xA;     *             method; may be &lt;code>null&lt;/code>&#xA;     * @param props application-specific properties; may be &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set_parameters">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="app">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/applet/Applet.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="props">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/util/Properties.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Allows the ORB implementation to be initialized with the given&#xA;     * applet and parameters. This method, used in applets only,&#xA;     * is implemented by subclass ORB implementations and called&#xA;     * by the appropriate &lt;code>init&lt;/code> method to pass in its parameters.&#xA;     *&#xA;     * @param app the applet; may be &lt;code>null&lt;/code>&#xA;     * @param props applet-specific properties; may be &lt;code>null&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Protected"/>
    </members>
    <members xsi:type="members:ClassMethod" name="connect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Connects the given servant object (a Java object that is&#xA;     * an instance of the server implementation class)&#xA;     * to the ORB. The servant class must&#xA;     * extend the &lt;code>ImplBase&lt;/code> class corresponding to the interface that is&#xA;     * supported by the server. The servant must thus be a CORBA object&#xA;     * reference, and inherit from &lt;code>org.omg.CORBA.Object&lt;/code>.&#xA;     * Servants created by the user can start receiving remote invocations&#xA;     * after the method &lt;code>connect&lt;/code> has been called. A servant may also be&#xA;     * automatically and implicitly connected to the ORB if it is passed as&#xA;     * an IDL parameter in an IDL method invocation on a non-local object,&#xA;     * that is, if the servant object has to be marshalled and sent outside of the&#xA;     * process address space.&#xA;     * &lt;P>&#xA;     * Calling the method &lt;code>connect&lt;/code> has no effect&#xA;     * when the servant object is already connected to the ORB.&#xA;     * &lt;P>&#xA;     * Deprecated by the OMG in favor of the Portable Object Adapter APIs.&#xA;     *&#xA;     * @param obj The servant object reference&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="destroy">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Destroys the ORB so that its resources can be reclaimed.&#xA;     * Any operation invoked on a destroyed ORB reference will throw the&#xA;     * &lt;code>OBJECT_NOT_EXIST&lt;/code> exception.&#xA;     * Once an ORB has been destroyed, another call to &lt;code>init&lt;/code>&#xA;     * with the same ORBid will return a reference to a newly constructed ORB.&lt;p>&#xA;     * If &lt;code>destroy&lt;/code> is called on an ORB that has not been shut down,&#xA;     * it will start the shut down process and block until the ORB has shut down&#xA;     * before it destroys the ORB.&lt;br>&#xA;     * If an application calls &lt;code>destroy&lt;/code> in a thread that is currently servicing&#xA;     * an invocation, the &lt;code>BAD_INV_ORDER&lt;/code> system exception will be thrown&#xA;     * with the OMG minor code 3, since blocking would result in a deadlock.&lt;p>&#xA;     * For maximum portability and to avoid resource leaks, an application should&#xA;     * always call &lt;code>shutdown&lt;/code> and &lt;code>destroy&lt;/code>&#xA;     * on all ORB instances before exiting.&#xA;     *&#xA;     * @throws org.omg.CORBA.BAD_INV_ORDER if the current thread is servicing an invocation&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="disconnect">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Disconnects the given servant object from the ORB. After this method returns,&#xA;     * the ORB will reject incoming remote requests for the disconnected&#xA;     * servant and will send the exception&#xA;     * &lt;code>org.omg.CORBA.OBJECT_NOT_EXIST&lt;/code> back to the&#xA;     * remote client. Thus the object appears to be destroyed from the&#xA;     * point of view of remote clients. Note, however, that local requests issued&#xA;     * using the servant  directly do not&#xA;     * pass through the ORB; hence, they will continue to be processed by the&#xA;     * servant.&#xA;     * &lt;P>&#xA;     * Calling the method &lt;code>disconnect&lt;/code> has no effect&#xA;     * if the servant is not connected to the ORB.&#xA;     * &lt;P>&#xA;     * Deprecated by the OMG in favor of the Portable Object Adapter APIs.&#xA;     *&#xA;     * @param obj The servant object to be disconnected from the ORB&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="list_initial_services">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>//</comments>
        <comments>// ORB method implementations.</comments>
        <comments>//</comments>
        <comments>// We are trying to accomplish 2 things at once in this class.</comments>
        <comments>// It can act as a default ORB implementation front-end,</comments>
        <comments>// creating an actual ORB implementation object which is a</comments>
        <comments>// subclass of this ORB class and then delegating the method</comments>
        <comments>// implementations.</comments>
        <comments>//</comments>
        <comments>// To accomplish the delegation model, the 'delegate' private instance</comments>
        <comments>// variable is set if an instance of this class is created directly.</comments>
        <comments>//</comments>
        <comments>/**&#xA;     * Returns a list of the initially available CORBA object references,&#xA;     * such as &quot;NameService&quot; and &quot;InterfaceRepository&quot;.&#xA;     *&#xA;     * @return an array of &lt;code>String&lt;/code> objects that represent&#xA;     *         the object references for CORBA services&#xA;     *         that are initially available with this ORB&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="resolve_initial_references">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="object_name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBPackage/InvalidName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Resolves a specific object reference from the set of available&#xA;     * initial service names.&#xA;     *&#xA;     * @param object_name the name of the initial service as a string&#xA;     * @return  the object reference associated with the given name&#xA;     * @exception InvalidName if the given name is not associated with a&#xA;     *                         known service&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="object_to_string">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="obj">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Converts the given CORBA object reference to a string.&#xA;     * Note that the format of this string is predefined by IIOP, allowing&#xA;     * strings generated by a different ORB to be converted back into an object&#xA;     * reference.&#xA;     * &lt;P>&#xA;     * The resulting &lt;code>String&lt;/code> object may be stored or communicated&#xA;     * in any way that a &lt;code>String&lt;/code> object can be manipulated.&#xA;     *&#xA;     * @param obj the object reference to stringify&#xA;     * @return the string representing the object reference&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="string_to_object">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="str">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Converts a string produced by the method &lt;code>object_to_string&lt;/code>&#xA;     * back to a CORBA object reference.&#xA;     *&#xA;     * @param str the string to be converted back to an object reference.  It must&#xA;     * be the result of converting an object reference to a string using the&#xA;     * method &lt;code>object_to_string&lt;/code>.&#xA;     * @return the object reference&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_list">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="count">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Allocates an &lt;code>NVList&lt;/code> with (probably) enough&#xA;     * space for the specified number of &lt;code>NamedValue&lt;/code> objects.&#xA;     * Note that the specified size is only a hint to help with&#xA;     * storage allocation and does not imply the maximum size of the list.&#xA;     *&#xA;     * @param count  suggested number of &lt;code>NamedValue&lt;/code> objects for&#xA;     *               which to allocate space&#xA;     * @return the newly-created &lt;code>NVList&lt;/code>&#xA;     *&#xA;     * @see NVList&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="create_operation_list">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oper">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an &lt;code>NVList&lt;/code> initialized with argument&#xA;     * descriptions for the operation described in the given&#xA;     * &lt;code>OperationDef&lt;/code> object.  This &lt;code>OperationDef&lt;/code> object&#xA;     * is obtained from an Interface Repository. The arguments in the&#xA;     * returned &lt;code>NVList&lt;/code> object are in the same order as in the&#xA;     * original IDL operation definition, which makes it possible for the list&#xA;     * to be used in dynamic invocation requests.&#xA;     *&#xA;     * @param oper&#x9;the &lt;code>OperationDef&lt;/code> object to use to create the list&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>NVList&lt;/code> object containing&#xA;     * descriptions of the arguments to the method described in the given&#xA;     * &lt;code>OperationDef&lt;/code> object&#xA;     *&#xA;     * @see NVList&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:TryBlock">
        <comments>// If we came here, it means that the actual ORB implementation</comments>
        <comments>// did not have a create_operation_list(...CORBA.Object oper) method,</comments>
        <comments>// so lets check if it has a create_operation_list(OperationDef oper)</comments>
        <comments>// method.</comments>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="opDefClassName">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// First try to load the OperationDef class</comments>
                <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:StringReference" value="org.omg.CORBA.OperationDef"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="opDefClass">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="literals:NullLiteral"/>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="cl">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.76"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Thread.class.xmi#//@classifiers.0/@members.33"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Thread.class.xmi#//@classifiers.0"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Condition">
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.2/@variable"/>
              <assignmentOperator xsi:type="operators:Assignment"/>
              <value xsi:type="references:IdentifierReference">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0/@members.64"/>
                </next>
                <target xsi:type="classifiers:Class" href="../../../java/lang/ClassLoader.class.xmi#//@classifiers.0"/>
              </value>
            </expression>
          </statement>
          <condition xsi:type="expressions:EqualityExpression">
            <equalityOperators xsi:type="operators:Equal"/>
            <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.2/@variable"/>
            <children xsi:type="literals:NullLiteral"/>
          </condition>
        </statements>
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:AssignmentExpression">
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.1/@variable">
              <comments>// if this throws a ClassNotFoundException, it will be caught below.</comments>
            </child>
            <assignmentOperator xsi:type="operators:Assignment"/>
            <value xsi:type="references:IdentifierReference">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.33"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.0/@variable"/>
                <arguments xsi:type="literals:BooleanLiteral" value="true"/>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.2/@variable"/>
              </next>
              <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
            </value>
          </expression>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="argc">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// OK, we loaded OperationDef. Now try to get the</comments>
                <comments>// create_operation_list(OperationDef oper) method.</comments>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="arrays:ArrayInstantiationByValues">
              <arrayInitializer>
                <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.1/@variable"/>
              </arrayInitializer>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="meth">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>lang</namespaces>
              <namespaces>reflect</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <initialValue xsi:type="references:SelfReference">
              <next xsi:type="references:MethodCall">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.78"/>
                  <arguments xsi:type="references:StringReference" value="create_operation_list"/>
                  <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.5/@variable"/>
                </next>
                <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
              </next>
              <self xsi:type="literals:This"/>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:LocalVariableStatement">
          <variable name="argx">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <comments>// OK, the method exists, so invoke it and be happy.</comments>
                <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <arrayDimensionsBefore/>
            <initialValue xsi:type="arrays:ArrayInstantiationByValues">
              <arrayInitializer>
                <initialValues xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@parameters.0"/>
              </arrayInitializer>
            </initialValue>
          </variable>
        </statements>
        <statements xsi:type="statements:Return">
          <returnValue xsi:type="expressions:CastExpression">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>org</namespaces>
              <namespaces>omg</namespaces>
              <namespaces>CORBA</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
            <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.6/@variable">
              <next xsi:type="references:MethodCall">
                <target xsi:type="members:ClassMethod" href="../../../java/lang/reflect/Method.class.xmi#//@classifiers.0/@members.36"/>
                <arguments xsi:type="references:SelfReference">
                  <self xsi:type="literals:This"/>
                </arguments>
                <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@statements.7/@variable"/>
              </next>
            </child>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:LocalVariableStatement">
            <variable name="t">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@catcheBlocks.0/@parameter">
                <next xsi:type="references:MethodCall">
                  <target xsi:type="members:ClassMethod" href="../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0/@members.5"/>
                </next>
              </initialValue>
            </variable>
          </statements>
          <statements xsi:type="statements:Condition">
            <statement xsi:type="statements:Block">
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="expressions:CastExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/Error.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
                </throwable>
              </statements>
            </statement>
            <condition xsi:type="expressions:InstanceOfExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../../../java/lang/Error.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
            </condition>
            <elseStatement xsi:type="statements:Condition">
              <statement xsi:type="statements:Block">
                <statements xsi:type="statements:Throw">
                  <throwable xsi:type="expressions:CastExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
                  </throwable>
                </statements>
              </statement>
              <condition xsi:type="expressions:InstanceOfExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
              </condition>
              <elseStatement xsi:type="statements:Block">
                <statements xsi:type="statements:Throw">
                  <throwable xsi:type="instantiations:NewConstructorCall">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <namespaces>org</namespaces>
                      <namespaces>omg</namespaces>
                      <namespaces>CORBA</namespaces>
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                  </throwable>
                </statements>
              </elseStatement>
            </elseStatement>
          </statements>
          <parameter name="exs">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <namespaces>java</namespaces>
              <namespaces>lang</namespaces>
              <namespaces>reflect</namespaces>
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.21/@statements.0/@catcheBlocks.1/@parameter"/>
          </statements>
          <parameter name="ex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>org</namespaces>
                <namespaces>omg</namespaces>
                <namespaces>CORBA</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
          <parameter name="exr">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_named_value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flags">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>NamedValue&lt;/code> object&#xA;     * using the given name, value, and argument mode flags.&#xA;     * &lt;P>&#xA;     * A &lt;code>NamedValue&lt;/code> object serves as (1) a parameter or return&#xA;     * value or (2) a context property.&#xA;     * It may be used by itself or&#xA;     * as an element in an &lt;code>NVList&lt;/code> object.&#xA;     *&#xA;     * @param s  the name of the &lt;code>NamedValue&lt;/code> object&#xA;     * @param any  the &lt;code>Any&lt;/code> value to be inserted into the&#xA;     *             &lt;code>NamedValue&lt;/code> object&#xA;     * @param flags  the argument mode flags for the &lt;code>NamedValue&lt;/code>: one of&#xA;     * &lt;code>ARG_IN.value&lt;/code>, &lt;code>ARG_OUT.value&lt;/code>,&#xA;     * or &lt;code>ARG_INOUT.value&lt;/code>.&#xA;     *&#xA;     * @return&#x9;the newly-created &lt;code>NamedValue&lt;/code> object&#xA;     * @see NamedValue&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_exception_list">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ExceptionList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates an empty &lt;code>ExceptionList&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;the newly-created &lt;code>ExceptionList&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_context_list">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ContextList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates an empty &lt;code>ContextList&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;the newly-created &lt;code>ContextList&lt;/code> object&#xA;     * @see ContextList&#xA;     * @see Context&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_default_context">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Gets the default &lt;code>Context&lt;/code> object.&#xA;     *&#xA;     * @return the default &lt;code>Context&lt;/code> object&#xA;     * @see Context&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_environment">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Environment.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates an &lt;code>Environment&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;the newly-created &lt;code>Environment&lt;/code> object&#xA;     * @see Environment&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_output_stream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>portable</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="portable/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a new &lt;code>org.omg.CORBA.portable.OutputStream&lt;/code> into which&#xA;     * IDL method parameters can be marshalled during method invocation.&#xA;     * @return&#x9;&#x9;the newly-created&#xA;     *              &lt;code>org.omg.CORBA.portable.OutputStream&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="send_multiple_requests_oneway">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Request.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Sends multiple dynamic (DII) requests asynchronously without expecting&#xA;     * any responses. Note that oneway invocations are not guaranteed to&#xA;     * reach the server.&#xA;     *&#xA;     * @param req&#x9;&#x9;an array of request objects&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="send_multiple_requests_deferred">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="req">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Request.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Sends multiple dynamic (DII) requests asynchronously.&#xA;     *&#xA;     * @param req&#x9;&#x9;an array of &lt;code>Request&lt;/code> objects&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="poll_next_response">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Finds out if any of the deferred (asynchronous) invocations have&#xA;     * a response yet.&#xA;     * @return &lt;code>true&lt;/code> if there is a response available;&#xA;     *         &lt;code> false&lt;/code> otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_next_response">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Request.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="WrongTransaction.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Gets the next &lt;code>Request&lt;/code> instance for which a response&#xA;     * has been received.&#xA;     *&#xA;     * @return&#x9;&#x9;the next &lt;code>Request&lt;/code> object ready with a response&#xA;     * @exception WrongTransaction if the method &lt;code>get_next_response&lt;/code>&#xA;     * is called from a transaction scope different&#xA;     * from the one from which the original request was sent. See the&#xA;     * OMG Transaction Service specification for details.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_primitive_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tcKind">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TCKind.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Retrieves the &lt;code>TypeCode&lt;/code> object that represents&#xA;     * the given primitive IDL type.&#xA;     *&#xA;     * @param tcKind&#x9;the &lt;code>TCKind&lt;/code> instance corresponding to the&#xA;     *                  desired primitive type&#xA;     * @return&#x9;&#x9;the requested &lt;code>TypeCode&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_struct_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="members">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="StructMember.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>struct&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given id,&#xA;     * name, and members.&#xA;     *&#xA;     * @param id&#x9;the repository id for the &lt;code>struct&lt;/code>&#xA;     * @param name&#x9;the name of the &lt;code>struct&lt;/code>&#xA;     * @param members&#x9;an array describing the members of the &lt;code>struct&lt;/code>&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>struct&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_union_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="discriminator_type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="members">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="UnionMember.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>union&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given id,&#xA;     * name, discriminator type, and members.&#xA;     *&#xA;     * @param id&#x9;the repository id of the &lt;code>union&lt;/code>&#xA;     * @param name&#x9;the name of the &lt;code>union&lt;/code>&#xA;     * @param discriminator_type&#x9;the type of the &lt;code>union&lt;/code> discriminator&#xA;     * @param members&#x9;an array describing the members of the &lt;code>union&lt;/code>&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>union&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_enum_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="members">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>enum&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given id,&#xA;     * name, and members.&#xA;     *&#xA;     * @param id&#x9;the repository id for the &lt;code>enum&lt;/code>&#xA;     * @param name&#x9;the name for the &lt;code>enum&lt;/code>&#xA;     * @param members&#x9;an array describing the members of the &lt;code>enum&lt;/code>&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>enum&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_alias_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="original_type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>alias&lt;/code>&#xA;     * (&lt;code>typedef&lt;/code>).&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given id,&#xA;     * name, and original type.&#xA;     *&#xA;     * @param id&#x9;the repository id for the alias&#xA;     * @param name&#x9;the name for the alias&#xA;     * @param original_type&#xA;     * &#x9;&#x9;&#x9;the &lt;code>TypeCode&lt;/code> object describing the original type&#xA;     *          for which this is an alias&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>alias&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_exception_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="members">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="StructMember.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>exception&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given id,&#xA;     * name, and members.&#xA;     *&#xA;     * @param id&#x9;the repository id for the &lt;code>exception&lt;/code>&#xA;     * @param name&#x9;the name for the &lt;code>exception&lt;/code>&#xA;     * @param members&#x9;an array describing the members of the &lt;code>exception&lt;/code>&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>exception&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_interface_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>interface&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given id&#xA;     * and name.&#xA;     *&#xA;     * @param id&#x9;the repository id for the interface&#xA;     * @param name&#x9;the name for the interface&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>interface&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_string_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bound">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing a bounded IDL &#xA;     * &lt;code>string&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given bound,&#xA;     * which represents the maximum length of the string. Zero indicates&#xA;     * that the string described by this type code is unbounded.&#xA;     *&#xA;     * @param bound&#x9;the bound for the &lt;code>string&lt;/code>; cannot be negative&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              a bounded IDL &lt;code>string&lt;/code>&#xA;     * @exception BAD_PARAM if bound is a negative value&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_wstring_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bound">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing a bounded IDL&#xA;     * &lt;code>wstring&lt;/code> (wide string).&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given bound,&#xA;     * which represents the maximum length of the wide string. Zero indicates&#xA;     * that the string described by this type code is unbounded.&#xA;     *&#xA;     * @param bound&#x9;the bound for the &lt;code>wstring&lt;/code>; cannot be negative&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              a bounded IDL &lt;code>wstring&lt;/code>&#xA;     * @exception BAD_PARAM if bound is a negative value&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_sequence_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bound">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="element_type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>sequence&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given bound and&#xA;     * element type.&#xA;     *&#xA;     * @param bound&#x9;the bound for the &lt;code>sequence&lt;/code>, 0 if unbounded&#xA;     * @param element_type&#xA;     *&#x9;&#x9;&#x9;the &lt;code>TypeCode&lt;/code> object describing the elements&#xA;     *          contained in the &lt;code>sequence&lt;/code>&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>sequence&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_recursive_sequence_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="bound">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing a&#xA;     * a recursive IDL &lt;code>sequence&lt;/code>.&#xA;     * &lt;P>&#xA;     * For the IDL &lt;code>struct&lt;/code> Node in following code fragment,&#xA;     * the offset parameter for creating its sequence would be 1:&#xA;     * &lt;PRE>&#xA;     *    Struct Node {&#xA;     *        long value;&#xA;     *        Sequence &amp;lt;Node&amp;gt; subnodes;&#xA;     *    };&#xA;     * &lt;/PRE>&#xA;     *&#xA;     * @param bound&#x9;the bound for the sequence, 0 if unbounded&#xA;     * @param offset&#x9;the index to the enclosing &lt;code>TypeCode&lt;/code> object&#xA;     *                  that describes the elements of this sequence&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *                   a recursive sequence&#xA;     * @deprecated Use a combination of create_recursive_tc and create_sequence_tc instead&#xA;     * @see #create_recursive_tc(String) create_recursive_tc&#xA;     * @see #create_sequence_tc(int, TypeCode) create_sequence_tc&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_array_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="element_type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object representing an IDL &lt;code>array&lt;/code>.&#xA;     * The &lt;code>TypeCode&lt;/code> object is initialized with the given length and&#xA;     * element type.&#xA;     *&#xA;     * @param length&#x9;the length of the &lt;code>array&lt;/code>&#xA;     * @param element_type  a &lt;code>TypeCode&lt;/code> object describing the type&#xA;     *                      of element contained in the &lt;code>array&lt;/code>&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>TypeCode&lt;/code> object describing&#xA;     *              an IDL &lt;code>array&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="create_native_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a &lt;code>TypeCode&lt;/code> object for an IDL native type.&#xA;     *&#xA;     * @param id        the logical id for the native type.&#xA;     * @param name      the name of the native type.&#xA;     * @return          the requested TypeCode.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_abstract_interface_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a &lt;code>TypeCode&lt;/code> object for an IDL abstract interface.&#xA;     *&#xA;     * @param id        the logical id for the abstract interface type.&#xA;     * @param name      the name of the abstract interface type.&#xA;     * @return          the requested TypeCode.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_fixed_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="digits">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="scale">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a &lt;code>TypeCode&lt;/code> object for an IDL fixed type.&#xA;     *&#xA;     * @param digits    specifies the total number of decimal digits in the number&#xA;     *                  and must be from 1 to 31 inclusive.&#xA;     * @param scale     specifies the position of the decimal point.&#xA;     * @return          the requested TypeCode.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_value_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type_modifier">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="concrete_base">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="members">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ValueMember.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// orbos 98-01-18: Objects By Value -- begin</comments>
        <comments>/**&#xA;     * Create a &lt;code>TypeCode&lt;/code> object for an IDL value type.&#xA;     * The concrete_base parameter is the TypeCode for the immediate&#xA;     * concrete valuetype base of the valuetype for which the TypeCode&#xA;     * is being created.&#xA;     * It may be null if the valuetype does not have a concrete base.&#xA;     *&#xA;     * @param id                 the logical id for the value type.&#xA;     * @param name               the name of the value type.&#xA;     * @param type_modifier      one of the value type modifier constants:&#xA;     *                           VM_NONE, VM_CUSTOM, VM_ABSTRACT or VM_TRUNCATABLE&#xA;     * @param concrete_base      a &lt;code>TypeCode&lt;/code> object&#xA;     *                           describing the concrete valuetype base&#xA;     * @param members            an array containing the members of the value type&#xA;     * @return                   the requested TypeCode&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_recursive_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a recursive &lt;code>TypeCode&lt;/code> object which&#xA;     * serves as a placeholder for a concrete TypeCode during the process of creating&#xA;     * TypeCodes which contain recursion. The id parameter specifies the repository id of&#xA;     * the type for which the recursive TypeCode is serving as a placeholder. Once the&#xA;     * recursive TypeCode has been properly embedded in the enclosing TypeCode which&#xA;     * corresponds to the specified repository id, it will function as a normal TypeCode.&#xA;     * Invoking operations on the recursive TypeCode before it has been embedded in the&#xA;     * enclosing TypeCode will result in a &lt;code>BAD_TYPECODE&lt;/code> exception.&#xA;     * &lt;P>&#xA;     * For example, the following IDL type declaration contains recursion:&#xA;     * &lt;PRE>&#xA;     *    Struct Node {&#xA;     *        Sequence&amp;lt;Node&amp;gt; subnodes;&#xA;     *    };&#xA;     * &lt;/PRE>&#xA;     * &lt;P>&#xA;     * To create a TypeCode for struct Node, you would invoke the TypeCode creation&#xA;     * operations as shown below:&#xA;     * &lt;PRE>&#xA;     * String nodeID = &quot;IDL:Node:1.0&quot;;&#xA;     * TypeCode recursiveSeqTC = orb.create_sequence_tc(0, orb.create_recursive_tc(nodeID));&#xA;     * StructMember[] members = { new StructMember(&quot;subnodes&quot;, recursiveSeqTC, null) };&#xA;     * TypeCode structNodeTC = orb.create_struct_tc(nodeID, &quot;Node&quot;, members);&#xA;     * &lt;/PRE>&#xA;     * &lt;P>&#xA;     * Also note that the following is an illegal IDL type declaration:&#xA;     * &lt;PRE>&#xA;     *    Struct Node {&#xA;     *        Node next;&#xA;     *    };&#xA;     * &lt;/PRE>&#xA;     * &lt;P>&#xA;     * Recursive types can only appear within sequences which can be empty.&#xA;     * That way marshaling problems, when transmitting the struct in an Any, are avoided.&#xA;     * &lt;P>&#xA;     * @param id                 the logical id of the referenced type&#xA;     * @return                   the requested TypeCode&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <comments>// implemented in subclass</comments>
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_value_box_tc">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="boxed_type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a &lt;code>TypeCode&lt;/code> object for an IDL value box.&#xA;     *&#xA;     * @param id                 the logical id for the value type&#xA;     * @param name               the name of the value type&#xA;     * @param boxed_type         the TypeCode for the type&#xA;     * @return                   the requested TypeCode&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <comments>// implemented in subclass</comments>
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>// orbos 98-01-18: Objects By Value -- end</comments>
        <comments>/**&#xA;     * Creates an IDL &lt;code>Any&lt;/code> object initialized to&#xA;     * contain a &lt;code>Typecode&lt;/code> object whose &lt;code>kind&lt;/code> field&#xA;     * is set to &lt;code>TCKind.tc_null&lt;/code>.&#xA;     *&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="get_current">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Current.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Retrieves a &lt;code>Current&lt;/code> object.&#xA;     * The &lt;code>Current&lt;/code> interface is used to manage thread-specific&#xA;     * information for use by services such as transactions and security.&#xA;     *&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     *&#xA;     * @return&#x9;&#x9;a newly-created &lt;code>Current&lt;/code> object&#xA;     * @deprecated      use &lt;code>resolve_initial_references&lt;/code>.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="run">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This operation blocks the current thread until the ORB has&#xA;     * completed the shutdown process, initiated when some thread calls&#xA;     * &lt;code>shutdown&lt;/code>. It may be used by multiple threads which&#xA;     * get all notified when the ORB shuts down.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="shutdown">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="wait_for_completion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Instructs the ORB to shut down, which causes all&#xA;     * object adapters to shut down, in preparation for destruction.&lt;br>&#xA;     * If the &lt;code>wait_for_completion&lt;/code> parameter&#xA;     * is true, this operation blocks until all ORB processing (including&#xA;     * processing of currently executing requests, object deactivation,&#xA;     * and other object adapter operations) has completed.&#xA;     * If an application does this in a thread that is currently servicing&#xA;     * an invocation, the &lt;code>BAD_INV_ORDER&lt;/code> system exception&#xA;     * will be thrown with the OMG minor code 3,&#xA;     * since blocking would result in a deadlock.&lt;br>&#xA;     * If the &lt;code>wait_for_completion&lt;/code> parameter is &lt;code>FALSE&lt;/code>,&#xA;     * then shutdown may not have completed upon return.&lt;p>&#xA;     * While the ORB is in the process of shutting down, the ORB operates as normal,&#xA;     * servicing incoming and outgoing requests until all requests have been completed.&#xA;     * Once an ORB has shutdown, only object reference management operations&#xA;     * may be invoked on the ORB or any object reference obtained from it.&#xA;     * An application may also invoke the &lt;code>destroy&lt;/code> operation on the ORB itself.&#xA;     * Invoking any other operation will throw the &lt;code>BAD_INV_ORDER&lt;/code>&#xA;     * system exception with the OMG minor code 4.&lt;p>&#xA;     * The &lt;code>ORB.run&lt;/code> method will return after&#xA;     * &lt;code>shutdown&lt;/code> has been called.&#xA;     *&#xA;     * @param wait_for_completion &lt;code>true&lt;/code> if the call&#xA;     *        should block until the shutdown is complete;&#xA;     *        &lt;code>false&lt;/code> if it should return immediately&#xA;     * @throws org.omg.CORBA.BAD_INV_ORDER if the current thread is servicing&#xA;     *         an invocation&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="work_pending">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> if the ORB needs the main thread to&#xA;     * perform some work, and &lt;code>false&lt;/code> if the ORB does not&#xA;     * need the main thread.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if there is work pending, meaning that the ORB&#xA;     *         needs the main thread to perform some work; &lt;code>false&lt;/code>&#xA;     *         if there is no work pending and thus the ORB does not need the&#xA;     *         main thread&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="perform_work">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Performs an implementation-dependent unit of work if called&#xA;     * by the main thread. Otherwise it does nothing.&#xA;     * The methods &lt;code>work_pending&lt;/code> and &lt;code>perform_work&lt;/code>&#xA;     * can be used in&#xA;     * conjunction to implement a simple polling loop that multiplexes&#xA;     * the main thread among the ORB and other activities.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="get_service_information">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="service_type">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="service_info">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ServiceInformationHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Used to obtain information about CORBA facilities and services &#xA;     * that are supported by this ORB. The service type for which &#xA;     * information is being requested is passed in as the in &#xA;     * parameter &lt;tt>service_type&lt;/tt>, the values defined by&#xA;     * constants in the CORBA module. If service information is &#xA;     * available for that type, that is returned in the out parameter&#xA;     * &lt;tt>service_info&lt;/tt>, and the operation returns the&#xA;     * value &lt;tt>true&lt;/tt>. If no information for the requested &#xA;     * services type is available, the operation returns &lt;tt>false&lt;/tt>&#xA;     *  (i.e., the service is not supported by this ORB).&#xA;     * &lt;P>&#xA;     * @param service_type a &lt;code>short&lt;/code> indicating the&#xA;     *        service type for which information is being requested&#xA;     * @param service_info a &lt;code>ServiceInformationHolder&lt;/code> object&#xA;     *        that will hold the &lt;code>ServiceInformation&lt;/code> object&#xA;     *        produced by this method&#xA;     * @return &lt;code>true&lt;/code> if service information is available&#xA;     *        for the &lt;tt>service_type&lt;/tt>; &#xA;     *         &lt;tt>false&lt;/tt> if no information for the&#xA;     *         requested services type is available &#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_dyn_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynAny.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>// orbos 98-01-18: Objects By Value -- begin</comments>
        <comments>/** &#xA;     * Creates a new &lt;code>DynAny&lt;/code> object from the given&#xA;     * &lt;code>Any&lt;/code> object.&#xA;     * &lt;P>&#xA;     * @param value the &lt;code>Any&lt;/code> object from which to create a new&#xA;     *        &lt;code>DynAny&lt;/code> object&#xA;     * @return the new &lt;code>DynAny&lt;/code> object created from the given&#xA;     *         &lt;code>Any&lt;/code> object&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAnyFactory.html&quot;>DynAnyFactory&lt;/a> API instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_basic_dyn_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynAny.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>ORBPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Creates a basic &lt;code>DynAny&lt;/code> object from the given &#xA;     * &lt;code>TypeCode&lt;/code> object.&#xA;     * &lt;P>&#xA;     * @param type the &lt;code>TypeCode&lt;/code> object from which to create a new&#xA;     *        &lt;code>DynAny&lt;/code> object&#xA;     * @return the new &lt;code>DynAny&lt;/code> object created from the given&#xA;     *         &lt;code>TypeCode&lt;/code> object&#xA;     * @throws org.omg.CORBA.ORBPackage.InconsistentTypeCode if the given&#xA;     *         &lt;code>TypeCode&lt;/code> object is not consistent with the operation.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAnyFactory.html&quot;>DynAnyFactory&lt;/a> API instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_dyn_struct">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynStruct.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>ORBPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Creates a new &lt;code>DynStruct&lt;/code> object from the given&#xA;     * &lt;code>TypeCode&lt;/code> object.&#xA;     * &lt;P>&#xA;     * @param type the &lt;code>TypeCode&lt;/code> object from which to create a new&#xA;     *        &lt;code>DynStruct&lt;/code> object&#xA;     * @return the new &lt;code>DynStruct&lt;/code> object created from the given&#xA;     *         &lt;code>TypeCode&lt;/code> object&#xA;     * @throws org.omg.CORBA.ORBPackage.InconsistentTypeCode if the given&#xA;     *         &lt;code>TypeCode&lt;/code> object is not consistent with the operation.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAnyFactory.html&quot;>DynAnyFactory&lt;/a> API instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_dyn_sequence">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynSequence.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>ORBPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Creates a new &lt;code>DynSequence&lt;/code> object from the given&#xA;     * &lt;code>TypeCode&lt;/code> object.&#xA;     * &lt;P>&#xA;     * @param type the &lt;code>TypeCode&lt;/code> object from which to create a new&#xA;     *        &lt;code>DynSequence&lt;/code> object&#xA;     * @return the new &lt;code>DynSequence&lt;/code> object created from the given&#xA;     *         &lt;code>TypeCode&lt;/code> object&#xA;     * @throws org.omg.CORBA.ORBPackage.InconsistentTypeCode if the given&#xA;     *         &lt;code>TypeCode&lt;/code> object is not consistent with the operation.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAnyFactory.html&quot;>DynAnyFactory&lt;/a> API instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_dyn_array">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynArray.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>ORBPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Creates a new &lt;code>DynArray&lt;/code> object from the given&#xA;     * &lt;code>TypeCode&lt;/code> object.&#xA;     * &lt;P>&#xA;     * @param type the &lt;code>TypeCode&lt;/code> object from which to create a new&#xA;     *        &lt;code>DynArray&lt;/code> object&#xA;     * @return the new &lt;code>DynArray&lt;/code> object created from the given&#xA;     *         &lt;code>TypeCode&lt;/code> object&#xA;     * @throws org.omg.CORBA.ORBPackage.InconsistentTypeCode if the given&#xA;     *         &lt;code>TypeCode&lt;/code> object is not consistent with the operation.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAnyFactory.html&quot;>DynAnyFactory&lt;/a> API instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_dyn_union">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynUnion.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>ORBPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Creates a new &lt;code>DynUnion&lt;/code> object from the given&#xA;     * &lt;code>TypeCode&lt;/code> object.&#xA;     * &lt;P>&#xA;     * @param type the &lt;code>TypeCode&lt;/code> object from which to create a new&#xA;     *        &lt;code>DynUnion&lt;/code> object&#xA;     * @return the new &lt;code>DynUnion&lt;/code> object created from the given&#xA;     *         &lt;code>TypeCode&lt;/code> object&#xA;     * @throws org.omg.CORBA.ORBPackage.InconsistentTypeCode if the given&#xA;     *         &lt;code>TypeCode&lt;/code> object is not consistent with the operation.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAnyFactory.html&quot;>DynAnyFactory&lt;/a> API instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_dyn_enum">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynEnum.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>ORBPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ORBPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/** &#xA;     * Creates a new &lt;code>DynEnum&lt;/code> object from the given&#xA;     * &lt;code>TypeCode&lt;/code> object.&#xA;     * &lt;P>&#xA;     * @param type the &lt;code>TypeCode&lt;/code> object from which to create a new&#xA;     *        &lt;code>DynEnum&lt;/code> object&#xA;     * @return the new &lt;code>DynEnum&lt;/code> object created from the given&#xA;     *         &lt;code>TypeCode&lt;/code> object&#xA;     * @throws org.omg.CORBA.ORBPackage.InconsistentTypeCode if the given&#xA;     *         &lt;code>TypeCode&lt;/code> object is not consistent with the operation.&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAnyFactory.html&quot;>DynAnyFactory&lt;/a> API instead&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="create_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Policy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="val">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="PolicyError.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;    * Can be invoked to create new instances of policy objects &#xA;    * of a specific type with specified initial state. If &#xA;    * &lt;tt>create_policy&lt;/tt> fails to instantiate a new Policy &#xA;    * object due to its inability to interpret the requested type&#xA;    * and content of the policy, it raises the &lt;tt>PolicyError&lt;/tt>&#xA;    * exception with the appropriate reason.&#xA;    * @param type the &lt;tt>PolicyType&lt;/tt> of the policy object to &#xA;    *        be created&#xA;    * @param val the value that will be used to set the initial&#xA;    *        state of the &lt;tt>Policy&lt;/tt> object that is created&#xA;    * @return Reference to a newly created &lt;tt>Policy&lt;/tt> object &#xA;    *        of type specified by the &lt;tt>type&lt;/tt> parameter and &#xA;    *        initialized to a state specified by the &lt;tt>val&lt;/tt>&#xA;    *        parameter&#xA;    * @throws &lt;tt>org.omg.CORBA.PolicyError&lt;/tt> when the requested&#xA;    *        policy is not supported or a requested initial state &#xA;    *        for the policy is not supported.&#xA;    */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <comments>// Currently not implemented until PIORB.</comments>
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Abstract">
      <comments>/**&#xA; * A class providing APIs for the CORBA Object Request Broker&#xA; * features.  The &lt;code>ORB&lt;/code> class also provides&#xA; * &quot;pluggable ORB implementation&quot; APIs that allow another vendor's ORB&#xA; * implementation to be used.&#xA; * &lt;P>&#xA; * An ORB makes it possible for CORBA objects to communicate&#xA; * with each other by connecting objects making requests (clients) with&#xA; * objects servicing requests (servers).&#xA; * &lt;P>&#xA; *&#xA; * The &lt;code>ORB&lt;/code> class, which&#xA; * encapsulates generic CORBA functionality, does the following:&#xA; * (Note that items 5 and 6, which include most of the methods in&#xA; * the class &lt;code>ORB&lt;/code>, are typically used with the &lt;code>Dynamic Invocation&#xA; * Interface&lt;/code> (DII) and the &lt;code>Dynamic Skeleton Interface&lt;/code>&#xA; * (DSI).&#xA; * These interfaces may be used by a developer directly, but&#xA; * most commonly they are used by the ORB internally and are&#xA; * not seen by the general programmer.)&#xA; * &lt;OL>&#xA; * &lt;li> initializes the ORB implementation by supplying values for&#xA; *      predefined properties and environmental parameters&#xA; * &lt;li> obtains initial object references to services such as&#xA; * the NameService using the method &lt;code>resolve_initial_references&lt;/code>&#xA; * &lt;li> converts object references to strings and back&#xA; * &lt;li> connects the ORB to a servant (an instance of a CORBA object&#xA; * implementation) and disconnects the ORB from a servant&#xA; * &lt;li> creates objects such as&#xA; *   &lt;ul>&#xA; *   &lt;li>&lt;code>TypeCode&lt;/code>&#xA; *   &lt;li>&lt;code>Any&lt;/code>&#xA; *   &lt;li>&lt;code>NamedValue&lt;/code>&#xA; *   &lt;li>&lt;code>Context&lt;/code>&#xA; *   &lt;li>&lt;code>Environment&lt;/code>&#xA; *   &lt;li>lists (such as &lt;code>NVList&lt;/code>) containing these objects&#xA; *   &lt;/ul>&#xA; * &lt;li> sends multiple messages in the DII&#xA; * &lt;/OL>&#xA; *&#xA; * &lt;P>&#xA; * The &lt;code>ORB&lt;/code> class can be used to obtain references to objects&#xA; * implemented anywhere on the network.&#xA; * &lt;P>&#xA; * An application or applet gains access to the CORBA environment&#xA; * by initializing itself into an &lt;code>ORB&lt;/code> using one of&#xA; * three &lt;code>init&lt;/code> methods.  Two of the three methods use the properties&#xA; * (associations of a name with a value) shown in the&#xA; * table below.&lt;BR>&#xA; * &lt;TABLE BORDER=1 SUMMARY=&quot;Standard Java CORBA Properties&quot;>&#xA; * &lt;TR>&lt;TH>Property Name&lt;/TH>   &lt;TH>Property Value&lt;/TH>&lt;/TR>&#xA; * &lt;CAPTION>Standard Java CORBA Properties:&lt;/CAPTION>&#xA; *     &lt;TR>&lt;TD>org.omg.CORBA.ORBClass&lt;/TD>&#xA; *     &lt;TD>class name of an ORB implementation&lt;/TD>&lt;/TR>&#xA; *     &lt;TR>&lt;TD>org.omg.CORBA.ORBSingletonClass&lt;/TD>&#xA; *     &lt;TD>class name of the ORB returned by &lt;code>init()&lt;/code>&lt;/TD>&lt;/TR>&#xA; * &lt;/TABLE>&#xA; * &lt;P>&#xA; * These properties allow a different vendor's &lt;code>ORB&lt;/code>&#xA; * implementation to be &quot;plugged in.&quot;&#xA; * &lt;P>&#xA; * When an ORB instance is being created, the class name of the ORB&#xA; * implementation is located using&#xA; * the following standard search order:&lt;P>&#xA; *&#xA; * &lt;OL>&#xA; *     &lt;LI>check in Applet parameter or application string array, if any&#xA; *&#xA; *     &lt;LI>check in properties parameter, if any&#xA; *&#xA; *     &lt;LI>check in the System properties &#xA; *&#xA; *     &lt;LI>check in the orb.properties file located in the user.home &#xA; *         directory (if any)&#xA; *&#xA; *     &lt;LI>check in the orb.properties file located in the java.home/lib &#xA; *         directory (if any)&#xA; *&#xA; *     &lt;LI>fall back on a hardcoded default behavior (use the Java&amp;nbsp;IDL&#xA; *         implementation)&#xA; * &lt;/OL>&#xA; * &lt;P>&#xA; * Note that Java&amp;nbsp;IDL provides a default implementation for the&#xA; * fully-functional ORB and for the Singleton ORB.  When the method&#xA; * &lt;code>init&lt;/code> is given no parameters, the default Singleton&#xA; * ORB is returned.  When the method &lt;code>init&lt;/code> is given parameters&#xA; * but no ORB class is specified, the Java&amp;nbsp;IDL ORB implementation&#xA; * is returned.&#xA; * &lt;P>&#xA; * The following code fragment creates an &lt;code>ORB&lt;/code> object&#xA; * initialized with the default ORB Singleton.&#xA; * This ORB has a&#xA; * restricted implementation to prevent malicious applets from doing&#xA; * anything beyond creating typecodes.&#xA; * It is called a singleton&#xA; * because there is only one instance for an entire virtual machine.&#xA; * &lt;PRE>&#xA; *    ORB orb = ORB.init();&#xA; * &lt;/PRE>&#xA; * &lt;P>&#xA; * The following code fragment creates an &lt;code>ORB&lt;/code> object&#xA; * for an application.  The parameter &lt;code>args&lt;/code>&#xA; * represents the arguments supplied to the application's &lt;code>main&lt;/code>&#xA; * method.  Since the property specifies the ORB class to be&#xA; * &quot;SomeORBImplementation&quot;, the new ORB will be initialized with&#xA; * that ORB implementation.  If p had been null,&#xA; * and the arguments had not specified an ORB class,&#xA; * the new ORB would have been&#xA; * initialized with the default Java&amp;nbsp;IDL implementation.&#xA; * &lt;PRE>&#xA; *    Properties p = new Properties();&#xA; *    p.put(&quot;org.omg.CORBA.ORBClass&quot;, &quot;SomeORBImplementation&quot;);&#xA; *    ORB orb = ORB.init(args, p);&#xA; * &lt;/PRE>&#xA; * &lt;P>&#xA; * The following code fragment creates an &lt;code>ORB&lt;/code> object&#xA; * for the applet supplied as the first parameter.  If the given&#xA; * applet does not specify an ORB class, the new ORB will be&#xA; * initialized with the default Java&amp;nbsp;IDL implementation.&#xA; * &lt;PRE>&#xA; *    ORB orb = ORB.init(myApplet, null);&#xA; * &lt;/PRE>&#xA; * &lt;P>&#xA; * An application or applet can be initialized in one or more ORBs.&#xA; * ORB initialization is a bootstrap call into the CORBA world.&#xA; * @version 1.70, 09/09/97&#xA; * @since   JDK1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
  </classifiers>
</containers:CompilationUnit>
