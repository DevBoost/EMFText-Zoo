<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ExceptionList.java">
  <comments>/*&#xA; * @(#)ExceptionList.java&#x9;1.25 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Class" name="ExceptionList">
    <members xsi:type="members:InterfaceMethod" name="count">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the number of &lt;code>TypeCode&lt;/code> objects in this&#xA;     * &lt;code>ExceptionList&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;the&#x9;number of &lt;code>TypeCode&lt;/code> objects in this&#xA;     * &lt;code>ExceptionList&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a &lt;code>TypeCode&lt;/code> object describing an exception&#xA;     * to this &lt;code>ExceptionList&lt;/code> object.&#xA;     *&#xA;     * @param exc&#x9;&#x9;&#x9;the &lt;code>TypeCode&lt;/code> object to be added&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="item">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Bounds.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>TypeCode&lt;/code> object at the given index.  The first&#xA;     * item is at index 0.&#xA;     *&#xA;     * @param index&#x9;&#x9;the index of the &lt;code>TypeCode&lt;/code> object desired.&#xA;     *                    This must be an &lt;code>int&lt;/code> between 0 and the&#xA;     *                    number of &lt;code>TypeCode&lt;/code> objects&#xA;     *                    minus one, inclusive.&#xA;     * @return&#x9;&#x9;&#x9;the &lt;code>TypeCode&lt;/code> object  at the given index&#xA;     * @exception org.omg.CORBA.Bounds   if the index given is greater than&#xA;     *&#x9;&#x9;&#x9;&#x9;or equal to the number of &lt;code>TypeCode&lt;/code> objects&#xA;     *                in this &lt;code>ExceptionList&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Bounds.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the &lt;code>TypeCode&lt;/code> object at the given index.&#xA;     * Note that the indices of all the &lt;code>TypeCoded&lt;/code> objects&#xA;     * following the one deleted are shifted down by one.&#xA;     *&#xA;     * @param index&#x9;&#x9;the index of the &lt;code>TypeCode&lt;/code> object to be&#xA;     *                    removed.&#xA;     *                    This must be an &lt;code>int&lt;/code> between 0 and the&#xA;     *                    number of &lt;code>TypeCode&lt;/code> objects&#xA;     *                    minus one, inclusive.&#xA;     *&#xA;     * @exception org.omg.CORBA.Bounds if the index is greater than&#xA;     *&#x9;&#x9;&#x9;&#x9;or equal to the number of &lt;code>TypeCode&lt;/code> objects&#xA;     *                in this &lt;code>ExceptionList&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object used in &lt;code>Request&lt;/code> operations to&#xA; * describe the exceptions that can be thrown by a method.  It maintains a&#xA; * modifiable list of &lt;code>TypeCode&lt;/code>s of the exceptions.&#xA; * &lt;P>&#xA; * The following code fragment demonstrates creating&#xA; * an &lt;code>ExceptionList&lt;/code> object:&#xA; * &lt;PRE>&#xA; *    ORB orb = ORB.init(args, null);&#xA; *    org.omg.CORBA.ExceptionList excList = orb.create_exception_list();&#xA; * &lt;/PRE>&#xA; * The variable &lt;code>excList&lt;/code> represents an &lt;code>ExceptionList&lt;/code>&#xA; * object with no &lt;code>TypeCode&lt;/code> objects in it.&#xA; * &lt;P>&#xA; * To add items to the list, you first create a &lt;code>TypeCode&lt;/code> object&#xA; * for the exception you want to include, using the &lt;code>ORB&lt;/code> method&#xA; * &lt;code>create_exception_tc&lt;/code>.  Then you use the &lt;code>ExceptionList&lt;/code>&#xA; * method &lt;code>add&lt;/code> to add it to the list.&#xA; * The class &lt;code>ExceptionList&lt;/code> has a method for getting&#xA; * the number of &lt;code>TypeCode&lt;/code> objects in the list, and  after&#xA; * items have been added, it is possible to call methods for accessing&#xA; * or deleting an item at a designated index.&#xA; *&#xA; * @version 1.13, 09/09/97&#xA; * @since   JDK1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
