<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DataInputStream.java">
  <comments>/*&#xA; * @(#)DataInputStream.java&#x9;1.10 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DataInputStream">
    <members xsi:type="members:InterfaceMethod" name="read_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** Reads an IDL &lt;code>Any&lt;/code> value from the input stream.&#xA;    * @return  the &lt;code>Any&lt;/code> read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_boolean">
      <typeReference xsi:type="types:Boolean">
        <comments>/** Reads an IDL boolean value from the input stream.&#xA;    * @return  the boolean read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_char">
      <typeReference xsi:type="types:Char">
        <comments>/** Reads an IDL character value from the input stream.&#xA;    * @return  the character read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_wchar">
      <typeReference xsi:type="types:Char">
        <comments>/** Reads an IDL wide character value from the input stream.&#xA;    * @return  the wide character read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_octet">
      <typeReference xsi:type="types:Byte">
        <comments>/** Reads an IDL octet value from the input stream.&#xA;    * @return  the octet value read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_short">
      <typeReference xsi:type="types:Short">
        <comments>/** Reads an IDL short from the input stream.&#xA;    * @return  the short read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_ushort">
      <typeReference xsi:type="types:Short">
        <comments>/** Reads an IDL unsigned short from the input stream.&#xA;    * @return  the unsigned short read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_long">
      <typeReference xsi:type="types:Int">
        <comments>/** Reads an IDL long from the input stream.&#xA;    * @return  the long read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_ulong">
      <typeReference xsi:type="types:Int">
        <comments>/** Reads an IDL unsigned long from the input stream.&#xA;    * @return  the unsigned long read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_longlong">
      <typeReference xsi:type="types:Long">
        <comments>/** Reads an IDL long long from the input stream.&#xA;    * @return  the long long read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_ulonglong">
      <typeReference xsi:type="types:Long">
        <comments>/** Reads an unsigned IDL long long from the input stream.&#xA;    * @return  the unsigned long long read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_float">
      <typeReference xsi:type="types:Float">
        <comments>/** Reads an IDL float from the input stream.&#xA;    * @return  the float read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_double">
      <typeReference xsi:type="types:Double">
        <comments>/** Reads an IDL double from the input stream.&#xA;    * @return  the double read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_string">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>// read_longdouble not supported by IDL/Java mapping</comments>
          <comments>/** Reads an IDL string from the input stream.&#xA;    * @return  the string read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_wstring">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/** Reads an IDL wide string from the input stream.&#xA;    * @return  the wide string read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_Object">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** Reads an IDL CORBA::Object from the input stream.&#xA;    * @return  the CORBA::Object read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_Abstract">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** Reads an IDL Abstract interface from the input stream.&#xA;    * @return  the Abstract interface read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
        <namespaces>java</namespaces>
        <namespaces>lang</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_Value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** Reads an IDL value type from the input stream.&#xA;    * @return  the value type read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_TypeCode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/** Reads an IDL typecode from the input stream.&#xA;    * @return  the typecode read.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_any_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL Anys from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="AnySeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_boolean_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL booleans from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="BooleanSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_char_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL characters from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="CharSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_wchar_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL wide characters from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="WCharSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_octet_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL octets from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="OctetSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_short_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL shorts from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ShortSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_ushort_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL unsigned shorts from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="UShortSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_long_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL longs from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="LongSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_ulong_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL unsigned longs from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ULongSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_ulonglong_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL unsigned long longs from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ULongLongSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_longlong_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL long longs from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="LongLongSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_float_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL floats from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="FloatSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_double_array">
      <typeReference xsi:type="types:Void">
        <comments>/** Reads array of IDL doubles from offset for length elements from the&#xA;    * input stream.  &#xA;    * @param seq The out parameter holder for the array to be read.&#xA;    * @param offset The index into seq of the first element to read from the&#xA;    * input stream.&#xA;    * @param length The number of elements to read from the input stream.&#xA;    * @throws &lt;code>org.omg.CORBA.MARSHAL&lt;/code>&#xA;    * If an inconsistency is detected, including not having registered &#xA;    * a streaming policy, then the standard system exception MARSHAL is raised.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="DoubleSeqHolder.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** Defines the methods used to read primitive data types from input streams&#xA;* for unmarshaling custom value types.  This interface is used by user&#xA;* written custom unmarshaling code for custom value types.&#xA;* @see org.omg.CORBA.DataOutputStream&#xA;* @see org.omg.CORBA.CustomMarshal&#xA;* @version 1.10 12/19/03&#xA;*/</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>org</namespaces>
      <namespaces>omg</namespaces>
      <namespaces>CORBA</namespaces>
      <namespaces>portable</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="portable/ValueBase.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
