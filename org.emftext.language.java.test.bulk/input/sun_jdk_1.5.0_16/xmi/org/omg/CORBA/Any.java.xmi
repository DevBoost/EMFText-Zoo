<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Any.java">
  <comments>/*&#xA; * @(#)Any.java&#x9;1.46 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Class" href="portable/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Class" href="portable/OutputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="portable/Streamable.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="portable/IDLEntity.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Any">
    <members xsi:type="members:InterfaceMethod" name="equal">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Checks for equality between this &lt;code>Any&lt;/code> object and the&#xA;     * given &lt;code>Any&lt;/code> object.  Two &lt;code>Any&lt;/code> objects are&#xA;     * equal if both their values and type codes are equal.&#xA;     *&#xA;     * @param a&#x9;the &lt;code>Any&lt;/code> object to test for equality&#xA;     * @return&#x9;&lt;code>true&lt;/code> if the &lt;code>Any&lt;/code> objects are equal;&#xA;     * &lt;code>false&lt;/code> otherwise&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="type">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Returns type information for the element contained in this&#xA;     * &lt;code>Any&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;the &lt;code>TypeCode&lt;/code> object containing type information&#xA;     *                about the value contained in this &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="type">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Sets this &lt;code>Any&lt;/code> object's &lt;code>type&lt;/code> field&#xA;     * to the given &lt;code>TypeCode&lt;/code> object and clears its value.&#xA;     * &lt;P>&#xA;     * Note that using this method to set the type code wipes out the&#xA;     * value if there is one. The method&#xA;     * is provided primarily so that the type may be set properly for&#xA;     * IDL &lt;code>out&lt;/code> parameters.  Generally, setting the type&#xA;     * is done by the &lt;code>insert_X&lt;/code> methods, which will set the type&#xA;     * to X if it is not already set to X.&#xA;     *&#xA;     * @param t       the &lt;code>TypeCode&lt;/code> object giving&#xA;     *                information for the value in&#xA;     *                this &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="read_value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="is">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="portable/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MARSHAL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>///////////////////////////////////////////////////////////////////////////</comments>
        <comments>// marshalling/unmarshalling routines</comments>
        <comments>/**&#xA;     * Reads off (unmarshals) the value of an &lt;code>Any&lt;/code> object from&#xA;     * the given input stream using the given typecode.&#xA;     *&#xA;     * @param is the &lt;code>org.omg.CORBA.portable.InputStream&lt;/code>&#xA;     *                object from which to read&#xA;     *                the value contained in this &lt;code>Any&lt;/code> object&#xA;     *&#xA;     * @param t&#x9; a &lt;code>TypeCode&lt;/code> object containing type information&#xA;     *           about the value to be read&#xA;     *&#xA;     * @exception MARSHAL when the given &lt;code>TypeCode&lt;/code> object is&#xA;     *                    not consistent with the value that was contained&#xA;     *                    in the input stream&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="os">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="portable/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Writes out the value of this &lt;code>Any&lt;/code> object&#xA;     * to the given output stream.  If both &lt;code>typecode&lt;/code>&#xA;     * and &lt;code>value&lt;/code> need to be written, use &#xA;     * &lt;code>create_output_stream()&lt;/code> to create an &lt;code>OutputStream&lt;/code>,&#xA;     * then use &lt;code>write_any&lt;/code> on the &lt;code>OutputStream&lt;/code>.&#xA;     * &lt;P>&#xA;     * If this method is called on an &lt;code>Any&lt;/code> object that has not&#xA;     * had a value inserted into its &lt;code>value&lt;/code> field, it will throw&#xA;     * the exception &lt;code>java.lang.NullPointerException&lt;/code>.&#xA;     *&#xA;     * @param os&#x9;the &lt;code>org.omg.CORBA.portable.OutputStream&lt;/code>&#xA;     *                object into which to marshal the value &#xA;     *                of this &lt;code>Any&lt;/code> object&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_output_stream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="portable/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates an output stream into which this &lt;code>Any&lt;/code> object's&#xA;     * value can be marshalled.&#xA;     *&#xA;     * @return&#x9;&#x9;the newly-created &lt;code>OutputStream&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_input_stream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="portable/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Creates an input stream from which this &lt;code>Any&lt;/code> object's value&#xA;     * can be unmarshalled.&#xA;     *&#xA;     * @return&#x9;&#x9;the newly-created &lt;code>InputStream&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_short">
      <typeReference xsi:type="types:Short"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>///////////////////////////////////////////////////////////////////////////</comments>
        <comments>// basic insertion/extraction methods</comments>
        <comments>/**&#xA;     * Extracts the &lt;code>short&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>short&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>short&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_short">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>short&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param s&#x9;&#x9;the &lt;code>short&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_long">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>int&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>int&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than an &lt;code>int&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_long">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>int&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param l&#x9;&#x9;the &lt;code>int&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_longlong">
      <typeReference xsi:type="types:Long"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>long&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>long&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>long&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_longlong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>long&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param l&#x9;&#x9;the &lt;code>long&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_ushort">
      <typeReference xsi:type="types:Short"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>short&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>short&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>short&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_ushort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>short&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param s&#x9;&#x9;the &lt;code>short&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_ulong">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>int&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>int&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than an &lt;code>int&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_ulong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>int&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param l&#x9;&#x9;the &lt;code>int&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_ulonglong">
      <typeReference xsi:type="types:Long"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>long&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>long&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>long&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_ulonglong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="l">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>long&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param l&#x9;&#x9;the &lt;code>long&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_float">
      <typeReference xsi:type="types:Float"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>float&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>float&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>float&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_float">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="f">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>float&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param f&#x9;&#x9;the &lt;code>float&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_double">
      <typeReference xsi:type="types:Double"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>double&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>double&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>double&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_double">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="d">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>double&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param d&#x9;&#x9;the &lt;code>double&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_boolean">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>boolean&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>boolean&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>boolean&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_boolean">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>boolean&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param b&#x9;&#x9;the &lt;code>boolean&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_char">
      <typeReference xsi:type="types:Char"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>char&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>char&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>char&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_char">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DATA_CONVERSION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>char&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param c&#x9;&#x9;the &lt;code>char&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     * @exception DATA_CONVERSION if there is a data conversion&#xA;&#x9; *            error&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_wchar">
      <typeReference xsi:type="types:Char"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>char&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>char&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>char&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_wchar">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>char&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param c&#x9;&#x9;the &lt;code>char&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_octet">
      <typeReference xsi:type="types:Byte"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>byte&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>byte&lt;/code> stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>byte&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_octet">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="b">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>byte&lt;/code> &#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param b&#x9;&#x9;the &lt;code>byte&lt;/code> to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>Any&lt;/code> object in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>Any&lt;/code> object stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this &lt;code>Any&lt;/code> object &#xA;     *              contains something other than an &lt;code>Any&lt;/code> object or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_any">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>Any&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param a&#x9;&#x9;the &lt;code>Any&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_Object">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>org.omg.CORBA.Object&lt;/code> in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>org.omg.CORBA.Object&lt;/code> stored in &#xA;     *         this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than an &#xA;     *              &lt;code>org.omg.CORBA.Object&lt;/code> or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_Object">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>org.omg.CORBA.Object&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param o&#x9;&#x9;the &lt;code>org.omg.CORBA.Object&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_Value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>java.io.Serializable&lt;/code> object in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>java.io.Serializable&lt;/code> object stored in&#xA;     *         this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>java.io.Serializable&lt;/code> &#xA;     *              object or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_Value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>java.io.Serializable&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param v&#x9;&#x9;the &lt;code>java.io.Serializable&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_Value">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="v">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MARSHAL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>java.io.Serializable&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param v&#x9;&#x9;the &lt;code>java.io.Serializable&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     * @param t     the &lt;code>TypeCode&lt;/code> object that is to be inserted into&#xA;     *              this &lt;code>Any&lt;/code> object's &lt;code>type&lt;/code> field&#xA;     *              and that describes the &lt;code>java.io.Serializable&lt;/code> &#xA;     *              object being inserted&#xA;&#x9; * @throws MARSHAL if the ORB has a problem marshalling or&#xA;&#x9; *          unmarshalling parameters&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_Object">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="o">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_PARAM.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>org.omg.CORBA.Object&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param o&#x9;&#x9;the &lt;code>org.omg.CORBA.Object&lt;/code> instance to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     * @param t     the &lt;code>TypeCode&lt;/code> object that is to be inserted into&#xA;     *              this &lt;code>Any&lt;/code> object and that describes&#xA;     *              the &lt;code>Object&lt;/code> being inserted&#xA;     * @exception BAD_OPERATION if this  method is invalid for this&#xA;&#x9; *            &lt;code>Any&lt;/code> object&#xA;     *              &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_string">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>String&lt;/code> object in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>String&lt;/code> object stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>String&lt;/code> object or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_string">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DATA_CONVERSION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MARSHAL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>String&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param s&#x9;&#x9;the &lt;code>String&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     * @exception DATA_CONVERSION if there is a data conversion error&#xA;     * @exception MARSHAL if the ORB has a problem marshalling or&#xA;&#x9; *             unmarshalling parameters&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_wstring">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>String&lt;/code> object in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>String&lt;/code> object stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>String&lt;/code> object or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_wstring">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="MARSHAL.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>String&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param s&#x9;&#x9;the &lt;code>String&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     * @exception MARSHAL if the ORB has a problem marshalling or&#xA;&#x9; *             unmarshalling parameters&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="extract_TypeCode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Extracts the &lt;code>TypeCode&lt;/code> object in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>TypeCode&lt;/code> object stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a &lt;code>TypeCode&lt;/code> object or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_TypeCode">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="t">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>/**&#xA;     * Inserts the given &lt;code>TypeCode&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param t&#x9;&#x9;the &lt;code>TypeCode&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:ClassMethod" name="extract_Principal">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Principal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_OPERATION.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Extracts the &lt;code>Principal&lt;/code> object in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     * Note that the class &lt;code>Principal&lt;/code> has been deprecated.&#xA;     *&#xA;     * @return the &lt;code>Principal&lt;/code> object stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object&#xA;     *              contains something other than a&#xA;     *              &lt;code>Principal&lt;/code> object or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Deprecated by CORBA 2.2.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insert_Principal">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Principal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Inserts the given &lt;code>Principal&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     * Note that the class &lt;code>Principal&lt;/code> has been deprecated.&#xA;     *&#xA;     * @param p&#x9;&#x9;the &lt;code>Principal&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     * @deprecated Deprecated by CORBA 2.2.&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="extract_Streamable">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>portable</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="portable/Streamable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_INV_ORDER.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>///////////////////////////////////////////////////////////////////////////</comments>
        <comments>// insertion/extraction of streamables</comments>
        <comments>/** &#xA;     * Extracts a &lt;code>Streamable&lt;/code> from this &lt;code>Any&lt;/code> object's &#xA;     * &lt;code>value&lt;/code> field.  This method allows the extraction of &#xA;     * non-primitive IDL types.&#xA;     *&#xA;     * @return the &lt;code>Streamable&lt;/code> stored in the &lt;code>Any&lt;/code> object.&#xA;     * @throws BAD_INV_ORDER if the caller has invoked operations in the wrong order&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insert_Streamable">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="s">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="portable/Streamable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>Streamable&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     * This method allows the insertion of non-primitive IDL types.&#xA;     *&#xA;     * @param s&#x9;&#x9;the &lt;code>Streamable&lt;/code> object to insert into this&#xA;     *                &lt;code>Any&lt;/code> object; may be a non-primitive&#xA;     *                IDL type&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="extract_fixed">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>math</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Extracts the &lt;code>java.math.BigDecimal&lt;/code> object in this&#xA;     * &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @return the &lt;code>java.math.BigDecimal&lt;/code> object &#xA;     *         stored in this &lt;code>Any&lt;/code> object&#xA;     * @exception BAD_OPERATION if this  &lt;code>Any&lt;/code> object &#xA;     *              contains something other than a&#xA;     *              &lt;code>java.math.BigDecimal&lt;/code> object or the&#xA;     *              &lt;code>value&lt;/code> field has not yet been set&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insert_fixed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>math</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws an &lt;a href=&quot;package-summary.html#NO_IMPLEMENT&quot;>&#xA;     * &lt;code>org.omg.CORBA.NO_IMPLEMENT&lt;/code>&lt;/a> exception.&#xA;     * &lt;P>&#xA;     * Inserts the given &lt;code>java.math.BigDecimal&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param value&#x9;&#x9;the &lt;code>java.math.BigDecimal&lt;/code> object&#xA;     *                  to insert into this &lt;code>Any&lt;/code> object&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="insert_fixed">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>math</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/math/BigDecimal.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="BAD_INV_ORDER.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws an &lt;a href=&quot;package-summary.html#NO_IMPLEMENT&quot;>&#xA;     * &lt;code>org.omg.CORBA.NO_IMPLEMENT&lt;/code>&lt;/a> exception.&#xA;     * &lt;P>&#xA;     * Inserts the given &lt;code>java.math.BigDecimal&lt;/code> object&#xA;     * into this &lt;code>Any&lt;/code> object's &lt;code>value&lt;/code> field.&#xA;     *&#xA;     * @param value&#x9;&#x9;the &lt;code>java.math.BigDecimal&lt;/code> object&#xA;     *                  to insert into this &lt;code>Any&lt;/code> object&#xA;     * @param type     the &lt;code>TypeCode&lt;/code> object that is to be inserted into&#xA;     *              this &lt;code>Any&lt;/code> object's &lt;code>type&lt;/code> field&#xA;     *              and that describes the &lt;code>java.math.BigDecimal&lt;/code> &#xA;     *              object being inserted&#xA;     * @throws org.omg.CORBA.BAD_INV_ORDER if this method is  invoked improperly&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code> package&#xA;     *      comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Abstract">
      <comments>/**&#xA; * Serves as a container for any data that can be&#xA; * described in IDL or for any IDL primitive type.&#xA; * An &lt;code>Any&lt;/code> object is used as a component of a&#xA; * &lt;code>NamedValue&lt;/code> object, which provides information about&#xA; * arguments or return values in requests, and which is used to define&#xA; * name/value pairs in &lt;code>Context&lt;/code> objects.&#xA; &lt;p>&#xA; *&#xA; * An &lt;code>Any&lt;/code> object consists of two parts:&#xA; * &lt;OL>&#xA; * &lt;LI>a data value&#xA; * &lt;LI>a &lt;code>TypeCode&lt;/code> object describing the type of the data&#xA; * value contained in the &lt;code>Any&lt;/code> object.  For example,&#xA; * a &lt;code>TypeCode&lt;/code> object for an array contains&#xA; * a field for the length of the array and a field for&#xA; * the type of elements in the array. (Note that in&#x9;this case, the&#xA; * second field of the &lt;code>TypeCode&lt;/code> object is itself a&#xA; * &lt;code>TypeCode&lt;/code> object.)&#xA; * &lt;/OL>&#xA; *&#xA; * &lt;P>&#xA; * &lt;a name=&quot;anyOps&quot;&lt;/a>&#xA; * A large part of the &lt;code>Any&lt;/code> class consists of pairs of methods&#xA; * for inserting values into and extracting values from an&#xA; * &lt;code>Any&lt;/code> object.&#xA; * &lt;P>&#xA; * For a given primitive type X, these methods are:&#xA; *  &lt;dl>&#xA; *&#x9;&lt;dt>&lt;code>&lt;bold> void insert_X(X x)&lt;/bold>&lt;/code>&#xA; *&#x9;&lt;dd> This method allows the insertion of&#xA; *&#x9;  an instance &lt;code>x&lt;/code> of primitive type &lt;code>X&lt;/code>&#xA; *    into the &lt;code>value&lt;/code> field of the &lt;code>Any&lt;/code> object.&#xA; *    Note that the method&#xA; *    &lt;code>insert_X&lt;/code> also resets the &lt;code>Any&lt;/code> object's&#xA; *    &lt;code>type&lt;/code> field if necessary.&#xA; *&#x9;&lt;dt> &lt;code>&lt;bold>X extract_X()&lt;/bold>&lt;/code>&#xA; *&#x9;&lt;dd> This method allows the extraction of an instance of&#xA; *&#x9;  type &lt;code>X&lt;/code> from the &lt;code>Any&lt;/code> object.&#xA; *    &lt;BR>&#xA; *    &lt;P>&#xA; *    This method throws the exception &lt;code>BAD_OPERATION&lt;/code> under two conditions:&#xA; *    &lt;OL>&#xA; *     &lt;LI> the type of the element contained in the &lt;code>Any&lt;/code> object is not&#xA; *&#x9;   &lt;code>X&lt;/code>&#xA; *     &lt;LI> the method &lt;code>extract_X&lt;/code> is called before&#xA; *     the &lt;code>value&lt;/code> field of the &lt;code>Any&lt;/code> object&#xA; *     has been set&#xA; *    &lt;/OL>&#xA; * &lt;/dl>&#xA; * &lt;P>&#xA; * There are distinct method pairs for each&#xA; * primitive IDL data type (&lt;code>insert_long&lt;/code> and &lt;code>extract_long&lt;/code>,&#xA; * &lt;code>insert_string&lt;/code> and &lt;code>extract_string&lt;/code>, and so on).&lt;BR>&#xA; * &lt;P>&#xA; * The class &lt;code>Any&lt;/code> also has methods for&#xA; * getting and setting the type code,&#xA; * for testing two &lt;code>Any&lt;/code> objects for equality,&#xA; * and for reading an &lt;code>Any&lt;/code> object from a stream or&#xA; * writing it to a stream.&#xA; * &lt;BR>&#xA; * @version 1.12, 09/09/97&#xA; * @since   JDK1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <implements xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="portable/IDLEntity.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
