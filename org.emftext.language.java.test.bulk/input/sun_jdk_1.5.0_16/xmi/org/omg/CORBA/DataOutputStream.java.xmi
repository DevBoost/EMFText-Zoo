<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DataOutputStream.java">
  <comments>/*&#xA; * @(#)DataOutputStream.java&#x9;1.12 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DataOutputStream">
    <members xsi:type="members:InterfaceMethod" name="write_any">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the Any value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_boolean">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the boolean value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_char">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL character value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Char"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_wchar">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL wide character value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Char"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_octet">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL octet value (represented as a Java byte) to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_short">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL short value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Short"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_ushort">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL unsigned short value (represented as a Java short &#xA;    * value) to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Short"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_long">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL long value (represented as a Java int) to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_ulong">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL unsigned long value (represented as a Java int) to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_longlong">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL long long value (represented as a Java long) to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Long"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_ulonglong">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL unsigned long long value (represented as a Java long)&#xA;    * to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Long"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_float">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL float value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Float"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_double">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL double value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Double"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_string">
      <typeReference xsi:type="types:Void">
        <comments>// write_longdouble not supported by IDL/Java mapping</comments>
        <comments>/** &#xA;    * Writes the IDL string value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_wstring">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL wide string value (represented as a Java String) to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_Object">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL CORBA::Object value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_Abstract">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL Abstract interface type to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>lang</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_Value">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the IDL value type value to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_TypeCode">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the typecode to the output stream.&#xA;    * @param value The value to be written.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_any_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL Anys from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_boolean_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL booleans from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Boolean"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_char_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL characters from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_wchar_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL wide characters from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_octet_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL octets from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_short_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL shorts from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Short"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_ushort_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL unsigned shorts (represented as Java shorts)&#xA;    * from offset for length elements to the output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Short"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_long_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL longs from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_ulong_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL unsigned longs (represented as Java ints) &#xA;    * from offset for length elements to the output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Int"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_ulonglong_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL unsigned long longs (represented as Java longs)&#xA;    * from offset for length elements to the output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Long"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_longlong_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL long longs from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Long"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_float_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL floats from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Float"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="write_double_array">
      <typeReference xsi:type="types:Void">
        <comments>/** &#xA;    * Writes the array of IDL doubles from offset for length elements to the&#xA;    * output stream.  &#xA;    * @param seq The array to be written.&#xA;    * @param offset The index into seq of the first element to write to the&#xA;    * output stream.&#xA;    * @param length The number of elements to write to the output stream.&#xA;    */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="seq">
        <typeReference xsi:type="types:Double"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/** Defines the methods used to write primitive data types to output streams&#xA;* for marshalling custom value types.  This interface is used by user&#xA;* written custom marshalling code for custom value types.&#xA;* @see org.omg.CORBA.DataInputStream&#xA;* @see org.omg.CORBA.CustomMarshal&#xA;* @version 1.12 12/19/03&#xA;*/</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>org</namespaces>
      <namespaces>omg</namespaces>
      <namespaces>CORBA</namespaces>
      <namespaces>portable</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="portable/ValueBase.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
