<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Request.java">
  <comments>/*&#xA; * @(#)Request.java&#x9;1.25 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Class" name="Request">
    <members xsi:type="members:InterfaceMethod" name="target">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the the target object reference.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;the object reference that points to the&#xA;     *                    object implementation for the method&#xA;     *                    to be invoked&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="operation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the name of the method to be invoked.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;the name of the method to be invoked&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="arguments">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>NVList&lt;/code> object containing the arguments&#xA;     * to the method being invoked.  The elements in the list are&#xA;     * &lt;code>NamedValue&lt;/code> objects, with each one describing an argument&#xA;     * to the method.&#xA;     *&#xA;     * @return&#x9;the &lt;code>NVList&lt;/code> object containing the arguments&#xA;     *&#x9;&#x9;&#x9;for the method&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="result">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>NamedValue&lt;/code> object containing the return&#xA;     * value for the method.&#xA;     *&#xA;     * @return&#x9;&#x9;the &lt;code>NamedValue&lt;/code> object containing the result&#xA;     *&#x9;&#x9;&#x9;&#x9;of the method&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="env">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Environment.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>Environment&lt;/code> object for this request.&#xA;     * It contains the exception that the method being invoked has&#xA;     * thrown (after the invocation returns).&#xA;     *&#xA;     *&#xA;     * @return&#x9;the &lt;code>Environment&lt;/code> object for this request&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="exceptions">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ExceptionList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>ExceptionList&lt;/code> object for this request.&#xA;     * This list contains &lt;code>TypeCode&lt;/code> objects describing the&#xA;     * exceptions that may be thrown by the method being invoked.&#xA;     *&#xA;     * @return&#x9;the &lt;code>ExceptionList&lt;/code> object describing the exceptions&#xA;     *            that may be thrown by the method being invoked&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="contexts">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="ContextList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>ContextList&lt;/code> object for this request.&#xA;     * This list contains context &lt;code>String&lt;/code>s that need to&#xA;     * be resolved and sent with the invocation.&#xA;     *&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;the list of context strings whose values&#xA;     *&#x9;&#x9;&#x9;&#x9;need to be resolved and sent with the&#xA;     *&#x9;&#x9;&#x9;&#x9;invocation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="ctx">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>Context&lt;/code> object for this request.&#xA;     * This is a list of properties giving information about the&#xA;     * client, the environment, or the circumstances of this request.&#xA;     *&#xA;     * @return&#x9;&#x9;the &lt;code>Context&lt;/code> object that is to be used&#xA;     *&#x9;&#x9;&#x9;&#x9;to resolve any context strings whose&#xA;     *&#x9;&#x9;&#x9;&#x9;values need to be sent with the invocation&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="ctx">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="c">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Context.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets this request's &lt;code>Context&lt;/code> object to the one given.&#xA;     *&#xA;     * @param c&#x9;&#x9;the new &lt;code>Context&lt;/code> object to be used for&#xA;     *&#x9;&#x9;&#x9;&#x9;resolving context strings&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_in_arg">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an input argument and adds it to this &lt;code>Request&lt;/code>&#xA;     * object.&#xA;     *&#xA;     * @return&#x9;&#x9;an &lt;code>Any&lt;/code> object that contains the&#xA;     *                value and typecode for the input argument added&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_named_in_arg">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an input argument with the given name and adds it to&#xA;     * this &lt;code>Request&lt;/code> object.&#xA;     *&#xA;     * @param name&#x9;&#x9;the name of the argument being added&#xA;     * @return&#x9;&#x9;an &lt;code>Any&lt;/code> object that contains the&#xA;     *                value and typecode for the input argument added&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_inout_arg">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an input/output argument to this &lt;code>Request&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;an &lt;code>Any&lt;/code> object that contains the&#xA;     *                value and typecode for the input/output argument added&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_named_inout_arg">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an input/output argument with the given name to this&#xA;     * &lt;code>Request&lt;/code> object.&#xA;     *&#xA;     * @param name&#x9;&#x9;the name of the argument being added&#xA;     * @return&#x9;&#x9;an &lt;code>Any&lt;/code> object that contains the&#xA;     *                value and typecode for the input/output argument added&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_out_arg">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an output argument to this &lt;code>Request&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;an &lt;code>Any&lt;/code> object that contains the&#xA;     *                value and typecode for the output argument added&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_named_out_arg">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds an output argument with the given name to this&#xA;     * &lt;code>Request&lt;/code> object.&#xA;     *&#xA;     * @param name&#x9;&#x9;the name of the argument being added&#xA;     * @return&#x9;&#x9;an &lt;code>Any&lt;/code> object that contains the&#xA;     *                value and typecode for the output argument added&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set_return_type">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="tc">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Sets the typecode for the return&#xA;     * value of the method.&#xA;     *&#xA;     * @param tc&#x9;&#x9;&#x9;the &lt;code>TypeCode&lt;/code> object containing type information&#xA;     *                   for the return value&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="return_value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>Any&lt;/code> object that contains the value for the&#xA;     * result of the method.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an &lt;code>Any&lt;/code> object containing the value and&#xA;     *                   typecode for the return value&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="invoke">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Makes a synchronous invocation using the&#xA;     * information in the &lt;code>Request&lt;/code> object. Exception information is&#xA;     * placed into the &lt;code>Request&lt;/code> object's environment object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="send_oneway">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Makes a oneway invocation on the&#xA;     * request. In other words, it does not expect or wait for a&#xA;     * response. Note that this can be used even if the operation was&#xA;     * not declared as oneway in the IDL declaration. No response or&#xA;     * exception information is returned.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="send_deferred">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Makes an asynchronous invocation on&#xA;     * the request. In other words, it does not wait for a response before it&#xA;     * returns to the user. The user can then later use the methods&#xA;     * &lt;code>poll_response&lt;/code> and &lt;code>get_response&lt;/code> to get&#xA;     * the result or exception information for the invocation.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="poll_response">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the user to determine&#xA;     * whether a response has been received for the invocation triggered&#xA;     * earlier with the &lt;code>send_deferred&lt;/code> method.&#xA;     *&#xA;     * @return&#x9;&#x9;&lt;code>true&lt;/code> if the method response has&#xA;     * &#x9;&#x9;&#x9;&#x9;been received; &lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_response">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="WrongTransaction.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Allows the user to access the&#xA;     * response for the invocation triggered earlier with the&#xA;     * &lt;code>send_deferred&lt;/code> method.&#xA;     *&#xA;     * @exception WrongTransaction  if the method &lt;code>get_response&lt;/code> was invoked&#xA;     * from a different transaction's scope than the one from which the&#xA;     * request was originally sent. See the OMG Transaction Service specification&#xA;     * for details.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object containing the information necessary for&#xA; * invoking a method.  This class is&#xA; * the cornerstone of the ORB Dynamic&#xA; * Invocation Interface (DII), which allows dynamic creation and&#xA; * invocation of requests.&#xA; * A server cannot tell the difference between a client&#xA; * invocation using a client stub and a request using the DII.&#xA; * &lt;P>&#xA; * A &lt;code>Request&lt;/code> object consists of:&#xA; * &lt;UL>&#xA; * &lt;LI>the name of the operation to be invoked&#xA; * &lt;LI>an &lt;code>NVList&lt;/code> containing arguments for the operation.&lt;BR>&#xA; * Each item in the list is a &lt;code>NamedValue&lt;/code> object, which has three&#xA; * parts:&#xA; *  &lt;OL>&#xA; *    &lt;LI>the name of the argument&#xA; *    &lt;LI>the value of the argument (as an &lt;code>Any&lt;/code> object)&#xA; *    &lt;LI>the argument mode flag indicating whether the argument is&#xA; *        for input, output, or both&#xA; *  &lt;/OL>&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * &lt;code>Request&lt;/code> objects may also contain additional information,&#xA; * depending on how an operation was defined in the original IDL&#xA; * interface definition.  For example, where appropriate, they may contain&#xA; * a &lt;code>NamedValue&lt;/code> object to hold the return value or exception,&#xA; * a context, a list of possible exceptions, and a list of&#xA; * context strings that need to be resolved.&#xA; * &lt;P>&#xA; * New &lt;code>Request&lt;/code> objects are created using one of the&#xA; * &lt;code>create_request&lt;/code> methods in the &lt;code>Object&lt;/code> class.&#xA; * In other words, a &lt;code>create_request&lt;/code> method is performed on the&#xA; * object which is to be invoked.&#xA; *&#xA; * @see org.omg.CORBA.NamedValue&#xA; *&#xA; * @version 1.13 09/09/97&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
