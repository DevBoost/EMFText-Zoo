<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Object.java">
  <comments>/*&#xA; * @(#)Object.java&#x9;1.52 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Object">
    <members xsi:type="members:InterfaceMethod" name="_is_a">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Checks whether this object is an instance of a class that&#xA;     * implements the given interface.&#xA;     *&#xA;     * @param repositoryIdentifier the interface to check against&#xA;     * @return &lt;code>true&lt;/code> if this object reference is an instance&#xA;     *         of a class that implements the interface;&#xA;     *         &lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="repositoryIdentifier">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_is_equivalent">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Determines whether the two object references are equivalent,&#xA;     * so far as the ORB can easily determine. Two object references are equivalent&#xA;     * if they are identical. Two distinct object references which in fact refer to&#xA;     * the same object are also equivalent. However, ORBs are not required&#xA;     * to attempt determination of whether two distinct object references&#xA;     * refer to the same object, since such determination could be impractically&#xA;     * expensive.&#xA;     * @param other the other object reference with which to check for equivalence&#xA;     * @return &lt;code>true&lt;/code> if this object reference is known to be&#xA;     *         equivalent to the given object reference.&#xA;     *         Note that &lt;code>false&lt;/code> indicates only that the two&#xA;     *         object references are distinct, not necessarily that&#xA;     *         they reference distinct objects.&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="other">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_non_existent">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA;     * Determines whether the server object for this object reference has been&#xA;     * destroyed.&#xA;     * @return &lt;code>true&lt;/code> if the ORB knows authoritatively that the&#xA;     *         server object does not exist; &lt;code>false&lt;/code> otherwise&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_hash">
      <typeReference xsi:type="types:Int">
        <comments>/**&#xA;     * Returns an ORB-internal identifier for this object reference.&#xA;     * This is a hash identifier, which does&#xA;     * not change during the lifetime of the object reference, and so&#xA;     * neither will any hash function of that identifier change. The value returned&#xA;     * is not guaranteed to be unique; in other words, another object&#xA;     * reference may have the same hash value.&#xA;     * If two object references hash differently,&#xA;     * then they are distinct object references; however, both may still refer&#xA;     * to the same CORBA object.&#xA;     *&#xA;     * @param maximum the upper bound on the hash value returned by the ORB&#xA;     * @return the ORB-internal hash identifier for this object reference&#xA;     */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="maximum">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_duplicate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns a duplicate of this CORBA object reference.&#xA;     * The server object implementation is not involved in creating&#xA;     * the duplicate, and the implementation cannot distinguish whether&#xA;     * the original object reference or a duplicate was used to make a request.&#xA;     * &lt;P>&#xA;     * Note that this method is not very useful in the Java platform,&#xA;     * since memory management is handled by the VM.&#xA;     * It is included for compliance with the CORBA APIs.&#xA;     * &lt;P>&#xA;     * The method &lt;code>_duplicate&lt;/code> may return this object reference itself.&#xA;     *&#xA;     * @return a duplicate of this object reference or this object reference&#xA;     *         itself&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_release">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;     * Signals that the caller is done using this object reference, so&#xA;     * internal ORB resources associated with this object reference can be&#xA;     * released. Note that the object implementation is not involved in&#xA;     * this operation, and other references to the same object are not affected.&#xA;     */</comments>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_get_interface_def">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Obtains an &lt;code>InterfaceDef&lt;/code> for the object implementation&#xA;     * referenced by this object reference.&#xA;     * The &lt;code>InterfaceDef&lt;/code> object&#xA;     * may be used to introspect on the methods, attributes, and other&#xA;     * type information for the object referred to by this object reference.&#xA;     *&#xA;     * @return the &lt;code>InterfaceDef&lt;/code> object in the Interface Repository&#xA;     *         which provides type information about the object referred to by&#xA;     *         this object reference&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_request">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a &lt;code>Request&lt;/code> instance for use in the&#xA;     * Dynamic Invocation Interface.&#xA;     *&#xA;     * @param operation  the name of the method to be invoked using the&#xA;     *&#x9;&#x9;              &lt;code>Request&lt;/code> instance&#xA;     * @return the newly-created &lt;code>Request&lt;/code> instance&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Request.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="operation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_create_request">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a &lt;code>Request&lt;/code> instance initialized with the&#xA;     * given context, method name, list of arguments, and container&#xA;     * for the method's return value.&#xA;     *&#xA;     * @param ctx&#x9;&#x9;&#x9;a &lt;code>Context&lt;/code> object containing&#xA;     *                     a list of properties&#xA;     * @param operation    the name of the method to be invoked&#xA;     * @param arg_list&#x9;&#x9;an &lt;code>NVList&lt;/code> containing the actual arguments&#xA;     *                     to the method being invoked&#xA;     * @param result&#x9;&#x9;a &lt;code>NamedValue&lt;/code> object to serve as a&#xA;     *                     container for the method's return value&#xA;     * @return&#x9;&#x9;&#x9;the newly-created &lt;code>Request&lt;/code> object&#xA;     *&#xA;     * @see Request&#xA;     * @see NVList&#xA;     * @see NamedValue&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Request.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Context.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="operation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg_list">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_create_request">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Creates a &lt;code>Request&lt;/code> instance initialized with the&#xA;     * given context, method name, list of arguments, container&#xA;     * for the method's return value, list of possible exceptions,&#xA;     * and list of context strings needing to be resolved.&#xA;     *&#xA;     * @param ctx&#x9;&#x9;&#x9;a &lt;code>Context&lt;/code> object containing&#xA;     *                     a list of properties&#xA;     * @param operation    the name of the method to be invoked&#xA;     * @param arg_list&#x9;&#x9;an &lt;code>NVList&lt;/code> containing the actual arguments&#xA;     *                     to the method being invoked&#xA;     * @param result&#x9;&#x9;a &lt;code>NamedValue&lt;/code> object to serve as a&#xA;     *                     container for the method's return value&#xA;     * @param exclist&#x9;&#x9;an &lt;code>ExceptionList&lt;/code> object containing a&#xA;     *                     list of possible exceptions the method can throw&#xA;     * @param ctxlist&#x9;&#x9;a &lt;code>ContextList&lt;/code> object containing a list of&#xA;     *                     context strings that need to be resolved and sent with the&#xA;     * &#x9;&#x9;&#x9;     &#x9;&lt;code>Request&lt;/code> instance&#xA;     * @return&#x9;&#x9;&#x9;the newly-created &lt;code>Request&lt;/code> object&#xA;     *&#xA;     * @see Request&#xA;     * @see NVList&#xA;     * @see NamedValue&#xA;     * @see ExceptionList&#xA;     * @see ContextList&#xA;     */</comments>
          <target xsi:type="classifiers:Class" href="Request.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctx">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Context.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="operation">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg_list">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="result">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exclist">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ExceptionList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctxlist">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ContextList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_get_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Returns the &lt;code>Policy&lt;/code> object of the specified type &#xA;     * which applies to this object.&#xA;     * &#xA;     * @param policy_type the type of policy to be obtained&#xA;     * @return A &lt;code>Policy&lt;/code> object of the type specified by &#xA;     *         the policy_type parameter&#xA;     * @exception org.omg.CORBA.BAD_PARAM when the value of policy type &#xA;     * is not valid either because the specified type is not supported by this &#xA;     * ORB or because a policy object of that type is not associated with this &#xA;     * Object&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="Policy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policy_type">
        <typeReference xsi:type="types:Int"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_get_domain_managers">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;     * Retrieves the &lt;code>DomainManagers&lt;/code> of this object.&#xA;     * This allows administration services (and applications) to retrieve the &#xA;     * domain managers, and hence the security and other policies applicable &#xA;     * to individual objects that are members of the domain.&#xA;     * &#xA;     * @return the list of immediately enclosing domain managers of this object.&#xA;     *  At least one domain manager is always returned in the list since by &#xA;     * default each object is associated with at least one domain manager at &#xA;     * creation.&#xA;     */</comments>
          <target xsi:type="classifiers:Interface" href="DomainManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_set_policy_override">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;     * Returns a new &lt;code>Object&lt;/code> with the given policies&#xA;&#x9; * either replacing any existing policies in this&#xA;&#x9; * &lt;code>Object&lt;/code> or with the given policies added &#xA;&#x9; * to the existing ones, depending on the value of the&#xA;&#x9; * given &lt;code>SetOverrideType&lt;/code> object.&#xA;&#x9; * &#xA;&#x9; * @param policies an array of &lt;code>Policy&lt;/code> objects containing&#xA;&#x9; *                 the policies to be added or to be used as replacements&#xA;&#x9; * @param set_add either &lt;code>SetOverrideType.SET_OVERRIDE&lt;/code>, indicating&#xA;&#x9; *                that the given policies will replace any existing ones, or&#xA;&#x9; *                &lt;code>SetOverrideType.ADD_OVERRIDE&lt;/code>, indicating that&#xA;&#x9; *                the given policies should be added to any existing ones&#xA;&#x9; * @return a new &lt;code>Object&lt;/code> with the given policies replacing&#xA;&#x9; *         or added to those in this &lt;code>Object&lt;/code>&#xA;     */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policies">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Policy.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="set_add">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SetOverrideType.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The definition for a CORBA object reference.&#xA; * &lt;p>&#xA; * A CORBA object reference is a handle for a particular&#xA; * CORBA object implemented by a server. A CORBA object reference&#xA; * identifies the same CORBA object each time the reference is used to invoke&#xA; * a method on the object.&#xA; * A CORBA object may have multiple, distinct object references.&#xA; * &lt;p>&#xA; * The &lt;code>org.omg.CORBA.Object&lt;/code> interface is the root of&#xA; * the inheritance hierarchy for all CORBA object references in the Java&#xA; * programming language, analogous to &lt;code>java.rmi.Remote&lt;/code>&#xA; * for RMI remote objects.&#xA; * &lt;p>&#xA; * A CORBA object may be either local or remote.&#xA; * If it is a local object (that is, running in the same&#xA; * VM as the client), invocations may be directly serviced by&#xA; * the object instance, and the object reference could point to the actual&#xA; * instance of the object implementation class.&#xA; * If a CORBA object is a remote object (that is, running in a different&#xA; * VM from the client), the object reference points to a stub (proxy) which uses the&#xA; * ORB machinery to make a remote invocation on the server where the object&#xA; * implementation resides.&#xA; * &lt;p>&#xA; * Default implementations of the methods in the interface&#xA; * &lt;code>org.omg.CORBA.Object&lt;/code>&#xA; * are provided in the class &lt;code>org.omg.CORBA.portable.ObjectImpl&lt;/code>,&#xA; * which is the base class for stubs and object implementations.&#xA; * &lt;p>&#xA; * @see org.omg.CORBA.portable.ObjectImpl&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
