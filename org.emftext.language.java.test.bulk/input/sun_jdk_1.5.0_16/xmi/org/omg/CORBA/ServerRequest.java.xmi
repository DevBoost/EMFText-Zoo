<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ServerRequest.java">
  <comments>/*&#xA; * @(#)ServerRequest.java&#x9;1.31 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Class" name="ServerRequest">
    <members xsi:type="members:ClassMethod" name="op_name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Retrieves the name of the operation being&#xA;     * invoked. According to OMG IDL's rules, these names must be unique&#xA;     * among all operations supported by this object's &quot;most-derived&quot;&#xA;     * interface. Note that the operation names for getting and setting&#xA;     * attributes are &lt;code>_get_&amp;lt;attribute_name&amp;gt;&lt;/code>&#xA;     * and &lt;code>_set_&amp;lt;attribute_name&amp;gt;&lt;/code>,&#xA;     * respectively.&#xA;     *&#xA;     * @return     the name of the operation to be invoked&#xA;     * @deprecated use operation()&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="operation">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws an &lt;code>org.omg.CORBA.NO_IMPLEMENT&lt;/code> exception.&#xA;     * &lt;P>&#xA;     * Retrieves the name of the operation being&#xA;     * invoked. According to OMG IDL's rules, these names must be unique&#xA;     * among all operations supported by this object's &quot;most-derived&quot;&#xA;     * interface. Note that the operation names for getting and setting&#xA;     * attributes are &lt;code>_get_&amp;lt;attribute_name&amp;gt;&lt;/code>&#xA;     * and &lt;code>_set_&amp;lt;attribute_name&amp;gt;&lt;/code>,&#xA;     * respectively.&#xA;     *&#xA;     * @return     the name of the operation to be invoked&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code>&#xA;     *      package comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="params">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="params">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Specifies method parameter types and retrieves &quot;in&quot; and &quot;inout&quot;&#xA;     * argument values.&#xA;     * &lt;P>&#xA;     * Note that this method is deprecated; use the method&#xA;     * &lt;code>arguments&lt;/code> in its place.&#xA;     * &lt;P>&#xA;     * Unless it calls the method &lt;code>set_exception&lt;/code>,&#xA;     * the DIR must call this method exactly once, even if the&#xA;     * method signature contains no parameters. Once the method &lt;code>&#xA;     * arguments&lt;/code> or &lt;code>set_exception&lt;/code>&#xA;     * has been called, calling &lt;code>arguments&lt;/code> on the same&#xA;     * &lt;code>ServerRequest&lt;/code> object &#xA;     * will result in a &lt;code>BAD_INV_ORDER&lt;/code> system exception.&#xA;     * The DIR must pass in to the method &lt;code>arguments&lt;/code>&#xA;     * an NVList initialized with TypeCodes and Flags&#xA;     * describing the parameter types for the operation, in the order in which&#xA;     * they appear in the IDL specification (left to right). A&#xA;     * potentially-different NVList will be returned from&#xA;     * &lt;code>arguments&lt;/code>, with the&#xA;     * &quot;in&quot; and &quot;inout&quot; argument values supplied. If it does not call&#xA;     * the method &lt;code>set_exception&lt;/code>,&#xA;     * the DIR must supply the returned NVList with return&#xA;     * values for any &quot;out&quot; arguments before returning, and may also change&#xA;     * the return values for any &quot;inout&quot; arguments.&#xA;     *&#xA;     * @param params&#x9;&#x9;the arguments of the method, in the&#xA;     *&#x9;&#x9;&#x9;&#x9;form of an &lt;code>NVList&lt;/code> object&#xA;     * @deprecated use the method &lt;code>arguments&lt;/code>&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.3">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="arguments">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="args">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NVList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Specifies method parameter types and retrieves &quot;in&quot; and &quot;inout&quot;&#xA;     * argument values.&#xA;     * Unless it calls the method &lt;code>set_exception&lt;/code>,&#xA;     * the DIR must call this method exactly once, even if the&#xA;     * method signature contains no parameters. Once the method &lt;code>&#xA;     * arguments&lt;/code> or &lt;code>set_exception&lt;/code>&#xA;     * has been called, calling &lt;code>arguments&lt;/code> on the same&#xA;     * &lt;code>ServerRequest&lt;/code> object &#xA;     * will result in a &lt;code>BAD_INV_ORDER&lt;/code> system exception.&#xA;     * The DIR must pass in to the method &lt;code>arguments&lt;/code>&#xA;     * an NVList initialized with TypeCodes and Flags&#xA;     * describing the parameter types for the operation, in the order in which&#xA;     * they appear in the IDL specification (left to right). A&#xA;     * potentially-different NVList will be returned from&#xA;     * &lt;code>arguments&lt;/code>, with the&#xA;     * &quot;in&quot; and &quot;inout&quot; argument values supplied. If it does not call&#xA;     * the method &lt;code>set_exception&lt;/code>,&#xA;     * the DIR must supply the returned NVList with return&#xA;     * values for any &quot;out&quot; arguments before returning, and it may also change&#xA;     * the return values for any &quot;inout&quot; arguments.&#xA;     *&#xA;     * @param args              the arguments of the method, in the&#xA;     *                            form of an NVList&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code>&#xA;     *      package comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="result">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * Specifies any return value for the call. &#xA;     * &lt;P>&#xA;     * Note that this method is deprecated; use the method&#xA;     * &lt;code>set_result&lt;/code> in its place.&#xA;     * &lt;P>&#xA;     * Unless the method &#xA;     * &lt;code>set_exception&lt;/code> is called, if the invoked method&#xA;     * has a non-void result type, the method &lt;code>set_result&lt;/code>&#xA;     * must be called exactly once before the DIR returns.&#xA;     * If the operation has a void result type, the method &#xA;     * &lt;code>set_result&lt;/code> may optionally be&#xA;     * called once with an &lt;code>Any&lt;/code> object whose type is &#xA;     * &lt;code>tk_void&lt;/code>. Calling the method &lt;code>set_result&lt;/code> before&#xA;     * the method &lt;code>arguments&lt;/code> has been called or after&#xA;     * the method &lt;code>set_result&lt;/code> or &lt;code>set_exception&lt;/code> has been&#xA;     * called will result in a BAD_INV_ORDER exception. Calling the method&#xA;     * &lt;code>set_result&lt;/code> without having previously called&#xA;     * the method &lt;code>ctx&lt;/code> when the IDL operation contains a&#xA;     * context expression, or when the NVList passed to arguments did not&#xA;     * describe all parameters passed by the client, may result in a MARSHAL&#xA;     * system exception.&#xA;     *&#xA;     * @param any an &lt;code>Any&lt;/code> object containing the return value to be set&#xA;     * @deprecated use the method &lt;code>set_result&lt;/code>&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.5">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="set_result">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws an &lt;code>org.omg.CORBA.NO_IMPLEMENT&lt;/code> exception.&#xA;     * &lt;P>&#xA;     * Specifies any return value for the call. Unless the method &#xA;     * &lt;code>set_exception&lt;/code> is called, if the invoked method&#xA;     * has a non-void result type, the method &lt;code>set_result&lt;/code>&#xA;     * must be called exactly once before the DIR returns.&#xA;     * If the operation has a void result type, the method &#xA;     * &lt;code>set_result&lt;/code> may optionally be&#xA;     * called once with an &lt;code>Any&lt;/code> object whose type is &#xA;     * &lt;code>tk_void&lt;/code>. Calling the method &lt;code>set_result&lt;/code> before&#xA;     * the method &lt;code>arguments&lt;/code> has been called or after&#xA;     * the method &lt;code>set_result&lt;/code> or &lt;code>set_exception&lt;/code> has been&#xA;     * called will result in a BAD_INV_ORDER exception. Calling the method&#xA;     * &lt;code>set_result&lt;/code> without having previously called&#xA;     * the method &lt;code>ctx&lt;/code> when the IDL operation contains a&#xA;     * context expression, or when the NVList passed to arguments did not&#xA;     * describe all parameters passed by the client, may result in a MARSHAL&#xA;     * system exception.&#xA;     *&#xA;     * @param any an &lt;code>Any&lt;/code> object containing the return value to be set&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code>&#xA;     *      package comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="except">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
        <comments>/**&#xA;     * The DIR may call set_exception at any time to return an exception to the&#xA;     * client. The Any passed to set_exception must contain either a system&#xA;     * exception or a user exception specified in the raises expression&#xA;     * of the invoked operation's IDL definition. Passing in an Any that does&#xA;     * not&#xA;     * contain an exception will result in a BAD_PARAM system exception. Passing&#xA;     * in an unlisted user exception will result in either the DIR receiving a&#xA;     * BAD_PARAM system exception or in the client receiving an&#xA;     * UNKNOWN_EXCEPTION system exception.&#xA;     *&#xA;     * @param any&#x9;the &lt;code>Any&lt;/code> object containing the exception&#xA;     * @deprecated use set_exception()&#xA;     */</comments>
        <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.7">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="set_exception">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Throws an &lt;code>org.omg.CORBA.NO_IMPLEMENT&lt;/code> exception.&#xA;     * &lt;P>&#xA;     * Returns the given exception to the client.  This method &#xA;     * is invoked by the DIR, which may call it at any time.&#xA;     * The &lt;code>Any&lt;/code> object  passed to this method must&#xA;     * contain either a system&#xA;     * exception or one of the user exceptions specified in the &#xA;     * invoked operation's IDL definition. Passing in an&#xA;     * &lt;code>Any&lt;/code> object that does not contain an exception &#xA;     * will cause a BAD_PARAM system exception to be thrown. Passing&#xA;     * in an unlisted user exception will result in either the DIR receiving a&#xA;     * BAD_PARAM system exception or in the client receiving an&#xA;     * UNKNOWN_EXCEPTION system exception.&#xA;     *&#xA;     * @param any&#x9;the &lt;code>Any&lt;/code> object containing the exception&#xA;     * @exception BAD_PARAM if the given &lt;code>Any&lt;/code> object does not&#xA;     *                      contain an exception or the exception is an&#xA;     *                      unlisted user exception&#xA;     * @exception UNKNOWN_EXCEPTION if the given exception is an unlisted&#xA;     *                              user exception and the DIR did not&#xA;     *                              receive a BAD_PARAM exception&#xA;     * @see &lt;a href=&quot;package-summary.html#unimpl&quot;>&lt;code>CORBA&lt;/code>&#xA;     *      package comments for unimplemented features&lt;/a>&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Throw">
        <throwable xsi:type="instantiations:NewConstructorCall">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>CORBA</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Class" href="NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
        </throwable>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="ctx">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Context.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the context information specified in IDL for the operation&#xA;     * when the operation is not an attribute access and the operation's IDL&#xA;     * definition contains a context expression; otherwise it returns&#xA;     * a nil &lt;code>Context&lt;/code> reference. Calling the method&#xA;     * &lt;code>ctx&lt;/code> before the method &lt;code>arguments&lt;/code> has&#xA;     * been called or after the method &lt;code>ctx&lt;/code>,&#xA;     * &lt;code>set_result&lt;/code>, or &lt;code>set_exception&lt;/code>&#xA;     * has been called will result in a&#xA;     * BAD_INV_ORDER system exception.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;the context object that is to be used&#xA;     *&#x9;&#x9;&#x9;&#x9;to resolve any context strings whose&#xA;     *&#x9;&#x9;&#x9;&#x9;values need to be sent with the invocation.&#xA;     * @exception BAD_INV_ORDER if (1) the method &lt;code>ctx&lt;/code> is called&#xA;     *                          before the method &lt;code>arguments&lt;/code> or&#xA;     *                          (2) the method &lt;code>ctx&lt;/code> is called&#xA;     *                          after calling &lt;code>set_result&lt;/code> or&#xA;     *                          &lt;code>set_exception&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object that captures the explicit state of a request&#xA; * for the Dynamic Skeleton Interface (DSI).  This class, the&#xA; * cornerstone of the DSI, is analogous to the &lt;code>Request&lt;/code>&#xA; * object in the DII.&#xA; * &lt;P>&#xA; * The ORB is responsible for creating this embodiment of a request,&#xA; * and delivering it to a Dynamic Implementation Routine (DIR).&#xA; * A dynamic servant (a DIR) is created by implementing the&#xA; * &lt;code>DynamicImplementation&lt;/code> class,&#xA; * which has a single &lt;code>invoke&lt;/code> method.  This method accepts a&#xA; * &lt;code>ServerRequest&lt;/code> object.&#xA; *&#xA; * The abstract class &lt;code>ServerRequest&lt;/code> defines&#xA; * methods for accessing the&#xA; * method name, the arguments and the context of the request, as&#xA; * well as methods for setting the result of the request either as a&#xA; * return value or an exception. &lt;p>&#xA; *&#xA; * A subtlety with accessing the arguments of the request is that the&#xA; * DIR needs to provide type information about the&#xA; * expected arguments, since there is no compiled information about&#xA; * these. This information is provided through an &lt;code>NVList&lt;/code>,&#xA; * which is a list of &lt;code>NamedValue&lt;/code> objects.&#xA; * Each &lt;code>NamedValue&lt;/code> object&#xA; * contains an &lt;code>Any&lt;/code> object, which in turn&#xA; * has a &lt;code>TypeCode&lt;/code> object representing the type&#xA; * of the argument. &lt;p>&#xA; *&#xA; * Similarly, type information needs to be provided for the response,&#xA; * for either the expected result or for an exception, so the methods&#xA; * &lt;code>result&lt;/code> and &lt;code>except&lt;/code> take an &lt;code>Any&lt;/code>&#xA; * object as a parameter. &lt;p>&#xA; *&#xA; * @see org.omg.CORBA.DynamicImplementation&#xA; * @see org.omg.CORBA.NVList&#xA; * @see org.omg.CORBA.NamedValue&#xA; *&#xA; * @version 1.15 09/09/97&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
