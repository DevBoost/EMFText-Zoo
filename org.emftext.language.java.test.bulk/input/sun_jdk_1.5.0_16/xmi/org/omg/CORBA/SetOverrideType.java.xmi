<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="SetOverrideType.java">
  <comments>/*&#xA; * @(#)SetOverrideType.java&#x9;1.15 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Class" name="SetOverrideType">
    <members xsi:type="members:Field" name="_SET_OVERRIDE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>int&lt;/code> constant for the enum value SET_OVERRIDE.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="_ADD_OVERRIDE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>int&lt;/code> constant for the enum value ADD_OVERRIDE.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SET_OVERRIDE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>SetOverrideType&lt;/code> constant for the enum value SET_OVERRIDE.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ADD_OVERRIDE">
      <initialValue xsi:type="instantiations:NewConstructorCall">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
        <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>SetOverrideType&lt;/code> constant for the enum value ADD_OVERRIDE.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:ClassMethod" name="value">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the value of this &lt;code>SetOverrideType&lt;/code> instance.&#xA;     *&#xA;     * @return  the &lt;code>int&lt;/code> for this &lt;code>SetOverrideType&lt;/code> instance.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="from_int">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Converts the given &lt;code>int&lt;/code> to the corresponding&#xA;     * &lt;code>SetOverrideType&lt;/code> instance.&#xA;     *&#xA;     * @param  i the &lt;code>int&lt;/code> to convert; must be either&#xA;     *         &lt;code>SetOverrideType._SET_OVERRIDE&lt;/code> or&#xA;     *         &lt;code>SetOverrideType._ADD_OVERRIDE&lt;/code> &#xA;     * @return  the &lt;code>SetOverrideType&lt;/code> instance whose value&#xA;     *       matches the given &lt;code>int&lt;/code>&#xA;     * @exception  BAD_PARAM  if the given &lt;code>int&lt;/code> does not&#xA;     *       match the value of&#xA;     *       any &lt;code>SetOverrideType&lt;/code> instance&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <statements xsi:type="statements:Switch">
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
        </cases>
        <cases xsi:type="statements:NormalSwitchCase">
          <statements xsi:type="statements:Return">
            <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3"/>
          </statements>
          <condition xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1"/>
        </cases>
        <cases xsi:type="statements:DefaultSwitchCase">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>org</namespaces>
                <namespaces>omg</namespaces>
                <namespaces>CORBA</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="BAD_PARAM.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
            </throwable>
          </statements>
        </cases>
        <variable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.5/@parameters.0"/>
      </statements>
    </members>
    <members xsi:type="members:Constructor" name="SetOverrideType">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.7"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="_value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Protected">
        <comments>/**&#xA;     * Constructs a &lt;code>SetOverrideType&lt;/code> instance from an&#xA;     * &lt;code>int&lt;/code>.&#xA;     * @param _value must be either &lt;code>SET_OVERRIDE&lt;/code> or &#xA;     *        &lt;code>ADD_OVERRIDE&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="_value">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>/**&#xA;     * The field containing the value for this &lt;code>SetOverrideType&lt;/code>&#xA;     * object.&#xA;     *&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The mapping of a CORBA &lt;code>enum&lt;/code> tagging&#xA; * &lt;code>SET_OVERRIDE&lt;/code> and &lt;code>ADD_OVERRIDE&lt;/code>, which&#xA; * indicate whether policies should replace the &#xA; * existing policies of an &lt;code>Object&lt;/code> or be added to them.&#xA; * &lt;P>&#xA; * The method {@link omg.org.CORBA.Object._set_policy_override} takes&#xA; * either &lt;code>SetOverrideType.SET_OVERRIDE&lt;/code> or &#xA; * &lt;code>SetOverrideType.ADD_OVERRIDE&lt;/code> as its second argument.&#xA; * The method &lt;code>_set_policy_override&lt;/code>&#xA; * creates a new &lt;code>Object&lt;/code> initialized with the&#xA; * &lt;code>Policy&lt;/code> objects supplied as the first argument.  If the&#xA; * second argument is &lt;code>ADD_OVERRIDE&lt;/code>, the new policies&#xA; * are added to those of the &lt;code>Object&lt;/code> instance that is&#xA; * calling the &lt;code>_set_policy_override&lt;/code> method.  If&#xA; * &lt;code>SET_OVERRIDE&lt;/code> is given instead, the existing policies&#xA; * are replaced with the given ones.&#xA; *&#xA; * @author OMG&#xA; * @version 1.15 12/19/03&#xA; * @since   JDK1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <implements xsi:type="types:NamespaceClassifierReference">
      <namespaces>org</namespaces>
      <namespaces>omg</namespaces>
      <namespaces>CORBA</namespaces>
      <namespaces>portable</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="portable/IDLEntity.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </implements>
  </classifiers>
</containers:CompilationUnit>
