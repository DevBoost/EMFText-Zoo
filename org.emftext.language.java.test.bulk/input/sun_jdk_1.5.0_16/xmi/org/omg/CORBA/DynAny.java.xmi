<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:annotations="http://www.emftext.org/java/annotations" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/annotations ../../../java.ecore#/0 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DynAny.java">
  <comments>/*&#xA; * @(#)DynAny.java&#x9;1.25 04/05/18&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DynAny">
    <members xsi:type="members:InterfaceMethod" name="type">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>TypeCode&lt;/code> of the object inserted into&#xA;     * this &lt;code>DynAny&lt;/code>.&#xA;     *&#xA;     * @return the &lt;code>TypeCode&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="assign">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="dyn_any">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/Invalid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Copy the contents from one Dynamic Any into another.&#xA;     *&#xA;     * @param dyn_any the &lt;code>DynAny&lt;/code> object whose contents&#xA;     *                are assigned to this &lt;code>DynAny&lt;/code>. &#xA;     * @throws Invalid if the source &lt;code>DynAny&lt;/code> is&#xA;     *            invalid &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="from_any">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/Invalid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Make a &lt;code>DynAny&lt;/code> object from an &lt;code>Any&lt;/code>&#xA;     * object.&#xA;     *&#xA;     * @param value the &lt;code>Any&lt;/code> object.&#xA;     * @throws Invalid if the source &lt;code>Any&lt;/code> object is&#xA;     *                    empty or bad&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="to_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/Invalid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Convert a &lt;code>DynAny&lt;/code> object to an &lt;code>Any&lt;/code>&#xA;     * object.&#xA;     *&#xA;     * @return the &lt;code>Any&lt;/code> object.&#xA;     * @throws Invalid if this &lt;code>DynAny&lt;/code> is empty or&#xA;     *                    bad.&#xA;     *            created or does not contain a meaningful value&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="destroy">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Destroys this &lt;code>DynAny&lt;/code> object and frees any resources&#xA;     * used to represent the data value associated with it. This method&#xA;     * also destroys all &lt;code>DynAny&lt;/code> objects obtained from it.&#xA;     * &lt;p>&#xA;     * Destruction of &lt;code>DynAny&lt;/code> objects should be handled with&#xA;     * care, taking into account issues dealing with the representation of &#xA;     * data values associated with &lt;code>DynAny&lt;/code> objects.  A programmer&#xA;     * who wants to destroy a &lt;code>DynAny&lt;/code> object but still be able&#xA;     * to manipulate some component of the data value associated with it,&#xA;     * should first create a &lt;code>DynAny&lt;/code> object for the component&#xA;     * and then make a copy of the created &lt;code>DynAny&lt;/code> object.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="copy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Clones this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return a copy of this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_boolean">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>boolean&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>boolean&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_octet">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Byte"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>byte&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>byte&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_char">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>char&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>char&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_short">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>short&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>short&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_ushort">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>short&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>short&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_long">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>int&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>int&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_ulong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>int&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>int&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_float">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>float&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>float&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_double">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Double"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>double&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>double&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_string">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>String&lt;/code> object as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>String&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_reference">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>org.omg.CORBA.Object&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>org.omg.CORBA.Object&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_typecode">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>org.omg.CORBA.TypeCode&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>org.omg.CORBA.TypeCode&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_longlong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>long&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>long&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_ulonglong">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Long"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>long&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>long&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_wchar">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:Char"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>char&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>char&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_wstring">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>String&lt;/code> as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>String&lt;/code> to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_any">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Inserts the given &lt;code>org.omg.CORBA.Any&lt;/code> object as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>org.omg.CORBA.Any&lt;/code> object to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="insert_val">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// orbos 98-01-18: Objects By Value -- begin</comments>
        <comments>/**&#xA;     * Inserts the given &lt;code>java.io.Serializable&lt;/code> object as the value for this&#xA;     * &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * &lt;p> If this method is called on a constructed &lt;code>DynAny&lt;/code>&#xA;     * object, it initializes the next component of the constructed data&#xA;     * value associated with this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @param value the &lt;code>java.io.Serializable&lt;/code> object to insert into this&#xA;     *              &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.InvalidValue&#xA;     *            if the value inserted is not consistent with the type&#xA;     *            of the accessed component in this &lt;code>DynAny&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_val">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../../java/io/Serializable.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>java.io.Serializable&lt;/code> object contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>java.io.Serializable&lt;/code> object that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>java.io.Serializable&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_boolean">
      <typeReference xsi:type="types:Boolean"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// orbos 98-01-18: Objects By Value -- end</comments>
        <comments>/**&#xA;     * Retrieves the &lt;code>boolean&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>boolean&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>boolean&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_octet">
      <typeReference xsi:type="types:Byte"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>byte&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>byte&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>byte&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_char">
      <typeReference xsi:type="types:Char"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>char&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>char&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>char&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_short">
      <typeReference xsi:type="types:Short"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>short&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>short&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>short&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_ushort">
      <typeReference xsi:type="types:Short"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>short&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>short&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>short&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_long">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>int&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>int&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>int&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_ulong">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>int&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>int&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>int&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_float">
      <typeReference xsi:type="types:Float"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>float&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>float&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>float&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_double">
      <typeReference xsi:type="types:Double"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>double&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>double&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>double&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_string">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>String&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>String&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>String&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_reference">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>org.omg.CORBA.Other&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>org.omg.CORBA.Other&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for an &lt;code>org.omg.CORBA.Other&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_typecode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="TypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>org.omg.CORBA.TypeCode&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>org.omg.CORBA.TypeCode&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>org.omg.CORBA.TypeCode&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_longlong">
      <typeReference xsi:type="types:Long"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>long&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>long&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>long&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_ulonglong">
      <typeReference xsi:type="types:Long"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>long&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>long&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>long&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_wchar">
      <typeReference xsi:type="types:Char"/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>char&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>char&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>char&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_wstring">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>String&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>String&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for a &lt;code>String&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>org.omg.CORBA.Any&lt;/code> contained&#xA;     * in this &lt;code>DynAny&lt;/code> object.&#xA;     *&#xA;     * @return the &lt;code>org.omg.CORBA.Any&lt;/code> that is the &#xA;     *         value for this &lt;code>DynAny&lt;/code> object&#xA;     * @throws org.omg.CORBA.DynAnyPackage.TypeMismatch&#xA;     *               if the type code of the accessed component in this&#xA;     *               &lt;code>DynAny&lt;/code> object is not equivalent to&#xA;     *               the type code for an &lt;code>org.omg.CORBA.Any&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="current_component">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>DynAny&lt;/code> object reference that can&#xA;     * be used to get/set the value of the component currently accessed.&#xA;     * The appropriate &lt;code>insert&lt;/code> method&#xA;     * can be called on the resulting &lt;code>DynAny&lt;/code> object&#xA;     * to initialize the component.&#xA;     * The appropriate &lt;code>get&lt;/code> method&#xA;     * can be called on the resulting &lt;code>DynAny&lt;/code> object&#xA;     * to extract the value of the component.&#xA;&#x9; *&#xA;&#x9; * @return a &lt;code>DynAny&lt;/code> object reference that can be&#xA;&#x9; *         used to retrieve or set the value of the component currently&#xA;&#x9; *         accessed&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="next">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Moves to the next component of this &lt;code>DynAny&lt;/code> object.&#xA;     * This method is used for iterating through the components of&#xA;     * a constructed type, effectively moving a pointer from one&#xA;     * component to the next.  The pointer starts out on the first&#xA;     * component when a &lt;code>DynAny&lt;/code> object is created.&#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the pointer points to a component;&#xA;     * &lt;code>false&lt;/code> if there are no more components or this&#xA;     * &lt;code>DynAny&lt;/code> is associated with a basic type rather than&#xA;     * a constructed type&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="seek">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Moves the internal pointer to the given index. Logically, this method&#xA;     * sets a new offset for this pointer.  &#xA;     *&#xA;     * @param index an &lt;code>int&lt;/code> indicating the position to which&#xA;     *              the pointer should move.  The first position is 0.&#xA;     * @return &lt;code>true&lt;/code> if the pointer points to a component;&#xA;     * &lt;code>false&lt;/code> if there is no component at the designated&#xA;     * index.  If this &lt;code>DynAny&lt;/code> object is associated with a&#xA;     * basic type, this method returns &lt;code>false&lt;/code> for any index&#xA;     * other than 0.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="rewind">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Moves the internal pointer to the first component.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="annotations:AnnotationInstance">
      <comments>/** Enables &lt;tt>org.omg.CORBA.Any&lt;/tt> values to be dynamically &#xA; * interpreted (traversed) and&#xA; *  constructed. A &lt;tt>DynAny&lt;/tt> object is associated with a data value&#xA; *  which may correspond to a copy of the value inserted into an &lt;tt>Any&lt;/tt>.&#xA; *  The &lt;tt>DynAny&lt;/tt> APIs enable traversal of the data value associated with an&#xA; *  Any at runtime and extraction of the primitive constituents of the&#xA; *  data value.&#xA; * @deprecated Use the new &lt;a href=&quot;../DynamicAny/DynAny.html&quot;>DynAny&lt;/a> instead&#xA; */</comments>
      <annotation xsi:type="classifiers:Annotation" href="../../../java/lang/Deprecated.class.xmi#//@classifiers.0"/>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>org</namespaces>
      <namespaces>omg</namespaces>
      <namespaces>CORBA</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Object.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
