<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="NVList.java">
  <comments>/*&#xA; * @(#)NVList.java&#x9;1.27 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Class" name="NVList">
    <members xsi:type="members:InterfaceMethod" name="count">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the number of &lt;code>NamedValue&lt;/code> objects that have&#xA;     * been added to this &lt;code>NVList&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an &lt;code>int&lt;/code> indicating the number of&#xA;     * &lt;code>NamedValue&lt;/code> objects in this &lt;code>NVList&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flags">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>NamedValue&lt;/code> object initialized with the given flag&#xA;     * and adds it to the end of this &lt;code>NVList&lt;/code> object.&#xA;     * The flag can be any one of the argument passing modes:&#xA;     * &lt;code>ARG_IN.value&lt;/code>, &lt;code>ARG_OUT.value&lt;/code>, or&#xA;     * &lt;code>ARG_INOUT.value&lt;/code>.&#xA;     *&#xA;     * @param flags&#x9;&#x9;one of the argument mode flags&#xA;     * @return&#x9;&#x9;&#x9;the newly-created &lt;code>NamedValue&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_item">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="item_name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flags">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>NamedValue&lt;/code> object initialized with the&#xA;     * given name and flag,&#xA;     * and adds it to the end of this &lt;code>NVList&lt;/code> object.&#xA;     * The flag can be any one of the argument passing modes:&#xA;     * &lt;code>ARG_IN.value&lt;/code>, &lt;code>ARG_OUT.value&lt;/code>, or&#xA;     * &lt;code>ARG_INOUT.value&lt;/code>.&#xA;     *&#xA;     * @param item_name&#x9;the name for the new &lt;code>NamedValue&lt;/code> object&#xA;     * @param flags&#x9;&#x9;one of the argument mode flags&#xA;     * @return&#x9;&#x9;&#x9;the newly-created &lt;code>NamedValue&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add_value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="item_name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="val">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="flags">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a new &lt;code>NamedValue&lt;/code> object initialized with the&#xA;     * given name, value, and flag,&#xA;     * and adds it to the end of this &lt;code>NVList&lt;/code> object.&#xA;     *&#xA;     * @param item_name&#x9;the name for the new &lt;code>NamedValue&lt;/code> object&#xA;     * @param val&#x9;  an &lt;code>Any&lt;/code> object containing the  value&#xA;     *                    for the new &lt;code>NamedValue&lt;/code> object&#xA;     * @param flags&#x9;  one of the following argument passing modes:&#xA;     *                    &lt;code>ARG_IN.value&lt;/code>, &lt;code>ARG_OUT.value&lt;/code>, or&#xA;     *                    &lt;code>ARG_INOUT.value&lt;/code>&#xA;     * @return&#x9;&#x9;  the newly created &lt;code>NamedValue&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="item">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NamedValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Bounds.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the &lt;code>NamedValue&lt;/code> object at the given index.&#xA;     *&#xA;     * @param index&#x9;&#x9;the index of the desired &lt;code>NamedValue&lt;/code> object,&#xA;     *                    which must be between zero and the length of the list&#xA;     *                    minus one, inclusive.  The first item is at index zero.&#xA;     * @return&#x9;&#x9;&#x9;the &lt;code>NamedValue&lt;/code> object at the given index&#xA;     * @exception org.omg.CORBA.Bounds  if the index is greater than&#xA;     *&#x9;&#x9;&#x9;&#x9;or equal to number of &lt;code>NamedValue&lt;/code> objects&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="remove">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Bounds.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the &lt;code>NamedValue&lt;/code> object at the given index.&#xA;     * Note that the indices of all &lt;code>NamedValue&lt;/code> objects following&#xA;     * the one removed are shifted down by one.&#xA;     *&#xA;     * @param index&#x9;&#x9;the index of the &lt;code>NamedValue&lt;/code> object to be&#xA;     *                    removed, which must be between zero and the length&#xA;     *                    of the list minus one, inclusive.&#xA;     *                    The first item is at index zero.&#xA;     * @exception org.omg.CORBA.Bounds  if the index is greater than&#xA;     *&#x9;&#x9;&#x9;&#x9;or equal to number of &lt;code>NamedValue&lt;/code> objects in&#xA;     *                the list&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A modifiable list containing &lt;code>NamedValue&lt;/code> objects.&#xA; * &lt;P>&#xA; * The class &lt;code>NVList&lt;/code> is used as follows:&#xA; * &lt;UL>&#xA; * &lt;LI>to describe arguments for a &lt;code>Request&lt;/code> object&#xA; * in the Dynamic Invocation Interface and&#xA; * the Dynamic Skeleton Interface&#xA; * &lt;LI>to describe context values in a &lt;code>Context&lt;/code> object&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * Each &lt;code>NamedValue&lt;/code> object consists of the following:&#xA; * &lt;UL>&#xA; * &lt;LI>a name, which is a &lt;code>String&lt;/code> object&#xA; * &lt;LI>a value, as an &lt;code>Any&lt;/code> object&#xA; * &lt;LI>an argument mode flag&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * An &lt;code>NVList&lt;/code> object&#xA; * may be created using one of the following&#xA; * &lt;code>ORB&lt;/code> methods:&#xA; * &lt;OL>&#xA; * &lt;LI>&lt;code>org.omg.CORBA.ORB.create_list&lt;/code>&#xA; * &lt;PRE>&#xA; *    org.omg.CORBA.NVList nv = orb.create_list(3);&#xA; * &lt;/PRE>&#xA; * The variable &lt;code>nv&lt;/code> represents a newly-created&#xA; * &lt;code>NVList&lt;/code> object.  The argument is a memory-management&#xA; * hint to the orb and does not imply the actual length of the list.&#xA; * If, for example, you want to use an &lt;code>NVList&lt;/code> object&#xA; * in a request, and the method being invoked takes three parameters,&#xA; * you might optimize by supplying 3 to the method&#xA; * &lt;code>create_list&lt;/code>.  Note that the new &lt;code>NVList&lt;/code>&#xA; * will not necessarily have a length of 3; it&#xA; * could have a length of 2 or 4, for instance.&#xA; * Note also that you can add any number of&#xA; * &lt;code>NamedValue&lt;/code> objects to this list regardless of&#xA; * its original length.&#xA; * &lt;P>&#xA; * &lt;LI>&lt;code>org.omg.CORBA.ORB.create_operation_list&lt;/code>&#xA; * &lt;PRE>&#xA; *    org.omg.CORBA.NVList nv = orb.create_operation_list(myOperationDef);&#xA; * &lt;/PRE>&#xA; * The variable &lt;code>nv&lt;/code> represents a newly-created&#xA; * &lt;code>NVList&lt;/code> object that contains descriptions of the&#xA; * arguments to the method described in the given&#xA; * &lt;code>OperationDef&lt;/code> object.&#xA; * &lt;/OL>&#xA; * &lt;P>&#xA; * The methods in the class &lt;code>NVList&lt;/code> all deal with&#xA; * the &lt;code>NamedValue&lt;/code> objects in the list.&#xA; * There are three methods for adding a &lt;code>NamedValue&lt;/code> object,&#xA; * a method for getting the count of &lt;code>NamedValue&lt;/code> objects in&#xA; * the list, a method for retrieving a &lt;code>NamedValue&lt;/code> object&#xA; * at a given index, and a method for removing a &lt;code>NamedValue&lt;/code> object&#xA; * at a given index.&#xA; *&#xA; * @see org.omg.CORBA.Request&#xA; * @see org.omg.CORBA.ServerRequest&#xA; * @see org.omg.CORBA.NamedValue&#xA; * @see org.omg.CORBA.Context&#xA; *&#xA; * @version 1.14 ,09/09/97&#xA; * @since       JDK1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
