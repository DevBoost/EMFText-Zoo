<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="NamedValue.java">
  <comments>/*&#xA; * @(#)NamedValue.java&#x9;1.23 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>CORBA</namespaces>
  <classifiers xsi:type="classifiers:Class" name="NamedValue">
    <members xsi:type="members:InterfaceMethod" name="name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the name for this &lt;code>NamedValue&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;a &lt;code>String&lt;/code> object representing&#xA;     *                    the name of this &lt;code>NamedValue&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="value">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Any.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the value for this &lt;code>NamedValue&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an &lt;code>Any&lt;/code> object containing&#xA;     *                    the value of this &lt;code>NamedValue&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="flags">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves the argument mode flag for this &lt;code>NamedValue&lt;/code> object.&#xA;     *&#xA;     * @return&#x9;&#x9;&#x9;an &lt;code>int&lt;/code> representing the argument&#xA;     *                    mode for this &lt;code>NamedValue&lt;/code> object&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * An object used in the DII and DSI to describe&#xA; * arguments and return values. &lt;code>NamedValue&lt;/code> objects&#xA; * are also used in the &lt;code>Context&lt;/code>&#xA; * object routines to pass lists of property names and values.&#xA; * &lt;P>&#xA; * A &lt;code>NamedValue&lt;/code> object contains:&#xA; * &lt;UL>&#xA; * &lt;LI>a name -- If the &lt;code>NamedValue&lt;/code> object is used to&#xA; * describe arguments to a request, the name will be an argument&#xA; * identifier specified in the OMG IDL interface definition&#xA; * for the operation being described.&#xA; * &lt;LI>a value -- an &lt;code>Any&lt;/code> object&#xA; * &lt;LI>an argument mode flag -- one of the following:&#xA; *   &lt;UL>&#xA; *    &lt;LI>&lt;code>ARG_IN.value&lt;/code>&#xA; *    &lt;LI>&lt;code>ARG_OUT.value&lt;/code>&#xA; *    &lt;LI>&lt;code>ARG_INOUT.value&lt;/code>&#xA; *    &lt;LI>zero -- if this &lt;code>NamedValue&lt;/code> object represents a property&#xA; *                in a &lt;code>Context&lt;/code> object rather than a parameter or&#xA; *                return value&#xA; *   &lt;/UL>&#xA; * &lt;/UL>&#xA; * &lt;P>&#xA; * The class &lt;code>NamedValue&lt;/code> has three methods, which&#xA; * access its fields.  The following code fragment demonstrates&#xA; * creating a &lt;code>NamedValue&lt;/code> object and then accessing&#xA; * its fields:&#xA; * &lt;PRE>&#xA; *    ORB orb = ORB.init(args, null);&#xA; *    String s = &quot;argument_1&quot;;&#xA; *    org.omg.CORBA.Any myAny = orb.create_any();&#xA; *    myAny.insert_long(12345);&#xA; *    int in = org.omg.CORBA.ARG_IN.value;&#xA;&#xA; *    org.omg.CORBA.NamedValue nv = orb.create_named_value(&#xA; *        s, myAny, in);&#xA; *    System.out.println(&quot;This nv name is &quot; + nv.name());&#xA; *    try {&#xA; *        System.out.println(&quot;This nv value is &quot; + nv.value().extract_long());&#xA; *        System.out.println(&quot;This nv flag is &quot; + nv.flags());&#xA; *    } catch (org.omg.CORBA.BAD_OPERATION b) {&#xA; *      System.out.println(&quot;extract failed&quot;);&#xA; *    }&#xA; * &lt;/PRE>&#xA; *&#xA; * &lt;P>&#xA; * If this code fragment were put into a &lt;code>main&lt;/code> method,&#xA; * the output would be something like the following:&#xA; * &lt;PRE>&#xA; *    This nv name is argument_1&#xA; *    This nv value is 12345&#xA; *    This nv flag is 1&#xA; * &lt;/PRE>&#xA; * &lt;P>&#xA; * Note that the method &lt;code>value&lt;/code> returns an &lt;code>Any&lt;/code>&#xA; * object. In order to access the &lt;code>long&lt;/code> contained in the&#xA; * &lt;code>Any&lt;/code> object,&#xA; * we used the method &lt;code>extract_long&lt;/code>.&#xA; *&#xA; * @see Any&#xA; * @see ARG_IN&#xA; * @see ARG_INOUT&#xA; * @see ARG_OUT&#xA; *&#xA; * @version 1.12 ,09/09/97&#xA; * @since       JDK1.2&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
  </classifiers>
</containers:CompilationUnit>
