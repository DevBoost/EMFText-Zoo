<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Delegate.java">
  <comments>/*&#xA; * @(#)Delegate.java&#x9;1.11 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>PortableServer</namespaces>
  <namespaces>portable</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <classifier xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../POA.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Delegate">
    <members xsi:type="members:InterfaceMethod" name="orb">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA; * Convenience method that returns the instance of the ORB&#xA; * currently associated with the Servant.&#xA; * @param Self the servant.&#xA; * @return ORB associated with the Servant.&#xA; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../CORBA/ORB.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="this_object">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA; * This allows the servant to obtain the object reference for&#xA; * the target CORBA Object it is incarnating for that request.&#xA; * @param Self the servant.&#xA; * @return Object reference associated with the request.&#xA; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="poa">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA; * The method _poa() is equivalent to&#xA; * calling PortableServer::Current:get_POA.&#xA; * @param Self the servant.&#xA; * @return POA associated with the servant.&#xA; */</comments>
          <target xsi:type="classifiers:Interface" href="../POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="object_id">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA; * The method _object_id() is equivalent&#xA; * to calling PortableServer::Current::get_object_id.&#xA; * @param Self the servant.&#xA; * @return ObjectId associated with this servant.&#xA; */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="default_POA">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA; * The default behavior of this function is to return the&#xA; * root POA from the ORB instance associated with the servant.&#xA; * @param Self the servant.&#xA; * @return POA associated with the servant class.&#xA; */</comments>
          <target xsi:type="classifiers:Interface" href="../POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="is_a">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA; * This method checks to see if the specified repid is present&#xA; * on the list returned by _all_interfaces() or is the&#xA; * repository id for the generic CORBA Object.&#xA; * @param Self the servant.&#xA; * @param Repository_Id the repository_id to be checked in the&#xA; *            repository list or against the id of generic CORBA&#xA; *            object.&#xA; * @return boolean indicating whether the specified repid is&#xA; *         in the list or is same as that got generic CORBA&#xA; *         object.&#xA; */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Repository_Id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="non_existent">
      <typeReference xsi:type="types:Boolean">
        <comments>/**&#xA; * This operation is used to check for the existence of the&#xA; * Object.&#xA; * @param Self the servant.&#xA; * @return boolean true to indicate that object does not exist,&#xA; *                 and false otherwise.&#xA; */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="Self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_interface_def">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>//Simon And Ken Will Ask About Editorial Changes</comments>
        <comments>//In Idl To Java For The Following Signature.</comments>
        <comments>/**&#xA; * This operation returns an object in the Interface Repository&#xA; * which provides type information that may be useful to a program.&#xA; * @param self the servant.&#xA; * @return type information corresponding to the object.&#xA; */</comments>
        <comments>// The get_interface() method has been replaced by get_interface_def()</comments>
        <comments>//org.omg.CORBA.Object get_interface(Servant Self);</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="self">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The portability package contains interfaces and classes &#xA; * that are designed for and intended to be used by ORB &#xA; * implementor. It exposes the publicly defined APIs that &#xA; * are used to connect stubs and skeletons to the ORB.&#xA; * The Delegate interface provides the ORB vendor specific &#xA; * implementation of PortableServer::Servant.&#xA; * Conformant to spec CORBA V2.3.1, ptc/00-01-08.pdf&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
