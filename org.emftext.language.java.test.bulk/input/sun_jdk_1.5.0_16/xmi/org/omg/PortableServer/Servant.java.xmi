<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:arrays="http://www.emftext.org/java/arrays" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:instantiations="http://www.emftext.org/java/instantiations" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/arrays ../../../java.ecore#/1 http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/instantiations ../../../java.ecore#/8 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Servant.java">
  <comments>/*&#xA; * @(#)Servant.java&#x9;1.18 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>PortableServer</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>CORBA</namespaces>
    <classifier xsi:type="classifiers:Class" href="../CORBA/ORB.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>omg</namespaces>
    <namespaces>PortableServer</namespaces>
    <namespaces>portable</namespaces>
    <classifier xsi:type="classifiers:Interface" href="portable/Delegate.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="Servant">
    <members xsi:type="members:Field" name="_delegate">
      <initialValue xsi:type="literals:NullLiteral"/>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="portable/Delegate.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
      <annotationsAndModifiers xsi:type="modifiers:Transient"/>
    </members>
    <members xsi:type="members:ClassMethod" name="_get_delegate">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="portable/Delegate.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Gets the ORB vendor-specific implementation of&#xA;     * &lt;code>PortableServer::Servant&lt;/code>.&#xA;     * @return &lt;code>_delegate&lt;/code> the ORB vendor-specific&#xA;     * implementation of &lt;code>PortableServer::Servant&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Condition">
        <statement xsi:type="statements:Block">
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>org</namespaces>
                <namespaces>omg</namespaces>
                <namespaces>CORBA</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../CORBA/BAD_INV_ORDER.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="The Servant has not been associated with an ORB instance"/>
            </throwable>
          </statements>
        </statement>
        <condition xsi:type="expressions:EqualityExpression">
          <equalityOperators xsi:type="operators:Equal"/>
          <children xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <children xsi:type="literals:NullLiteral"/>
        </condition>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_set_delegate">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="delegate">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="portable/Delegate.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Supports the Java ORB portability&#xA;     * interfaces by providing a method for classes that support&#xA;     * ORB portability through delegation to set their delegate.&#xA;     * @param delegate ORB vendor-specific implementation of&#xA;     *                 the &lt;code>PortableServer::Servant&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.0"/>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_this_object">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Allows the servant to obtain the object reference for&#xA;     * the target CORBA object it is incarnating for that request.&#xA;     * @return &lt;code>this_object&lt;/code> &lt;code>Object&lt;/code> reference&#xA;     * associated with the request.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.1"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_this_object">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="orb">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CORBA/ORB.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Allows the servant to obtain the object reference for&#xA;     * the target CORBA Object it is incarnating for that request.&#xA;     * @param orb ORB with which the servant is associated.&#xA;     * @return &lt;code>_this_object&lt;/code> reference associated with the request.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:ExpressionStatement">
          <expression xsi:type="expressions:NestedExpression">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:ClassMethod" href="../CORBA_2_3/ORB.class.xmi#//@classifiers.0/@members.5"/>
              <arguments xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
            <expression xsi:type="expressions:CastExpression">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>org</namespaces>
                <namespaces>omg</namespaces>
                <namespaces>CORBA_2_3</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../CORBA_2_3/ORB.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
            </expression>
          </expression>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:Throw">
            <throwable xsi:type="instantiations:NewConstructorCall">
              <typeReference xsi:type="types:NamespaceClassifierReference">
                <namespaces>org</namespaces>
                <namespaces>omg</namespaces>
                <namespaces>CORBA</namespaces>
                <classifierReferences>
                  <target xsi:type="classifiers:Class" href="../CORBA/BAD_PARAM.class.xmi#//@classifiers.0"/>
                </classifierReferences>
              </typeReference>
              <arguments xsi:type="references:StringReference" value="POA Servant requires an instance of org.omg.CORBA_2_3.ORB"/>
            </throwable>
          </statements>
          <parameter name="e">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/ClassCastException.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.3"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_orb">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/ORB.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Returns the instance of the ORB &#xA;     * currently associated with the &lt;code>Servant&lt;/code> (convenience method).&#xA;     * @return &lt;code>orb&lt;/code> the instance of the ORB currently &#xA;     * associated with the &lt;code>Servant&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.0"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_poa">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Allows easy execution of common methods, equivalent to &#xA;     * &lt;code>PortableServer::Current:get_POA&lt;/code>. &#xA;     * @return &lt;code>poa&lt;/code> POA associated with the servant.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.2"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_object_id">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <annotationsAndModifiers xsi:type="modifiers:Final">
        <comments>/**&#xA;     * Allows easy execution of&#xA;     * common methods, equivalent&#xA;     * to calling &lt;code>PortableServer::Current::get_object_id&lt;/code>.&#xA;     * @return &lt;code>object_id&lt;/code> the &lt;code>Object&lt;/code> ID associated&#xA;     * with this servant.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.3"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_default_POA">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the&#xA;     * root POA from the ORB instance associated with the servant.&#xA;     * Subclasses may override this method to return a different POA.&#xA;     * @return &lt;code>default_POA&lt;/code> the POA associated with the&#xA;     * &lt;code>Servant&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.4"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_is_a">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="repository_id">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks to see if the specified &lt;code>repository_id&lt;/code> is present&#xA;     * on the list returned by &lt;code>_all_interfaces()&lt;/code> or is the&#xA;     * &lt;code>repository_id&lt;/code> for the generic CORBA Object.&#xA;     * @param repository_id the &lt;code>repository_id&lt;/code>&#xA;     *&#x9;&#x9;to be checked in the repository list or against the id&#xA;     *&#x9;&#x9;of generic CORBA objects.&#xA;     * @return &lt;code>is_a&lt;/code> boolean indicating whether the specified&#xA;     *&#x9;&#x9;&lt;code>repository_id&lt;/code> is&#xA;     *         in the repository list or is same as a generic CORBA&#xA;     *         object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.5"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
            <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.9/@parameters.0"/>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_non_existent">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Checks for the existence of an&#xA;     * &lt;code>Object&lt;/code>.&#xA;     * The &lt;code>Servant&lt;/code> provides a default implementation of&#xA;     * &lt;code>_non_existent()&lt;/code> that can be overridden by derived servants.&#xA;     * @return &lt;code>non_existent&lt;/code> &lt;code>true&lt;/code> if that object does&#xA;     *&#x9;&#x9; not exist,  &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1">
          <next xsi:type="references:MethodCall">
            <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.6"/>
            <arguments xsi:type="references:SelfReference">
              <self xsi:type="literals:This"/>
            </arguments>
          </next>
        </returnValue>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="_get_interface_def">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Ken and Simon will ask about editorial changes</comments>
        <comments>// needed in IDL to Java mapping to the following</comments>
        <comments>// signature.</comments>
        <comments>/**&#xA;     * Returns an object in the Interface Repository&#xA;     * which provides type information that may be useful to a program.&#xA;     * &lt;code>Servant&lt;/code> provides a default implementation of&#xA;     * &lt;code>_get_interface()&lt;/code>&#xA;     * that can be overridden by derived servants if the default&#xA;     * behavior is not adequate.&#xA;     * @return &lt;code>get_interface&lt;/code> type information that corresponds to this servant.&#xA;     */</comments>
        <comments>/*&#xA;    public org.omg.CORBA.Object _get_interface() {&#xA;        return _get_delegate().get_interface(this);&#xA;    }&#xA;    */</comments>
        <comments>// _get_interface_def() replaces the _get_interface() method</comments>
        <comments>/**&#xA;     * Returns an &lt;code>InterfaceDef&lt;/code> object as a&#xA;     * &lt;code>CORBA::Object&lt;/code> that defines the runtime type of the&#xA;     * &lt;code>CORBA::Object&lt;/code> implemented by the &lt;code>Servant&lt;/code>. &#xA;     * The invoker of &lt;code>_get_interface_def&lt;/code>&#xA;     * must narrow the result to an &lt;code>InterfaceDef&lt;/code> in order&#xA;     * to use it.&#xA;     * &lt;P>This default implementation of &lt;code>_get_interface_def()&lt;/code>&#xA;     * can be overridden&#xA;     * by derived servants if the default behavior is not adequate.&#xA;     * As defined in the CORBA 2.3.1 specification, section 11.3.1, the&#xA;     * default behavior of &lt;code>_get_interface_def()&lt;/code> is to use &#xA;     * the most derived&#xA;     * interface of a static servant or the most derived interface retrieved&#xA;     * from a dynamic servant to obtain the &lt;code>InterfaceDef&lt;/code>. &#xA;     * This behavior must&#xA;     * be supported by the &lt;code>Delegate&lt;/code> that implements the&#xA;     * &lt;code>Servant&lt;/code>.&#xA;     * @return &lt;code>get_interface_def&lt;/code> an &lt;code>InterfaceDef&lt;/code>&#xA;     * object as a&#xA;     * &lt;code>CORBA::Object&lt;/code> that defines the runtime type of the&#xA;     * &lt;code>CORBA::Object&lt;/code> implemented by the &lt;code>Servant&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:LocalVariableStatement">
        <variable name="delegate">
          <typeReference xsi:type="types:NamespaceClassifierReference">
            <comments>// First try to call the delegate implementation class's</comments>
            <comments>// &quot;Object get_interface_def(..)&quot; method (will work for ORBs</comments>
            <comments>// whose delegates implement this method).</comments>
            <comments>// Else call the delegate implementation class's</comments>
            <comments>// &quot;InterfaceDef get_interface(..)&quot; method using reflection</comments>
            <comments>// (will work for ORBs that were built using an older version</comments>
            <comments>// of the Delegate interface with a get_interface method</comments>
            <comments>// but not a get_interface_def method).</comments>
            <namespaces>org</namespaces>
            <namespaces>omg</namespaces>
            <namespaces>PortableServer</namespaces>
            <namespaces>portable</namespaces>
            <classifierReferences>
              <target xsi:type="classifiers:Interface" href="portable/Delegate.class.xmi#//@classifiers.0"/>
            </classifierReferences>
          </typeReference>
          <initialValue xsi:type="references:MethodCall" target="//@classifiers.0/@members.1"/>
        </variable>
      </statements>
      <statements xsi:type="statements:TryBlock">
        <statements xsi:type="statements:Return">
          <comments>// If the ORB's delegate class does not implement</comments>
          <comments>// &quot;Object get_interface_def(..)&quot;, this will throw</comments>
          <comments>// an AbstractMethodError.</comments>
          <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable">
            <next xsi:type="references:MethodCall">
              <target xsi:type="members:InterfaceMethod" href="portable/Delegate.class.xmi#//@classifiers.0/@members.7"/>
              <arguments xsi:type="references:SelfReference">
                <self xsi:type="literals:This"/>
              </arguments>
            </next>
          </returnValue>
        </statements>
        <catcheBlocks>
          <statements xsi:type="statements:TryBlock">
            <comments>// Call &quot;InterfaceDef get_interface(..)&quot; method using reflection.</comments>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="argc">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/Class.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                  <arrayInitializer>
                    <initialValues xsi:type="references:IdentifierReference">
                      <next xsi:type="references:IdentifierReference">
                        <next xsi:type="references:IdentifierReference">
                          <next xsi:type="references:IdentifierReference" target="//@classifiers.0">
                            <next xsi:type="references:ReflectiveClassReference"/>
                          </next>
                        </next>
                      </next>
                    </initialValues>
                  </arrayInitializer>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="meth">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>java</namespaces>
                  <namespaces>lang</namespaces>
                  <namespaces>reflect</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/reflect/Method.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable">
                  <next xsi:type="references:MethodCall">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/Class.class.xmi#//@classifiers.0/@members.78"/>
                      <arguments xsi:type="references:StringReference" value="get_interface"/>
                      <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@statements.0/@variable"/>
                    </next>
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/Object.class.xmi#//@classifiers.0/@members.2"/>
                  </next>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:LocalVariableStatement">
              <variable name="argx">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <arrayDimensionsBefore/>
                <initialValue xsi:type="arrays:ArrayInstantiationByValues">
                  <arrayInitializer>
                    <initialValues xsi:type="references:SelfReference">
                      <self xsi:type="literals:This"/>
                    </initialValues>
                  </arrayInitializer>
                </initialValue>
              </variable>
            </statements>
            <statements xsi:type="statements:Return">
              <returnValue xsi:type="expressions:CastExpression">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>org</namespaces>
                  <namespaces>omg</namespaces>
                  <namespaces>CORBA</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
                <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@statements.1/@variable">
                  <next xsi:type="references:MethodCall">
                    <target xsi:type="members:ClassMethod" href="../../../java/lang/reflect/Method.class.xmi#//@classifiers.0/@members.36"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.0/@variable"/>
                    <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@statements.2/@variable"/>
                  </next>
                </child>
              </returnValue>
            </statements>
            <catcheBlocks>
              <statements xsi:type="statements:LocalVariableStatement">
                <variable name="t">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/Throwable.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <initialValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@catcheBlocks.0/@parameter">
                    <next xsi:type="references:MethodCall">
                      <target xsi:type="members:ClassMethod" href="../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0/@members.5"/>
                    </next>
                  </initialValue>
                </variable>
              </statements>
              <statements xsi:type="statements:Condition">
                <statement xsi:type="statements:Block">
                  <statements xsi:type="statements:Throw">
                    <throwable xsi:type="expressions:CastExpression">
                      <typeReference xsi:type="types:NamespaceClassifierReference">
                        <classifierReferences>
                          <target xsi:type="classifiers:Class" href="../../../java/lang/Error.class.xmi#//@classifiers.0"/>
                        </classifierReferences>
                      </typeReference>
                      <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
                    </throwable>
                  </statements>
                </statement>
                <condition xsi:type="expressions:InstanceOfExpression">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../../../java/lang/Error.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                  <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
                </condition>
                <elseStatement xsi:type="statements:Condition">
                  <statement xsi:type="statements:Block">
                    <statements xsi:type="statements:Throw">
                      <throwable xsi:type="expressions:CastExpression">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                        <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
                      </throwable>
                    </statements>
                  </statement>
                  <condition xsi:type="expressions:InstanceOfExpression">
                    <typeReference xsi:type="types:NamespaceClassifierReference">
                      <classifierReferences>
                        <target xsi:type="classifiers:Class" href="../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                      </classifierReferences>
                    </typeReference>
                    <child xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@catcheBlocks.0/@statements.0/@variable"/>
                  </condition>
                  <elseStatement xsi:type="statements:Block">
                    <statements xsi:type="statements:Throw">
                      <throwable xsi:type="instantiations:NewConstructorCall">
                        <typeReference xsi:type="types:NamespaceClassifierReference">
                          <namespaces>org</namespaces>
                          <namespaces>omg</namespaces>
                          <namespaces>CORBA</namespaces>
                          <classifierReferences>
                            <target xsi:type="classifiers:Class" href="../CORBA/NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
                          </classifierReferences>
                        </typeReference>
                      </throwable>
                    </statements>
                  </elseStatement>
                </elseStatement>
              </statements>
              <parameter name="exs">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <namespaces>java</namespaces>
                  <namespaces>lang</namespaces>
                  <namespaces>reflect</namespaces>
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/reflect/InvocationTargetException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.11/@statements.1/@catcheBlocks.0/@statements.0/@catcheBlocks.1/@parameter"/>
              </statements>
              <parameter name="rex">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/RuntimeException.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
            <catcheBlocks>
              <statements xsi:type="statements:Throw">
                <throwable xsi:type="instantiations:NewConstructorCall">
                  <typeReference xsi:type="types:NamespaceClassifierReference">
                    <namespaces>org</namespaces>
                    <namespaces>omg</namespaces>
                    <namespaces>CORBA</namespaces>
                    <classifierReferences>
                      <target xsi:type="classifiers:Class" href="../CORBA/NO_IMPLEMENT.class.xmi#//@classifiers.0"/>
                    </classifierReferences>
                  </typeReference>
                </throwable>
              </statements>
              <parameter name="exr">
                <typeReference xsi:type="types:NamespaceClassifierReference">
                  <classifierReferences>
                    <target xsi:type="classifiers:Class" href="../../../java/lang/Exception.class.xmi#//@classifiers.0"/>
                  </classifierReferences>
                </typeReference>
              </parameter>
            </catcheBlocks>
          </statements>
          <parameter name="aex">
            <typeReference xsi:type="types:NamespaceClassifierReference">
              <classifierReferences>
                <target xsi:type="classifiers:Class" href="../../../java/lang/AbstractMethodError.class.xmi#//@classifiers.0"/>
              </classifierReferences>
            </typeReference>
          </parameter>
        </catcheBlocks>
      </statements>
    </members>
    <members xsi:type="members:InterfaceMethod" name="_all_interfaces">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="poa">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="POA.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="objectId">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Abstract">
        <comments>// methods for which the user must provide an</comments>
        <comments>// implementation</comments>
        <comments>/**&#xA;     * Used by the ORB to obtain complete type &#xA;     * information from the servant.&#xA;     * @param poa POA with which the servant is associated.&#xA;     * @param objectId is the id corresponding to the object&#xA;     *         associated with this servant.&#xA;     * @return list of type information for the object.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Abstract">
      <comments>/**&#xA; * Defines the native &lt;code>Servant&lt;/code> type. In Java, the &#xA; * &lt;code>Servant&lt;/code> type is mapped to the Java &#xA; * &lt;code>org.omg.PortableServer.Servant&lt;/code> class.&#xA; * It serves as the base class for all POA servant &#xA; * implementations and provides a number of methods that may &#xA; * be invoked by the application programmer, as well as methods &#xA; * which are invoked by the POA itself and may be overridden by &#xA; * the user to control aspects of servant behavior.&#xA; * Based on IDL to Java spec. (CORBA V2.3.1) ptc/00-01-08.pdf.&#xA; */</comments>
    </annotationsAndModifiers>
    <annotationsAndModifiers xsi:type="modifiers:Public"/>
  </classifiers>
</containers:CompilationUnit>
