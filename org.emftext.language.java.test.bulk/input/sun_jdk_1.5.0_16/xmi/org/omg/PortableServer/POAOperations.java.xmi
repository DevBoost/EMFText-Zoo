<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="POAOperations.java">
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>PortableServer</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="POAOperations">
    <members xsi:type="members:InterfaceMethod" name="create_POA">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This operation creates a new POA as a child of the &#xA;&#x9; * target POA.&#xA;&#x9; * @param adapter_name identifies the new POA with &#xA;&#x9; *        respect to other POAs with the same parent POA.&#xA;&#x9; * @param a_POAManager specifies the POA Manager to be&#xA;&#x9; *        associated with the new POA.&#xA;&#x9; * @param policies specifies policy objects to be &#xA;&#x9; *        associated with the POA to control its behavior.&#xA;&#x9; * @exception AdapterAlreadyExists specifies that the&#xA;&#x9; *            target POA already has a child POA with &#xA;&#x9; *            the specified name.&#xA;&#x9; * @exception InvalidPolicy is raised if any of the&#xA;&#x9; *            policy objects are not valid for the ORB,&#xA;&#x9; *            or are in conflict, or require an &#xA;&#x9; *            administrative action that has not been&#xA;&#x9; *            performed.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="adapter_name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="a_POAManager">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="POAManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="policies">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../CORBA/Policy.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/AdapterAlreadyExists.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/InvalidPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="find_POA">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * If the target POA is the parent of a child POA with &#xA;&#x9; * the specified name (relative to the target POA), that &#xA;&#x9; * child POA is returned. &#xA;&#x9; * @param adapter_name POA name to be found.&#xA;&#x9; * @param activate_it  if a POA with the specified &#xA;&#x9; *        name does not exist and the value of &#xA;&#x9; *        the activate_it parameter is TRUE, the target &#xA;&#x9; *        POA's AdapterActivator, if one exists, &#xA;&#x9; *        is invoked.&#xA;&#x9; * @return POA if one exists or is activated by the&#xA;&#x9; *         AdapterActivator.&#xA;&#x9; * @return AdapterNonExistent is raised if POA with&#xA;&#x9; *         a specified name cannot be found or&#xA;&#x9; *         activated using AdapaterActivator.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="adapter_name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="activate_it">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/AdapterNonExistent.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="destroy">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;&#x9; * This operation destroys the POA and all descendant &#xA;&#x9; * POAs. All descendant POAs are destroyed (recursively) &#xA;&#x9; * before the destruction of the containing POA. The POA &#xA;&#x9; * so destroyed (that is, the POA with its name) may be &#xA;&#x9; * re-created later in the same process.&#xA;&#x9; * @param etherealize_objects flag to indicate whether&#xA;&#x9; *        etherealize operation on servant manager needs&#xA;&#x9; *        to be called.&#xA;&#x9; * @param wait_for_completion flag to indicate whether&#xA;&#x9; *        POA and its children need to wait for active&#xA;&#x9; *        requests and the etherealization to complete.&#xA;&#x9; *&#xA;&#x9; */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="etherealize_objects">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="wait_for_completion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_thread_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * These operations each return a reference to a policy &#xA;&#x9; * object with the specified value.&#xA;&#x9; * @param value policy type&#xA;&#x9; * @return ThreadPolcy Object&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ThreadPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ThreadPolicyValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_lifespan_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * These operations each return a reference to a policy &#xA;&#x9; * object with the specified value.&#xA;&#x9; * @param value policy type&#xA;&#x9; * @return LifespanPolicy Object.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="LifespanPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="LifespanPolicyValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_id_uniqueness_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * These operations each return a reference to a policy &#xA;&#x9; * object with the specified value.&#xA;&#x9; * @param value policy type&#xA;&#x9; * @return IdUniquenessPolicy Object.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="IdUniquenessPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="IdUniquenessPolicyValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_id_assignment_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * These operations each return a reference to a policy &#xA;&#x9; * object with the specified value. &#xA;&#x9; * @param value policy type&#xA;&#x9; * @return IdAssignmentPolicy Object.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="IdAssignmentPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="IdAssignmentPolicyValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_implicit_activation_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * These operations each return a reference to a policy &#xA;&#x9; * object with the specified value. &#xA;&#x9; * @param value policy type&#xA;&#x9; * @return ImplicitActivationPolicy Object.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ImplicitActivationPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ImplicitActivationPolicyValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_servant_retention_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * These operations each return a reference to a policy &#xA;&#x9; * object with the specified value.&#xA;&#x9; * @param value policy type&#xA;&#x9; * @return ServantRetentionPolicy Object.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ServantRetentionPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="ServantRetentionPolicyValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_request_processing_policy">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * These operations each return a reference to a policy &#xA;&#x9; * object with the specified value. &#xA;&#x9; * @param value policy type&#xA;&#x9; * @return RequestProcessingPolicy Object.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="RequestProcessingPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="RequestProcessingPolicyValue.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="the_name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;&#x9; * This attribute identifies the POA relative to its &#xA;&#x9; * parent. This name is assigned when the POA is created.&#xA;&#x9; */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="the_parent">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This attribute identifies the parent of the POA. &#xA;&#x9; * The parent of the root POA is null. &#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="the_children">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This attribute identifies the current set of all &#xA;&#x9; * child POAs of the POA. The set of child POAs &#xA;&#x9; * includes only the POA's immediate children, and &#xA;&#x9; * not their descendants.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="POA.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="the_POAManager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This attribute identifies the POA manager &#xA;&#x9; * associated with the POA.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="POAManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="the_activator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This attribute identifies the adapter activator &#xA;&#x9; * associated with the POA.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="AdapterActivator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
    </members>
    <members xsi:type="members:InterfaceMethod" name="the_activator">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;&#x9; * This attribute identifies the adapter activator &#xA;&#x9; * associated with the POA.&#xA;&#x9; */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newThe_activator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AdapterActivator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_servant_manager">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; *&#xA;&#x9; * If the ServantRetentionPolicy of the POA is RETAIN, &#xA;&#x9; * then the ServantManager argument (imgr) shall support &#xA;&#x9; * the ServantActivator interface. For a NON_RETAIN policy,&#xA;&#x9; * the ServantManager shall support the ServantLocator &#xA;&#x9; * interface. If the argument is nil, or does not support &#xA;&#x9; * the required interface, then the OBJ_ADAPTER &#xA;&#x9; * exception is raised.&#xA;&#x9; * @return ServantManager associated with a POA or null if&#xA;&#x9; *         none exists.&#xA;&#x9; * @exception WrongPolicy raised if the &#xA;&#x9; *            USE_SERVANT_MANAGER policy is not specified.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="ServantManager.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set_servant_manager">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;&#x9; *&#xA;&#x9; * This operation sets the default servant manager &#xA;&#x9; * associated with the POA. This operation may only be &#xA;&#x9; * invoked once after a POA has been created. Attempting &#xA;&#x9; * to set the servant manager after one has already &#xA;&#x9; * been set will result in the BAD_INV_ORDER exception &#xA;&#x9; * being raised.&#xA;&#x9; * @param imgr servant manager to be used as a default.&#xA;&#x9; * @exception WrongPolicy raised if the &#xA;&#x9; *            USE_SERVANT_MANAGER policy is not specified.&#xA;&#x9; */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="imgr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="ServantManager.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_servant">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This operation returns the default servant associated &#xA;&#x9; * with the POA. &#xA;&#x9; * @return p_servant default servant associated with a POA.&#xA;&#x9; * @exception NoServant raised if no default servant is&#xA;&#x9; *            associated with the POA.&#xA;&#x9; * @exception WrongPolicy raised if the &#xA;&#x9; *            USE_DEFAULT_SERVANT policy is not specified.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/NoServant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set_servant">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;&#x9; *&#xA;&#x9; * This operation registers the specified servant with &#xA;&#x9; * the POA as the default servant. This servant will &#xA;&#x9; * be used for all requests for which no servant is &#xA;&#x9; * found in the Active Object Map.&#xA;&#x9; * @param p_servant servant to be used as a default.&#xA;&#x9; * @exception WrongPolicy raised if the &#xA;&#x9; *            USE_DEFAULT_SERVANT policy is not specified.&#xA;&#x9; */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p_servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="activate_object">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;&#x9; *&#xA;&#x9; * This operation generates an Object Id and enters &#xA;&#x9; * the Object Id and the specified servant in the &#xA;&#x9; * Active Object Map.&#xA;&#x9; * @param p_servant servant to be associated with an&#xA;&#x9; *            object to be activated.&#xA;&#x9; * @return POA generated object id.&#xA;&#x9; * @exception ServantAlreadyActive is raised if the&#xA;&#x9; *            POA has UNIQUE_ID policy and servant is&#xA;&#x9; *            is already in the Active Object Map.&#xA;&#x9; * @exception WrongPolicy raised if the SYSTEM_ID and &#xA;&#x9; *            RETAIN policies are not specified.&#xA;&#x9; */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p_servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ServantAlreadyActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="activate_object_with_id">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;         * This operation enters an association between the &#xA;&#x9; * specified Object Id and the specified servant in the &#xA;&#x9; * Active Object Map.&#xA;&#x9; * @param id object id for the object to be activated.&#xA;&#x9; * @param p_servant servant to be associated with the&#xA;&#x9; *                  object.&#xA;&#x9; * @exception ServantAlreadyActive raised if the POA &#xA;&#x9; *            has the UNIQUE_ID policy and the servant &#xA;&#x9; *            is already in the Active Object Map.&#xA;&#x9; * @exception ObjectAlreadyActive raised if the object is&#xA;&#x9; *            already active in the POA.&#xA;         * @exception WrongPolicy raised if the RETAIN policy is&#xA;         *            is not specified.&#xA;         */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="id">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p_servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ServantAlreadyActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ObjectAlreadyActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="deactivate_object">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;&#x9; *&#xA;&#x9; * This operation causes the ObjectId specified in the &#xA;&#x9; * oid parameter to be deactivated. An ObjectId which &#xA;&#x9; * has been deactivated continues to process requests &#xA;&#x9; * until there are no active requests for that ObjectId. &#xA;&#x9; * A deactivated ObjectId is removed from the Active &#xA;&#x9; * Object Map when all requests executing for that &#xA;&#x9; * ObjectId have completed. &#xA;&#x9; * @param oid Object Id for the object to be deactivated.&#xA;&#x9; * @exception ObjectNotActive if the object with the&#xA;&#x9; *            specified oid is not in the Active Object&#xA;&#x9; *            Map.&#xA;&#x9; * @exception WrongPolicy raised if the RETAIN policy is&#xA;&#x9; *            is not specified.&#xA;&#x9; */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oid">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ObjectNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_reference">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This operation creates an object reference that &#xA;&#x9; * encapsulates a POA-generated Object Id value and &#xA;&#x9; * the specified interface repository id. &#xA;&#x9; *&#xA;&#x9; * @param intf rep id for creating an object reference.&#xA;&#x9; * @return object reference created using intf.&#xA;&#x9; * @exception WrongPolicy if SYSTEM_ID policy is not &#xA;&#x9; *            specified.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="intf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_reference_with_id">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This operation creates an object reference that &#xA;&#x9; * encapsulates the specified Object Id and interface &#xA;&#x9; * repository Id values. It does not cause an activation &#xA;&#x9; * to take place. The resulting reference may be passed &#xA;&#x9; * to clients, so that subsequent requests on those &#xA;&#x9; * references will cause the object to be activated &#xA;&#x9; * if necessary, or the default servant used, depending &#xA;&#x9; * on the applicable policies. &#xA;&#x9; * @param oid object id for creating an objref&#xA;&#x9; * @param intf rep id for creating an objref&#xA;&#x9; * @return object reference created using oid and intf&#xA;&#x9; * @exception BAD_PARAM is raised if the POA has the &#xA;&#x9; *             SYSTEM_ID policy and it detects that the &#xA;&#x9; *             Object Id value was not generated by the &#xA;&#x9; *             system or for this POA.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oid">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="intf">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
    </members>
    <members xsi:type="members:InterfaceMethod" name="servant_to_id">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;&#x9; * This operation has four possible behaviors. &#xA;&#x9; * 1. If the POA has the UNIQUE_ID policy and the &#xA;&#x9; * specified servant is active, the Object Id associated &#xA;&#x9; * with that servant is returned.&#xA;&#x9; * 2. If the POA has the IMPLICIT_ACTIVATION policy and &#xA;&#x9; * either the POA has the MULTIPLE_ID policy or the &#xA;&#x9; * specified servant is not active, the servant is &#xA;&#x9; * activated using a POA-generated Object Id and the &#xA;&#x9; * Interface Id associated with the servant, and that &#xA;&#x9; * Object Id is returned. &#xA;&#x9; * 3. If the POA has the USE_DEFAULT_SERVANT policy, &#xA;&#x9; * the servant specified is the default servant, and the &#xA;&#x9; * operation is being invoked in the context of executing &#xA;&#x9; * a request on the default servant, then the ObjectId &#xA;&#x9; * associated with the current invocation is returned. &#xA;&#x9; * 4. Otherwise, the ServantNotActive exception is raised.&#xA;&#x9; *&#xA;&#x9; * @param p_servant servant for which the object disi returned.&#xA;&#x9; * @return object id associated with the servant.&#xA;&#x9; * @exception ServantNotActive if the above rules and&#xA;&#x9; *            policy combination is not met. &#xA;&#x9; * @exception WrongPolicy if the USE_DEFAULT_SERVANT policy&#xA;&#x9; *            or a combination of the RETAIN policy and &#xA;&#x9; *            either the UNIQUE_ID or IMPLICIT_ACTIVATION &#xA;&#x9; *            policies are not present. &#xA;&#x9; */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p_servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ServantNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="servant_to_reference">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * This operation requires the RETAIN policy and either &#xA;&#x9; * the UNIQUE_ID or IMPLICIT_ACTIVATION policies if &#xA;&#x9; * invoked outside the context of an operation dispatched &#xA;&#x9; * by this POA. It has four possible behaviors.&#xA;&#x9; * 1. If the POA has both the RETAIN and the &#xA;&#x9; * UNIQUE_ID policy and the specified servant is active, &#xA;&#x9; * an object reference encapsulating the information used &#xA;&#x9; * to activate the servant is returned. &#xA;&#x9; * 2. If the POA has both the RETAIN and the &#xA;&#x9; * IMPLICIT_ACTIVATION policy and either the POA has the &#xA;&#x9; * MULTIPLE_ID policy or the specified servant is not &#xA;&#x9; * active, the servant is activated using a POA-generated &#xA;&#x9; * Object Id and the Interface Id associated with the &#xA;&#x9; * servant, and a corresponding object reference is &#xA;&#x9; * returned. &#xA;&#x9; * 3. If the operation was invoked in the context of &#xA;&#x9; * executing a request on the specified servant, the &#xA;&#x9; * reference associated with the current invocation &#xA;&#x9; * is returned. &#xA;&#x9; * 4. Otherwise, the ServantNotActive exception is raised.&#xA;&#x9; *&#xA;&#x9; * @param p_servant servant for which the object reference&#xA;&#x9; *                  needs to be obtained.&#xA;&#x9; * @return object reference associated with the servant.&#xA;&#x9; * @exception WrongPolicy if the operation is not invoked &#xA;&#x9; *            in the context of executing a request on &#xA;&#x9; *            the specified servant and the required &#xA;&#x9; *            policies are not present.&#xA;&#x9; * @exception ServantNotActive if the above specified&#xA;&#x9; *            policies and rules are not met.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="p_servant">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>PortableServer</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ServantNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="reference_to_servant">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * If the POA has the RETAIN policy and the specified &#xA;&#x9; * object is present in the Active Object Map, this &#xA;&#x9; * operation returns the servant associated with that &#xA;&#x9; * object in the Active Object Map. Otherwise, if the &#xA;&#x9; * POA has the USE_DEFAULT_SERVANT policy and a default &#xA;&#x9; * servant has been registered with the POA, this &#xA;&#x9; * operation returns the default servant. If the object &#xA;&#x9; * reference was not created by this POA, &#xA;&#x9; * the WrongAdapter exception is raised. (OMG Issue&#xA;&#x9; * on inconsistency with the POA.IDL.&#xA;&#x9; *&#xA;&#x9; * @param reference object reference for which the&#xA;&#x9; *                  servant is returned.&#xA;&#x9; * @return servant associated with the reference.&#xA;&#x9; * @exception WrongPolicy if neither the RETAIN policy or &#xA;&#x9; *            the USE_DEFAULT_SERVANT policy is present. &#xA;&#x9; * @exception ObjectNotActive if the servant is not&#xA;&#x9; *            present in the Active Object Map (for RETAIN)&#xA;&#x9; *            or no default servant is registered (for&#xA;&#x9; *            USE_DEFAULT_POLICY).&#xA;&#x9; * @exception WrongAdapter if reference was not created by&#xA;&#x9; *&#x9;      this POA instance.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reference">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ObjectNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongAdapter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="reference_to_id">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;&#x9; * This operation returns the Object Id value &#xA;&#x9; * encapsulated by the specified reference. This &#xA;&#x9; * operation is valid only if the reference was created &#xA;&#x9; * by the POA on which the operation is being performed. &#xA;&#x9; * The object denoted by the reference does not have &#xA;&#x9; * to be active for this operation to succeed.&#xA;&#x9; *&#xA;&#x9; * @param reference the object reference from which the&#xA;&#x9; *                  object id needs to be returned.&#xA;&#x9; * @return object id encapsulated in the reference.&#xA;&#x9; * @exception WrongAdapter if the reference was not &#xA;&#x9; *            created by the POA specified in the &#xA;&#x9; *            reference.&#xA;&#x9; * @exception WrongPolicy declared to allow future &#xA;&#x9; *            extensions. &#xA;&#x9; *&#xA;&#x9; */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="reference">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongAdapter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="id_to_servant">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * If the POA has the RETAIN policy and the specified &#xA;&#x9; * ObjectId is in the Active Object Map, this operation &#xA;&#x9; * returns the servant associated with that object in &#xA;&#x9; * the Active Object Map. Otherwise, if the POA has &#xA;&#x9; * the USE_DEFAULT_SERVANT policy and a default servant &#xA;&#x9; * has been registered with the POA, this operation &#xA;&#x9; * returns the default servant. &#xA;&#x9; *&#xA;&#x9; * @param oid object id for the which the servant is&#xA;&#x9; *            returned.&#xA;&#x9; * @return servant associated with oid.&#xA;&#x9; * @exception ObjectNotActive is raised if ObjectId is&#xA;&#x9; *            is not in the Active Object Map (for RETAIN&#xA;&#x9; *            policy), or no default servant is registered&#xA;&#x9; *            (for USE_DEFAULT_SERVANT policy).&#xA;&#x9; *&#xA;&#x9; * @exception WrongPolicy is raised if the RETAIN policy&#xA;&#x9; *                        or the USE_DEFAULT_SERVANT &#xA;&#x9; *                        policy is not present. &#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Servant.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oid">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ObjectNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="id_to_reference">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;&#x9; * If an object with the specified Object Id value is &#xA;&#x9; * currently active, a reference encapsulating the &#xA;&#x9; * information used to activate the object is returned. &#xA;&#x9; *&#xA;&#x9; * @param oid id of the object for which the&#xA;&#x9; *                 reference is returned.&#xA;&#x9; * @return the object reference &#xA;&#x9; *&#xA;&#x9; * @exception ObjectNotActive if the Object Id value &#xA;&#x9; *             is not active in the POA.&#xA;&#x9; * @exception WrongPolicy if the RETAIN policy is not &#xA;&#x9; *             present.&#xA;&#x9; */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../CORBA/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oid">
        <typeReference xsi:type="types:Byte"/>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/ObjectNotActive.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>PortableServer</namespaces>
        <namespaces>POAPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="POAPackage/WrongPolicy.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="id">
      <typeReference xsi:type="types:Byte">
        <comments>/**&#xA;&#x9; * This returns the unique id of the POA in the process in which it &#xA;&#x9; * is created.  It is for use by portable interceptors.&#xA;&#x9; * &lt;p>&#xA;&#x9; * This id is guaranteed unique for the life span of the POA in the&#xA;&#x9; * process.  For persistent POAs, this means that if a POA is created &#xA;&#x9; * in the same path with the same name as another POA, these POAs &#xA;&#x9; * are identical and, therefore, have the same id.  For transient &#xA;&#x9; * POAs, each POA is unique.&#xA;&#x9; */</comments>
      </typeReference>
      <arrayDimensionsBefore/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xD;&#xA;* org/omg/PortableServer/POAOperations.java .&#xD;&#xA;* Generated by the IDL-to-Java compiler (portable), version &quot;3.2&quot;&#xD;&#xA;* from ../../../../src/share/classes/org/omg/PortableServer/poa.idl&#xD;&#xA;* Wednesday, May 28, 2008 8:37:35 AM GMT&#xD;&#xA;*/</comments>
      <comments>/**&#xA;&#x9; * A POA object manages the implementation of a &#xA;&#x9; * collection of objects. The POA supports a name space &#xA;&#x9; * for the objects, which are identified by Object Ids. &#xA;&#x9; * A POA also provides a name space for POAs. A POA is &#xA;&#x9; * created as a child of an existing POA, which forms a &#xA;&#x9; * hierarchy starting with the root POA. A POA object &#xA;&#x9; * must not be exported to other processes, or &#xA;&#x9; * externalized with ORB::object_to_string.&#xA;&#x9; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
