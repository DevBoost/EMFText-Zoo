<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DynValueOperations.java">
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>DynamicAny</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DynValueOperations">
    <members xsi:type="members:InterfaceMethod" name="current_member_name">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <comments>/**&#xA;        * Returns the name of the member at the current position.&#xA;        * This operation may return an empty string since the TypeCode of the value being&#xA;        * manipulated may not contain the names of members.&#xA;        *&#xA;        * @exception TypeMismatch if the DynValue represents a null value type.&#xA;        * @exception InvalidValue if the current position does not indicate a member&#xA;        */</comments>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="current_member_kind">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;        * Returns the TCKind associated with the member at the current position.&#xA;        *&#xA;        * @exception TypeMismatch if the DynValue represents a null value type.&#xA;        * @exception InvalidValue if the current position does not indicate a member&#xA;        */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>CORBA</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../CORBA/TCKind.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_members">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;        * Returns a sequence of NameValuePairs describing the name and the value of each member&#xA;        * in the value type.&#xA;        * The sequence contains members in the same order as the declaration order of members&#xA;        * as indicated by the DynValue's TypeCode. The current position is not affected.&#xA;        * The member names in the returned sequence will be empty strings if the DynValue's TypeCode&#xA;        * does not contain member names.&#xA;        *&#xA;        * @exception InvalidValue if this object represents a null value type&#xA;        */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NameValuePair.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set_members">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;        * Initializes the value type's members from a sequence of NameValuePairs.&#xA;        * The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise,&#xA;        * if an empty sequence is passed, the current position is set to -1.&#xA;        * A null value type can be initialized to a non-null value type using this method.&#xA;        * &lt;P>Members must appear in the NameValuePairs in the order in which they appear in the IDL specification&#xA;        * of the value type as indicated by the DynValue's TypeCode or they must be empty strings.&#xA;        * The operation makes no attempt to assign member values based on member names.&#xA;        *&#xA;        * @exception TypeMismatch if the member names supplied in the passed sequence do not match the&#xA;        *            corresponding member name in the DynValue's TypeCode and they are not empty strings&#xA;        * @exception InvalidValue if the passed sequence has a number of elements that disagrees&#xA;        *            with the number of members as indicated by the DynValue's TypeCode&#xA;        */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>DynamicAny</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NameValuePair.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="get_members_as_dyn_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;        * Returns a sequence of NameDynAnyPairs describing the name and the value of each member&#xA;        * in the value type.&#xA;        * The sequence contains members in the same order as the declaration order of members&#xA;        * as indicated by the DynValue's TypeCode. The current position is not affected.&#xA;        * The member names in the returned sequence will be empty strings if the DynValue's TypeCode&#xA;        * does not contain member names.&#xA;        *&#xA;        * @exception InvalidValue if this object represents a null value type&#xA;        */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="NameDynAnyPair.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="set_members_as_dyn_any">
      <typeReference xsi:type="types:Void">
        <comments>/**&#xA;        * Initializes the value type's members from a sequence of NameDynAnyPairs.&#xA;        * The operation sets the current position to zero if the passed sequences has non-zero length. Otherwise,&#xA;        * if an empty sequence is passed, the current position is set to -1.&#xA;        * A null value type can be initialized to a non-null value type using this method.&#xA;        * &lt;P>Members must appear in the NameDynAnyPairs in the order in which they appear in the IDL specification&#xA;        * of the value type as indicated by the DynValue's TypeCode or they must be empty strings.&#xA;        * The operation makes no attempt to assign member values based on member names.&#xA;        *&#xA;        * @exception TypeMismatch if the member names supplied in the passed sequence do not match the&#xA;        *            corresponding member name in the DynValue's TypeCode and they are not empty strings&#xA;        * @exception InvalidValue if the passed sequence has a number of elements that disagrees&#xA;        *            with the number of members as indicated by the DynValue's TypeCode&#xA;        */</comments>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>DynamicAny</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="NameDynAnyPair.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
        <arrayDimensionsBefore/>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/TypeMismatch.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyPackage/InvalidValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xD;&#xA;* org/omg/DynamicAny/DynValueOperations.java .&#xD;&#xA;* Generated by the IDL-to-Java compiler (portable), version &quot;3.2&quot;&#xD;&#xA;* from ../../../../src/share/classes/org/omg/DynamicAny/DynamicAny.idl&#xD;&#xA;* Wednesday, May 28, 2008 8:37:44 AM GMT&#xD;&#xA;*/</comments>
      <comments>/**&#xA;    * DynValue objects support the manipulation of IDL non-boxed value types.&#xA;    * The DynValue interface can represent both null and non-null value types.&#xA;    * For a DynValue representing a non-null value type, the DynValue's components comprise&#xA;    * the public and private members of the value type, including those inherited from concrete base value types,&#xA;    * in the order of definition. A DynValue representing a null value type has no components&#xA;    * and a current position of -1.&#xA;    * &lt;P>Warning: Indiscriminantly changing the contents of private value type members can cause the value type&#xA;    * implementation to break by violating internal constraints. Access to private members is provided to support&#xA;    * such activities as ORB bridging and debugging and should not be used to arbitrarily violate&#xA;    * the encapsulation of the value type. &#xA;    */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <namespaces>org</namespaces>
      <namespaces>omg</namespaces>
      <namespaces>DynamicAny</namespaces>
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="DynValueCommonOperations.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
