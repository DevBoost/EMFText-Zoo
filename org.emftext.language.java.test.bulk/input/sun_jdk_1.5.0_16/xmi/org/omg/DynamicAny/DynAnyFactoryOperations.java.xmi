<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DynAnyFactoryOperations.java">
  <namespaces>org</namespaces>
  <namespaces>omg</namespaces>
  <namespaces>DynamicAny</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DynAnyFactoryOperations">
    <members xsi:type="members:InterfaceMethod" name="create_dyn_any">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;        * Creates a new DynAny object from an any value.&#xA;        * A copy of the TypeCode associated with the any value is assigned to the resulting DynAny object.&#xA;        * The value associated with the DynAny object is a copy of the value in the original any.&#xA;        * The current position of the created DynAny is set to zero if the passed value has components,&#xA;        * to -1 otherwise&#xA;        *&#xA;        * @exception InconsistentTypeCode if value has a TypeCode with a TCKind of tk_Principal,&#xA;        * tk_native, or tk_abstract_interface&#xA;        */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynAny.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CORBA/Any.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyFactoryPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyFactoryPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <members xsi:type="members:InterfaceMethod" name="create_dyn_any_from_type_code">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <comments>/**&#xA;        * Creates a DynAny from a TypeCode. Depending on the TypeCode, the created object may be of type DynAny,&#xA;        * or one of its derived types, such as DynStruct. The returned reference can be narrowed to the derived type.&#xA;        * In all cases, a DynAny constructed from a TypeCode has an initial default value.&#xA;        * The default values of basic types are:&#xA;        * &lt;UL>&#xA;        * &lt;LI>false for boolean&#xA;        * &lt;LI>zero for numeric types&#xA;        * &lt;LI>zero for types octet, char, and wchar&#xA;        * &lt;LI>the empty string for string and wstring&#xA;        * &lt;LI>null for object references&#xA;        * &lt;LI>a type code with a TCKind value of tk_null for type codes&#xA;        * &lt;LI>for any values, an any containing a type code with a TCKind value of tk_null type and no value&#xA;        * &lt;/UL>&#xA;        * For complex types, creation of the corresponding DynAny assigns a default value as follows:&#xA;        * &lt;UL>&#xA;        * &lt;LI>For DynSequence it sets the current position to -1 and creates an empty sequence.&#xA;        * &lt;LI>For DynEnum it sets the current position to -1 and sets the value of the enumerator&#xA;        *     to the first enumerator value indicated by the TypeCode.&#xA;        * &lt;LI>For DynFixed it sets the current position to -1 and sets the value zero.&#xA;        * &lt;LI>For DynStruct it sets the current position to -1 for empty exceptions&#xA;        *     and to zero for all other TypeCodes. The members (if any) are (recursively) initialized&#xA;        *     to their default values.&#xA;        * &lt;LI>For DynArray sets the current position to zero and (recursively) initializes elements&#xA;        *     to their default value.&#xA;        * &lt;LI>For DynUnion sets the current position to zero. The discriminator value is set&#xA;        *     to a value consistent with the first named member of the union. That member is activated and (recursively)&#xA;        *     initialized to its default value.&#xA;        * &lt;LI>For DynValue and DynValueBox it initializes to a null value.&#xA;        * &lt;/UL>&#xA;        */</comments>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DynAny.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>org</namespaces>
          <namespaces>omg</namespaces>
          <namespaces>CORBA</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../CORBA/TypeCode.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <namespaces>org</namespaces>
        <namespaces>omg</namespaces>
        <namespaces>DynamicAny</namespaces>
        <namespaces>DynAnyFactoryPackage</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DynAnyFactoryPackage/InconsistentTypeCode.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xD;&#xA;* org/omg/DynamicAny/DynAnyFactoryOperations.java .&#xD;&#xA;* Generated by the IDL-to-Java compiler (portable), version &quot;3.2&quot;&#xD;&#xA;* from ../../../../src/share/classes/org/omg/DynamicAny/DynamicAny.idl&#xD;&#xA;* Wednesday, May 28, 2008 8:37:44 AM GMT&#xD;&#xA;*/</comments>
      <comments>/**&#xA;    * DynAny objects can be created by invoking operations on the DynAnyFactory object.&#xA;    * Generally there are only two ways to create a DynAny object:&#xA;    * &lt;UL>&#xA;    * &lt;LI>invoking an operation on an existing DynAny object&#xA;    * &lt;LI>invoking an operation on a DynAnyFactory object&#xA;    * &lt;/UL>&#xA;    * A constructed DynAny object supports operations that enable the creation of new DynAny&#xA;    * objects encapsulating access to the value of some constituent.&#xA;    * DynAny objects also support the copy operation for creating new DynAny objects.&#xA;    * A reference to the DynAnyFactory object is obtained by calling ORB.resolve_initial_references()&#xA;    * with the identifier parameter set to the string constant &quot;DynAnyFactory&quot;.&#xA;    * &lt;P>Dynamic interpretation of an any usually involves creating a DynAny object using create_dyn_any()&#xA;    * as the first step. Depending on the type of the any, the resulting DynAny object reference can be narrowed&#xA;    * to a DynFixed, DynStruct, DynSequence, DynArray, DynUnion, DynEnum, or DynValue object reference.&#xA;    * &lt;P>Dynamic creation of an any involves creating a DynAny object using create_dyn_any_from_type_code(),&#xA;    * passing the TypeCode associated with the value to be created. The returned reference is narrowed to one of&#xA;    * the complex types, such as DynStruct, if appropriate. Then, the value can be initialized by means of&#xA;    * invoking operations on the resulting object. Finally, the to_any operation can be invoked&#xA;    * to create an any value from the constructed DynAny.&#xA;    */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
