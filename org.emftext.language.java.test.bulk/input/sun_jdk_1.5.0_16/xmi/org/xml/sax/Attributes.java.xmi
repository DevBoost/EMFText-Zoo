<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Attributes.java">
  <comments>// Attributes.java - attribute list with Namespace support</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// Written by David Megginson</comments>
  <comments>// NO WARRANTY!  This class is in the public domain.</comments>
  <comments>// $Id: Attributes.java,v 1.1.24.1 2004/05/01 08:34:39 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Attributes">
    <members xsi:type="members:InterfaceMethod" name="getLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>// Indexed access.</comments>
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Return the number of attributes in the list.&#xA;     *&#xA;     * &lt;p>Once you know the number of attributes, you can iterate&#xA;     * through the list.&lt;/p>&#xA;     *&#xA;     * @return The number of attributes in the list.&#xA;     * @see #getURI(int)&#xA;     * @see #getLocalName(int)&#xA;     * @see #getQName(int)&#xA;     * @see #getType(int)&#xA;     * @see #getValue(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's Namespace URI by index.&#xA;     *&#xA;     * @param index The attribute index (zero-based).&#xA;     * @return The Namespace URI, or the empty string if none&#xA;     *         is available, or null if the index is out of&#xA;     *         range.&#xA;     * @see #getLength&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLocalName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's local name by index.&#xA;     *&#xA;     * @param index The attribute index (zero-based).&#xA;     * @return The local name, or the empty string if Namespace&#xA;     *         processing is not being performed, or null&#xA;     *         if the index is out of range.&#xA;     * @see #getLength&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getQName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's XML qualified (prefixed) name by index.&#xA;     *&#xA;     * @param index The attribute index (zero-based).&#xA;     * @return The XML qualified name, or the empty string&#xA;     *         if none is available, or null if the index&#xA;     *         is out of range.&#xA;     * @see #getLength&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's type by index.&#xA;     *&#xA;     * &lt;p>The attribute type is one of the strings &quot;CDATA&quot;, &quot;ID&quot;,&#xA;     * &quot;IDREF&quot;, &quot;IDREFS&quot;, &quot;NMTOKEN&quot;, &quot;NMTOKENS&quot;, &quot;ENTITY&quot;, &quot;ENTITIES&quot;,&#xA;     * or &quot;NOTATION&quot; (always in upper case).&lt;/p>&#xA;     *&#xA;     * &lt;p>If the parser has not read a declaration for the attribute,&#xA;     * or if the parser does not report attribute types, then it must&#xA;     * return the value &quot;CDATA&quot; as stated in the XML 1.0 Recommendation&#xA;     * (clause 3.3.3, &quot;Attribute-Value Normalization&quot;).&lt;/p>&#xA;     *&#xA;     * &lt;p>For an enumerated attribute that is not a notation, the&#xA;     * parser will report the type as &quot;NMTOKEN&quot;.&lt;/p>&#xA;     *&#xA;     * @param index The attribute index (zero-based).&#xA;     * @return The attribute's type as a string, or null if the&#xA;     *         index is out of range.&#xA;     * @see #getLength&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's value by index.&#xA;     *&#xA;     * &lt;p>If the attribute value is a list of tokens (IDREFS,&#xA;     * ENTITIES, or NMTOKENS), the tokens will be concatenated&#xA;     * into a single string with each token separated by a&#xA;     * single space.&lt;/p>&#xA;     *&#xA;     * @param index The attribute index (zero-based).&#xA;     * @return The attribute's value as a string, or null if the&#xA;     *         index is out of range.&#xA;     * @see #getLength&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIndex">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>// Name-based query.</comments>
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Look up the index of an attribute by Namespace name.&#xA;     *&#xA;     * @param uri The Namespace URI, or the empty string if&#xA;     *        the name has no Namespace URI.&#xA;     * @param localName The attribute's local name.&#xA;     * @return The index of the attribute, or -1 if it does not&#xA;     *         appear in the list.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getIndex">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up the index of an attribute by XML qualified (prefixed) name.&#xA;     *&#xA;     * @param qName The qualified (prefixed) name.&#xA;     * @return The index of the attribute, or -1 if it does not&#xA;     *         appear in the list.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's type by Namespace name.&#xA;     *&#xA;     * &lt;p>See {@link #getType(int) getType(int)} for a description&#xA;     * of the possible types.&lt;/p>&#xA;     *&#xA;     * @param uri The Namespace URI, or the empty String if the&#xA;     *        name has no Namespace URI.&#xA;     * @param localName The local name of the attribute.&#xA;     * @return The attribute type as a string, or null if the&#xA;     *         attribute is not in the list or if Namespace&#xA;     *         processing is not being performed.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's type by XML qualified (prefixed) name.&#xA;     *&#xA;     * &lt;p>See {@link #getType(int) getType(int)} for a description&#xA;     * of the possible types.&lt;/p>&#xA;     *&#xA;     * @param qName The XML qualified name.&#xA;     * @return The attribute type as a string, or null if the&#xA;     *         attribute is not in the list or if qualified names&#xA;     *         are not available.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's value by Namespace name.&#xA;     *&#xA;     * &lt;p>See {@link #getValue(int) getValue(int)} for a description&#xA;     * of the possible values.&lt;/p>&#xA;     *&#xA;     * @param uri The Namespace URI, or the empty String if the&#xA;     *        name has no Namespace URI.&#xA;     * @param localName The local name of the attribute.&#xA;     * @return The attribute value as a string, or null if the&#xA;     *         attribute is not in the list.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Look up an attribute's value by XML qualified (prefixed) name.&#xA;     *&#xA;     * &lt;p>See {@link #getValue(int) getValue(int)} for a description&#xA;     * of the possible values.&lt;/p>&#xA;     *&#xA;     * @param qName The XML qualified name.&#xA;     * @return The attribute value as a string, or null if the&#xA;     *         attribute is not in the list or if qualified names&#xA;     *         are not available.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface for a list of XML attributes.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>This interface allows access to a list of attributes in&#xA; * three different ways:&lt;/p>&#xA; *&#xA; * &lt;ol>&#xA; * &lt;li>by attribute index;&lt;/li>&#xA; * &lt;li>by Namespace-qualified name; or&lt;/li>&#xA; * &lt;li>by qualified (prefixed) name.&lt;/li>&#xA; * &lt;/ol>&#xA; *&#xA; * &lt;p>The list will not contain attributes that were declared&#xA; * #IMPLIED but not specified in the start tag.  It will also not&#xA; * contain attributes used as Namespace declarations (xmlns*) unless&#xA; * the &lt;code>http://xml.org/sax/features/namespace-prefixes&lt;/code> &#xA; * feature is set to &lt;var>true&lt;/var> (it is &lt;var>false&lt;/var> by &#xA; * default).&#xA; * Because SAX2 conforms to the original &quot;Namespaces in XML&quot;&#xA; * recommendation, it normally does not&#xA; * give namespace declaration attributes a namespace URI.&#xA; * &lt;/p>&#xA; *&#xA; * &lt;p>Some SAX2 parsers may support using an optional feature flag&#xA; * (&lt;code>http://xml.org/sax/features/xmlns-uris&lt;/code>) to request&#xA; * that those attributes be given URIs, conforming to a later&#xA; * backwards-incompatible revision of that recommendation.  (The&#xA; * attribute's &quot;local name&quot; will be the prefix, or &quot;xmlns&quot; when&#xA; * defining a default element namespace.)  For portability, handler&#xA; * code should always resolve that conflict, rather than requiring&#xA; * parsers that can change the setting of that feature flag.  &lt;/p>&#xA; *&#xA; * &lt;p>If the namespace-prefixes feature (see above) is&#xA; * &lt;var>false&lt;/var>, access by qualified name may not be available; if&#xA; * the &lt;code>http://xml.org/sax/features/namespaces&lt;/code> feature is&#xA; * &lt;var>false&lt;/var>, access by Namespace-qualified names may not be&#xA; * available.&lt;/p>&#xA; *&#xA; * &lt;p>This interface replaces the now-deprecated SAX1 {@link&#xA; * org.xml.sax.AttributeList AttributeList} interface, which does not &#xA; * contain Namespace support.  In addition to Namespace support, it &#xA; * adds the &lt;var>getIndex&lt;/var> methods (below).&lt;/p>&#xA; *&#xA; * &lt;p>The order of attributes in the list is unspecified, and will&#xA; * vary from implementation to implementation.&lt;/p>&#xA; *&#xA; * @since SAX 2.0&#xA; * @author David Megginson&#xA; * @version 2.0.1 (sax2r2)&#xA; * @see org.xml.sax.helpers.AttributesImpl&#xA; * @see org.xml.sax.ext.DeclHandler#attributeDecl&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
