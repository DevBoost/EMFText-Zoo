<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DocumentHandler.java">
  <comments>// SAX document handler.</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// No warranty; no copyright -- use this as you will.</comments>
  <comments>// $Id: DocumentHandler.java,v 1.1.24.1 2004/05/01 08:34:39 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DocumentHandler">
    <members xsi:type="members:InterfaceMethod" name="setDocumentLocator">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="locator">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Locator.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive an object for locating the origin of SAX document events.&#xA;     *&#xA;     * &lt;p>SAX parsers are strongly encouraged (though not absolutely&#xA;     * required) to supply a locator: if it does so, it must supply&#xA;     * the locator to the application by invoking this method before&#xA;     * invoking any of the other methods in the DocumentHandler&#xA;     * interface.&lt;/p>&#xA;     *&#xA;     * &lt;p>The locator allows the application to determine the end&#xA;     * position of any document-related event, even if the parser is&#xA;     * not reporting an error.  Typically, the application will&#xA;     * use this information for reporting its own errors (such as&#xA;     * character content that does not match an application's&#xA;     * business rules).  The information returned by the locator&#xA;     * is probably not sufficient for use with a search engine.&lt;/p>&#xA;     *&#xA;     * &lt;p>Note that the locator will return correct information only&#xA;     * during the invocation of the events in this interface.  The&#xA;     * application should not attempt to use it at any other time.&lt;/p>&#xA;     *&#xA;     * @param locator An object that can return the location of&#xA;     *                any SAX document event.&#xA;     * @see org.xml.sax.Locator&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="startDocument">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of the beginning of a document.&#xA;     *&#xA;     * &lt;p>The SAX parser will invoke this method only once, before any&#xA;     * other methods in this interface or in DTDHandler (except for&#xA;     * setDocumentLocator).&lt;/p>&#xA;     *&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="endDocument">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of the end of a document.&#xA;     *&#xA;     * &lt;p>The SAX parser will invoke this method only once, and it will&#xA;     * be the last method invoked during the parse.  The parser shall&#xA;     * not invoke this method until it has either abandoned parsing&#xA;     * (because of an unrecoverable error) or reached the end of&#xA;     * input.&lt;/p>&#xA;     *&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="startElement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="atts">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="AttributeList.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of the beginning of an element.&#xA;     *&#xA;     * &lt;p>The Parser will invoke this method at the beginning of every&#xA;     * element in the XML document; there will be a corresponding&#xA;     * endElement() event for every startElement() event (even when the&#xA;     * element is empty). All of the element's content will be&#xA;     * reported, in order, before the corresponding endElement()&#xA;     * event.&lt;/p>&#xA;     *&#xA;     * &lt;p>If the element name has a namespace prefix, the prefix will&#xA;     * still be attached.  Note that the attribute list provided will&#xA;     * contain only attributes with explicit values (specified or&#xA;     * defaulted): #IMPLIED attributes will be omitted.&lt;/p>&#xA;     *&#xA;     * @param name The element type name.&#xA;     * @param atts The attributes attached to the element, if any.&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @see #endElement&#xA;     * @see org.xml.sax.AttributeList &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="endElement">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of the end of an element.&#xA;     *&#xA;     * &lt;p>The SAX parser will invoke this method at the end of every&#xA;     * element in the XML document; there will be a corresponding&#xA;     * startElement() event for every endElement() event (even when the&#xA;     * element is empty).&lt;/p>&#xA;     *&#xA;     * &lt;p>If the element name has a namespace prefix, the prefix will&#xA;     * still be attached to the name.&lt;/p>&#xA;     *&#xA;     * @param name The element type name&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="characters">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of character data.&#xA;     *&#xA;     * &lt;p>The Parser will call this method to report each chunk of&#xA;     * character data.  SAX parsers may return all contiguous character&#xA;     * data in a single chunk, or they may split it into several&#xA;     * chunks; however, all of the characters in any single event&#xA;     * must come from the same external entity, so that the Locator&#xA;     * provides useful information.&lt;/p>&#xA;     *&#xA;     * &lt;p>The application must not attempt to read from the array&#xA;     * outside of the specified range.&lt;/p>&#xA;     *&#xA;     * &lt;p>Note that some parsers will report whitespace using the&#xA;     * ignorableWhitespace() method rather than this one (validating&#xA;     * parsers must do so).&lt;/p>&#xA;     *&#xA;     * @param ch The characters from the XML document.&#xA;     * @param start The start position in the array.&#xA;     * @param length The number of characters to read from the array.&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @see #ignorableWhitespace &#xA;     * @see org.xml.sax.Locator&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="ignorableWhitespace">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of ignorable whitespace in element content.&#xA;     *&#xA;     * &lt;p>Validating Parsers must use this method to report each chunk&#xA;     * of ignorable whitespace (see the W3C XML 1.0 recommendation,&#xA;     * section 2.10): non-validating parsers may also use this method&#xA;     * if they are capable of parsing and using content models.&lt;/p>&#xA;     *&#xA;     * &lt;p>SAX parsers may return all contiguous whitespace in a single&#xA;     * chunk, or they may split it into several chunks; however, all of&#xA;     * the characters in any single event must come from the same&#xA;     * external entity, so that the Locator provides useful&#xA;     * information.&lt;/p>&#xA;     *&#xA;     * &lt;p>The application must not attempt to read from the array&#xA;     * outside of the specified range.&lt;/p>&#xA;     *&#xA;     * @param ch The characters from the XML document.&#xA;     * @param start The start position in the array.&#xA;     * @param length The number of characters to read from the array.&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @see #characters&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="processingInstruction">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="target">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="data">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a processing instruction.&#xA;     *&#xA;     * &lt;p>The Parser will invoke this method once for each processing&#xA;     * instruction found: note that processing instructions may occur&#xA;     * before or after the main document element.&lt;/p>&#xA;     *&#xA;     * &lt;p>A SAX parser should never report an XML declaration (XML 1.0,&#xA;     * section 2.8) or a text declaration (XML 1.0, section 4.3.1)&#xA;     * using this method.&lt;/p>&#xA;     *&#xA;     * @param target The processing instruction target.&#xA;     * @param data The processing instruction data, or null if&#xA;     *        none was supplied.&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Receive notification of general document events.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>This was the main event-handling interface for SAX1; in&#xA; * SAX2, it has been replaced by {@link org.xml.sax.ContentHandler&#xA; * ContentHandler}, which provides Namespace support and reporting&#xA; * of skipped entities.  This interface is included in SAX2 only&#xA; * to support legacy SAX1 applications.&lt;/p>&#xA; *&#xA; * &lt;p>The order of events in this interface is very important, and&#xA; * mirrors the order of information in the document itself.  For&#xA; * example, all of an element's content (character data, processing&#xA; * instructions, and/or subelements) will appear, in order, between&#xA; * the startElement event and the corresponding endElement event.&lt;/p>&#xA; *&#xA; * &lt;p>Application writers who do not want to implement the entire&#xA; * interface can derive a class from HandlerBase, which implements&#xA; * the default functionality; parser writers can instantiate&#xA; * HandlerBase to obtain a default handler.  The application can find&#xA; * the location of any document event using the Locator interface&#xA; * supplied by the Parser through the setDocumentLocator method.&lt;/p>&#xA; *&#xA; * @deprecated This interface has been replaced by the SAX2&#xA; *             {@link org.xml.sax.ContentHandler ContentHandler}&#xA; *             interface, which includes Namespace support.&#xA; * @since SAX 1.0&#xA; * @author David Megginson&#xA; * @version 2.0.1 (sax2r2)&#xA; * @see org.xml.sax.Parser#setDocumentHandler&#xA; * @see org.xml.sax.Locator&#xA; * @see org.xml.sax.HandlerBase&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
