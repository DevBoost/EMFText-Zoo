<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:expressions="http://www.emftext.org/java/expressions" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:operators="http://www.emftext.org/java/operators" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:statements="http://www.emftext.org/java/statements" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/expressions ../../../java.ecore#/5 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/operators ../../../java.ecore#/12 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/statements ../../../java.ecore#/15 http://www.emftext.org/java/types ../../../java.ecore#/16" name="InputSource.java">
  <comments>// SAX input source.</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// No warranty; no copyright -- use this as you will.</comments>
  <comments>// $Id: InputSource.java,v 1.1.24.1 2004/05/01 08:34:39 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/Reader.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>io</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Class" name="InputSource">
    <members xsi:type="members:Constructor" name="InputSource">
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Zero-argument default constructor.&#xA;     *&#xA;     * @see #setPublicId&#xA;     * @see #setSystemId&#xA;     * @see #setByteStream&#xA;     * @see #setCharacterStream&#xA;     * @see #setEncoding&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="InputSource">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.6">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.1/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a new input source with a system identifier.&#xA;     *&#xA;     * &lt;p>Applications may use setPublicId to include a &#xA;     * public identifier as well, or setEncoding to specify&#xA;     * the character encoding, if known.&lt;/p>&#xA;     *&#xA;     * &lt;p>If the system identifier is a URL, it must be fully&#xA;     * resolved (it may not be a relative URL).&lt;/p>&#xA;     *&#xA;     * @param systemId The system identifier (URI).&#xA;     * @see #setPublicId&#xA;     * @see #setSystemId&#xA;     * @see #setByteStream&#xA;     * @see #setEncoding&#xA;     * @see #setCharacterStream&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="InputSource">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.8">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.2/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="byteStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a new input source with a byte stream.&#xA;     *&#xA;     * &lt;p>Application writers should use setSystemId() to provide a base &#xA;     * for resolving relative URIs, may use setPublicId to include a &#xA;     * public identifier, and may use setEncoding to specify the object's&#xA;     * character encoding.&lt;/p>&#xA;     *&#xA;     * @param byteStream The raw byte stream containing the document.&#xA;     * @see #setPublicId&#xA;     * @see #setSystemId&#xA;     * @see #setEncoding&#xA;     * @see #setByteStream&#xA;     * @see #setCharacterStream&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Constructor" name="InputSource">
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="references:MethodCall" target="//@classifiers.0/@members.12">
          <arguments xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.3/@parameters.0"/>
        </expression>
      </statements>
      <parameters xsi:type="parameters:OrdinaryParameter" name="characterStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a new input source with a character stream.&#xA;     *&#xA;     * &lt;p>Application writers should use setSystemId() to provide a base &#xA;     * for resolving relative URIs, and may use setPublicId to include a &#xA;     * public identifier.&lt;/p>&#xA;     *&#xA;     * &lt;p>The character stream shall not include a byte order mark.&lt;/p>&#xA;     *&#xA;     * @see #setPublicId&#xA;     * @see #setSystemId&#xA;     * @see #setByteStream&#xA;     * @see #setCharacterStream&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:ClassMethod" name="setPublicId">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the public identifier for this input source.&#xA;     *&#xA;     * &lt;p>The public identifier is always optional: if the application&#xA;     * writer includes one, it will be provided as part of the&#xA;     * location information.&lt;/p>&#xA;     *&#xA;     * @param publicId The public identifier as a string.&#xA;     * @see #getPublicId&#xA;     * @see org.xml.sax.Locator#getPublicId&#xA;     * @see org.xml.sax.SAXParseException#getPublicId&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.4/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getPublicId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the public identifier for this input source.&#xA;     *&#xA;     * @return The public identifier, or null if none was supplied.&#xA;     * @see #setPublicId&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.14"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setSystemId">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the system identifier for this input source.&#xA;     *&#xA;     * &lt;p>The system identifier is optional if there is a byte stream&#xA;     * or a character stream, but it is still useful to provide one,&#xA;     * since the application can use it to resolve relative URIs&#xA;     * and can include it in error messages and warnings (the parser&#xA;     * will attempt to open a connection to the URI only if&#xA;     * there is no byte stream or character stream specified).&lt;/p>&#xA;     *&#xA;     * &lt;p>If the application knows the character encoding of the&#xA;     * object pointed to by the system identifier, it can register&#xA;     * the encoding using the setEncoding method.&lt;/p>&#xA;     *&#xA;     * &lt;p>If the system identifier is a URL, it must be fully&#xA;     * resolved (it may not be a relative URL).&lt;/p>&#xA;     *&#xA;     * @param systemId The system identifier as a string.&#xA;     * @see #setEncoding&#xA;     * @see #getSystemId&#xA;     * @see org.xml.sax.Locator#getSystemId&#xA;     * @see org.xml.sax.SAXParseException#getSystemId&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.6/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getSystemId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the system identifier for this input source.&#xA;     *&#xA;     * &lt;p>The getEncoding method will return the character encoding&#xA;     * of the object pointed to, or null if unknown.&lt;/p>&#xA;     *&#xA;     * &lt;p>If the system ID is a URL, it will be fully resolved.&lt;/p>&#xA;     *&#xA;     * @return The system identifier, or null if none was supplied.&#xA;     * @see #setSystemId&#xA;     * @see #getEncoding&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.15"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setByteStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="byteStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the byte stream for this input source.&#xA;     *&#xA;     * &lt;p>The SAX parser will ignore this if there is also a character&#xA;     * stream specified, but it will use a byte stream in preference&#xA;     * to opening a URI connection itself.&lt;/p>&#xA;     *&#xA;     * &lt;p>If the application knows the character encoding of the&#xA;     * byte stream, it should set it with the setEncoding method.&lt;/p>&#xA;     *&#xA;     * @param byteStream A byte stream containing an XML document or&#xA;     *        other entity.&#xA;     * @see #setEncoding&#xA;     * @see #getByteStream&#xA;     * @see #getEncoding&#xA;     * @see java.io.InputStream&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.8/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getByteStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the byte stream for this input source.&#xA;     *&#xA;     * &lt;p>The getEncoding method will return the character&#xA;     * encoding for this byte stream, or null if unknown.&lt;/p>&#xA;     *&#xA;     * @return The byte stream, or null if none was supplied.&#xA;     * @see #getEncoding&#xA;     * @see #setByteStream&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.16"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setEncoding">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="encoding">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Set the character encoding, if known.&#xA;     *&#xA;     * &lt;p>The encoding must be a string acceptable for an&#xA;     * XML encoding declaration (see section 4.3.3 of the XML 1.0&#xA;     * recommendation).&lt;/p>&#xA;     *&#xA;     * &lt;p>This method has no effect when the application provides a&#xA;     * character stream.&lt;/p>&#xA;     *&#xA;     * @param encoding A string describing the character encoding.&#xA;     * @see #setSystemId&#xA;     * @see #setByteStream&#xA;     * @see #getEncoding&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.10/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the character encoding for a byte stream or URI.&#xA;     * This value will be ignored when the application provides a&#xA;     * character stream.&#xA;     *&#xA;     * @return The encoding, or null if none was supplied.&#xA;     * @see #setByteStream&#xA;     * @see #getSystemId&#xA;     * @see #getByteStream&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.17"/>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="setCharacterStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="characterStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the character stream for this input source.&#xA;     *&#xA;     * &lt;p>If there is a character stream specified, the SAX parser&#xA;     * will ignore any byte stream and will not attempt to open&#xA;     * a URI connection to the system identifier.&lt;/p>&#xA;     *&#xA;     * @param characterStream The character stream containing the&#xA;     *        XML document or other entity.&#xA;     * @see #getCharacterStream&#xA;     * @see java.io.Reader&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:ExpressionStatement">
        <expression xsi:type="expressions:AssignmentExpression">
          <child xsi:type="references:SelfReference">
            <next xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
            <self xsi:type="literals:This"/>
          </child>
          <assignmentOperator xsi:type="operators:Assignment"/>
          <value xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.12/@parameters.0"/>
        </expression>
      </statements>
    </members>
    <members xsi:type="members:ClassMethod" name="getCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Get the character stream for this input source.&#xA;     *&#xA;     * @return The character stream, or null if none was supplied.&#xA;     * @see #setCharacterStream&#xA;     */</comments>
      </annotationsAndModifiers>
      <statements xsi:type="statements:Return">
        <returnValue xsi:type="references:IdentifierReference" target="//@classifiers.0/@members.18"/>
      </statements>
    </members>
    <members xsi:type="members:Field" name="publicId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private">
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>// Internal state.</comments>
        <comments>////////////////////////////////////////////////////////////////////</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="systemId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="byteStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="encoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <members xsi:type="members:Field" name="characterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Private"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * A single input source for an XML entity.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>This class allows a SAX application to encapsulate information&#xA; * about an input source in a single object, which may include&#xA; * a public identifier, a system identifier, a byte stream (possibly&#xA; * with a specified encoding), and/or a character stream.&lt;/p>&#xA; *&#xA; * &lt;p>There are two places that the application can deliver an&#xA; * input source to the parser: as the argument to the Parser.parse&#xA; * method, or as the return value of the EntityResolver.resolveEntity&#xA; * method.&lt;/p>&#xA; *&#xA; * &lt;p>The SAX parser will use the InputSource object to determine how&#xA; * to read XML input.  If there is a character stream available, the&#xA; * parser will read that stream directly, disregarding any text&#xA; * encoding declaration found in that stream.&#xA; * If there is no character stream, but there is&#xA; * a byte stream, the parser will use that byte stream, using the&#xA; * encoding specified in the InputSource or else (if no encoding is&#xA; * specified) autodetecting the character encoding using an algorithm&#xA; * such as the one in the XML specification.  If neither a character&#xA; * stream nor a&#xA; * byte stream is available, the parser will attempt to open a URI&#xA; * connection to the resource identified by the system&#xA; * identifier.&lt;/p>&#xA; *&#xA; * &lt;p>An InputSource object belongs to the application: the SAX parser&#xA; * shall never modify it in any way (it may modify a copy if &#xA; * necessary).  However, standard processing of both byte and&#xA; * character streams is to close them on as part of end-of-parse cleanup,&#xA; * so applications should not attempt to re-use such streams after they&#xA; * have been handed to a parser.  &lt;/p>&#xA; *&#xA; * @since SAX 1.0&#xA; * @author David Megginson&#xA; * @version 2.0.1 (sax2r2)&#xA; * @see org.xml.sax.XMLReader#parse(org.xml.sax.InputSource)&#xA; * @see org.xml.sax.EntityResolver#resolveEntity&#xA; * @see java.io.InputStream&#xA; * @see java.io.Reader&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
