<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="ErrorHandler.java">
  <comments>// SAX error handler.</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// No warranty; no copyright -- use this as you will.</comments>
  <comments>// $Id: ErrorHandler.java,v 1.1.24.1 2004/05/01 08:34:39 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="ErrorHandler">
    <members xsi:type="members:InterfaceMethod" name="warning">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SAXParseException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a warning.&#xA;     *&#xA;     * &lt;p>SAX parsers will use this method to report conditions that&#xA;     * are not errors or fatal errors as defined by the XML&#xA;     * recommendation.  The default behaviour is to take no&#xA;     * action.&lt;/p>&#xA;     *&#xA;     * &lt;p>The SAX parser must continue to provide normal parsing events&#xA;     * after invoking this method: it should still be possible for the&#xA;     * application to process the document through to the end.&lt;/p>&#xA;     *&#xA;     * &lt;p>Filters may use this method to report other, non-XML warnings&#xA;     * as well.&lt;/p>&#xA;     *&#xA;     * @param exception The warning information encapsulated in a&#xA;     *                  SAX parse exception.&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @see org.xml.sax.SAXParseException &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="error">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SAXParseException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a recoverable error.&#xA;     *&#xA;     * &lt;p>This corresponds to the definition of &quot;error&quot; in section 1.2&#xA;     * of the W3C XML 1.0 Recommendation.  For example, a validating&#xA;     * parser would use this callback to report the violation of a&#xA;     * validity constraint.  The default behaviour is to take no&#xA;     * action.&lt;/p>&#xA;     *&#xA;     * &lt;p>The SAX parser must continue to provide normal parsing&#xA;     * events after invoking this method: it should still be possible&#xA;     * for the application to process the document through to the end.&#xA;     * If the application cannot do so, then the parser should report&#xA;     * a fatal error even if the XML recommendation does not require&#xA;     * it to do so.&lt;/p>&#xA;     *&#xA;     * &lt;p>Filters may use this method to report other, non-XML errors&#xA;     * as well.&lt;/p>&#xA;     *&#xA;     * @param exception The error information encapsulated in a&#xA;     *                  SAX parse exception.&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @see org.xml.sax.SAXParseException &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="fatalError">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="exception">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="SAXParseException.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a non-recoverable error.&#xA;     *&#xA;     * &lt;p>&lt;strong>There is an apparent contradiction between the&#xA;     * documentation for this method and the documentation for {@link&#xA;     * org.xml.sax.ContentHandler#endDocument}.  Until this ambiguity&#xA;     * is resolved in a future major release, clients should make no&#xA;     * assumptions about whether endDocument() will or will not be&#xA;     * invoked when the parser has reported a fatalError() or thrown&#xA;     * an exception.&lt;/strong>&lt;/p>&#xA;     *&#xA;     * &lt;p>This corresponds to the definition of &quot;fatal error&quot; in&#xA;     * section 1.2 of the W3C XML 1.0 Recommendation.  For example, a&#xA;     * parser would use this callback to report the violation of a&#xA;     * well-formedness constraint.&lt;/p>&#xA;     *&#xA;     * &lt;p>The application must assume that the document is unusable&#xA;     * after the parser has invoked this method, and should continue&#xA;     * (if at all) only for the sake of collecting additional error&#xA;     * messages: in fact, SAX parsers are free to stop reporting any&#xA;     * other events once this method has been invoked.&lt;/p>&#xA;     *&#xA;     * @param exception The error information encapsulated in a&#xA;     *                  SAX parse exception.  &#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @see org.xml.sax.SAXParseException&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Basic interface for SAX error handlers.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>If a SAX application needs to implement customized error&#xA; * handling, it must implement this interface and then register an&#xA; * instance with the XML reader using the&#xA; * {@link org.xml.sax.XMLReader#setErrorHandler setErrorHandler}&#xA; * method.  The parser will then report all errors and warnings&#xA; * through this interface.&lt;/p>&#xA; *&#xA; * &lt;p>&lt;strong>WARNING:&lt;/strong> If an application does &lt;em>not&lt;/em>&#xA; * register an ErrorHandler, XML parsing errors will go unreported,&#xA; * except that &lt;em>SAXParseException&lt;/em>s will be thrown for fatal errors.&#xA; * In order to detect validity errors, an ErrorHandler that does something&#xA; * with {@link #error error()} calls must be registered.&lt;/p>&#xA; *&#xA; * &lt;p>For XML processing errors, a SAX driver must use this interface &#xA; * in preference to throwing an exception: it is up to the application &#xA; * to decide whether to throw an exception for different types of &#xA; * errors and warnings.  Note, however, that there is no requirement that &#xA; * the parser continue to report additional errors after a call to &#xA; * {@link #fatalError fatalError}.  In other words, a SAX driver class &#xA; * may throw an exception after reporting any fatalError.&#xA; * Also parsers may throw appropriate exceptions for non-XML errors.&#xA; * For example, {@link XMLReader#parse XMLReader.parse()} would throw&#xA; * an IOException for errors accessing entities or the document.&lt;/p>&#xA; *&#xA; * @since SAX 1.0&#xA; * @author David Megginson&#xA; * @version 2.0.1+ (sax2r3pre1)&#xA; * @see org.xml.sax.XMLReader#setErrorHandler&#xA; * @see org.xml.sax.SAXParseException &#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
