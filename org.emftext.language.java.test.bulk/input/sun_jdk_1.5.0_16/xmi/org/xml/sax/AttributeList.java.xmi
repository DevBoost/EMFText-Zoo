<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="AttributeList.java">
  <comments>// SAX Attribute List Interface.</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// No warranty; no copyright -- use this as you will.</comments>
  <comments>// $Id: AttributeList.java,v 1.2.22.1 2004/05/01 08:34:38 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="AttributeList">
    <members xsi:type="members:InterfaceMethod" name="getLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>// Iteration methods.</comments>
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Return the number of attributes in this list.&#xA;     *&#xA;     * &lt;p>The SAX parser may provide attributes in any&#xA;     * arbitrary order, regardless of the order in which they were&#xA;     * declared or specified.  The number of attributes may be&#xA;     * zero.&lt;/p>&#xA;     *&#xA;     * @return The number of attributes in the list.  &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the name of an attribute in this list (by position).&#xA;     *&#xA;     * &lt;p>The names must be unique: the SAX parser shall not include the&#xA;     * same attribute twice.  Attributes without values (those declared&#xA;     * #IMPLIED without a value specified in the start tag) will be&#xA;     * omitted from the list.&lt;/p>&#xA;     *&#xA;     * &lt;p>If the attribute name has a namespace prefix, the prefix&#xA;     * will still be attached.&lt;/p>&#xA;     *&#xA;     * @param i The index of the attribute in the list (starting at 0).&#xA;     * @return The name of the indexed attribute, or null&#xA;     *         if the index is out of range.&#xA;     * @see #getLength &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the type of an attribute in the list (by position).&#xA;     *&#xA;     * &lt;p>The attribute type is one of the strings &quot;CDATA&quot;, &quot;ID&quot;,&#xA;     * &quot;IDREF&quot;, &quot;IDREFS&quot;, &quot;NMTOKEN&quot;, &quot;NMTOKENS&quot;, &quot;ENTITY&quot;, &quot;ENTITIES&quot;,&#xA;     * or &quot;NOTATION&quot; (always in upper case).&lt;/p>&#xA;     *&#xA;     * &lt;p>If the parser has not read a declaration for the attribute,&#xA;     * or if the parser does not report attribute types, then it must&#xA;     * return the value &quot;CDATA&quot; as stated in the XML 1.0 Recommentation&#xA;     * (clause 3.3.3, &quot;Attribute-Value Normalization&quot;).&lt;/p>&#xA;     *&#xA;     * &lt;p>For an enumerated attribute that is not a notation, the&#xA;     * parser will report the type as &quot;NMTOKEN&quot;.&lt;/p>&#xA;     *&#xA;     * @param i The index of the attribute in the list (starting at 0).&#xA;     * @return The attribute type as a string, or&#xA;     *         null if the index is out of range.&#xA;     * @see #getLength &#xA;     * @see #getType(java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="i">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the value of an attribute in the list (by position).&#xA;     *&#xA;     * &lt;p>If the attribute value is a list of tokens (IDREFS,&#xA;     * ENTITIES, or NMTOKENS), the tokens will be concatenated&#xA;     * into a single string separated by whitespace.&lt;/p>&#xA;     *&#xA;     * @param i The index of the attribute in the list (starting at 0).&#xA;     * @return The attribute value as a string, or&#xA;     *         null if the index is out of range.&#xA;     * @see #getLength&#xA;     * @see #getValue(java.lang.String)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>// Lookup methods.</comments>
        <comments>////////////////////////////////////////////////////////////////////</comments>
        <comments>/**&#xA;     * Return the type of an attribute in the list (by name).&#xA;     *&#xA;     * &lt;p>The return value is the same as the return value for&#xA;     * getType(int).&lt;/p>&#xA;     *&#xA;     * &lt;p>If the attribute name has a namespace prefix in the document,&#xA;     * the application must include the prefix here.&lt;/p>&#xA;     *&#xA;     * @param name The name of the attribute.&#xA;     * @return The attribute type as a string, or null if no&#xA;     *         such attribute exists.&#xA;     * @see #getType(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Return the value of an attribute in the list (by name).&#xA;     *&#xA;     * &lt;p>The return value is the same as the return value for&#xA;     * getValue(int).&lt;/p>&#xA;     *&#xA;     * &lt;p>If the attribute name has a namespace prefix in the document,&#xA;     * the application must include the prefix here.&lt;/p>&#xA;     *&#xA;     * @param name the name of the attribute to return&#xA;     * @return The attribute value as a string, or null if&#xA;     *         no such attribute exists.&#xA;     * @see #getValue(int)&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Interface for an element's attribute specifications.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>This is the original SAX1 interface for reporting an element's&#xA; * attributes.  Unlike the new {@link org.xml.sax.Attributes Attributes}&#xA; * interface, it does not support Namespace-related information.&lt;/p>&#xA; *&#xA; * &lt;p>When an attribute list is supplied as part of a&#xA; * {@link org.xml.sax.DocumentHandler#startElement startElement}&#xA; * event, the list will return valid results only during the&#xA; * scope of the event; once the event handler returns control&#xA; * to the parser, the attribute list is invalid.  To save a&#xA; * persistent copy of the attribute list, use the SAX1&#xA; * {@link org.xml.sax.helpers.AttributeListImpl AttributeListImpl}&#xA; * helper class.&lt;/p>&#xA; *&#xA; * &lt;p>An attribute list includes only attributes that have been&#xA; * specified or defaulted: #IMPLIED attributes will not be included.&lt;/p>&#xA; *&#xA; * &lt;p>There are two ways for the SAX application to obtain information&#xA; * from the AttributeList.  First, it can iterate through the entire&#xA; * list:&lt;/p>&#xA; *&#xA; * &lt;pre>&#xA; * public void startElement (String name, AttributeList atts) {&#xA; *   for (int i = 0; i &lt; atts.getLength(); i++) {&#xA; *     String name = atts.getName(i);&#xA; *     String type = atts.getType(i);&#xA; *     String value = atts.getValue(i);&#xA; *     [...]&#xA; *   }&#xA; * }&#xA; * &lt;/pre>&#xA; *&#xA; * &lt;p>(Note that the result of getLength() will be zero if there&#xA; * are no attributes.)&#xA; *&#xA; * &lt;p>As an alternative, the application can request the value or&#xA; * type of specific attributes:&lt;/p>&#xA; *&#xA; * &lt;pre>&#xA; * public void startElement (String name, AttributeList atts) {&#xA; *   String identifier = atts.getValue(&quot;id&quot;);&#xA; *   String label = atts.getValue(&quot;label&quot;);&#xA; *   [...]&#xA; * }&#xA; * &lt;/pre>&#xA; *&#xA; * @deprecated This interface has been replaced by the SAX2&#xA; *             {@link org.xml.sax.Attributes Attributes}&#xA; *             interface, which includes Namespace support.&#xA; * @since SAX 1.0&#xA; * @author David Megginson&#xA; * @version 2.0.1 (sax2r2)&#xA; * @see org.xml.sax.DocumentHandler#startElement startElement&#xA; * @see org.xml.sax.helpers.AttributeListImpl AttributeListImpl&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
