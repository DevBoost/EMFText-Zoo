<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DTDHandler.java">
  <comments>// SAX DTD handler.</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// No warranty; no copyright -- use this as you will.</comments>
  <comments>// $Id: DTDHandler.java,v 1.1.24.1 2004/05/01 08:34:39 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DTDHandler">
    <members xsi:type="members:InterfaceMethod" name="notationDecl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of a notation declaration event.&#xA;     *&#xA;     * &lt;p>It is up to the application to record the notation for later&#xA;     * reference, if necessary;&#xA;     * notations may appear as attribute values and in unparsed entity&#xA;     * declarations, and are sometime used with processing instruction&#xA;     * target names.&lt;/p>&#xA;     *&#xA;     * &lt;p>At least one of publicId and systemId must be non-null.&#xA;     * If a system identifier is present, and it is a URL, the SAX&#xA;     * parser must resolve it fully before passing it to the&#xA;     * application through this event.&lt;/p>&#xA;     *&#xA;     * &lt;p>There is no guarantee that the notation declaration will be&#xA;     * reported before any unparsed entities that use it.&lt;/p>&#xA;     *&#xA;     * @param name The notation name.&#xA;     * @param publicId The notation's public identifier, or null if&#xA;     *        none was given.&#xA;     * @param systemId The notation's system identifier, or null if&#xA;     *        none was given.&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @see #unparsedEntityDecl&#xA;     * @see org.xml.sax.Attributes&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="unparsedEntityDecl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="notationName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Receive notification of an unparsed entity declaration event.&#xA;     *&#xA;     * &lt;p>Note that the notation name corresponds to a notation&#xA;     * reported by the {@link #notationDecl notationDecl} event.  &#xA;     * It is up to the application to record the entity for later &#xA;     * reference, if necessary;&#xA;     * unparsed entities may appear as attribute values. &#xA;     * &lt;/p>&#xA;     *&#xA;     * &lt;p>If the system identifier is a URL, the parser must resolve it&#xA;     * fully before passing it to the application.&lt;/p>&#xA;     *&#xA;     * @exception org.xml.sax.SAXException Any SAX exception, possibly&#xA;     *            wrapping another exception.&#xA;     * @param name The unparsed entity's name.&#xA;     * @param publicId The entity's public identifier, or null if none&#xA;     *        was given.&#xA;     * @param systemId The entity's system identifier.&#xA;     * @param notationName The name of the associated notation.&#xA;     * @see #notationDecl&#xA;     * @see org.xml.sax.Attributes&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Receive notification of basic DTD-related events.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>If a SAX application needs information about notations and&#xA; * unparsed entities, then the application implements this &#xA; * interface and registers an instance with the SAX parser using &#xA; * the parser's setDTDHandler method.  The parser uses the &#xA; * instance to report notation and unparsed entity declarations to &#xA; * the application.&lt;/p>&#xA; *&#xA; * &lt;p>Note that this interface includes only those DTD events that&#xA; * the XML recommendation &lt;em>requires&lt;/em> processors to report:&#xA; * notation and unparsed entity declarations.&lt;/p>&#xA; *&#xA; * &lt;p>The SAX parser may report these events in any order, regardless&#xA; * of the order in which the notations and unparsed entities were&#xA; * declared; however, all DTD events must be reported after the&#xA; * document handler's startDocument event, and before the first&#xA; * startElement event.&#xA; * (If the {@link org.xml.sax.ext.LexicalHandler LexicalHandler} is&#xA; * used, these events must also be reported before the endDTD event.)&#xA; * &lt;/p>&#xA; *&#xA; * &lt;p>It is up to the application to store the information for &#xA; * future use (perhaps in a hash table or object tree).&#xA; * If the application encounters attributes of type &quot;NOTATION&quot;,&#xA; * &quot;ENTITY&quot;, or &quot;ENTITIES&quot;, it can use the information that it&#xA; * obtained through this interface to find the entity and/or&#xA; * notation corresponding with the attribute value.&lt;/p>&#xA; *&#xA; * @since SAX 1.0&#xA; * @author David Megginson&#xA; * @version 2.0.1 (sax2r2)&#xA; * @see org.xml.sax.XMLReader#setDTDHandler&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
