<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="DeclHandler.java">
  <comments>// DeclHandler.java - Optional handler for DTD declaration events.</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// Public Domain: no warranty.</comments>
  <comments>// $Id: DeclHandler.java,v 1.1.24.1 2004/05/01 08:34:43 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <namespaces>ext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DeclHandler">
    <members xsi:type="members:InterfaceMethod" name="elementDecl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="model">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report an element type declaration.&#xA;     *&#xA;     * &lt;p>The content model will consist of the string &quot;EMPTY&quot;, the&#xA;     * string &quot;ANY&quot;, or a parenthesised group, optionally followed&#xA;     * by an occurrence indicator.  The model will be normalized so&#xA;     * that all parameter entities are fully resolved and all whitespace &#xA;     * is removed,and will include the enclosing parentheses.  Other&#xA;     * normalization (such as removing redundant parentheses or &#xA;     * simplifying occurrence indicators) is at the discretion of the&#xA;     * parser.&lt;/p>&#xA;     *&#xA;     * @param name The element type name.&#xA;     * @param model The content model as a normalized string.&#xA;     * @exception SAXException The application may raise an exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="attributeDecl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="eName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="aName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mode">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report an attribute type declaration.&#xA;     *&#xA;     * &lt;p>Only the effective (first) declaration for an attribute will&#xA;     * be reported.  The type will be one of the strings &quot;CDATA&quot;,&#xA;     * &quot;ID&quot;, &quot;IDREF&quot;, &quot;IDREFS&quot;, &quot;NMTOKEN&quot;, &quot;NMTOKENS&quot;, &quot;ENTITY&quot;,&#xA;     * &quot;ENTITIES&quot;, a parenthesized token group with &#xA;     * the separator &quot;|&quot; and all whitespace removed, or the word&#xA;     * &quot;NOTATION&quot; followed by a space followed by a parenthesized&#xA;     * token group with all whitespace removed.&lt;/p>&#xA;     *&#xA;     * &lt;p>The value will be the value as reported to applications,&#xA;     * appropriately normalized and with entity and character&#xA;     * references expanded.  &lt;/p>&#xA;     *&#xA;     * @param eName The name of the associated element.&#xA;     * @param aName The name of the attribute.&#xA;     * @param type A string representing the attribute type.&#xA;     * @param mode A string representing the attribute defaulting mode&#xA;     *        (&quot;#IMPLIED&quot;, &quot;#REQUIRED&quot;, or &quot;#FIXED&quot;) or null if&#xA;     *        none of these applies.&#xA;     * @param value A string representing the attribute's default value,&#xA;     *        or null if there is none.&#xA;     * @exception SAXException The application may raise an exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="internalEntityDecl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report an internal entity declaration.&#xA;     *&#xA;     * &lt;p>Only the effective (first) declaration for each entity&#xA;     * will be reported.  All parameter entities in the value&#xA;     * will be expanded, but general entities will not.&lt;/p>&#xA;     *&#xA;     * @param name The name of the entity.  If it is a parameter&#xA;     *        entity, the name will begin with '%'.&#xA;     * @param value The replacement text of the entity.&#xA;     * @exception SAXException The application may raise an exception.&#xA;     * @see #externalEntityDecl&#xA;     * @see org.xml.sax.DTDHandler#unparsedEntityDecl&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="externalEntityDecl">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report a parsed external entity declaration.&#xA;     *&#xA;     * &lt;p>Only the effective (first) declaration for each entity&#xA;     * will be reported.&lt;/p>&#xA;     *&#xA;     * &lt;p>If the system identifier is a URL, the parser must resolve it&#xA;     * fully before passing it to the application.&lt;/p>&#xA;     *&#xA;     * @param name The name of the entity.  If it is a parameter&#xA;     *        entity, the name will begin with '%'.&#xA;     * @param publicId The entity's public identifier, or null if none&#xA;     *        was given.&#xA;     * @param systemId The entity's system identifier.&#xA;     * @exception SAXException The application may raise an exception.&#xA;     * @see #internalEntityDecl&#xA;     * @see org.xml.sax.DTDHandler#unparsedEntityDecl&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * SAX2 extension handler for DTD declaration events.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>This is an optional extension handler for SAX2 to provide more&#xA; * complete information about DTD declarations in an XML document.&#xA; * XML readers are not required to recognize this handler, and it&#xA; * is not part of core-only SAX2 distributions.&lt;/p>&#xA; *&#xA; * &lt;p>Note that data-related DTD declarations (unparsed entities and&#xA; * notations) are already reported through the {@link&#xA; * org.xml.sax.DTDHandler DTDHandler} interface.&lt;/p>&#xA; *&#xA; * &lt;p>If you are using the declaration handler together with a lexical&#xA; * handler, all of the events will occur between the&#xA; * {@link org.xml.sax.ext.LexicalHandler#startDTD startDTD} and the&#xA; * {@link org.xml.sax.ext.LexicalHandler#endDTD endDTD} events.&lt;/p>&#xA; *&#xA; * &lt;p>To set the DeclHandler for an XML reader, use the&#xA; * {@link org.xml.sax.XMLReader#setProperty setProperty} method&#xA; * with the property name&#xA; * &lt;code>http://xml.org/sax/properties/declaration-handler&lt;/code>&#xA; * and an object implementing this interface (or null) as the value.&#xA; * If the reader does not report declaration events, it will throw a&#xA; * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}&#xA; * when you attempt to register the handler.&lt;/p>&#xA; *&#xA; * @since SAX 2.0 (extensions 1.0)&#xA; * @author David Megginson&#xA; * @version 2.0.1 (sax2r2)&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
