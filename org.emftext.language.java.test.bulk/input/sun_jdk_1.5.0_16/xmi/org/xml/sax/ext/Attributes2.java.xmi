<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Attributes2.java">
  <comments>// Attributes2.java - extended Attributes</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// Public Domain: no warranty.</comments>
  <comments>// $Id: Attributes2.java,v 1.1.2.1 2004/05/01 08:34:43 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <namespaces>ext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Attributes.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="Attributes2">
    <members xsi:type="members:InterfaceMethod" name="isDeclared">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns false unless the attribute was declared in the DTD.&#xA;     * This helps distinguish two kinds of attributes that SAX reports&#xA;     * as CDATA:  ones that were declared (and hence are usually valid),&#xA;     * and those that were not (and which are never valid).&#xA;     *&#xA;     * @param index The attribute index (zero-based).&#xA;     * @return true if the attribute was declared in the DTD,&#xA;     *&#x9;&#x9;false otherwise.&#xA;     * @exception java.lang.ArrayIndexOutOfBoundsException When the&#xA;     *            supplied index does not identify an attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isDeclared">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns false unless the attribute was declared in the DTD.&#xA;     * This helps distinguish two kinds of attributes that SAX reports&#xA;     * as CDATA:  ones that were declared (and hence are usually valid),&#xA;     * and those that were not (and which are never valid).&#xA;     *&#xA;     * @param qName The XML qualified (prefixed) name.&#xA;     * @return true if the attribute was declared in the DTD,&#xA;     *&#x9;&#x9;false otherwise.&#xA;     * @exception java.lang.IllegalArgumentException When the&#xA;     *            supplied name does not identify an attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isDeclared">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns false unless the attribute was declared in the DTD.&#xA;     * This helps distinguish two kinds of attributes that SAX reports&#xA;     * as CDATA:  ones that were declared (and hence are usually valid),&#xA;     * and those that were not (and which are never valid).&#xA;     *&#xA;     * &lt;p>Remember that since DTDs do not &quot;understand&quot; namespaces, the&#xA;     * namespace URI associated with an attribute may not have come from&#xA;     * the DTD.  The declaration will have applied to the attribute's&#xA;     * &lt;em>qName&lt;/em>.&#xA;     *&#xA;     * @param uri The Namespace URI, or the empty string if&#xA;     *        the name has no Namespace URI.&#xA;     * @param localName The attribute's local name.&#xA;     * @return true if the attribute was declared in the DTD,&#xA;     *&#x9;&#x9;false otherwise.&#xA;     * @exception java.lang.IllegalArgumentException When the&#xA;     *            supplied names do not identify an attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSpecified">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true unless the attribute value was provided&#xA;     * by DTD defaulting.&#xA;     *&#xA;     * @param index The attribute index (zero-based).&#xA;     * @return true if the value was found in the XML text,&#xA;     *&#x9;&#x9;false if the value was provided by DTD defaulting.&#xA;     * @exception java.lang.ArrayIndexOutOfBoundsException When the&#xA;     *            supplied index does not identify an attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSpecified">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true unless the attribute value was provided&#xA;     * by DTD defaulting.&#xA;     *&#xA;     * &lt;p>Remember that since DTDs do not &quot;understand&quot; namespaces, the&#xA;     * namespace URI associated with an attribute may not have come from&#xA;     * the DTD.  The declaration will have applied to the attribute's&#xA;     * &lt;em>qName&lt;/em>.&#xA;     *&#xA;     * @param uri The Namespace URI, or the empty string if&#xA;     *        the name has no Namespace URI.&#xA;     * @param localName The attribute's local name.&#xA;     * @return true if the value was found in the XML text,&#xA;     *&#x9;&#x9;false if the value was provided by DTD defaulting.&#xA;     * @exception java.lang.IllegalArgumentException When the&#xA;     *            supplied names do not identify an attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isSpecified">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns true unless the attribute value was provided&#xA;     * by DTD defaulting.&#xA;     *&#xA;     * @param qName The XML qualified (prefixed) name.&#xA;     * @return true if the value was found in the XML text,&#xA;     *&#x9;&#x9;false if the value was provided by DTD defaulting.&#xA;     * @exception java.lang.IllegalArgumentException When the&#xA;     *            supplied name does not identify an attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * SAX2 extension to augment the per-attribute information&#xA; * provided though {@link Attributes}.&#xA; * If an implementation supports this extension, the attributes&#xA; * provided in {@link org.xml.sax.ContentHandler#startElement&#xA; * ContentHandler.startElement() } will implement this interface,&#xA; * and the &lt;em>http://xml.org/sax/features/use-attributes2&lt;/em>&#xA; * feature flag will have the value &lt;em>true&lt;/em>.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p> XMLReader implementations are not required to support this&#xA; * information, and it is not part of core-only SAX2 distributions.&lt;/p>&#xA; *&#xA; * &lt;p>Note that if an attribute was defaulted (&lt;em>!isSpecified()&lt;/em>)&#xA; * it will of necessity also have been declared (&lt;em>isDeclared()&lt;/em>)&#xA; * in the DTD.&#xA; * Similarly if an attribute's type is anything except CDATA, then it&#xA; * must have been declared.&#xA; * &lt;/p>&#xA; *&#xA; * @since SAX 2.0 (extensions 1.1 alpha)&#xA; * @author David Brownell&#xA; * @version TBS&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../Attributes.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
