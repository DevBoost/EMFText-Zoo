<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="LexicalHandler.java">
  <comments>// LexicalHandler.java - optional handler for lexical parse events.</comments>
  <comments>// http://www.saxproject.org</comments>
  <comments>// Public Domain: no warranty.</comments>
  <comments>// $Id: LexicalHandler.java,v 1.1.24.1 2004/05/01 08:34:43 jsuttor Exp $</comments>
  <namespaces>org</namespaces>
  <namespaces>xml</namespaces>
  <namespaces>sax</namespaces>
  <namespaces>ext</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>xml</namespaces>
    <namespaces>sax</namespaces>
    <classifier xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="LexicalHandler">
    <members xsi:type="members:InterfaceMethod" name="startDTD">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report the start of DTD declarations, if any.&#xA;     *&#xA;     * &lt;p>This method is intended to report the beginning of the&#xA;     * DOCTYPE declaration; if the document has no DOCTYPE declaration,&#xA;     * this method will not be invoked.&lt;/p>&#xA;     *&#xA;     * &lt;p>All declarations reported through &#xA;     * {@link org.xml.sax.DTDHandler DTDHandler} or&#xA;     * {@link org.xml.sax.ext.DeclHandler DeclHandler} events must appear&#xA;     * between the startDTD and {@link #endDTD endDTD} events.&#xA;     * Declarations are assumed to belong to the internal DTD subset&#xA;     * unless they appear between {@link #startEntity startEntity}&#xA;     * and {@link #endEntity endEntity} events.  Comments and&#xA;     * processing instructions from the DTD should also be reported&#xA;     * between the startDTD and endDTD events, in their original &#xA;     * order of (logical) occurrence; they are not required to&#xA;     * appear in their correct locations relative to DTDHandler&#xA;     * or DeclHandler events, however.&lt;/p>&#xA;     *&#xA;     * &lt;p>Note that the start/endDTD events will appear within&#xA;     * the start/endDocument events from ContentHandler and&#xA;     * before the first &#xA;     * {@link org.xml.sax.ContentHandler#startElement startElement}&#xA;     * event.&lt;/p>&#xA;     *&#xA;     * @param name The document type name.&#xA;     * @param publicId The declared public identifier for the&#xA;     *        external DTD subset, or null if none was declared.&#xA;     * @param systemId The declared system identifier for the&#xA;     *        external DTD subset, or null if none was declared.&#xA;     *        (Note that this is not resolved against the document&#xA;     *        base URI.)&#xA;     * @exception SAXException The application may raise an&#xA;     *            exception.&#xA;     * @see #endDTD&#xA;     * @see #startEntity&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="endDTD">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report the end of DTD declarations.&#xA;     *&#xA;     * &lt;p>This method is intended to report the end of the&#xA;     * DOCTYPE declaration; if the document has no DOCTYPE declaration,&#xA;     * this method will not be invoked.&lt;/p>&#xA;     *&#xA;     * @exception SAXException The application may raise an exception.&#xA;     * @see #startDTD&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="startEntity">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report the beginning of some internal and external XML entities.&#xA;     *&#xA;     * &lt;p>The reporting of parameter entities (including&#xA;     * the external DTD subset) is optional, and SAX2 drivers that&#xA;     * report LexicalHandler events may not implement it; you can use the&#xA;     * &lt;code&#xA;     * >http://xml.org/sax/features/lexical-handler/parameter-entities&lt;/code>&#xA;     * feature to query or control the reporting of parameter entities.&lt;/p>&#xA;     *&#xA;     * &lt;p>General entities are reported with their regular names,&#xA;     * parameter entities have '%' prepended to their names, and &#xA;     * the external DTD subset has the pseudo-entity name &quot;[dtd]&quot;.&lt;/p>&#xA;     *&#xA;     * &lt;p>When a SAX2 driver is providing these events, all other &#xA;     * events must be properly nested within start/end entity &#xA;     * events.  There is no additional requirement that events from &#xA;     * {@link org.xml.sax.ext.DeclHandler DeclHandler} or&#xA;     * {@link org.xml.sax.DTDHandler DTDHandler} be properly ordered.&lt;/p>&#xA;     *&#xA;     * &lt;p>Note that skipped entities will be reported through the&#xA;     * {@link org.xml.sax.ContentHandler#skippedEntity skippedEntity}&#xA;     * event, which is part of the ContentHandler interface.&lt;/p>&#xA;     *&#xA;     * &lt;p>Because of the streaming event model that SAX uses, some&#xA;     * entity boundaries cannot be reported under any &#xA;     * circumstances:&lt;/p>&#xA;     *&#xA;     * &lt;ul>&#xA;     * &lt;li>general entities within attribute values&lt;/li>&#xA;     * &lt;li>parameter entities within declarations&lt;/li>&#xA;     * &lt;/ul>&#xA;     *&#xA;     * &lt;p>These will be silently expanded, with no indication of where&#xA;     * the original entity boundaries were.&lt;/p>&#xA;     *&#xA;     * &lt;p>Note also that the boundaries of character references (which&#xA;     * are not really entities anyway) are not reported.&lt;/p>&#xA;     *&#xA;     * &lt;p>All start/endEntity events must be properly nested.&#xA;     *&#xA;     * @param name The name of the entity.  If it is a parameter&#xA;     *        entity, the name will begin with '%', and if it is the&#xA;     *        external DTD subset, it will be &quot;[dtd]&quot;.&#xA;     * @exception SAXException The application may raise an exception.&#xA;     * @see #endEntity&#xA;     * @see org.xml.sax.ext.DeclHandler#internalEntityDecl&#xA;     * @see org.xml.sax.ext.DeclHandler#externalEntityDecl &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="endEntity">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report the end of an entity.&#xA;     *&#xA;     * @param name The name of the entity that is ending.&#xA;     * @exception SAXException The application may raise an exception.&#xA;     * @see #startEntity&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="startCDATA">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report the start of a CDATA section.&#xA;     *&#xA;     * &lt;p>The contents of the CDATA section will be reported through&#xA;     * the regular {@link org.xml.sax.ContentHandler#characters&#xA;     * characters} event; this event is intended only to report&#xA;     * the boundary.&lt;/p>&#xA;     *&#xA;     * @exception SAXException The application may raise an exception.&#xA;     * @see #endCDATA&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="endCDATA">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report the end of a CDATA section.&#xA;     *&#xA;     * @exception SAXException The application may raise an exception.&#xA;     * @see #startCDATA&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="comment">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ch">
        <typeReference xsi:type="types:Char"/>
        <arrayDimensionsAfter/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="start">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="length">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../SAXException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Report an XML comment anywhere in the document.&#xA;     *&#xA;     * &lt;p>This callback will be used for comments inside or outside the&#xA;     * document element, including comments in the external DTD&#xA;     * subset (if read).  Comments in the DTD must be properly&#xA;     * nested inside start/endDTD and start/endEntity events (if&#xA;     * used).&lt;/p>&#xA;     *&#xA;     * @param ch An array holding the characters in the comment.&#xA;     * @param start The starting position in the array.&#xA;     * @param length The number of characters to use from the array.&#xA;     * @exception SAXException The application may raise an exception.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Abstract"/>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * SAX2 extension handler for lexical events.&#xA; *&#xA; * &lt;blockquote>&#xA; * &lt;em>This module, both source code and documentation, is in the&#xA; * Public Domain, and comes with &lt;strong>NO WARRANTY&lt;/strong>.&lt;/em>&#xA; * See &lt;a href='http://www.saxproject.org'>http://www.saxproject.org&lt;/a>&#xA; * for further information.&#xA; * &lt;/blockquote>&#xA; *&#xA; * &lt;p>This is an optional extension handler for SAX2 to provide&#xA; * lexical information about an XML document, such as comments&#xA; * and CDATA section boundaries.&#xA; * XML readers are not required to recognize this handler, and it&#xA; * is not part of core-only SAX2 distributions.&lt;/p>&#xA; *&#xA; * &lt;p>The events in the lexical handler apply to the entire document,&#xA; * not just to the document element, and all lexical handler events&#xA; * must appear between the content handler's startDocument and&#xA; * endDocument events.&lt;/p>&#xA; *&#xA; * &lt;p>To set the LexicalHandler for an XML reader, use the&#xA; * {@link org.xml.sax.XMLReader#setProperty setProperty} method&#xA; * with the property name&#xA; * &lt;code>http://xml.org/sax/properties/lexical-handler&lt;/code>&#xA; * and an object implementing this interface (or null) as the value.&#xA; * If the reader does not report lexical events, it will throw a&#xA; * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}&#xA; * when you attempt to register the handler.&lt;/p>&#xA; *&#xA; * @since SAX 2.0 (extensions 1.0)&#xA; * @author David Megginson&#xA; * @version 2.0.1 (sax2r2)&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
