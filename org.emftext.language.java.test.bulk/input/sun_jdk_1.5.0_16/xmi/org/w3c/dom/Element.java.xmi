<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Element.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Element">
    <members xsi:type="members:InterfaceMethod" name="getTagName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of the element. If &lt;code>Node.localName&lt;/code> is different &#xA;     * from &lt;code>null&lt;/code>, this attribute is a qualified name. For &#xA;     * example, in: &#xA;     * &lt;pre> &amp;lt;elementExample id=&quot;demo&quot;&amp;gt; ... &#xA;     * &amp;lt;/elementExample&amp;gt; , &lt;/pre>&#xA;     *  &lt;code>tagName&lt;/code> has the value &#xA;     * &lt;code>&quot;elementExample&quot;&lt;/code>. Note that this is case-preserving in &#xA;     * XML, as are all of the operations of the DOM. The HTML DOM returns &#xA;     * the &lt;code>tagName&lt;/code> of an HTML element in the canonical &#xA;     * uppercase form, regardless of the case in the source HTML document.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttribute">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves an attribute value by name.&#xA;     * @param name The name of the attribute to retrieve.&#xA;     * @return The &lt;code>Attr&lt;/code> value as a string, or the empty string &#xA;     *   if that attribute does not have a specified or default value.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a new attribute. If an attribute with that name is already present &#xA;     * in the element, its value is changed to be that of the value &#xA;     * parameter. This value is a simple string; it is not parsed as it is &#xA;     * being set. So any markup (such as syntax to be recognized as an &#xA;     * entity reference) is treated as literal text, and needs to be &#xA;     * appropriately escaped by the implementation when it is written out. &#xA;     * In order to assign an attribute value that contains entity &#xA;     * references, the user must create an &lt;code>Attr&lt;/code> node plus any &#xA;     * &lt;code>Text&lt;/code> and &lt;code>EntityReference&lt;/code> nodes, build the &#xA;     * appropriate subtree, and use &lt;code>setAttributeNode&lt;/code> to assign &#xA;     * it as the value of an attribute.&#xA;     * &lt;br>To set an attribute with a qualified name and namespace URI, use &#xA;     * the &lt;code>setAttributeNS&lt;/code> method.&#xA;     * @param name The name of the attribute to create or alter.&#xA;     * @param value Value to set in string form.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the specified name is not an XML &#xA;     *   name according to the XML version in use specified in the &#xA;     *   &lt;code>Document.xmlVersion&lt;/code> attribute.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes an attribute by name. If a default value for the removed &#xA;     * attribute is defined in the DTD, a new attribute immediately appears &#xA;     * with the default value as well as the corresponding namespace URI, &#xA;     * local name, and prefix when applicable. The implementation may handle &#xA;     * default values from other schemas similarly but applications should &#xA;     * use &lt;code>Document.normalizeDocument()&lt;/code> to guarantee this &#xA;     * information is up-to-date.&#xA;     * &lt;br>If no attribute with this name is found, this method has no effect.&#xA;     * &lt;br>To remove an attribute by local name and namespace URI, use the &#xA;     * &lt;code>removeAttributeNS&lt;/code> method.&#xA;     * @param name The name of the attribute to remove.&#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves an attribute node by name.&#xA;     * &lt;br>To retrieve an attribute node by qualified name and namespace URI, &#xA;     * use the &lt;code>getAttributeNodeNS&lt;/code> method.&#xA;     * @param name The name (&lt;code>nodeName&lt;/code>) of the attribute to &#xA;     *   retrieve.&#xA;     * @return The &lt;code>Attr&lt;/code> node with the specified name (&#xA;     *   &lt;code>nodeName&lt;/code>) or &lt;code>null&lt;/code> if there is no such &#xA;     *   attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttributeNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAttr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a new attribute node. If an attribute with that name (&#xA;     * &lt;code>nodeName&lt;/code>) is already present in the element, it is &#xA;     * replaced by the new one. Replacing an attribute node by itself has no &#xA;     * effect.&#xA;     * &lt;br>To add a new attribute node with a qualified name and namespace &#xA;     * URI, use the &lt;code>setAttributeNodeNS&lt;/code> method.&#xA;     * @param newAttr The &lt;code>Attr&lt;/code> node to add to the attribute list.&#xA;     * @return If the &lt;code>newAttr&lt;/code> attribute replaces an existing &#xA;     *   attribute, the replaced &lt;code>Attr&lt;/code> node is returned, &#xA;     *   otherwise &lt;code>null&lt;/code> is returned.&#xA;     * @exception DOMException&#xA;     *   WRONG_DOCUMENT_ERR: Raised if &lt;code>newAttr&lt;/code> was created from a &#xA;     *   different document than the one that created the element.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>INUSE_ATTRIBUTE_ERR: Raised if &lt;code>newAttr&lt;/code> is already an &#xA;     *   attribute of another &lt;code>Element&lt;/code> object. The DOM user must &#xA;     *   explicitly clone &lt;code>Attr&lt;/code> nodes to re-use them in other &#xA;     *   elements.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttributeNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="oldAttr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes the specified attribute node. If a default value for the &#xA;     * removed &lt;code>Attr&lt;/code> node is defined in the DTD, a new node &#xA;     * immediately appears with the default value as well as the &#xA;     * corresponding namespace URI, local name, and prefix when applicable. &#xA;     * The implementation may handle default values from other schemas &#xA;     * similarly but applications should use &#xA;     * &lt;code>Document.normalizeDocument()&lt;/code> to guarantee this &#xA;     * information is up-to-date.&#xA;     * @param oldAttr The &lt;code>Attr&lt;/code> node to remove from the attribute &#xA;     *   list.&#xA;     * @return The &lt;code>Attr&lt;/code> node that was removed.&#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>NOT_FOUND_ERR: Raised if &lt;code>oldAttr&lt;/code> is not an attribute &#xA;     *   of the element.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getElementsByTagName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="NodeList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>NodeList&lt;/code> of all descendant &lt;code>Elements&lt;/code> &#xA;     * with a given tag name, in document order.&#xA;     * @param name The name of the tag to match on. The special value &quot;*&quot; &#xA;     *   matches all tags.&#xA;     * @return A list of matching &lt;code>Element&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves an attribute value by local name and namespace URI.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value &lt;code>null&lt;/code> as the &#xA;     * &lt;code>namespaceURI&lt;/code> parameter for methods if they wish to have &#xA;     * no namespace.&#xA;     * @param namespaceURI The namespace URI of the attribute to retrieve.&#xA;     * @param localName The local name of the attribute to retrieve.&#xA;     * @return The &lt;code>Attr&lt;/code> value as a string, or the empty string &#xA;     *   if that attribute does not have a specified or default value.&#xA;     * @exception DOMException&#xA;     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &lt;code>&quot;XML&quot;&lt;/code> and the language exposed &#xA;     *   through the Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttributeNS">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qualifiedName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a new attribute. If an attribute with the same local name and &#xA;     * namespace URI is already present on the element, its prefix is &#xA;     * changed to be the prefix part of the &lt;code>qualifiedName&lt;/code>, and &#xA;     * its value is changed to be the &lt;code>value&lt;/code> parameter. This &#xA;     * value is a simple string; it is not parsed as it is being set. So any &#xA;     * markup (such as syntax to be recognized as an entity reference) is &#xA;     * treated as literal text, and needs to be appropriately escaped by the &#xA;     * implementation when it is written out. In order to assign an &#xA;     * attribute value that contains entity references, the user must create &#xA;     * an &lt;code>Attr&lt;/code> node plus any &lt;code>Text&lt;/code> and &#xA;     * &lt;code>EntityReference&lt;/code> nodes, build the appropriate subtree, &#xA;     * and use &lt;code>setAttributeNodeNS&lt;/code> or &#xA;     * &lt;code>setAttributeNode&lt;/code> to assign it as the value of an &#xA;     * attribute.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value &lt;code>null&lt;/code> as the &#xA;     * &lt;code>namespaceURI&lt;/code> parameter for methods if they wish to have &#xA;     * no namespace.&#xA;     * @param namespaceURI The namespace URI of the attribute to create or &#xA;     *   alter.&#xA;     * @param qualifiedName The qualified name of the attribute to create or &#xA;     *   alter.&#xA;     * @param value The value to set in string form.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the specified qualified name is not &#xA;     *   an XML name according to the XML version in use specified in the &#xA;     *   &lt;code>Document.xmlVersion&lt;/code> attribute.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>NAMESPACE_ERR: Raised if the &lt;code>qualifiedName&lt;/code> is &#xA;     *   malformed per the Namespaces in XML specification, if the &#xA;     *   &lt;code>qualifiedName&lt;/code> has a prefix and the &#xA;     *   &lt;code>namespaceURI&lt;/code> is &lt;code>null&lt;/code>, if the &#xA;     *   &lt;code>qualifiedName&lt;/code> has a prefix that is &quot;xml&quot; and the &#xA;     *   &lt;code>namespaceURI&lt;/code> is different from &quot;&lt;a href='http://www.w3.org/XML/1998/namespace'>&#xA;     *   http://www.w3.org/XML/1998/namespace&lt;/a>&quot;, if the &lt;code>qualifiedName&lt;/code> or its prefix is &quot;xmlns&quot; and the &#xA;     *   &lt;code>namespaceURI&lt;/code> is different from &quot;&lt;a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/&lt;/a>&quot;, or if the &lt;code>namespaceURI&lt;/code> is &quot;&lt;a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/&lt;/a>&quot; and neither the &lt;code>qualifiedName&lt;/code> nor its prefix is &quot;xmlns&quot;.&#xA;     *   &lt;br>NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &lt;code>&quot;XML&quot;&lt;/code> and the language exposed &#xA;     *   through the Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeAttributeNS">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes an attribute by local name and namespace URI. If a default &#xA;     * value for the removed attribute is defined in the DTD, a new &#xA;     * attribute immediately appears with the default value as well as the &#xA;     * corresponding namespace URI, local name, and prefix when applicable. &#xA;     * The implementation may handle default values from other schemas &#xA;     * similarly but applications should use &#xA;     * &lt;code>Document.normalizeDocument()&lt;/code> to guarantee this &#xA;     * information is up-to-date.&#xA;     * &lt;br>If no attribute with this local name and namespace URI is found, &#xA;     * this method has no effect.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value &lt;code>null&lt;/code> as the &#xA;     * &lt;code>namespaceURI&lt;/code> parameter for methods if they wish to have &#xA;     * no namespace.&#xA;     * @param namespaceURI The namespace URI of the attribute to remove.&#xA;     * @param localName The local name of the attribute to remove.&#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &lt;code>&quot;XML&quot;&lt;/code> and the language exposed &#xA;     *   through the Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAttributeNodeNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves an &lt;code>Attr&lt;/code> node by local name and namespace URI.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value &lt;code>null&lt;/code> as the &#xA;     * &lt;code>namespaceURI&lt;/code> parameter for methods if they wish to have &#xA;     * no namespace.&#xA;     * @param namespaceURI The namespace URI of the attribute to retrieve.&#xA;     * @param localName The local name of the attribute to retrieve.&#xA;     * @return The &lt;code>Attr&lt;/code> node with the specified attribute local &#xA;     *   name and namespace URI or &lt;code>null&lt;/code> if there is no such &#xA;     *   attribute.&#xA;     * @exception DOMException&#xA;     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &lt;code>&quot;XML&quot;&lt;/code> and the language exposed &#xA;     *   through the Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setAttributeNodeNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="newAttr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a new attribute. If an attribute with that local name and that &#xA;     * namespace URI is already present in the element, it is replaced by &#xA;     * the new one. Replacing an attribute node by itself has no effect.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value &lt;code>null&lt;/code> as the &#xA;     * &lt;code>namespaceURI&lt;/code> parameter for methods if they wish to have &#xA;     * no namespace.&#xA;     * @param newAttr The &lt;code>Attr&lt;/code> node to add to the attribute list.&#xA;     * @return If the &lt;code>newAttr&lt;/code> attribute replaces an existing &#xA;     *   attribute with the same local name and namespace URI, the replaced &#xA;     *   &lt;code>Attr&lt;/code> node is returned, otherwise &lt;code>null&lt;/code> is &#xA;     *   returned.&#xA;     * @exception DOMException&#xA;     *   WRONG_DOCUMENT_ERR: Raised if &lt;code>newAttr&lt;/code> was created from a &#xA;     *   different document than the one that created the element.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>INUSE_ATTRIBUTE_ERR: Raised if &lt;code>newAttr&lt;/code> is already an &#xA;     *   attribute of another &lt;code>Element&lt;/code> object. The DOM user must &#xA;     *   explicitly clone &lt;code>Attr&lt;/code> nodes to re-use them in other &#xA;     *   elements.&#xA;     *   &lt;br>NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &lt;code>&quot;XML&quot;&lt;/code> and the language exposed &#xA;     *   through the Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getElementsByTagNameNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="NodeList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a &lt;code>NodeList&lt;/code> of all the descendant &#xA;     * &lt;code>Elements&lt;/code> with a given local name and namespace URI in &#xA;     * document order.&#xA;     * @param namespaceURI The namespace URI of the elements to match on. The &#xA;     *   special value &quot;*&quot; matches all namespaces.&#xA;     * @param localName The local name of the elements to match on. The &#xA;     *   special value &quot;*&quot; matches all local names.&#xA;     * @return A new &lt;code>NodeList&lt;/code> object containing all the matched &#xA;     *   &lt;code>Elements&lt;/code>.&#xA;     * @exception DOMException&#xA;     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &lt;code>&quot;XML&quot;&lt;/code> and the language exposed &#xA;     *   through the Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasAttribute">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> when an attribute with a given name is &#xA;     * specified on this element or has a default value, &lt;code>false&lt;/code> &#xA;     * otherwise.&#xA;     * @param name The name of the attribute to look for.&#xA;     * @return &lt;code>true&lt;/code> if an attribute with the given name is &#xA;     *   specified on this element or has a default value, &lt;code>false&lt;/code>&#xA;     *    otherwise.&#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hasAttributeNS">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns &lt;code>true&lt;/code> when an attribute with a given local name and &#xA;     * namespace URI is specified on this element or has a default value, &#xA;     * &lt;code>false&lt;/code> otherwise.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value &lt;code>null&lt;/code> as the &#xA;     * &lt;code>namespaceURI&lt;/code> parameter for methods if they wish to have &#xA;     * no namespace.&#xA;     * @param namespaceURI The namespace URI of the attribute to look for.&#xA;     * @param localName The local name of the attribute to look for.&#xA;     * @return &lt;code>true&lt;/code> if an attribute with the given local name &#xA;     *   and namespace URI is specified or has a default value on this &#xA;     *   element, &lt;code>false&lt;/code> otherwise.&#xA;     * @exception DOMException&#xA;     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &lt;code>&quot;XML&quot;&lt;/code> and the language exposed &#xA;     *   through the Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSchemaTypeInfo">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="TypeInfo.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The type information associated with this element. &#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setIdAttribute">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isId">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  If the parameter &lt;code>isId&lt;/code> is &lt;code>true&lt;/code>, this method &#xA;     * declares the specified attribute to be a user-determined ID attribute&#xA;     * . This affects the value of &lt;code>Attr.isId&lt;/code> and the behavior &#xA;     * of &lt;code>Document.getElementById&lt;/code>, but does not change any &#xA;     * schema that may be in use, in particular this does not affect the &#xA;     * &lt;code>Attr.schemaTypeInfo&lt;/code> of the specified &lt;code>Attr&lt;/code> &#xA;     * node. Use the value &lt;code>false&lt;/code> for the parameter &#xA;     * &lt;code>isId&lt;/code> to undeclare an attribute for being a &#xA;     * user-determined ID attribute. &#xA;     * &lt;br> To specify an attribute by local name and namespace URI, use the &#xA;     * &lt;code>setIdAttributeNS&lt;/code> method. &#xA;     * @param name The name of the attribute.&#xA;     * @param isId Whether the attribute is a of type ID.&#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>NOT_FOUND_ERR: Raised if the specified node is not an attribute &#xA;     *   of this element.&#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setIdAttributeNS">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isId">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  If the parameter &lt;code>isId&lt;/code> is &lt;code>true&lt;/code>, this method &#xA;     * declares the specified attribute to be a user-determined ID attribute&#xA;     * . This affects the value of &lt;code>Attr.isId&lt;/code> and the behavior &#xA;     * of &lt;code>Document.getElementById&lt;/code>, but does not change any &#xA;     * schema that may be in use, in particular this does not affect the &#xA;     * &lt;code>Attr.schemaTypeInfo&lt;/code> of the specified &lt;code>Attr&lt;/code> &#xA;     * node. Use the value &lt;code>false&lt;/code> for the parameter &#xA;     * &lt;code>isId&lt;/code> to undeclare an attribute for being a &#xA;     * user-determined ID attribute. &#xA;     * @param namespaceURI The namespace URI of the attribute.&#xA;     * @param localName The local name of the attribute.&#xA;     * @param isId Whether the attribute is a of type ID.&#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>NOT_FOUND_ERR: Raised if the specified node is not an attribute &#xA;     *   of this element.&#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setIdAttributeNode">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="idAttr">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Attr.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="isId">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  If the parameter &lt;code>isId&lt;/code> is &lt;code>true&lt;/code>, this method &#xA;     * declares the specified attribute to be a user-determined ID attribute&#xA;     * . This affects the value of &lt;code>Attr.isId&lt;/code> and the behavior &#xA;     * of &lt;code>Document.getElementById&lt;/code>, but does not change any &#xA;     * schema that may be in use, in particular this does not affect the &#xA;     * &lt;code>Attr.schemaTypeInfo&lt;/code> of the specified &lt;code>Attr&lt;/code> &#xA;     * node. Use the value &lt;code>false&lt;/code> for the parameter &#xA;     * &lt;code>isId&lt;/code> to undeclare an attribute for being a &#xA;     * user-determined ID attribute. &#xA;     * @param idAttr The attribute node.&#xA;     * @param isId Whether the attribute is a of type ID.&#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     *   &lt;br>NOT_FOUND_ERR: Raised if the specified node is not an attribute &#xA;     *   of this element.&#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Element&lt;/code> interface represents an element in an HTML or XML &#xA; * document. Elements may have attributes associated with them; since the &#xA; * &lt;code>Element&lt;/code> interface inherits from &lt;code>Node&lt;/code>, the &#xA; * generic &lt;code>Node&lt;/code> interface attribute &lt;code>attributes&lt;/code> may &#xA; * be used to retrieve the set of all attributes for an element. There are &#xA; * methods on the &lt;code>Element&lt;/code> interface to retrieve either an &#xA; * &lt;code>Attr&lt;/code> object by name or an attribute value by name. In XML, &#xA; * where an attribute value may contain entity references, an &#xA; * &lt;code>Attr&lt;/code> object should be retrieved to examine the possibly &#xA; * fairly complex sub-tree representing the attribute value. On the other &#xA; * hand, in HTML, where all attributes have simple string values, methods to &#xA; * directly access an attribute value can safely be used as a convenience.&#xA; * &lt;p >&lt;b>Note:&lt;/b> In DOM Level 2, the method &lt;code>normalize&lt;/code> is &#xA; * inherited from the &lt;code>Node&lt;/code> interface where it was moved.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
