<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="NamedNodeMap.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="NamedNodeMap">
    <members xsi:type="members:InterfaceMethod" name="getNamedItem">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves a node specified by name.&#xA;     * @param name The &lt;code>nodeName&lt;/code> of a node to retrieve.&#xA;     * @return A &lt;code>Node&lt;/code> (of any type) with the specified &#xA;     *   &lt;code>nodeName&lt;/code>, or &lt;code>null&lt;/code> if it does not identify &#xA;     *   any node in this map.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setNamedItem">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a node using its &lt;code>nodeName&lt;/code> attribute. If a node with &#xA;     * that name is already present in this map, it is replaced by the new &#xA;     * one. Replacing a node by itself has no effect.&#xA;     * &lt;br>As the &lt;code>nodeName&lt;/code> attribute is used to derive the name &#xA;     * which the node must be stored under, multiple nodes of certain types &#xA;     * (those that have a &quot;special&quot; string value) cannot be stored as the &#xA;     * names would clash. This is seen as preferable to allowing nodes to be &#xA;     * aliased.&#xA;     * @param arg A node to store in this map. The node will later be &#xA;     *   accessible using the value of its &lt;code>nodeName&lt;/code> attribute.&#xA;     * @return If the new &lt;code>Node&lt;/code> replaces an existing node the &#xA;     *   replaced &lt;code>Node&lt;/code> is returned, otherwise &lt;code>null&lt;/code> &#xA;     *   is returned.&#xA;     * @exception DOMException&#xA;     *   WRONG_DOCUMENT_ERR: Raised if &lt;code>arg&lt;/code> was created from a &#xA;     *   different document than the one that created this map.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.&#xA;     *   &lt;br>INUSE_ATTRIBUTE_ERR: Raised if &lt;code>arg&lt;/code> is an &#xA;     *   &lt;code>Attr&lt;/code> that is already an attribute of another &#xA;     *   &lt;code>Element&lt;/code> object. The DOM user must explicitly clone &#xA;     *   &lt;code>Attr&lt;/code> nodes to re-use them in other elements.&#xA;     *   &lt;br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node &#xA;     *   doesn't belong in this NamedNodeMap. Examples would include trying &#xA;     *   to insert something other than an Attr node into an Element's map &#xA;     *   of attributes, or a non-Entity node into the DocumentType's map of &#xA;     *   Entities.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeNamedItem">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes a node specified by name. When this map contains the attributes &#xA;     * attached to an element, if the removed attribute is known to have a &#xA;     * default value, an attribute immediately appears containing the &#xA;     * default value as well as the corresponding namespace URI, local name, &#xA;     * and prefix when applicable.&#xA;     * @param name The &lt;code>nodeName&lt;/code> of the node to remove.&#xA;     * @return The node removed from this map if a node with such a name &#xA;     *   exists.&#xA;     * @exception DOMException&#xA;     *   NOT_FOUND_ERR: Raised if there is no node named &lt;code>name&lt;/code> in &#xA;     *   this map.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="item">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the &lt;code>index&lt;/code>th item in the map. If &lt;code>index&lt;/code> &#xA;     * is greater than or equal to the number of nodes in this map, this &#xA;     * returns &lt;code>null&lt;/code>.&#xA;     * @param index Index into this map.&#xA;     * @return The node at the &lt;code>index&lt;/code>th position in the map, or &#xA;     *   &lt;code>null&lt;/code> if that is not a valid index.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The number of nodes in this map. The range of valid child node indices &#xA;     * is &lt;code>0&lt;/code> to &lt;code>length-1&lt;/code> inclusive.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getNamedItemNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Retrieves a node specified by local name and namespace URI.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value null as the namespaceURI parameter &#xA;     * for methods if they wish to have no namespace.&#xA;     * @param namespaceURI The namespace URI of the node to retrieve.&#xA;     * @param localName The local name of the node to retrieve.&#xA;     * @return A &lt;code>Node&lt;/code> (of any type) with the specified local &#xA;     *   name and namespace URI, or &lt;code>null&lt;/code> if they do not &#xA;     *   identify any node in this map.&#xA;     * @exception DOMException&#xA;     *   NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &quot;XML&quot; and the language exposed through the &#xA;     *   Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setNamedItemNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="arg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Adds a node using its &lt;code>namespaceURI&lt;/code> and &#xA;     * &lt;code>localName&lt;/code>. If a node with that namespace URI and that &#xA;     * local name is already present in this map, it is replaced by the new &#xA;     * one. Replacing a node by itself has no effect.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value null as the namespaceURI parameter &#xA;     * for methods if they wish to have no namespace.&#xA;     * @param arg A node to store in this map. The node will later be &#xA;     *   accessible using the value of its &lt;code>namespaceURI&lt;/code> and &#xA;     *   &lt;code>localName&lt;/code> attributes.&#xA;     * @return If the new &lt;code>Node&lt;/code> replaces an existing node the &#xA;     *   replaced &lt;code>Node&lt;/code> is returned, otherwise &lt;code>null&lt;/code> &#xA;     *   is returned.&#xA;     * @exception DOMException&#xA;     *   WRONG_DOCUMENT_ERR: Raised if &lt;code>arg&lt;/code> was created from a &#xA;     *   different document than the one that created this map.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.&#xA;     *   &lt;br>INUSE_ATTRIBUTE_ERR: Raised if &lt;code>arg&lt;/code> is an &#xA;     *   &lt;code>Attr&lt;/code> that is already an attribute of another &#xA;     *   &lt;code>Element&lt;/code> object. The DOM user must explicitly clone &#xA;     *   &lt;code>Attr&lt;/code> nodes to re-use them in other elements.&#xA;     *   &lt;br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node &#xA;     *   doesn't belong in this NamedNodeMap. Examples would include trying &#xA;     *   to insert something other than an Attr node into an Element's map &#xA;     *   of attributes, or a non-Entity node into the DocumentType's map of &#xA;     *   Entities.&#xA;     *   &lt;br>NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &quot;XML&quot; and the language exposed through the &#xA;     *   Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeNamedItemNS">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="localName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Removes a node specified by local name and namespace URI. A removed &#xA;     * attribute may be known to have a default value when this map contains &#xA;     * the attributes attached to an element, as returned by the attributes &#xA;     * attribute of the &lt;code>Node&lt;/code> interface. If so, an attribute &#xA;     * immediately appears containing the default value as well as the &#xA;     * corresponding namespace URI, local name, and prefix when applicable.&#xA;     * &lt;br>Per [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     * , applications must use the value null as the namespaceURI parameter &#xA;     * for methods if they wish to have no namespace.&#xA;     * @param namespaceURI The namespace URI of the node to remove.&#xA;     * @param localName The local name of the node to remove.&#xA;     * @return The node removed from this map if a node with such a local &#xA;     *   name and namespace URI exists.&#xA;     * @exception DOMException&#xA;     *   NOT_FOUND_ERR: Raised if there is no node with the specified &#xA;     *   &lt;code>namespaceURI&lt;/code> and &lt;code>localName&lt;/code> in this map.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.&#xA;     *   &lt;br>NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &quot;XML&quot; and the language exposed through the &#xA;     *   Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Objects implementing the &lt;code>NamedNodeMap&lt;/code> interface are used to &#xA; * represent collections of nodes that can be accessed by name. Note that &#xA; * &lt;code>NamedNodeMap&lt;/code> does not inherit from &lt;code>NodeList&lt;/code>; &#xA; * &lt;code>NamedNodeMaps&lt;/code> are not maintained in any particular order. &#xA; * Objects contained in an object implementing &lt;code>NamedNodeMap&lt;/code> may &#xA; * also be accessed by an ordinal index, but this is simply to allow &#xA; * convenient enumeration of the contents of a &lt;code>NamedNodeMap&lt;/code>, &#xA; * and does not imply that the DOM specifies an order to these Nodes. &#xA; * &lt;p>&lt;code>NamedNodeMap&lt;/code> objects in the DOM are live.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
