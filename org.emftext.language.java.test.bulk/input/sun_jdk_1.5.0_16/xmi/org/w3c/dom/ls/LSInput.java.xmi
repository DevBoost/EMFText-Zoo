<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="LSInput.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>ls</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="LSInput">
    <members xsi:type="members:InterfaceMethod" name="getCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/Reader.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a stream of 16-bit units. The application must encode the stream &#xA;     * using UTF-16 (defined in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML declaration when &#xA;     * using character streams. If an XML declaration is present, the value &#xA;     * of the encoding attribute will be ignored. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCharacterStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="characterStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/Reader.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a stream of 16-bit units. The application must encode the stream &#xA;     * using UTF-16 (defined in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML declaration when &#xA;     * using character streams. If an XML declaration is present, the value &#xA;     * of the encoding attribute will be ignored. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getByteStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a stream of bytes. &#xA;     * &lt;br> If the application knows the character encoding of the byte &#xA;     * stream, it should set the encoding attribute. Setting the encoding in &#xA;     * this way will override any encoding specified in an XML declaration &#xA;     * in the data. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setByteStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="byteStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/InputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a stream of bytes. &#xA;     * &lt;br> If the application knows the character encoding of the byte &#xA;     * stream, it should set the encoding attribute. Setting the encoding in &#xA;     * this way will override any encoding specified in an XML declaration &#xA;     * in the data. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStringData">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  String data to parse. If provided, this will always be treated as a &#xA;     * sequence of 16-bit units (UTF-16 encoded characters). It is not a &#xA;     * requirement to have an XML declaration when using &#xA;     * &lt;code>stringData&lt;/code>. If an XML declaration is present, the value &#xA;     * of the encoding attribute will be ignored. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setStringData">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stringData">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  String data to parse. If provided, this will always be treated as a &#xA;     * sequence of 16-bit units (UTF-16 encoded characters). It is not a &#xA;     * requirement to have an XML declaration when using &#xA;     * &lt;code>stringData&lt;/code>. If an XML declaration is present, the value &#xA;     * of the encoding attribute will be ignored. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSystemId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The system identifier, a URI reference [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>], for this &#xA;     * input source. The system identifier is optional if there is a byte &#xA;     * stream, a character stream, or string data. It is still useful to &#xA;     * provide one, since the application will use it to resolve any &#xA;     * relative URIs and can include it in error messages and warnings. (The &#xA;     * LSParser will only attempt to fetch the resource identified by the &#xA;     * URI reference if there is no other input available in the input &#xA;     * source.) &#xA;     * &lt;br> If the application knows the character encoding of the object &#xA;     * pointed to by the system identifier, it can set the encoding using &#xA;     * the &lt;code>encoding&lt;/code> attribute. &#xA;     * &lt;br> If the specified system ID is a relative URI reference (see &#xA;     * section 5 in [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]), the DOM &#xA;     * implementation will attempt to resolve the relative URI with the &#xA;     * &lt;code>baseURI&lt;/code> as the base, if that fails, the behavior is &#xA;     * implementation dependent. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSystemId">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The system identifier, a URI reference [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>], for this &#xA;     * input source. The system identifier is optional if there is a byte &#xA;     * stream, a character stream, or string data. It is still useful to &#xA;     * provide one, since the application will use it to resolve any &#xA;     * relative URIs and can include it in error messages and warnings. (The &#xA;     * LSParser will only attempt to fetch the resource identified by the &#xA;     * URI reference if there is no other input available in the input &#xA;     * source.) &#xA;     * &lt;br> If the application knows the character encoding of the object &#xA;     * pointed to by the system identifier, it can set the encoding using &#xA;     * the &lt;code>encoding&lt;/code> attribute. &#xA;     * &lt;br> If the specified system ID is a relative URI reference (see &#xA;     * section 5 in [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]), the DOM &#xA;     * implementation will attempt to resolve the relative URI with the &#xA;     * &lt;code>baseURI&lt;/code> as the base, if that fails, the behavior is &#xA;     * implementation dependent. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPublicId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The public identifier for this input source. This may be mapped to an &#xA;     * input source using an implementation dependent mechanism (such as &#xA;     * catalogues or other mappings). The public identifier, if specified, &#xA;     * may also be reported as part of the location information when errors &#xA;     * are reported. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setPublicId">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The public identifier for this input source. This may be mapped to an &#xA;     * input source using an implementation dependent mechanism (such as &#xA;     * catalogues or other mappings). The public identifier, if specified, &#xA;     * may also be reported as part of the location information when errors &#xA;     * are reported. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBaseURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The base URI to be used (see section 5.1.4 in [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]) for &#xA;     * resolving a relative &lt;code>systemId&lt;/code> to an absolute URI. &#xA;     * &lt;br> If, when used, the base URI is itself a relative URI, an empty &#xA;     * string, or null, the behavior is implementation dependent. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setBaseURI">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="baseURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The base URI to be used (see section 5.1.4 in [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]) for &#xA;     * resolving a relative &lt;code>systemId&lt;/code> to an absolute URI. &#xA;     * &lt;br> If, when used, the base URI is itself a relative URI, an empty &#xA;     * string, or null, the behavior is implementation dependent. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The character encoding, if known. The encoding must be a string &#xA;     * acceptable for an XML encoding declaration ([&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>] section &#xA;     * 4.3.3 &quot;Character Encoding in Entities&quot;). &#xA;     * &lt;br> This attribute has no effect when the application provides a &#xA;     * character stream or string data. For other sources of input, an &#xA;     * encoding specified by means of this attribute will override any &#xA;     * encoding specified in the XML declaration or the Text declaration, or &#xA;     * an encoding obtained from a higher level protocol, such as HTTP [&lt;a href='http://www.ietf.org/rfc/rfc2616.txt'>IETF RFC 2616&lt;/a>]. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setEncoding">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="encoding">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The character encoding, if known. The encoding must be a string &#xA;     * acceptable for an XML encoding declaration ([&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>] section &#xA;     * 4.3.3 &quot;Character Encoding in Entities&quot;). &#xA;     * &lt;br> This attribute has no effect when the application provides a &#xA;     * character stream or string data. For other sources of input, an &#xA;     * encoding specified by means of this attribute will override any &#xA;     * encoding specified in the XML declaration or the Text declaration, or &#xA;     * an encoding obtained from a higher level protocol, such as HTTP [&lt;a href='http://www.ietf.org/rfc/rfc2616.txt'>IETF RFC 2616&lt;/a>]. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCertifiedText">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  If set to true, assume that the input is certified (see section 2.13 &#xA;     * in [&lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1&lt;/a>]) when &#xA;     * parsing [&lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1&lt;/a>]. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCertifiedText">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="certifiedText">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  If set to true, assume that the input is certified (see section 2.13 &#xA;     * in [&lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1&lt;/a>]) when &#xA;     * parsing [&lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1&lt;/a>]. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  This interface represents an input source for data. &#xA; * &lt;p> This interface allows an application to encapsulate information about &#xA; * an input source in a single object, which may include a public &#xA; * identifier, a system identifier, a byte stream (possibly with a specified &#xA; * encoding), a base URI, and/or a character stream. &#xA; * &lt;p> The exact definitions of a byte stream and a character stream are &#xA; * binding dependent. &#xA; * &lt;p> The application is expected to provide objects that implement this &#xA; * interface whenever such objects are needed. The application can either &#xA; * provide its own objects that implement this interface, or it can use the &#xA; * generic factory method &lt;code>DOMImplementationLS.createLSInput()&lt;/code> &#xA; * to create objects that implement this interface. &#xA; * &lt;p> The &lt;code>LSParser&lt;/code> will use the &lt;code>LSInput&lt;/code> object to &#xA; * determine how to read data. The &lt;code>LSParser&lt;/code> will look at the &#xA; * different inputs specified in the &lt;code>LSInput&lt;/code> in the following &#xA; * order to know which one to read from, the first one that is not null and &#xA; * not an empty string will be used: &#xA; * &lt;ol>&#xA; * &lt;li> &lt;code>LSInput.characterStream&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;li> &#xA; * &lt;code>LSInput.byteStream&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;li> &lt;code>LSInput.stringData&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;li> &#xA; * &lt;code>LSInput.systemId&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;li> &lt;code>LSInput.publicId&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;/ol> &#xA; * &lt;p> If all inputs are null, the &lt;code>LSParser&lt;/code> will report a &#xA; * &lt;code>DOMError&lt;/code> with its &lt;code>DOMError.type&lt;/code> set to &#xA; * &lt;code>&quot;no-input-specified&quot;&lt;/code> and its &lt;code>DOMError.severity&lt;/code> &#xA; * set to &lt;code>DOMError.SEVERITY_FATAL_ERROR&lt;/code>. &#xA; * &lt;p> &lt;code>LSInput&lt;/code> objects belong to the application. The DOM &#xA; * implementation will never modify them (though it may make copies and &#xA; * modify the copies, if necessary). &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
