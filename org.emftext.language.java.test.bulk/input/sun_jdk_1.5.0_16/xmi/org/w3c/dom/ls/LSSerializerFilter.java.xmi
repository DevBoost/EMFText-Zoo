<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="LSSerializerFilter.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>ls</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>traversal</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../traversal/NodeFilter.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="LSSerializerFilter">
    <members xsi:type="members:InterfaceMethod" name="getWhatToShow">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Tells the &lt;code>LSSerializer&lt;/code> what types of nodes to show to the &#xA;     * filter. If a node is not shown to the filter using this attribute, it &#xA;     * is automatically serialized. See &lt;code>NodeFilter&lt;/code> for &#xA;     * definition of the constants. The constants &lt;code>SHOW_DOCUMENT&lt;/code>&#xA;     * , &lt;code>SHOW_DOCUMENT_TYPE&lt;/code>, &lt;code>SHOW_DOCUMENT_FRAGMENT&lt;/code>&#xA;     * , &lt;code>SHOW_NOTATION&lt;/code>, and &lt;code>SHOW_ENTITY&lt;/code> are &#xA;     * meaningless here, such nodes will never be passed to a &#xA;     * &lt;code>LSSerializerFilter&lt;/code>. &#xA;     * &lt;br> Unlike [&lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>DOM Level 2 Traversal and      Range&lt;/a>]&#xA;     * , the &lt;code>SHOW_ATTRIBUTE&lt;/code> constant indicates that the &#xA;     * &lt;code>Attr&lt;/code> nodes are shown and passed to the filter. &#xA;     * &lt;br> The constants used here are defined in [&lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>DOM Level 2 Traversal and      Range&lt;/a>]&#xA;     * . &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  &lt;code>LSSerializerFilter&lt;/code>s provide applications the ability to &#xA; * examine nodes as they are being serialized and decide what nodes should &#xA; * be serialized or not. The &lt;code>LSSerializerFilter&lt;/code> interface is &#xA; * based on the &lt;code>NodeFilter&lt;/code> interface defined in [&lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>DOM Level 2 Traversal and      Range&lt;/a>]&#xA; * . &#xA; * &lt;p> &lt;code>Document&lt;/code>, &lt;code>DocumentType&lt;/code>, &#xA; * &lt;code>DocumentFragment&lt;/code>, &lt;code>Notation&lt;/code>, &lt;code>Entity&lt;/code>&#xA; * , and children of &lt;code>Attr&lt;/code> nodes are not passed to the filter. &#xA; * The child nodes of an &lt;code>EntityReference&lt;/code> node are only passed &#xA; * to the filter if the &lt;code>EntityReference&lt;/code> node is skipped by the &#xA; * method &lt;code>LSParserFilter.acceptNode()&lt;/code>. &#xA; * &lt;p> When serializing an &lt;code>Element&lt;/code>, the element is passed to the &#xA; * filter before any of its attributes are passed to the filter. Namespace &#xA; * declaration attributes, and default attributes (except in the case when &quot;&#xA; * discard-default-content&quot; is set to &lt;code>false&lt;/code>), are never passed &#xA; * to the filter. &#xA; * &lt;p> The result of any attempt to modify a node passed to a &#xA; * &lt;code>LSSerializerFilter&lt;/code> is implementation dependent. &#xA; * &lt;p> DOM applications must not raise exceptions in a filter. The effect of &#xA; * throwing exceptions from a filter is DOM implementation dependent. &#xA; * &lt;p> For efficiency, a node passed to the filter may not be the same as the &#xA; * one that is actually in the tree. And the actual node (node object &#xA; * identity) may be reused during the process of filtering and serializing a &#xA; * document. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../traversal/NodeFilter.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
