<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="DOMImplementationLS.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>ls</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DOMImplementationLS">
    <members xsi:type="members:Field" name="MODE_SYNCHRONOUS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// DOMImplementationLSMode</comments>
        <comments>/**&#xA;     * Create a synchronous &lt;code>LSParser&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="MODE_ASYNCHRONOUS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create an asynchronous &lt;code>LSParser&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createLSParser">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="LSParser.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mode">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="schemaType">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a new &lt;code>LSParser&lt;/code>. The newly constructed parser may &#xA;     * then be configured by means of its &lt;code>DOMConfiguration&lt;/code> &#xA;     * object, and used to parse documents by means of its &lt;code>parse&lt;/code>&#xA;     *  method. &#xA;     * @param mode  The &lt;code>mode&lt;/code> argument is either &#xA;     *   &lt;code>MODE_SYNCHRONOUS&lt;/code> or &lt;code>MODE_ASYNCHRONOUS&lt;/code>, if &#xA;     *   &lt;code>mode&lt;/code> is &lt;code>MODE_SYNCHRONOUS&lt;/code> then the &#xA;     *   &lt;code>LSParser&lt;/code> that is created will operate in synchronous &#xA;     *   mode, if it's &lt;code>MODE_ASYNCHRONOUS&lt;/code> then the &#xA;     *   &lt;code>LSParser&lt;/code> that is created will operate in asynchronous &#xA;     *   mode. &#xA;     * @param schemaType  An absolute URI representing the type of the schema &#xA;     *   language used during the load of a &lt;code>Document&lt;/code> using the &#xA;     *   newly created &lt;code>LSParser&lt;/code>. Note that no lexical checking &#xA;     *   is done on the absolute URI. In order to create a &#xA;     *   &lt;code>LSParser&lt;/code> for any kind of schema types (i.e. the &#xA;     *   LSParser will be free to use any schema found), use the value &#xA;     *   &lt;code>null&lt;/code>. &#xA;     * &lt;p >&lt;b>Note:&lt;/b>    For W3C XML Schema [&lt;a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1&lt;/a>]&#xA;     *   , applications must use the value &#xA;     *   &lt;code>&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/code>. For XML DTD [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>], &#xA;     *   applications must use the value &#xA;     *   &lt;code>&quot;http://www.w3.org/TR/REC-xml&quot;&lt;/code>. Other Schema languages &#xA;     *   are outside the scope of the W3C and therefore should recommend an &#xA;     *   absolute URI in order to use this method. &#xA;     * @return  The newly created &lt;code>LSParser&lt;/code> object. This &#xA;     *   &lt;code>LSParser&lt;/code> is either synchronous or asynchronous &#xA;     *   depending on the value of the &lt;code>mode&lt;/code> argument. &#xA;     * &lt;p >&lt;b>Note:&lt;/b>    By default, the newly created &lt;code>LSParser&lt;/code> &#xA;     *   does not contain a &lt;code>DOMErrorHandler&lt;/code>, i.e. the value of &#xA;     *   the &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>&#xA;     *   error-handler&lt;/a>&quot; configuration parameter is &lt;code>null&lt;/code>. However, implementations &#xA;     *   may provide a default error handler at creation time. In that case, &#xA;     *   the initial value of the &lt;code>&quot;error-handler&quot;&lt;/code> configuration &#xA;     *   parameter on the new &lt;code>LSParser&lt;/code> object contains a &#xA;     *   reference to the default error handler. &#xA;     * @exception DOMException&#xA;     *    NOT_SUPPORTED_ERR: Raised if the requested mode or schema type is &#xA;     *   not supported. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createLSSerializer">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="LSSerializer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Create a new &lt;code>LSSerializer&lt;/code> object. &#xA;     * @return The newly created &lt;code>LSSerializer&lt;/code> object.&#xA;     * &lt;p >&lt;b>Note:&lt;/b>    By default, the newly created &#xA;     *   &lt;code>LSSerializer&lt;/code> has no &lt;code>DOMErrorHandler&lt;/code>, i.e. &#xA;     *   the value of the &lt;code>&quot;error-handler&quot;&lt;/code> configuration &#xA;     *   parameter is &lt;code>null&lt;/code>. However, implementations may &#xA;     *   provide a default error handler at creation time. In that case, the &#xA;     *   initial value of the &lt;code>&quot;error-handler&quot;&lt;/code> configuration &#xA;     *   parameter on the new &lt;code>LSSerializer&lt;/code> object contains a &#xA;     *   reference to the default error handler. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createLSInput">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="LSInput.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Create a new empty input source object where &#xA;     * &lt;code>LSInput.characterStream&lt;/code>, &lt;code>LSInput.byteStream&lt;/code>&#xA;     * , &lt;code>LSInput.stringData&lt;/code> &lt;code>LSInput.systemId&lt;/code>, &#xA;     * &lt;code>LSInput.publicId&lt;/code>, &lt;code>LSInput.baseURI&lt;/code>, and &#xA;     * &lt;code>LSInput.encoding&lt;/code> are null, and &#xA;     * &lt;code>LSInput.certifiedText&lt;/code> is false. &#xA;     * @return  The newly created input object. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createLSOutput">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="LSOutput.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Create a new empty output destination object where &#xA;     * &lt;code>LSOutput.characterStream&lt;/code>, &#xA;     * &lt;code>LSOutput.byteStream&lt;/code>, &lt;code>LSOutput.systemId&lt;/code>, &#xA;     * &lt;code>LSOutput.encoding&lt;/code> are null. &#xA;     * @return  The newly created output object. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  &lt;code>DOMImplementationLS&lt;/code> contains the factory methods for creating &#xA; * Load and Save objects. &#xA; * &lt;p> The expectation is that an instance of the &#xA; * &lt;code>DOMImplementationLS&lt;/code> interface can be obtained by using &#xA; * binding-specific casting methods on an instance of the &#xA; * &lt;code>DOMImplementation&lt;/code> interface or, if the &lt;code>Document&lt;/code> &#xA; * supports the feature &lt;code>&quot;Core&quot;&lt;/code> version &lt;code>&quot;3.0&quot;&lt;/code> &#xA; * defined in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA; * , by using the method &lt;code>DOMImplementation.getFeature&lt;/code> with &#xA; * parameter values &lt;code>&quot;LS&quot;&lt;/code> (or &lt;code>&quot;LS-Async&quot;&lt;/code>) and &#xA; * &lt;code>&quot;3.0&quot;&lt;/code> (respectively). &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
