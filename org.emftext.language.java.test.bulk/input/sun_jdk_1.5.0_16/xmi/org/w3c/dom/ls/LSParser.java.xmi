<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="LSParser.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>ls</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Document.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../DOMConfiguration.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="LSParser">
    <members xsi:type="members:InterfaceMethod" name="getDomConfig">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../DOMConfiguration.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The &lt;code>DOMConfiguration&lt;/code> object used when parsing an input &#xA;     * source. This &lt;code>DOMConfiguration&lt;/code> is specific to the parse &#xA;     * operation. No parameter values from this &lt;code>DOMConfiguration&lt;/code>&#xA;     *  object are passed automatically to the &lt;code>DOMConfiguration&lt;/code> &#xA;     * object on the &lt;code>Document&lt;/code> that is created, or used, by the &#xA;     * parse operation. The DOM application is responsible for passing any &#xA;     * needed parameter values from this &lt;code>DOMConfiguration&lt;/code> &#xA;     * object to the &lt;code>DOMConfiguration&lt;/code> object referenced by the &#xA;     * &lt;code>Document&lt;/code> object. &#xA;     * &lt;br> In addition to the parameters recognized in on the &lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration'>&#xA;     * DOMConfiguration&lt;/a> interface defined in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA;     * , the &lt;code>DOMConfiguration&lt;/code> objects for &lt;code>LSParser&lt;/code> &#xA;     * add or modify the following parameters: &#xA;     * &lt;dl>&#xA;     * &lt;dt>&#xA;     * &lt;code>&quot;charset-overrides-xml-encoding&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd>&#xA;     * &lt;dl>&#xA;     * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>optional&lt;/em>] (&lt;em>default&lt;/em>) If a higher level protocol such as HTTP [&lt;a href='http://www.ietf.org/rfc/rfc2616.txt'>IETF RFC 2616&lt;/a>] provides an &#xA;     * indication of the character encoding of the input stream being &#xA;     * processed, that will override any encoding specified in the XML &#xA;     * declaration or the Text declaration (see also section 4.3.3, &#xA;     * &quot;Character Encoding in Entities&quot;, in [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>]). &#xA;     * Explicitly setting an encoding in the &lt;code>LSInput&lt;/code> overrides &#xA;     * any encoding from the protocol. &lt;/dd>&#xA;     * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>required&lt;/em>] The parser ignores any character set encoding information from &#xA;     * higher-level protocols. &lt;/dd>&#xA;     * &lt;/dl>&lt;/dd>&#xA;     * &lt;dt>&lt;code>&quot;disallow-doctype&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd>&#xA;     * &lt;dl>&#xA;     * &lt;dt>&#xA;     * &lt;code>true&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>optional&lt;/em>] Throw a fatal &lt;b>&quot;doctype-not-allowed&quot;&lt;/b> error if a doctype node is found while parsing the document. This is &#xA;     * useful when dealing with things like SOAP envelopes where doctype &#xA;     * nodes are not allowed. &lt;/dd>&#xA;     * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Allow doctype nodes in the document. &lt;/dd>&#xA;     * &lt;/dl>&lt;/dd>&#xA;     * &lt;dt>&#xA;     * &lt;code>&quot;ignore-unknown-character-denormalizations&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd>&#xA;     * &lt;dl>&#xA;     * &lt;dt>&#xA;     * &lt;code>true&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) If, while verifying full normalization when [&lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1&lt;/a>] is &#xA;     * supported, a processor encounters characters for which it cannot &#xA;     * determine the normalization properties, then the processor will &#xA;     * ignore any possible denormalizations caused by these characters.  &#xA;     * This parameter is ignored for [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>]. &lt;/dd>&#xA;     * &lt;dt>&#xA;     * &lt;code>false&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>optional&lt;/em>] Report an fatal &lt;b>&quot;unknown-character-denormalization&quot;&lt;/b> error if a character is encountered for which the processor cannot &#xA;     * determine the normalization properties. &lt;/dd>&#xA;     * &lt;/dl>&lt;/dd>&#xA;     * &lt;dt>&lt;code>&quot;infoset&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd> See &#xA;     * the definition of &lt;code>DOMConfiguration&lt;/code> for a description of &#xA;     * this parameter. Unlike in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA;     * , this parameter will default to &lt;code>true&lt;/code> for &#xA;     * &lt;code>LSParser&lt;/code>. &lt;/dd>&#xA;     * &lt;dt>&lt;code>&quot;namespaces&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd>&#xA;     * &lt;dl>&#xA;     * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Perform the namespace processing as defined in [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     *  and [&lt;a href='http://www.w3.org/TR/2004/REC-xml-names11-20040204/'>XML Namespaces 1.1&lt;/a>]&#xA;     * . &lt;/dd>&#xA;     * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>optional&lt;/em>] Do not perform the namespace processing. &lt;/dd>&#xA;     * &lt;/dl>&lt;/dd>&#xA;     * &lt;dt>&#xA;     * &lt;code>&quot;resource-resolver&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>required&lt;/em>] A reference to a &lt;code>LSResourceResolver&lt;/code> object, or null. If &#xA;     * the value of this parameter is not null when an external resource &#xA;     * (such as an external XML entity or an XML schema location) is &#xA;     * encountered, the implementation will request that the &#xA;     * &lt;code>LSResourceResolver&lt;/code> referenced in this parameter resolves &#xA;     * the resource. &lt;/dd>&#xA;     * &lt;dt>&lt;code>&quot;supported-media-types-only&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd>&#xA;     * &lt;dl>&#xA;     * &lt;dt>&#xA;     * &lt;code>true&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>optional&lt;/em>] Check that the media type of the parsed resource is a supported media &#xA;     * type. If an unsupported media type is encountered, a fatal error of &#xA;     * type &lt;b>&quot;unsupported-media-type&quot;&lt;/b> will be raised. The media types defined in [&lt;a href='http://www.ietf.org/rfc/rfc3023.txt'>IETF RFC 3023&lt;/a>] must always &#xA;     * be accepted. &lt;/dd>&#xA;     * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA;     * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Accept any media type. &lt;/dd>&#xA;     * &lt;/dl>&lt;/dd>&#xA;     * &lt;dt>&lt;code>&quot;validate&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd> See the definition of &#xA;     * &lt;code>DOMConfiguration&lt;/code> for a description of this parameter. &#xA;     * Unlike in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA;     * , the processing of the internal subset is always accomplished, even &#xA;     * if this parameter is set to &lt;code>false&lt;/code>. &lt;/dd>&#xA;     * &lt;dt>&#xA;     * &lt;code>&quot;validate-if-schema&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd> See the definition of &#xA;     * &lt;code>DOMConfiguration&lt;/code> for a description of this parameter. &#xA;     * Unlike in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA;     * , the processing of the internal subset is always accomplished, even &#xA;     * if this parameter is set to &lt;code>false&lt;/code>. &lt;/dd>&#xA;     * &lt;dt>&#xA;     * &lt;code>&quot;well-formed&quot;&lt;/code>&lt;/dt>&#xA;     * &lt;dd> See the definition of &#xA;     * &lt;code>DOMConfiguration&lt;/code> for a description of this parameter. &#xA;     * Unlike in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA;     * , this parameter cannot be set to &lt;code>false&lt;/code>. &lt;/dd>&#xA;     * &lt;/dl>&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFilter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="LSParserFilter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  When a filter is provided, the implementation will call out to the &#xA;     * filter as it is constructing the DOM tree structure. The filter can &#xA;     * choose to remove elements from the document being constructed, or to &#xA;     * terminate the parsing early. &#xA;     * &lt;br> The filter is invoked after the operations requested by the &#xA;     * &lt;code>DOMConfiguration&lt;/code> parameters have been applied. For &#xA;     * example, if &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate'>&#xA;     * validate&lt;/a>&quot; is set to &lt;code>true&lt;/code>, the validation is done before invoking the &#xA;     * filter. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFilter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="LSParserFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  When a filter is provided, the implementation will call out to the &#xA;     * filter as it is constructing the DOM tree structure. The filter can &#xA;     * choose to remove elements from the document being constructed, or to &#xA;     * terminate the parsing early. &#xA;     * &lt;br> The filter is invoked after the operations requested by the &#xA;     * &lt;code>DOMConfiguration&lt;/code> parameters have been applied. For &#xA;     * example, if &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate'>&#xA;     * validate&lt;/a>&quot; is set to &lt;code>true&lt;/code>, the validation is done before invoking the &#xA;     * filter. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAsync">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  &lt;code>true&lt;/code> if the &lt;code>LSParser&lt;/code> is asynchronous, &#xA;     * &lt;code>false&lt;/code> if it is synchronous. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBusy">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  &lt;code>true&lt;/code> if the &lt;code>LSParser&lt;/code> is currently busy &#xA;     * loading a document, otherwise &lt;code>false&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="parse">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Document.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="input">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="LSInput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Parse an XML document from a resource identified by a &#xA;     * &lt;code>LSInput&lt;/code>.&#xA;     * @param input  The &lt;code>LSInput&lt;/code> from which the source of the &#xA;     *   document is to be read. &#xA;     * @return  If the &lt;code>LSParser&lt;/code> is a synchronous &#xA;     *   &lt;code>LSParser&lt;/code>, the newly created and populated &#xA;     *   &lt;code>Document&lt;/code> is returned. If the &lt;code>LSParser&lt;/code> is &#xA;     *   asynchronous, &lt;code>null&lt;/code> is returned since the document &#xA;     *   object may not yet be constructed when this method returns. &#xA;     * @exception DOMException&#xA;     *    INVALID_STATE_ERR: Raised if the &lt;code>LSParser&lt;/code>'s &#xA;     *   &lt;code>LSParser.busy&lt;/code> attribute is &lt;code>true&lt;/code>. &#xA;     * @exception LSException&#xA;     *    PARSE_ERR: Raised if the &lt;code>LSParser&lt;/code> was unable to load &#xA;     *   the XML document. DOM applications should attach a &#xA;     *   &lt;code>DOMErrorHandler&lt;/code> using the parameter &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>&#xA;     *   error-handler&lt;/a>&quot; if they wish to get details on the error. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="parseURI">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Document.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="uri">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Parse an XML document from a location identified by a URI reference [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]. If the URI &#xA;     * contains a fragment identifier (see section 4.1 in [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]), the &#xA;     * behavior is not defined by this specification, future versions of &#xA;     * this specification may define the behavior. &#xA;     * @param uri The location of the XML document to be read.&#xA;     * @return  If the &lt;code>LSParser&lt;/code> is a synchronous &#xA;     *   &lt;code>LSParser&lt;/code>, the newly created and populated &#xA;     *   &lt;code>Document&lt;/code> is returned, or &lt;code>null&lt;/code> if an error &#xA;     *   occured. If the &lt;code>LSParser&lt;/code> is asynchronous, &#xA;     *   &lt;code>null&lt;/code> is returned since the document object may not yet &#xA;     *   be constructed when this method returns. &#xA;     * @exception DOMException&#xA;     *    INVALID_STATE_ERR: Raised if the &lt;code>LSParser.busy&lt;/code> &#xA;     *   attribute is &lt;code>true&lt;/code>. &#xA;     * @exception LSException&#xA;     *    PARSE_ERR: Raised if the &lt;code>LSParser&lt;/code> was unable to load &#xA;     *   the XML document. DOM applications should attach a &#xA;     *   &lt;code>DOMErrorHandler&lt;/code> using the parameter &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>&#xA;     *   error-handler&lt;/a>&quot; if they wish to get details on the error. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:Field" name="ACTION_APPEND_AS_CHILDREN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// ACTION_TYPES</comments>
        <comments>/**&#xA;     *  Append the result of the parse operation as children of the context &#xA;     * node. For this action to work, the context node must be an &#xA;     * &lt;code>Element&lt;/code> or a &lt;code>DocumentFragment&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ACTION_REPLACE_CHILDREN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Replace all the children of the context node with the result of the &#xA;     * parse operation. For this action to work, the context node must be an &#xA;     * &lt;code>Element&lt;/code>, a &lt;code>Document&lt;/code>, or a &#xA;     * &lt;code>DocumentFragment&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ACTION_INSERT_BEFORE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Insert the result of the parse operation as the immediately preceding &#xA;     * sibling of the context node. For this action to work the context &#xA;     * node's parent must be an &lt;code>Element&lt;/code> or a &#xA;     * &lt;code>DocumentFragment&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ACTION_INSERT_AFTER">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Insert the result of the parse operation as the immediately following &#xA;     * sibling of the context node. For this action to work the context &#xA;     * node's parent must be an &lt;code>Element&lt;/code> or a &#xA;     * &lt;code>DocumentFragment&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ACTION_REPLACE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Replace the context node with the result of the parse operation. For &#xA;     * this action to work, the context node must have a parent, and the &#xA;     * parent must be an &lt;code>Element&lt;/code> or a &#xA;     * &lt;code>DocumentFragment&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="parseWithContext">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="input">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="LSInput.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="contextArg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="action">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="LSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Parse an XML fragment from a resource identified by a &#xA;     * &lt;code>LSInput&lt;/code> and insert the content into an existing document &#xA;     * at the position specified with the &lt;code>context&lt;/code> and &#xA;     * &lt;code>action&lt;/code> arguments. When parsing the input stream, the &#xA;     * context node (or its parent, depending on where the result will be &#xA;     * inserted) is used for resolving unbound namespace prefixes. The &#xA;     * context node's &lt;code>ownerDocument&lt;/code> node (or the node itself if &#xA;     * the node of type &lt;code>DOCUMENT_NODE&lt;/code>) is used to resolve &#xA;     * default attributes and entity references. &#xA;     * &lt;br> As the new data is inserted into the document, at least one &#xA;     * mutation event is fired per new immediate child or sibling of the &#xA;     * context node. &#xA;     * &lt;br> If the context node is a &lt;code>Document&lt;/code> node and the action &#xA;     * is &lt;code>ACTION_REPLACE_CHILDREN&lt;/code>, then the document that is &#xA;     * passed as the context node will be changed such that its &#xA;     * &lt;code>xmlEncoding&lt;/code>, &lt;code>documentURI&lt;/code>, &#xA;     * &lt;code>xmlVersion&lt;/code>, &lt;code>inputEncoding&lt;/code>, &#xA;     * &lt;code>xmlStandalone&lt;/code>, and all other such attributes are set to &#xA;     * what they would be set to if the input source was parsed using &#xA;     * &lt;code>LSParser.parse()&lt;/code>. &#xA;     * &lt;br> This method is always synchronous, even if the &#xA;     * &lt;code>LSParser&lt;/code> is asynchronous (&lt;code>LSParser.async&lt;/code> is &#xA;     * &lt;code>true&lt;/code>). &#xA;     * &lt;br> If an error occurs while parsing, the caller is notified through &#xA;     * the &lt;code>ErrorHandler&lt;/code> instance associated with the &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>&#xA;     * error-handler&lt;/a>&quot; parameter of the &lt;code>DOMConfiguration&lt;/code>. &#xA;     * &lt;br> When calling &lt;code>parseWithContext&lt;/code>, the values of the &#xA;     * following configuration parameters will be ignored and their default &#xA;     * values will always be used instead: &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate'>&#xA;     * validate&lt;/a>&quot;, &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate-if-schema'>&#xA;     * validate-if-schema&lt;/a>&quot;, and &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-element-content-whitespace'>&#xA;     * element-content-whitespace&lt;/a>&quot;. Other parameters will be treated normally, and the parser is expected &#xA;     * to call the &lt;code>LSParserFilter&lt;/code> just as if a whole document &#xA;     * was parsed. &#xA;     * @param input  The &lt;code>LSInput&lt;/code> from which the source document &#xA;     *   is to be read. The source document must be an XML fragment, i.e. &#xA;     *   anything except a complete XML document (except in the case where &#xA;     *   the context node of type &lt;code>DOCUMENT_NODE&lt;/code>, and the action &#xA;     *   is &lt;code>ACTION_REPLACE_CHILDREN&lt;/code>), a DOCTYPE (internal &#xA;     *   subset), entity declaration(s), notation declaration(s), or XML or &#xA;     *   text declaration(s). &#xA;     * @param contextArg  The node that is used as the context for the data &#xA;     *   that is being parsed. This node must be a &lt;code>Document&lt;/code> &#xA;     *   node, a &lt;code>DocumentFragment&lt;/code> node, or a node of a type &#xA;     *   that is allowed as a child of an &lt;code>Element&lt;/code> node, e.g. it &#xA;     *   cannot be an &lt;code>Attribute&lt;/code> node. &#xA;     * @param action  This parameter describes which action should be taken &#xA;     *   between the new set of nodes being inserted and the existing &#xA;     *   children of the context node. The set of possible actions is &#xA;     *   defined in &lt;code>ACTION_TYPES&lt;/code> above. &#xA;     * @return  Return the node that is the result of the parse operation. If &#xA;     *   the result is more than one top-level node, the first one is &#xA;     *   returned. &#xA;     * @exception DOMException&#xA;     *   HIERARCHY_REQUEST_ERR: Raised if the content cannot replace, be &#xA;     *   inserted before, after, or as a child of the context node (see also &#xA;     *   &lt;code>Node.insertBefore&lt;/code> or &lt;code>Node.replaceChild&lt;/code> in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA;     *   ).&#xA;     *   &lt;br> NOT_SUPPORTED_ERR: Raised if the &lt;code>LSParser&lt;/code> doesn't &#xA;     *   support this method, or if the context node is of type &#xA;     *   &lt;code>Document&lt;/code> and the DOM implementation doesn't support &#xA;     *   the replacement of the &lt;code>DocumentType&lt;/code> child or &#xA;     *   &lt;code>Element&lt;/code> child. &#xA;     *   &lt;br> NO_MODIFICATION_ALLOWED_ERR: Raised if the context node is a &#xA;     *   read only node and the content is being appended to its child list, &#xA;     *   or if the parent node of the context node is read only node and the &#xA;     *   content is being inserted in its child list.&#xA;     *   &lt;br> INVALID_STATE_ERR: Raised if the &lt;code>LSParser.busy&lt;/code> &#xA;     *   attribute is &lt;code>true&lt;/code>. &#xA;     * @exception LSException&#xA;     *    PARSE_ERR: Raised if the &lt;code>LSParser&lt;/code> was unable to load &#xA;     *   the XML fragment. DOM applications should attach a &#xA;     *   &lt;code>DOMErrorHandler&lt;/code> using the parameter &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>&#xA;     *   error-handler&lt;/a>&quot; if they wish to get details on the error. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="abort">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Abort the loading of the document that is currently being loaded by &#xA;     * the &lt;code>LSParser&lt;/code>. If the &lt;code>LSParser&lt;/code> is currently &#xA;     * not busy, a call to this method does nothing. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  An interface to an object that is able to build, or augment, a DOM tree &#xA; * from various input sources. &#xA; * &lt;p> &lt;code>LSParser&lt;/code> provides an API for parsing XML and building the &#xA; * corresponding DOM document structure. A &lt;code>LSParser&lt;/code> instance &#xA; * can be obtained by invoking the &#xA; * &lt;code>DOMImplementationLS.createLSParser()&lt;/code> method. &#xA; * &lt;p> As specified in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>DOM Level 3 Core&lt;/a>]&#xA; * , when a document is first made available via the LSParser: &#xA; * &lt;ul>&#xA; * &lt;li> there will &#xA; * never be two adjacent nodes of type NODE_TEXT, and there will never be &#xA; * empty text nodes. &#xA; * &lt;/li>&#xA; * &lt;li> it is expected that the &lt;code>value&lt;/code> and &#xA; * &lt;code>nodeValue&lt;/code> attributes of an &lt;code>Attr&lt;/code> node initially &#xA; * return the &lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204#AVNormalize'>XML 1.0 &#xA; * normalized value&lt;/a>. However, if the parameters &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-validate-if-schema'>&#xA; * validate-if-schema&lt;/a>&quot; and &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-datatype-normalization'>&#xA; * datatype-normalization&lt;/a>&quot; are set to &lt;code>true&lt;/code>, depending on the attribute normalization &#xA; * used, the attribute values may differ from the ones obtained by the XML &#xA; * 1.0 attribute normalization. If the parameters &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-datatype-normalization'>&#xA; * datatype-normalization&lt;/a>&quot; is set to &lt;code>false&lt;/code>, the XML 1.0 attribute normalization is &#xA; * guaranteed to occur, and if the attributes list does not contain &#xA; * namespace declarations, the &lt;code>attributes&lt;/code> attribute on &#xA; * &lt;code>Element&lt;/code> node represents the property &lt;b>[attributes]&lt;/b> defined in [&lt;a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set&lt;/a>]&#xA; * . &#xA; * &lt;/li>&#xA; * &lt;/ul>&#xA; * &lt;p> Asynchronous &lt;code>LSParser&lt;/code> objects are expected to also &#xA; * implement the &lt;code>events::EventTarget&lt;/code> interface so that event &#xA; * listeners can be registered on asynchronous &lt;code>LSParser&lt;/code> &#xA; * objects. &#xA; * &lt;p> Events supported by asynchronous &lt;code>LSParser&lt;/code> objects are: &#xA; * &lt;dl>&#xA; * &lt;dt>load&lt;/dt>&#xA; * &lt;dd>&#xA; *  The &lt;code>LSParser&lt;/code> finishes to load the document. See also the &#xA; * definition of the &lt;code>LSLoadEvent&lt;/code> interface. &lt;/dd>&#xA; * &lt;dt>progress&lt;/dt>&#xA; * &lt;dd> The &#xA; * &lt;code>LSParser&lt;/code> signals progress as data is parsed.  This &#xA; * specification does not attempt to define exactly when progress events &#xA; * should be dispatched. That is intentionally left as &#xA; * implementation-dependent. Here is one example of how an application might &#xA; * dispatch progress events: Once the parser starts receiving data, a &#xA; * progress event is dispatched to indicate that the parsing starts. From &#xA; * there on, a progress event is dispatched for every 4096 bytes of data &#xA; * that is received and processed. This is only one example, though, and &#xA; * implementations can choose to dispatch progress events at any time while &#xA; * parsing, or not dispatch them at all.  See also the definition of the &#xA; * &lt;code>LSProgressEvent&lt;/code> interface. &lt;/dd>&#xA; * &lt;/dl>&#xA; * &lt;p >&lt;b>Note:&lt;/b>  All events defined in this specification use the &#xA; * namespace URI &lt;code>&quot;http://www.w3.org/2002/DOMLS&quot;&lt;/code>. &#xA; * &lt;p> While parsing an input source, errors are reported to the application &#xA; * through the error handler (&lt;code>LSParser.domConfig&lt;/code>'s &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler'>&#xA; * error-handler&lt;/a>&quot; parameter). This specification does in no way try to define all possible &#xA; * errors that can occur while parsing XML, or any other markup, but some &#xA; * common error cases are defined. The types (&lt;code>DOMError.type&lt;/code>) of &#xA; * errors and warnings defined by this specification are: &#xA; * &lt;dl>&#xA; * &lt;dt> &#xA; * &lt;code>&quot;check-character-normalization-failure&quot; [error]&lt;/code> &lt;/dt>&#xA; * &lt;dd> Raised if &#xA; * the parameter &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-check-character-normalization'>&#xA; * check-character-normalization&lt;/a>&quot; is set to true and a string is encountered that fails normalization &#xA; * checking. &lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;doctype-not-allowed&quot; [fatal]&lt;/code>&lt;/dt>&#xA; * &lt;dd> Raised if the &#xA; * configuration parameter &quot;disallow-doctype&quot; is set to &lt;code>true&lt;/code> &#xA; * and a doctype is encountered. &lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;no-input-specified&quot; [fatal]&lt;/code>&lt;/dt>&#xA; * &lt;dd> &#xA; * Raised when loading a document and no input is specified in the &#xA; * &lt;code>LSInput&lt;/code> object. &lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;pi-base-uri-not-preserved&quot; [warning]&lt;/code>&lt;/dt>&#xA; * &lt;dd> Raised if a processing &#xA; * instruction is encountered in a location where the base URI of the &#xA; * processing instruction can not be preserved.  One example of a case where &#xA; * this warning will be raised is if the configuration parameter &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-entities'>&#xA; * entities&lt;/a>&quot; is set to &lt;code>false&lt;/code> and the following XML file is parsed: &#xA; * &lt;pre>&#xA; * &amp;lt;!DOCTYPE root [ &amp;lt;!ENTITY e SYSTEM 'subdir/myentity.ent' ]&amp;gt; &#xA; * &amp;lt;root&amp;gt; &amp;amp;e; &amp;lt;/root&amp;gt;&lt;/pre>&#xA; *  And &lt;code>subdir/myentity.ent&lt;/code> &#xA; * contains: &#xA; * &lt;pre>&amp;lt;one&amp;gt; &amp;lt;two/&amp;gt; &amp;lt;/one&amp;gt; &amp;lt;?pi 3.14159?&amp;gt; &#xA; * &amp;lt;more/&amp;gt;&lt;/pre>&#xA; * &lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;unbound-prefix-in-entity&quot; [warning]&lt;/code>&lt;/dt>&#xA; * &lt;dd> An &#xA; * implementation dependent warning that may be raised if the configuration &#xA; * parameter &quot;&lt;a href='http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-namespaces'>&#xA; * namespaces&lt;/a>&quot; is set to &lt;code>true&lt;/code> and an unbound namespace prefix is &#xA; * encountered in an entity's replacement text. Raising this warning is not &#xA; * enforced since some existing parsers may not recognize unbound namespace &#xA; * prefixes in the replacement text of entities. &lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;unknown-character-denormalization&quot; [fatal]&lt;/code>&lt;/dt>&#xA; * &lt;dd> Raised if the &#xA; * configuration parameter &quot;ignore-unknown-character-denormalizations&quot; is &#xA; * set to &lt;code>false&lt;/code> and a character is encountered for which the &#xA; * processor cannot determine the normalization properties. &lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;unsupported-encoding&quot; [fatal]&lt;/code>&lt;/dt>&#xA; * &lt;dd> Raised if an unsupported &#xA; * encoding is encountered. &lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;unsupported-media-type&quot; [fatal]&lt;/code>&lt;/dt>&#xA; * &lt;dd> &#xA; * Raised if the configuration parameter &quot;supported-media-types-only&quot; is set &#xA; * to &lt;code>true&lt;/code> and an unsupported media type is encountered. &lt;/dd>&#xA; * &lt;/dl> &#xA; * &lt;p> In addition to raising the defined errors and warnings, implementations &#xA; * are expected to raise implementation specific errors and warnings for any &#xA; * other error and warning cases such as IO errors (file not found, &#xA; * permission denied,...), XML well-formedness errors, and so on. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
