<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="LSOutput.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>ls</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="LSOutput">
    <members xsi:type="members:InterfaceMethod" name="getCharacterStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/Writer.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a writable stream to which 16-bit units can be output. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCharacterStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="characterStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/Writer.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a writable stream to which 16-bit units can be output. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getByteStream">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <namespaces>java</namespaces>
        <namespaces>io</namespaces>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/io/OutputStream.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a writable stream of bytes. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setByteStream">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="byteStream">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <namespaces>java</namespaces>
          <namespaces>io</namespaces>
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/io/OutputStream.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  An attribute of a language and binding dependent type that represents &#xA;     * a writable stream of bytes. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getSystemId">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The system identifier, a URI reference [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>], for this &#xA;     * output destination. &#xA;     * &lt;br> If the system ID is a relative URI reference (see section 5 in [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]), the &#xA;     * behavior is implementation dependent. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setSystemId">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The system identifier, a URI reference [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>], for this &#xA;     * output destination. &#xA;     * &lt;br> If the system ID is a relative URI reference (see section 5 in [&lt;a href='http://www.ietf.org/rfc/rfc2396.txt'>IETF RFC 2396&lt;/a>]), the &#xA;     * behavior is implementation dependent. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEncoding">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The character encoding to use for the output. The encoding must be a &#xA;     * string acceptable for an XML encoding declaration ([&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>] section &#xA;     * 4.3.3 &quot;Character Encoding in Entities&quot;), it is recommended that &#xA;     * character encodings registered (as charsets) with the Internet &#xA;     * Assigned Numbers Authority [&lt;a href='ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets'>IANA-CHARSETS&lt;/a>]&#xA;     *  should be referred to using their registered names. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setEncoding">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="encoding">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The character encoding to use for the output. The encoding must be a &#xA;     * string acceptable for an XML encoding declaration ([&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>] section &#xA;     * 4.3.3 &quot;Character Encoding in Entities&quot;), it is recommended that &#xA;     * character encodings registered (as charsets) with the Internet &#xA;     * Assigned Numbers Authority [&lt;a href='ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets'>IANA-CHARSETS&lt;/a>]&#xA;     *  should be referred to using their registered names. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  This interface represents an output destination for data. &#xA; * &lt;p> This interface allows an application to encapsulate information about &#xA; * an output destination in a single object, which may include a URI, a byte &#xA; * stream (possibly with a specified encoding), a base URI, and/or a &#xA; * character stream. &#xA; * &lt;p> The exact definitions of a byte stream and a character stream are &#xA; * binding dependent. &#xA; * &lt;p> The application is expected to provide objects that implement this &#xA; * interface whenever such objects are needed. The application can either &#xA; * provide its own objects that implement this interface, or it can use the &#xA; * generic factory method &lt;code>DOMImplementationLS.createLSOutput()&lt;/code> &#xA; * to create objects that implement this interface. &#xA; * &lt;p> The &lt;code>LSSerializer&lt;/code> will use the &lt;code>LSOutput&lt;/code> object &#xA; * to determine where to serialize the output to. The &#xA; * &lt;code>LSSerializer&lt;/code> will look at the different outputs specified in &#xA; * the &lt;code>LSOutput&lt;/code> in the following order to know which one to &#xA; * output to, the first one that is not null and not an empty string will be &#xA; * used: &#xA; * &lt;ol>&#xA; * &lt;li> &lt;code>LSOutput.characterStream&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;li> &#xA; * &lt;code>LSOutput.byteStream&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;li> &lt;code>LSOutput.systemId&lt;/code> &#xA; * &lt;/li>&#xA; * &lt;/ol> &#xA; * &lt;p> &lt;code>LSOutput&lt;/code> objects belong to the application. The DOM &#xA; * implementation will never modify them (though it may make copies and &#xA; * modify the copies, if necessary). &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>Document Object Model (DOM) Level 3 Load&#xA;and Save Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
