<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="CSSPrimitiveValue.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>css</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="CSSPrimitiveValue">
    <members xsi:type="members:Field" name="CSS_UNKNOWN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// UnitTypes</comments>
        <comments>/**&#xA;     * The value is not a recognized CSS2 value. The value can only be &#xA;     * obtained by using the &lt;code>cssText&lt;/code> attribute.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_NUMBER">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a simple number. The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_PERCENTAGE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a percentage. The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_EMS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (ems). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_EXS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="4"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (exs). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_PX">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="5"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (px). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_CM">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="6"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (cm). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_MM">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="7"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (mm). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_IN">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="8"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (in). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_PT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="9"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (pt). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_PC">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="10"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a length (pc). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_DEG">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="11"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is an angle (deg). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_RAD">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="12"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is an angle (rad). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_GRAD">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="13"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is an angle (grad). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_MS">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="14"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a time (ms). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_S">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="15"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a time (s). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_HZ">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="16"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a frequency (Hz). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_KHZ">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="17"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a frequency (kHz). The value can be obtained by using the &#xA;     * &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_DIMENSION">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="18"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a number with an unknown dimension. The value can be &#xA;     * obtained by using the &lt;code>getFloatValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_STRING">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="19"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a STRING. The value can be obtained by using the &#xA;     * &lt;code>getStringValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_URI">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="20"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a URI. The value can be obtained by using the &#xA;     * &lt;code>getStringValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_IDENT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="21"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is an identifier. The value can be obtained by using the &#xA;     * &lt;code>getStringValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_ATTR">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="22"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a attribute function. The value can be obtained by using &#xA;     * the &lt;code>getStringValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_COUNTER">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="23"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a counter or counters function. The value can be obtained &#xA;     * by using the &lt;code>getCounterValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_RECT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="24"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a rect function. The value can be obtained by using the &#xA;     * &lt;code>getRectValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="CSS_RGBCOLOR">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="25"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The value is a RGB color. The value can be obtained by using the &#xA;     * &lt;code>getRGBColorValue&lt;/code> method.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPrimitiveType">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The type of the value as defined by the constants specified above.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setFloatValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unitType">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="floatValue">
        <typeReference xsi:type="types:Float"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  A method to set the float value with a specified unit. If the property &#xA;     * attached with this value can not accept the specified unit or the &#xA;     * float value, the value will be unchanged and a &#xA;     * &lt;code>DOMException&lt;/code> will be raised. &#xA;     * @param unitType A unit code as defined above. The unit code can only &#xA;     *   be a float unit type (i.e. &lt;code>CSS_NUMBER&lt;/code>, &#xA;     *   &lt;code>CSS_PERCENTAGE&lt;/code>, &lt;code>CSS_EMS&lt;/code>, &#xA;     *   &lt;code>CSS_EXS&lt;/code>, &lt;code>CSS_PX&lt;/code>, &lt;code>CSS_CM&lt;/code>, &#xA;     *   &lt;code>CSS_MM&lt;/code>, &lt;code>CSS_IN&lt;/code>, &lt;code>CSS_PT&lt;/code>, &#xA;     *   &lt;code>CSS_PC&lt;/code>, &lt;code>CSS_DEG&lt;/code>, &lt;code>CSS_RAD&lt;/code>, &#xA;     *   &lt;code>CSS_GRAD&lt;/code>, &lt;code>CSS_MS&lt;/code>, &lt;code>CSS_S&lt;/code>, &#xA;     *   &lt;code>CSS_HZ&lt;/code>, &lt;code>CSS_KHZ&lt;/code>, &#xA;     *   &lt;code>CSS_DIMENSION&lt;/code>). &#xA;     * @param floatValue The new float value. &#xA;     * @exception DOMException&#xA;     *    INVALID_ACCESS_ERR: Raised if the attached property doesn't support &#xA;     *   the float value or the unit type.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFloatValue">
      <typeReference xsi:type="types:Float"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="unitType">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  This method is used to get a float value in a specified unit. If this &#xA;     * CSS value doesn't contain a float value or can't be converted into &#xA;     * the specified unit, a &lt;code>DOMException&lt;/code> is raised. &#xA;     * @param unitType A unit code to get the float value. The unit code can &#xA;     *   only be a float unit type (i.e. &lt;code>CSS_NUMBER&lt;/code>, &#xA;     *   &lt;code>CSS_PERCENTAGE&lt;/code>, &lt;code>CSS_EMS&lt;/code>, &#xA;     *   &lt;code>CSS_EXS&lt;/code>, &lt;code>CSS_PX&lt;/code>, &lt;code>CSS_CM&lt;/code>, &#xA;     *   &lt;code>CSS_MM&lt;/code>, &lt;code>CSS_IN&lt;/code>, &lt;code>CSS_PT&lt;/code>, &#xA;     *   &lt;code>CSS_PC&lt;/code>, &lt;code>CSS_DEG&lt;/code>, &lt;code>CSS_RAD&lt;/code>, &#xA;     *   &lt;code>CSS_GRAD&lt;/code>, &lt;code>CSS_MS&lt;/code>, &lt;code>CSS_S&lt;/code>, &#xA;     *   &lt;code>CSS_HZ&lt;/code>, &lt;code>CSS_KHZ&lt;/code>, &#xA;     *   &lt;code>CSS_DIMENSION&lt;/code>). &#xA;     * @return  The float value in the specified unit. &#xA;     * @exception DOMException&#xA;     *    INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float &#xA;     *   value or if the float value can't be converted into the specified &#xA;     *   unit. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setStringValue">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stringType">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="stringValue">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  A method to set the string value with the specified unit. If the &#xA;     * property attached to this value can't accept the specified unit or &#xA;     * the string value, the value will be unchanged and a &#xA;     * &lt;code>DOMException&lt;/code> will be raised. &#xA;     * @param stringType A string code as defined above. The string code can &#xA;     *   only be a string unit type (i.e. &lt;code>CSS_STRING&lt;/code>, &#xA;     *   &lt;code>CSS_URI&lt;/code>, &lt;code>CSS_IDENT&lt;/code>, and &#xA;     *   &lt;code>CSS_ATTR&lt;/code>). &#xA;     * @param stringValue The new string value. &#xA;     * @exception DOMException&#xA;     *    INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string &#xA;     *   value or if the string value can't be converted into the specified &#xA;     *   unit.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStringValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  This method is used to get the string value. If the CSS value doesn't &#xA;     * contain a string value, a &lt;code>DOMException&lt;/code> is raised.  Some &#xA;     * properties (like 'font-family' or 'voice-family') convert a &#xA;     * whitespace separated list of idents to a string. &#xA;     * @return  The string value in the current unit. The current &#xA;     *   &lt;code>primitiveType&lt;/code> can only be a string unit type (i.e. &#xA;     *   &lt;code>CSS_STRING&lt;/code>, &lt;code>CSS_URI&lt;/code>, &#xA;     *   &lt;code>CSS_IDENT&lt;/code> and &lt;code>CSS_ATTR&lt;/code>). &#xA;     * @exception DOMException&#xA;     *    INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string &#xA;     *   value. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCounterValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Counter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  This method is used to get the Counter value. If this CSS value &#xA;     * doesn't contain a counter value, a &lt;code>DOMException&lt;/code> is &#xA;     * raised. Modification to the corresponding style property can be &#xA;     * achieved using the &lt;code>Counter&lt;/code> interface. &#xA;     * @return The Counter value.&#xA;     * @exception DOMException&#xA;     *    INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a &#xA;     *   Counter value (e.g. this is not &lt;code>CSS_COUNTER&lt;/code>). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRectValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Rect.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  This method is used to get the Rect value. If this CSS value doesn't &#xA;     * contain a rect value, a &lt;code>DOMException&lt;/code> is raised. &#xA;     * Modification to the corresponding style property can be achieved &#xA;     * using the &lt;code>Rect&lt;/code> interface. &#xA;     * @return The Rect value.&#xA;     * @exception DOMException&#xA;     *    INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Rect &#xA;     *   value. (e.g. this is not &lt;code>CSS_RECT&lt;/code>). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRGBColorValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="RGBColor.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  This method is used to get the RGB color. If this CSS value doesn't &#xA;     * contain a RGB color value, a &lt;code>DOMException&lt;/code> is raised. &#xA;     * Modification to the corresponding style property can be achieved &#xA;     * using the &lt;code>RGBColor&lt;/code> interface. &#xA;     * @return the RGB color value.&#xA;     * @exception DOMException&#xA;     *    INVALID_ACCESS_ERR: Raised if the attached property can't return a &#xA;     *   RGB color value (e.g. this is not &lt;code>CSS_RGBCOLOR&lt;/code>). &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  The &lt;code>CSSPrimitiveValue&lt;/code> interface represents a single CSS value&#xA; * . This interface may be used to determine the value of a specific style &#xA; * property currently set in a block or to set a specific style property &#xA; * explicitly within the block. An instance of this interface might be &#xA; * obtained from the &lt;code>getPropertyCSSValue&lt;/code> method of the &#xA; * &lt;code>CSSStyleDeclaration&lt;/code> interface. A &#xA; * &lt;code>CSSPrimitiveValue&lt;/code> object only occurs in a context of a CSS &#xA; * property. &#xA; * &lt;p> Conversions are allowed between absolute values (from millimeters to &#xA; * centimeters, from degrees to radians, and so on) but not between relative &#xA; * values. (For example, a pixel value cannot be converted to a centimeter &#xA; * value.) Percentage values can't be converted since they are relative to &#xA; * the parent value (or another property value). There is one exception for &#xA; * color percentage values: since a color percentage value is relative to &#xA; * the range 0-255, a color percentage value can be converted to a number; &#xA; * (see also the &lt;code>RGBColor&lt;/code> interface). &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="CSSValue.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
