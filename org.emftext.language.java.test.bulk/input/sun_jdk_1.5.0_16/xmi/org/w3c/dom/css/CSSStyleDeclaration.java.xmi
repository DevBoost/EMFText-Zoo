<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="CSSStyleDeclaration.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>css</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="CSSStyleDeclaration">
    <members xsi:type="members:InterfaceMethod" name="getCssText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The parsable textual representation of the declaration block &#xA;     * (excluding the surrounding curly braces). Setting this attribute will &#xA;     * result in the parsing of the new value and resetting of all the &#xA;     * properties in the declaration block including the removal or addition &#xA;     * of properties. &#xA;     * @exception DOMException&#xA;     *   SYNTAX_ERR: Raised if the specified CSS string value has a syntax &#xA;     *   error and is unparsable.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is &#xA;     *   readonly or a property is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setCssText">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cssText">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPropertyValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propertyName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Used to retrieve the value of a CSS property if it has been explicitly &#xA;     * set within this declaration block. &#xA;     * @param propertyName The name of the CSS property. See the CSS property &#xA;     *   index. &#xA;     * @return  Returns the value of the property if it has been explicitly &#xA;     *   set for this declaration block. Returns the empty string if the &#xA;     *   property has not been set. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPropertyCSSValue">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="CSSValue.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propertyName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Used to retrieve the object representation of the value of a CSS &#xA;     * property if it has been explicitly set within this declaration block. &#xA;     * This method returns &lt;code>null&lt;/code> if the property is a shorthand &#xA;     * property. Shorthand property values can only be accessed and modified &#xA;     * as strings, using the &lt;code>getPropertyValue&lt;/code> and &#xA;     * &lt;code>setProperty&lt;/code> methods. &#xA;     * @param propertyName The name of the CSS property. See the CSS property &#xA;     *   index. &#xA;     * @return  Returns the value of the property if it has been explicitly &#xA;     *   set for this declaration block. Returns &lt;code>null&lt;/code> if the &#xA;     *   property has not been set. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeProperty">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propertyName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Used to remove a CSS property if it has been explicitly set within &#xA;     * this declaration block. &#xA;     * @param propertyName The name of the CSS property. See the CSS property &#xA;     *   index. &#xA;     * @return  Returns the value of the property if it has been explicitly &#xA;     *   set for this declaration block. Returns the empty string if the &#xA;     *   property has not been set or the property name does not correspond &#xA;     *   to a known CSS property. &#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly &#xA;     *   or the property is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getPropertyPriority">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propertyName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Used to retrieve the priority of a CSS property (e.g. the &#xA;     * &lt;code>&quot;important&quot;&lt;/code> qualifier) if the property has been &#xA;     * explicitly set in this declaration block. &#xA;     * @param propertyName The name of the CSS property. See the CSS property &#xA;     *   index. &#xA;     * @return  A string representing the priority (e.g. &#xA;     *   &lt;code>&quot;important&quot;&lt;/code>) if one exists. The empty string if none &#xA;     *   exists. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="setProperty">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="propertyName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="priority">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Used to set a property value and priority within this declaration &#xA;     * block. &#xA;     * @param propertyName The name of the CSS property. See the CSS property &#xA;     *   index. &#xA;     * @param value The new value of the property. &#xA;     * @param priority The new priority of the property (e.g. &#xA;     *   &lt;code>&quot;important&quot;&lt;/code>).  &#xA;     * @exception DOMException&#xA;     *   SYNTAX_ERR: Raised if the specified value has a syntax error and is &#xA;     *   unparsable.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is &#xA;     *   readonly or the property is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getLength">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The number of properties that have been explicitly set in this &#xA;     * declaration block. The range of valid indices is 0 to length-1 &#xA;     * inclusive. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="item">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="index">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Used to retrieve the properties that have been explicitly set in this &#xA;     * declaration block. The order of the properties retrieved using this &#xA;     * method does not have to be the order in which they were set. This &#xA;     * method can be used to iterate over all properties in this declaration &#xA;     * block. &#xA;     * @param index Index of the property name to retrieve. &#xA;     * @return  The name of the property at this ordinal position. The empty &#xA;     *   string if no property exists at this position. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParentRule">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="CSSRule.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The CSS rule that contains this declaration block or &lt;code>null&lt;/code> &#xA;     * if this &lt;code>CSSStyleDeclaration&lt;/code> is not attached to a &#xA;     * &lt;code>CSSRule&lt;/code>. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  The &lt;code>CSSStyleDeclaration&lt;/code> interface represents a single CSS &#xA; * declaration block. This interface may be used to determine the style &#xA; * properties currently set in a block or to set style properties explicitly &#xA; * within the block. &#xA; * &lt;p> While an implementation may not recognize all CSS properties within a &#xA; * CSS declaration block, it is expected to provide access to all specified &#xA; * properties in the style sheet through the &lt;code>CSSStyleDeclaration&lt;/code>&#xA; *  interface. Furthermore, implementations that support a specific level of &#xA; * CSS should correctly handle CSS shorthand properties for that level. For &#xA; * a further discussion of shorthand properties, see the &#xA; * &lt;code>CSS2Properties&lt;/code> interface. &#xA; * &lt;p> This interface is also used to provide a read-only access to the &#xA; * computed values of an element. See also the &lt;code>ViewCSS&lt;/code> &#xA; * interface.  The CSS Object Model doesn't provide an access to the &#xA; * specified or actual values of the CSS cascade. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113'>Document Object Model (DOM) Level 2 Style Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
