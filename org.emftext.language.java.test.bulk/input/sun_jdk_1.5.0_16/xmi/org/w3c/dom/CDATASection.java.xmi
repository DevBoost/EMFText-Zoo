<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/types ../../../java.ecore#/16" name="CDATASection.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="CDATASection">
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * CDATA sections are used to escape blocks of text containing characters that &#xA; * would otherwise be regarded as markup. The only delimiter that is &#xA; * recognized in a CDATA section is the &quot;]]&amp;gt;&quot; string that ends the CDATA &#xA; * section. CDATA sections cannot be nested. Their primary purpose is for &#xA; * including material such as XML fragments, without needing to escape all &#xA; * the delimiters.&#xA; * &lt;p>The &lt;code>CharacterData.data&lt;/code> attribute holds the text that is &#xA; * contained by the CDATA section. Note that this &lt;em>may&lt;/em> contain characters that need to be escaped outside of CDATA sections and &#xA; * that, depending on the character encoding (&quot;charset&quot;) chosen for &#xA; * serialization, it may be impossible to write out some characters as part &#xA; * of a CDATA section.&#xA; * &lt;p>The &lt;code>CDATASection&lt;/code> interface inherits from the &#xA; * &lt;code>CharacterData&lt;/code> interface through the &lt;code>Text&lt;/code> &#xA; * interface. Adjacent &lt;code>CDATASection&lt;/code> nodes are not merged by use &#xA; * of the &lt;code>normalize&lt;/code> method of the &lt;code>Node&lt;/code> interface.&#xA; * &lt;p> No lexical check is done on the content of a CDATA section and it is &#xA; * therefore possible to have the character sequence &lt;code>&quot;]]&amp;gt;&quot;&lt;/code> &#xA; * in the content, which is illegal in a CDATA section per section 2.7 of [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>]. The &#xA; * presence of this character sequence must generate a fatal error during &#xA; * serialization or the cdata section must be splitted before the &#xA; * serialization (see also the parameter &lt;code>&quot;split-cdata-sections&quot;&lt;/code> &#xA; * in the &lt;code>DOMConfiguration&lt;/code> interface). &#xA; * &lt;p >&lt;b>Note:&lt;/b> Because no markup is recognized within a &#xA; * &lt;code>CDATASection&lt;/code>, character numeric references cannot be used as &#xA; * an escape mechanism when serializing. Therefore, action needs to be taken &#xA; * when serializing a &lt;code>CDATASection&lt;/code> with a character encoding &#xA; * where some of the contained characters cannot be represented. Failure to &#xA; * do so would not produce well-formed XML.&#xA; * &lt;p >&lt;b>Note:&lt;/b> One potential solution in the serialization process is to &#xA; * end the CDATA section before the character, output the character using a &#xA; * character reference or entity reference, and open a new CDATA section for &#xA; * any further characters in the text node. Note, however, that some code &#xA; * conversion libraries at the time of writing do not return an error or &#xA; * exception when a character is missing from the encoding, making the task &#xA; * of ensuring that data is not corrupted on serialization more difficult.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="Text.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
