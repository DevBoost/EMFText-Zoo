<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DOMConfiguration.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DOMConfiguration">
    <members xsi:type="members:InterfaceMethod" name="setParameter">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Set the value of a parameter.&#xA;     * @param name The name of the parameter to set.&#xA;     * @param value  The new value or &lt;code>null&lt;/code> if the user wishes to &#xA;     *   unset the parameter. While the type of the value parameter is &#xA;     *   defined as &lt;code>DOMUserData&lt;/code>, the object type must match the &#xA;     *   type defined by the definition of the parameter. For example, if &#xA;     *   the parameter is &quot;error-handler&quot;, the value must be of type &#xA;     *   &lt;code>DOMErrorHandler&lt;/code>. &#xA;     * @exception DOMException&#xA;     *    NOT_FOUND_ERR: Raised when the parameter name is not recognized. &#xA;     *   &lt;br> NOT_SUPPORTED_ERR: Raised when the parameter name is recognized &#xA;     *   but the requested value cannot be set. &#xA;     *   &lt;br> TYPE_MISMATCH_ERR: Raised if the value type for this parameter &#xA;     *   name is incompatible with the expected value type. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Return the value of a parameter if known. &#xA;     * @param name  The name of the parameter. &#xA;     * @return  The current object associated with the specified parameter or &#xA;     *   &lt;code>null&lt;/code> if no object has been associated or if the &#xA;     *   parameter is not supported. &#xA;     * @exception DOMException&#xA;     *    NOT_FOUND_ERR: Raised when the parameter name is not recognized. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="canSetParameter">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="value">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Check if setting a parameter to a specific value is supported.&#xA;     * @param name The name of the parameter to check.&#xA;     * @param value  An object. if &lt;code>null&lt;/code>, the returned value is &#xA;     *   &lt;code>true&lt;/code>. &#xA;     * @return  &lt;code>true&lt;/code> if the parameter could be successfully set &#xA;     *   to the specified value, or &lt;code>false&lt;/code> if the parameter is &#xA;     *   not recognized or the requested value is not supported. This does &#xA;     *   not change the current value of the parameter itself. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getParameterNames">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DOMStringList.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The list of the parameters supported by this &#xA;     * &lt;code>DOMConfiguration&lt;/code> object and for which at least one value &#xA;     * can be set by the application. Note that this list can also contain &#xA;     * parameter names defined outside this specification. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  The &lt;code>DOMConfiguration&lt;/code> interface represents the configuration &#xA; * of a document and maintains a table of recognized parameters. Using the &#xA; * configuration, it is possible to change &#xA; * &lt;code>Document.normalizeDocument()&lt;/code> behavior, such as replacing the &#xA; * &lt;code>CDATASection&lt;/code> nodes with &lt;code>Text&lt;/code> nodes or &#xA; * specifying the type of the schema that must be used when the validation &#xA; * of the &lt;code>Document&lt;/code> is requested. &lt;code>DOMConfiguration&lt;/code> &#xA; * objects are also used in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>DOM Level 3 Load and Save&lt;/a>]&#xA; *  in the &lt;code>DOMParser&lt;/code> and &lt;code>DOMSerializer&lt;/code> interfaces. &#xA; * &lt;p> The parameter names used by the &lt;code>DOMConfiguration&lt;/code> object &#xA; * are defined throughout the DOM Level 3 specifications. Names are &#xA; * case-insensitive. To avoid possible conflicts, as a convention, names &#xA; * referring to parameters defined outside the DOM specification should be &#xA; * made unique. Because parameters are exposed as properties in the , names &#xA; * are recommended to follow the section 5.16 Identifiers of [Unicode] with the addition of the character '-' (HYPHEN-MINUS) but it is not &#xA; * enforced by the DOM implementation. DOM Level 3 Core Implementations are &#xA; * required to recognize all parameters defined in this specification. Some &#xA; * parameter values may also be required to be supported by the &#xA; * implementation. Refer to the definition of the parameter to know if a &#xA; * value must be supported or not. &#xA; * &lt;p >&lt;b>Note:&lt;/b>  Parameters are similar to features and properties used in &#xA; * SAX2 [&lt;a href='http://www.saxproject.org/'>SAX&lt;/a>]. &#xA; * &lt;p> The following list of parameters defined in the DOM: &#xA; * &lt;dl>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;canonical-form&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Canonicalize the document according to the rules specified in [&lt;a href='http://www.w3.org/TR/2001/REC-xml-c14n-20010315'>Canonical XML&lt;/a>], &#xA; * such as removing the &lt;code>DocumentType&lt;/code> node (if any) from the &#xA; * tree, or removing superfluous namespace declarations from each element. &#xA; * Note that this is limited to what can be represented in the DOM; in &#xA; * particular, there is no way to specify the order of the attributes in the &#xA; * DOM. In addition,  Setting this parameter to &lt;code>true&lt;/code> will also &#xA; * set the state of the parameters listed below. Later changes to the state &#xA; * of one of those parameters will revert &quot;canonical-form&quot; back to &#xA; * &lt;code>false&lt;/code>. Parameters set to &lt;code>false&lt;/code>: &quot;entities&quot;, &quot;&#xA; * normalize-characters&quot;, &quot;cdata-sections&quot;. Parameters set to &#xA; * &lt;code>true&lt;/code>: &quot;namespaces&quot;, &quot;namespace-declarations&quot;, &quot;well-formed&quot;, &#xA; * &quot;element-content-whitespace&quot;. Other parameters are not changed unless &#xA; * explicitly specified in the description of the parameters.&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Do not canonicalize the document.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;cdata-sections&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&#xA; * &lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Keep &lt;code>CDATASection&lt;/code> nodes in the document.&lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>]Transform &lt;code>CDATASection&lt;/code> nodes in the document into &#xA; * &lt;code>Text&lt;/code> nodes. The new &lt;code>Text&lt;/code> node is then combined &#xA; * with any adjacent &lt;code>Text&lt;/code> node.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;check-character-normalization&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Check if the characters in the document are &lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm'>fully &#xA; * normalized&lt;/a>, as defined in appendix B of [&lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1&lt;/a>]. When a &#xA; * sequence of characters is encountered that fails normalization checking, &#xA; * an error with the &lt;code>DOMError.type&lt;/code> equals to &#xA; * &quot;check-character-normalization-failure&quot; is issued. &lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Do not check if characters are normalized.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;comments&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&#xA; * &lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Keep &lt;code>Comment&lt;/code> nodes in the document.&lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>]Discard &lt;code>Comment&lt;/code> nodes in the document.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;datatype-normalization&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Expose schema normalized values in the tree, such as &lt;a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-nv'>XML &#xA; * Schema normalized values&lt;/a> in the case of XML Schema. Since this parameter requires to have schema &#xA; * information, the &quot;validate&quot; parameter will also be set to &#xA; * &lt;code>true&lt;/code>. Having this parameter activated when &quot;validate&quot; is &#xA; * &lt;code>false&lt;/code> has no effect and no schema-normalization will happen. &#xA; * &lt;p >&lt;b>Note:&lt;/b>  Since the document contains the result of the XML 1.0 &#xA; * processing, this parameter does not apply to attribute value &#xA; * normalization as defined in section 3.3.3 of [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>] and is only &#xA; * meant for schema languages other than Document Type Definition (DTD). &lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Do not perform schema normalization on the tree. &lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;element-content-whitespace&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Keep all whitespaces in the document.&lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Discard all &lt;code>Text&lt;/code> nodes that contain whitespaces in element &#xA; * content, as described in &lt;a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>&#xA; * [element content whitespace]&lt;/a>. The implementation is expected to use the attribute &#xA; * &lt;code>Text.isElementContentWhitespace&lt;/code> to determine if a &#xA; * &lt;code>Text&lt;/code> node should be discarded or not.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;entities&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&#xA; * &lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Keep &lt;code>EntityReference&lt;/code> nodes in the document.&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] Remove all &lt;code>EntityReference&lt;/code> nodes from the document, &#xA; * putting the entity expansions directly in their place. &lt;code>Text&lt;/code> &#xA; * nodes are normalized, as defined in &lt;code>Node.normalize&lt;/code>. Only &lt;a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/#infoitem.rse'>&#xA; * unexpanded entity references&lt;/a> are kept in the document. &lt;/dd>&#xA; * &lt;/dl>&#xA; * &lt;p >&lt;b>Note:&lt;/b>  This parameter does not affect &lt;code>Entity&lt;/code> nodes. &lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;error-handler&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] Contains a &lt;code>DOMErrorHandler&lt;/code> object. If an error is &#xA; * encountered in the document, the implementation will call back the &#xA; * &lt;code>DOMErrorHandler&lt;/code> registered using this parameter. The &#xA; * implementation may provide a default &lt;code>DOMErrorHandler&lt;/code> object. &#xA; *  When called, &lt;code>DOMError.relatedData&lt;/code> will contain the closest &#xA; * node to where the error occurred. If the implementation is unable to &#xA; * determine the node where the error occurs, &#xA; * &lt;code>DOMError.relatedData&lt;/code> will contain the &lt;code>Document&lt;/code> &#xA; * node. Mutations to the document from within an error handler will result &#xA; * in implementation dependent behavior. &lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;infoset&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&#xA; * &lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>]Keep in the document the information defined in the XML Information Set [&lt;a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set&lt;/a>]&#xA; * .This forces the following parameters to &lt;code>false&lt;/code>: &quot;&#xA; * validate-if-schema&quot;, &quot;entities&quot;, &quot;datatype-normalization&quot;, &quot;cdata-sections&#xA; * &quot;.This forces the following parameters to &lt;code>true&lt;/code>: &quot;&#xA; * namespace-declarations&quot;, &quot;well-formed&quot;, &quot;element-content-whitespace&quot;, &quot;&#xA; * comments&quot;, &quot;namespaces&quot;.Other parameters are not changed unless &#xA; * explicitly specified in the description of the parameters. Note that &#xA; * querying this parameter with &lt;code>getParameter&lt;/code> returns &#xA; * &lt;code>true&lt;/code> only if the individual parameters specified above are &#xA; * appropriately set.&lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>Setting &lt;code>infoset&lt;/code> to &#xA; * &lt;code>false&lt;/code> has no effect.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;namespaces&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&#xA; * &lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Perform the namespace processing as defined in . &lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Do not perform the namespace processing. &lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;namespace-declarations&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd> This parameter has no effect if the &#xA; * parameter &quot;namespaces&quot; is set to &lt;code>false&lt;/code>. &#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Include namespace declaration attributes, specified or defaulted from &#xA; * the schema, in the document. See also the sections &quot;Declaring Namespaces&quot; &#xA; * in [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA; *  and [&lt;a href='http://www.w3.org/TR/2004/REC-xml-names11-20040204/'>XML Namespaces 1.1&lt;/a>]&#xA; * .&lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>]Discard all namespace declaration attributes. The namespace prefixes (&#xA; * &lt;code>Node.prefix&lt;/code>) are retained even if this parameter is set to &#xA; * &lt;code>false&lt;/code>.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;normalize-characters&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] &lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm'>Fully &#xA; * normalized&lt;/a> the characters in the document as defined in appendix B of [&lt;a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1&lt;/a>]. &lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Do not perform character normalization.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;schema-location&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Represent a &lt;code>DOMString&lt;/code> object containing a list of URIs, &#xA; * separated by whitespaces (characters matching the &lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-S'>nonterminal &#xA; * production S&lt;/a> defined in section 2.3 [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>]), that &#xA; * represents the schemas against which validation should occur, i.e. the &#xA; * current schema. The types of schemas referenced in this list must match &#xA; * the type specified with &lt;code>schema-type&lt;/code>, otherwise the behavior &#xA; * of an implementation is undefined.  The schemas specified using this &#xA; * property take precedence to the schema information specified in the &#xA; * document itself. For namespace aware schema, if a schema specified using &#xA; * this property and a schema specified in the document instance (i.e. using &#xA; * the &lt;code>schemaLocation&lt;/code> attribute) in a schema document (i.e. &#xA; * using schema &lt;code>import&lt;/code> mechanisms) share the same &#xA; * &lt;code>targetNamespace&lt;/code>, the schema specified by the user using this &#xA; * property will be used. If two schemas specified using this property share &#xA; * the same &lt;code>targetNamespace&lt;/code> or have no namespace, the behavior &#xA; * is implementation dependent.  If no location has been provided, this &#xA; * parameter is &lt;code>null&lt;/code>. &#xA; * &lt;p >&lt;b>Note:&lt;/b>  The &lt;code>&quot;schema-location&quot;&lt;/code> parameter is ignored &#xA; * unless the &quot;schema-type&quot; parameter value is set. It is strongly &#xA; * recommended that &lt;code>Document.documentURI&lt;/code> will be set so that an &#xA; * implementation can successfully resolve any external entities referenced. &lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>&quot;schema-type&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Represent a &lt;code>DOMString&lt;/code> object containing an absolute URI &#xA; * and representing the type of the schema language used to validate a &#xA; * document against. Note that no lexical checking is done on the absolute &#xA; * URI.  If this parameter is not set, a default value may be provided by &#xA; * the implementation, based on the schema languages supported and on the &#xA; * schema language used at load time. If no value is provided, this &#xA; * parameter is &lt;code>null&lt;/code>. &#xA; * &lt;p >&lt;b>Note:&lt;/b>  For XML Schema [&lt;a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1&lt;/a>]&#xA; * , applications must use the value &#xA; * &lt;code>&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/code>. For XML DTD [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>], &#xA; * applications must use the value &#xA; * &lt;code>&quot;http://www.w3.org/TR/REC-xml&quot;&lt;/code>. Other schema languages are &#xA; * outside the scope of the W3C and therefore should recommend an absolute &#xA; * URI in order to use this method. &lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;split-cdata-sections&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&#xA; * &lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>)Split CDATA sections containing the CDATA section termination marker &#xA; * ']]&amp;gt;'. When a CDATA section is split a warning is issued with a &#xA; * &lt;code>DOMError.type&lt;/code> equals to &#xA; * &lt;code>&quot;cdata-sections-splitted&quot;&lt;/code> and &#xA; * &lt;code>DOMError.relatedData&lt;/code> equals to the first &#xA; * &lt;code>CDATASection&lt;/code> node in document order resulting from the split.&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>]Signal an error if a &lt;code>CDATASection&lt;/code> contains an &#xA; * unrepresentable character.&lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;validate&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Require the validation against a schema (i.e. XML schema, DTD, any &#xA; * other type or representation of schema) of the document as it is being &#xA; * normalized as defined by [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>]. If &#xA; * validation errors are found, or no schema was found, the error handler is &#xA; * notified. Schema-normalized values will not be exposed according to the &#xA; * schema in used unless the parameter &quot;datatype-normalization&quot; is &#xA; * &lt;code>true&lt;/code>.  This parameter will reevaluate: &#xA; * &lt;ul>&#xA; * &lt;li> Attribute nodes with &#xA; * &lt;code>Attr.specified&lt;/code> equals to &lt;code>false&lt;/code>, as specified in &#xA; * the description of the &lt;code>Attr&lt;/code> interface; &#xA; * &lt;/li>&#xA; * &lt;li> The value of the &#xA; * attribute &lt;code>Text.isElementContentWhitespace&lt;/code> for all &#xA; * &lt;code>Text&lt;/code> nodes; &#xA; * &lt;/li>&#xA; * &lt;li> The value of the attribute &#xA; * &lt;code>Attr.isId&lt;/code> for all &lt;code>Attr&lt;/code> nodes; &#xA; * &lt;/li>&#xA; * &lt;li> The attributes &#xA; * &lt;code>Element.schemaTypeInfo&lt;/code> and &lt;code>Attr.schemaTypeInfo&lt;/code>. &#xA; * &lt;/li>&#xA; * &lt;/ul>&#xA; * &lt;p >&lt;b>Note:&lt;/b>  &quot;validate-if-schema&quot; and &quot;validate&quot; are mutually &#xA; * exclusive, setting one of them to &lt;code>true&lt;/code> will set the other &#xA; * one to &lt;code>false&lt;/code>. Applications should also consider setting the &#xA; * parameter &quot;well-formed&quot; to &lt;code>true&lt;/code>, which is the default for &#xA; * that option, when validating the document. &lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Do not accomplish schema processing, including the internal subset &#xA; * processing. Default attribute values information are kept. Note that &#xA; * validation might still happen if &quot;validate-if-schema&quot; is &lt;code>true&lt;/code>&#xA; * . &lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;validate-if-schema&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>]Enable validation only if a declaration for the document element can be &#xA; * found in a schema (independently of where it is found, i.e. XML schema, &#xA; * DTD, or any other type or representation of schema). If validation is &#xA; * enabled, this parameter has the same behavior as the parameter &quot;validate&quot; &#xA; * set to &lt;code>true&lt;/code>. &#xA; * &lt;p >&lt;b>Note:&lt;/b>  &quot;validate-if-schema&quot; and &quot;validate&quot; are mutually &#xA; * exclusive, setting one of them to &lt;code>true&lt;/code> will set the other &#xA; * one to &lt;code>false&lt;/code>. &lt;/dd>&#xA; * &lt;dt>&lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) No schema processing should be performed if the document has a schema, &#xA; * including internal subset processing. Default attribute values &#xA; * information are kept. Note that validation must still happen if &quot;validate&#xA; * &quot; is &lt;code>true&lt;/code>. &lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;dt>&lt;code>&quot;well-formed&quot;&lt;/code>&lt;/dt>&#xA; * &lt;dd>&#xA; * &lt;dl>&#xA; * &lt;dt>&lt;code>true&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>required&lt;/em>] (&lt;em>default&lt;/em>) Check if all nodes are XML well formed according to the XML version in &#xA; * use in &lt;code>Document.xmlVersion&lt;/code>: &#xA; * &lt;ul>&#xA; * &lt;li> check if the attribute &#xA; * &lt;code>Node.nodeName&lt;/code> contains invalid characters according to its &#xA; * node type and generate a &lt;code>DOMError&lt;/code> of type &#xA; * &lt;code>&quot;wf-invalid-character-in-node-name&quot;&lt;/code>, with a &#xA; * &lt;code>DOMError.SEVERITY_ERROR&lt;/code> severity, if necessary; &#xA; * &lt;/li>&#xA; * &lt;li> check if &#xA; * the text content inside &lt;code>Attr&lt;/code>, &lt;code>Element&lt;/code>, &#xA; * &lt;code>Comment&lt;/code>, &lt;code>Text&lt;/code>, &lt;code>CDATASection&lt;/code> nodes &#xA; * for invalid characters and generate a &lt;code>DOMError&lt;/code> of type &#xA; * &lt;code>&quot;wf-invalid-character&quot;&lt;/code>, with a &#xA; * &lt;code>DOMError.SEVERITY_ERROR&lt;/code> severity, if necessary; &#xA; * &lt;/li>&#xA; * &lt;li> check if &#xA; * the data inside &lt;code>ProcessingInstruction&lt;/code> nodes for invalid &#xA; * characters and generate a &lt;code>DOMError&lt;/code> of type &#xA; * &lt;code>&quot;wf-invalid-character&quot;&lt;/code>, with a &#xA; * &lt;code>DOMError.SEVERITY_ERROR&lt;/code> severity, if necessary; &#xA; * &lt;/li>&#xA; * &lt;/ul>&lt;/dd>&#xA; * &lt;dt>&#xA; * &lt;code>false&lt;/code>&lt;/dt>&#xA; * &lt;dd>[&lt;em>optional&lt;/em>] Do not check for XML well-formedness. &lt;/dd>&#xA; * &lt;/dl>&lt;/dd>&#xA; * &lt;/dl>&#xA; * &lt;p> The resolution of the system identifiers associated with entities is &#xA; * done using &lt;code>Document.documentURI&lt;/code>. However, when the feature &#xA; * &quot;LS&quot; defined in [&lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>DOM Level 3 Load and Save&lt;/a>]&#xA; *  is supported by the DOM implementation, the parameter &#xA; * &quot;resource-resolver&quot; can also be used on &lt;code>DOMConfiguration&lt;/code> &#xA; * objects attached to &lt;code>Document&lt;/code> nodes. If this parameter is &#xA; * set, &lt;code>Document.normalizeDocument()&lt;/code> will invoke the resource &#xA; * resolver instead of using &lt;code>Document.documentURI&lt;/code>. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification&lt;/a>.&#xA; * @since DOM Level 3&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
