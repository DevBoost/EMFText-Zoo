<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="Text.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Text">
    <members xsi:type="members:InterfaceMethod" name="splitText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="offset">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Breaks this node into two nodes at the specified &lt;code>offset&lt;/code>, &#xA;     * keeping both in the tree as siblings. After being split, this node &#xA;     * will contain all the content up to the &lt;code>offset&lt;/code> point. A &#xA;     * new node of the same type, which contains all the content at and &#xA;     * after the &lt;code>offset&lt;/code> point, is returned. If the original &#xA;     * node had a parent node, the new node is inserted as the next sibling &#xA;     * of the original node. When the &lt;code>offset&lt;/code> is equal to the &#xA;     * length of this node, the new node has no data.&#xA;     * @param offset The 16-bit unit offset at which to split, starting from &#xA;     *   &lt;code>0&lt;/code>.&#xA;     * @return The new node, of the same type as this node.&#xA;     * @exception DOMException&#xA;     *   INDEX_SIZE_ERR: Raised if the specified offset is negative or greater &#xA;     *   than the number of 16-bit units in &lt;code>data&lt;/code>.&#xA;     *   &lt;br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isElementContentWhitespace">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns whether this text node contains &lt;a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>&#xA;     * element content whitespace&lt;/a>, often abusively called &quot;ignorable whitespace&quot;. The text node is &#xA;     * determined to contain whitespace in element content during the load &#xA;     * of the document or if validation occurs while using &#xA;     * &lt;code>Document.normalizeDocument()&lt;/code>.&#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWholeText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns all text of &lt;code>Text&lt;/code> nodes logically-adjacent text &#xA;     * nodes to this node, concatenated in document order.&#xA;     * &lt;br>For instance, in the example below &lt;code>wholeText&lt;/code> on the &#xA;     * &lt;code>Text&lt;/code> node that contains &quot;bar&quot; returns &quot;barfoo&quot;, while on &#xA;     * the &lt;code>Text&lt;/code> node that contains &quot;foo&quot; it returns &quot;barfoo&quot;. &#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="replaceWholeText">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="content">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Replaces the text of the current node and all logically-adjacent text &#xA;     * nodes with the specified text. All logically-adjacent text nodes are &#xA;     * removed including the current node unless it was the recipient of the &#xA;     * replacement text.&#xA;     * &lt;br>This method returns the node which received the replacement text. &#xA;     * The returned node is: &#xA;     * &lt;ul>&#xA;     * &lt;li>&lt;code>null&lt;/code>, when the replacement text is &#xA;     * the empty string;&#xA;     * &lt;/li>&#xA;     * &lt;li>the current node, except when the current node is &#xA;     * read-only;&#xA;     * &lt;/li>&#xA;     * &lt;li> a new &lt;code>Text&lt;/code> node of the same type (&#xA;     * &lt;code>Text&lt;/code> or &lt;code>CDATASection&lt;/code>) as the current node &#xA;     * inserted at the location of the replacement.&#xA;     * &lt;/li>&#xA;     * &lt;/ul>&#xA;     * &lt;br>For instance, in the above example calling &#xA;     * &lt;code>replaceWholeText&lt;/code> on the &lt;code>Text&lt;/code> node that &#xA;     * contains &quot;bar&quot; with &quot;yo&quot; in argument results in the following: &#xA;     * &lt;br>Where the nodes to be removed are read-only descendants of an &#xA;     * &lt;code>EntityReference&lt;/code>, the &lt;code>EntityReference&lt;/code> must &#xA;     * be removed instead of the read-only nodes. If any &#xA;     * &lt;code>EntityReference&lt;/code> to be removed has descendants that are &#xA;     * not &lt;code>EntityReference&lt;/code>, &lt;code>Text&lt;/code>, or &#xA;     * &lt;code>CDATASection&lt;/code> nodes, the &lt;code>replaceWholeText&lt;/code> &#xA;     * method must fail before performing any modification of the document, &#xA;     * raising a &lt;code>DOMException&lt;/code> with the code &#xA;     * &lt;code>NO_MODIFICATION_ALLOWED_ERR&lt;/code>.&#xA;     * &lt;br>For instance, in the example below calling &#xA;     * &lt;code>replaceWholeText&lt;/code> on the &lt;code>Text&lt;/code> node that &#xA;     * contains &quot;bar&quot; fails, because the &lt;code>EntityReference&lt;/code> node &#xA;     * &quot;ent&quot; contains an &lt;code>Element&lt;/code> node which cannot be removed.&#xA;     * @param content The content of the replacing &lt;code>Text&lt;/code> node.&#xA;     * @return The &lt;code>Text&lt;/code> node created with the specified content.&#xA;     * @exception DOMException&#xA;     *   NO_MODIFICATION_ALLOWED_ERR: Raised if one of the &lt;code>Text&lt;/code> &#xA;     *   nodes being replaced is readonly.&#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Text&lt;/code> interface inherits from &lt;code>CharacterData&lt;/code> &#xA; * and represents the textual content (termed &lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204#syntax'>character data&lt;/a> in XML) of an &lt;code>Element&lt;/code> or &lt;code>Attr&lt;/code>. If there is no &#xA; * markup inside an element's content, the text is contained in a single &#xA; * object implementing the &lt;code>Text&lt;/code> interface that is the only &#xA; * child of the element. If there is markup, it is parsed into the &#xA; * information items (elements, comments, etc.) and &lt;code>Text&lt;/code> nodes &#xA; * that form the list of children of the element.&#xA; * &lt;p>When a document is first made available via the DOM, there is only one &#xA; * &lt;code>Text&lt;/code> node for each block of text. Users may create adjacent &#xA; * &lt;code>Text&lt;/code> nodes that represent the contents of a given element &#xA; * without any intervening markup, but should be aware that there is no way &#xA; * to represent the separations between these nodes in XML or HTML, so they &#xA; * will not (in general) persist between DOM editing sessions. The &#xA; * &lt;code>Node.normalize()&lt;/code> method merges any such adjacent &#xA; * &lt;code>Text&lt;/code> objects into a single node for each block of text.&#xA; * &lt;p> No lexical check is done on the content of a &lt;code>Text&lt;/code> node &#xA; * and, depending on its position in the document, some characters must be &#xA; * escaped during serialization using character references; e.g. the &#xA; * characters &quot;&amp;lt;&amp;amp;&quot; if the textual content is part of an element or of &#xA; * an attribute, the character sequence &quot;]]&amp;gt;&quot; when part of an element, &#xA; * the quotation mark character &quot; or the apostrophe character ' when part of &#xA; * an attribute. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="CharacterData.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
