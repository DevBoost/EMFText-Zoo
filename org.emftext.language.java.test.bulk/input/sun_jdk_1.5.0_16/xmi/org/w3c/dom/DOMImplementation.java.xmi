<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/types ../../../java.ecore#/16" name="DOMImplementation.java">
  <comments>/*&#xA; * Copyright (c) 2004 World Wide Web Consortium,&#xA; *&#xA; * (Massachusetts Institute of Technology, European Research Consortium for&#xA; * Informatics and Mathematics, Keio University). All Rights Reserved. This&#xA; * work is distributed under the W3C(r) Software License [1] in the hope that&#xA; * it will be useful, but WITHOUT ANY WARRANTY; without even the implied&#xA; * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA; *&#xA; * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="DOMImplementation">
    <members xsi:type="members:InterfaceMethod" name="hasFeature">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="feature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Test if the DOM implementation implements a specific feature and &#xA;     * version, as specified in .&#xA;     * @param feature  The name of the feature to test. &#xA;     * @param version  This is the version number of the feature to test. &#xA;     * @return &lt;code>true&lt;/code> if the feature is implemented in the &#xA;     *   specified version, &lt;code>false&lt;/code> otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createDocumentType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="DocumentType.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qualifiedName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="publicId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="systemId">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates an empty &lt;code>DocumentType&lt;/code> node. Entity declarations &#xA;     * and notations are not made available. Entity reference expansions and &#xA;     * default attribute additions do not occur..&#xA;     * @param qualifiedName The qualified name of the document type to be &#xA;     *   created.&#xA;     * @param publicId The external subset public identifier.&#xA;     * @param systemId The external subset system identifier.&#xA;     * @return A new &lt;code>DocumentType&lt;/code> node with &#xA;     *   &lt;code>Node.ownerDocument&lt;/code> set to &lt;code>null&lt;/code>.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the specified qualified name is not &#xA;     *   an XML name according to [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>].&#xA;     *   &lt;br>NAMESPACE_ERR: Raised if the &lt;code>qualifiedName&lt;/code> is &#xA;     *   malformed.&#xA;     *   &lt;br>NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &quot;XML&quot; and the language exposed through the &#xA;     *   Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createDocument">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="Document.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="namespaceURI">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="qualifiedName">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="doctype">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="DocumentType.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Creates a DOM Document object of the specified type with its document &#xA;     * element.&#xA;     * &lt;br>Note that based on the &lt;code>DocumentType&lt;/code> given to create &#xA;     * the document, the implementation may instantiate specialized &#xA;     * &lt;code>Document&lt;/code> objects that support additional features than &#xA;     * the &quot;Core&quot;, such as &quot;HTML&quot; [&lt;a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML&lt;/a>]&#xA;     * . On the other hand, setting the &lt;code>DocumentType&lt;/code> after the &#xA;     * document was created makes this very unlikely to happen. &#xA;     * Alternatively, specialized &lt;code>Document&lt;/code> creation methods, &#xA;     * such as &lt;code>createHTMLDocument&lt;/code> [&lt;a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML&lt;/a>]&#xA;     * , can be used to obtain specific types of &lt;code>Document&lt;/code> &#xA;     * objects.&#xA;     * @param namespaceURI The namespace URI of the document element to &#xA;     *   create or &lt;code>null&lt;/code>.&#xA;     * @param qualifiedName The qualified name of the document element to be &#xA;     *   created or &lt;code>null&lt;/code>.&#xA;     * @param doctype The type of document to be created or &lt;code>null&lt;/code>.&#xA;     *   When &lt;code>doctype&lt;/code> is not &lt;code>null&lt;/code>, its &#xA;     *   &lt;code>Node.ownerDocument&lt;/code> attribute is set to the document &#xA;     *   being created.&#xA;     * @return A new &lt;code>Document&lt;/code> object with its document element. &#xA;     *   If the &lt;code>NamespaceURI&lt;/code>, &lt;code>qualifiedName&lt;/code>, and &#xA;     *   &lt;code>doctype&lt;/code> are &lt;code>null&lt;/code>, the returned &#xA;     *   &lt;code>Document&lt;/code> is empty with no document element.&#xA;     * @exception DOMException&#xA;     *   INVALID_CHARACTER_ERR: Raised if the specified qualified name is not &#xA;     *   an XML name according to [&lt;a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0&lt;/a>].&#xA;     *   &lt;br>NAMESPACE_ERR: Raised if the &lt;code>qualifiedName&lt;/code> is &#xA;     *   malformed, if the &lt;code>qualifiedName&lt;/code> has a prefix and the &#xA;     *   &lt;code>namespaceURI&lt;/code> is &lt;code>null&lt;/code>, or if the &#xA;     *   &lt;code>qualifiedName&lt;/code> is &lt;code>null&lt;/code> and the &#xA;     *   &lt;code>namespaceURI&lt;/code> is different from &lt;code>null&lt;/code>, or &#xA;     *   if the &lt;code>qualifiedName&lt;/code> has a prefix that is &quot;xml&quot; and &#xA;     *   the &lt;code>namespaceURI&lt;/code> is different from &quot;&lt;a href='http://www.w3.org/XML/1998/namespace'>&#xA;     *   http://www.w3.org/XML/1998/namespace&lt;/a>&quot; [&lt;a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces&lt;/a>]&#xA;     *   , or if the DOM implementation does not support the &#xA;     *   &lt;code>&quot;XML&quot;&lt;/code> feature but a non-null namespace URI was &#xA;     *   provided, since namespaces were defined by XML.&#xA;     *   &lt;br>WRONG_DOCUMENT_ERR: Raised if &lt;code>doctype&lt;/code> has already &#xA;     *   been used with a different document or was created from a different &#xA;     *   implementation.&#xA;     *   &lt;br>NOT_SUPPORTED_ERR: May be raised if the implementation does not &#xA;     *   support the feature &quot;XML&quot; and the language exposed through the &#xA;     *   Document does not support XML Namespaces (such as [&lt;a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01&lt;/a>]). &#xA;     * @since DOM Level 2&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFeature">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="feature">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="version">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  This method returns a specialized object which implements the &#xA;     * specialized APIs of the specified feature and version, as specified &#xA;     * in . The specialized object may also be obtained by using &#xA;     * binding-specific casting methods but is not necessarily expected to, &#xA;     * as discussed in . This method also allow the implementation to &#xA;     * provide specialized objects which do not support the &#xA;     * &lt;code>DOMImplementation&lt;/code> interface. &#xA;     * @param feature  The name of the feature requested. Note that any plus &#xA;     *   sign &quot;+&quot; prepended to the name of the feature will be ignored since &#xA;     *   it is not significant in the context of this method. &#xA;     * @param version  This is the version number of the feature to test. &#xA;     * @return  Returns an object which implements the specialized APIs of &#xA;     *   the specified feature and version, if any, or &lt;code>null&lt;/code> if &#xA;     *   there is no object which implements interfaces associated with that &#xA;     *   feature. If the &lt;code>DOMObject&lt;/code> returned by this method &#xA;     *   implements the &lt;code>DOMImplementation&lt;/code> interface, it must &#xA;     *   delegate to the primary core &lt;code>DOMImplementation&lt;/code> and not &#xA;     *   return results inconsistent with the primary core &#xA;     *   &lt;code>DOMImplementation&lt;/code> such as &lt;code>hasFeature&lt;/code>, &#xA;     *   &lt;code>getFeature&lt;/code>, etc. &#xA;     * @since DOM Level 3&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>DOMImplementation&lt;/code> interface provides a number of methods &#xA; * for performing operations that are independent of any particular instance &#xA; * of the document object model.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification&lt;/a>.&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
