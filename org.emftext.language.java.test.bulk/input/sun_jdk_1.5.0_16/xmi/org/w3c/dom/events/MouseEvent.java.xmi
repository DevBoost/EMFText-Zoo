<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="MouseEvent.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>events</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <namespaces>views</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../views/AbstractView.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="MouseEvent">
    <members xsi:type="members:InterfaceMethod" name="getScreenX">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The horizontal coordinate at which the event occurred relative to the &#xA;     * origin of the screen coordinate system.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getScreenY">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The vertical coordinate at which the event occurred relative to the &#xA;     * origin of the screen coordinate system.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClientX">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The horizontal coordinate at which the event occurred relative to the &#xA;     * DOM implementation's client area.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getClientY">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The vertical coordinate at which the event occurred relative to the DOM &#xA;     * implementation's client area.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCtrlKey">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate whether the 'ctrl' key was depressed during the firing &#xA;     * of the event.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getShiftKey">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate whether the 'shift' key was depressed during the &#xA;     * firing of the event.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getAltKey">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate whether the 'alt' key was depressed during the firing &#xA;     * of the event. On some platforms this key may map to an alternative &#xA;     * key name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMetaKey">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate whether the 'meta' key was depressed during the firing &#xA;     * of the event. On some platforms this key may map to an alternative &#xA;     * key name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getButton">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * During mouse events caused by the depression or release of a mouse &#xA;     * button, &lt;code>button&lt;/code> is used to indicate which mouse button &#xA;     * changed state. The values for &lt;code>button&lt;/code> range from zero to &#xA;     * indicate the left button of the mouse, one to indicate the middle &#xA;     * button if present, and two to indicate the right button. For mice &#xA;     * configured for left handed use in which the button actions are &#xA;     * reversed the values are instead read from right to left.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRelatedTarget">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="EventTarget.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to identify a secondary &lt;code>EventTarget&lt;/code> related to a UI &#xA;     * event. Currently this attribute is used with the mouseover event to &#xA;     * indicate the &lt;code>EventTarget&lt;/code> which the pointing device &#xA;     * exited and with the mouseout event to indicate the &#xA;     * &lt;code>EventTarget&lt;/code> which the pointing device entered.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initMouseEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="typeArg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="canBubbleArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cancelableArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="viewArg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../views/AbstractView.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="detailArg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="screenXArg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="screenYArg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clientXArg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="clientYArg">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="ctrlKeyArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="altKeyArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="shiftKeyArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="metaKeyArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="buttonArg">
        <typeReference xsi:type="types:Short"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="relatedTargetArg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="EventTarget.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>initMouseEvent&lt;/code> method is used to initialize the value &#xA;     * of a &lt;code>MouseEvent&lt;/code> created through the &#xA;     * &lt;code>DocumentEvent&lt;/code> interface. This method may only be called &#xA;     * before the &lt;code>MouseEvent&lt;/code> has been dispatched via the &#xA;     * &lt;code>dispatchEvent&lt;/code> method, though it may be called multiple &#xA;     * times during that phase if necessary. If called multiple times, the &#xA;     * final invocation takes precedence.&#xA;     * @param typeArgSpecifies the event type.&#xA;     * @param canBubbleArgSpecifies whether or not the event can bubble.&#xA;     * @param cancelableArgSpecifies whether or not the event's default &#xA;     *   action can be prevented.&#xA;     * @param viewArgSpecifies the &lt;code>Event&lt;/code>'s &#xA;     *   &lt;code>AbstractView&lt;/code>.&#xA;     * @param detailArgSpecifies the &lt;code>Event&lt;/code>'s mouse click count.&#xA;     * @param screenXArgSpecifies the &lt;code>Event&lt;/code>'s screen x coordinate&#xA;     * @param screenYArgSpecifies the &lt;code>Event&lt;/code>'s screen y coordinate&#xA;     * @param clientXArgSpecifies the &lt;code>Event&lt;/code>'s client x coordinate&#xA;     * @param clientYArgSpecifies the &lt;code>Event&lt;/code>'s client y coordinate&#xA;     * @param ctrlKeyArgSpecifies whether or not control key was depressed &#xA;     *   during the &lt;code>Event&lt;/code>.&#xA;     * @param altKeyArgSpecifies whether or not alt key was depressed during &#xA;     *   the &lt;code>Event&lt;/code>.&#xA;     * @param shiftKeyArgSpecifies whether or not shift key was depressed &#xA;     *   during the &lt;code>Event&lt;/code>.&#xA;     * @param metaKeyArgSpecifies whether or not meta key was depressed &#xA;     *   during the &lt;code>Event&lt;/code>.&#xA;     * @param buttonArgSpecifies the &lt;code>Event&lt;/code>'s mouse button.&#xA;     * @param relatedTargetArgSpecifies the &lt;code>Event&lt;/code>'s related &#xA;     *   &lt;code>EventTarget&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>MouseEvent&lt;/code> interface provides specific contextual &#xA; * information associated with Mouse events.&#xA; * &lt;p>The &lt;code>detail&lt;/code> attribute inherited from &lt;code>UIEvent&lt;/code> &#xA; * indicates the number of times a mouse button has been pressed and &#xA; * released over the same screen location during a user action. The &#xA; * attribute value is 1 when the user begins this action and increments by 1 &#xA; * for each full sequence of pressing and releasing. If the user moves the &#xA; * mouse between the mousedown and mouseup the value will be set to 0, &#xA; * indicating that no click is occurring.&#xA; * &lt;p>In the case of nested elements mouse events are always targeted at the &#xA; * most deeply nested element. Ancestors of the targeted element may use &#xA; * bubbling to obtain notification of mouse events which occur within its &#xA; * descendent elements.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="UIEvent.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
