<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="Event.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>events</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="Event">
    <members xsi:type="members:Field" name="CAPTURING_PHASE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// PhaseType</comments>
        <comments>/**&#xA;     * The current event phase is the capturing phase.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="AT_TARGET">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The event is currently being evaluated at the target &#xA;     * &lt;code>EventTarget&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="BUBBLING_PHASE">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The current event phase is the bubbling phase.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The name of the event (case-insensitive). The name must be an XML name.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTarget">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="EventTarget.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate the &lt;code>EventTarget&lt;/code> to which the event was &#xA;     * originally dispatched. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCurrentTarget">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="EventTarget.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate the &lt;code>EventTarget&lt;/code> whose &#xA;     * &lt;code>EventListeners&lt;/code> are currently being processed. This is &#xA;     * particularly useful during capturing and bubbling. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getEventPhase">
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate which phase of event flow is currently being &#xA;     * evaluated. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getBubbles">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate whether or not an event is a bubbling event. If the &#xA;     * event can bubble the value is true, else the value is false. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getCancelable">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Used to indicate whether or not an event can have its default action &#xA;     * prevented. If the default action can be prevented the value is true, &#xA;     * else the value is false. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getTimeStamp">
      <typeReference xsi:type="types:Long"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  Used to specify the time (in milliseconds relative to the epoch) at &#xA;     * which the event was created. Due to the fact that some systems may &#xA;     * not provide this information the value of &lt;code>timeStamp&lt;/code> may &#xA;     * be not available for all events. When not available, a value of 0 &#xA;     * will be returned. Examples of epoch time are the time of the system &#xA;     * start or 0:0:0 UTC 1st January 1970. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="stopPropagation">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>stopPropagation&lt;/code> method is used prevent further &#xA;     * propagation of an event during event flow. If this method is called &#xA;     * by any &lt;code>EventListener&lt;/code> the event will cease propagating &#xA;     * through the tree. The event will complete dispatch to all listeners &#xA;     * on the current &lt;code>EventTarget&lt;/code> before event flow stops. This &#xA;     * method may be used during any stage of event flow.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="preventDefault">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * If an event is cancelable, the &lt;code>preventDefault&lt;/code> method is &#xA;     * used to signify that the event is to be canceled, meaning any default &#xA;     * action normally taken by the implementation as a result of the event &#xA;     * will not occur. If, during any stage of event flow, the &#xA;     * &lt;code>preventDefault&lt;/code> method is called the event is canceled. &#xA;     * Any default action associated with the event will not occur. Calling &#xA;     * this method for a non-cancelable event has no effect. Once &#xA;     * &lt;code>preventDefault&lt;/code> has been called it will remain in effect &#xA;     * throughout the remainder of the event's propagation. This method may &#xA;     * be used during any stage of event flow. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="initEvent">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="eventTypeArg">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="canBubbleArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="cancelableArg">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>initEvent&lt;/code> method is used to initialize the value of an &#xA;     * &lt;code>Event&lt;/code> created through the &lt;code>DocumentEvent&lt;/code> &#xA;     * interface. This method may only be called before the &#xA;     * &lt;code>Event&lt;/code> has been dispatched via the &#xA;     * &lt;code>dispatchEvent&lt;/code> method, though it may be called multiple &#xA;     * times during that phase if necessary. If called multiple times the &#xA;     * final invocation takes precedence. If called from a subclass of &#xA;     * &lt;code>Event&lt;/code> interface only the values specified in the &#xA;     * &lt;code>initEvent&lt;/code> method are modified, all other attributes are &#xA;     * left unchanged.&#xA;     * @param eventTypeArgSpecifies the event type. This type may be any &#xA;     *   event type currently defined in this specification or a new event &#xA;     *   type.. The string must be an XML name. Any new event type must not &#xA;     *   begin with any upper, lower, or mixed case version of the string &#xA;     *   &quot;DOM&quot;. This prefix is reserved for future DOM event sets. It is &#xA;     *   also strongly recommended that third parties adding their own &#xA;     *   events use their own prefix to avoid confusion and lessen the &#xA;     *   probability of conflicts with other new events.&#xA;     * @param canBubbleArgSpecifies whether or not the event can bubble.&#xA;     * @param cancelableArgSpecifies whether or not the event's default &#xA;     *   action can be prevented.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * The &lt;code>Event&lt;/code> interface is used to provide contextual information &#xA; * about an event to the handler processing the event. An object which &#xA; * implements the &lt;code>Event&lt;/code> interface is generally passed as the &#xA; * first parameter to an event handler. More specific context information is &#xA; * passed to event handlers by deriving additional interfaces from &#xA; * &lt;code>Event&lt;/code> which contain information directly relating to the &#xA; * type of event they accompany. These derived interfaces are also &#xA; * implemented by the object passed to the event listener. &#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
