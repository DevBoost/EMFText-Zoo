<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="EventTarget.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>events</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="EventTarget">
    <members xsi:type="members:InterfaceMethod" name="addEventListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="EventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="useCapture">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method allows the registration of event listeners on the event &#xA;     * target. If an &lt;code>EventListener&lt;/code> is added to an &#xA;     * &lt;code>EventTarget&lt;/code> while it is processing an event, it will not &#xA;     * be triggered by the current actions but may be triggered during a &#xA;     * later stage of event flow, such as the bubbling phase. &#xA;     * &lt;br> If multiple identical &lt;code>EventListener&lt;/code>s are registered &#xA;     * on the same &lt;code>EventTarget&lt;/code> with the same parameters the &#xA;     * duplicate instances are discarded. They do not cause the &#xA;     * &lt;code>EventListener&lt;/code> to be called twice and since they are &#xA;     * discarded they do not need to be removed with the &#xA;     * &lt;code>removeEventListener&lt;/code> method. &#xA;     * @param typeThe event type for which the user is registering&#xA;     * @param listenerThe &lt;code>listener&lt;/code> parameter takes an interface &#xA;     *   implemented by the user which contains the methods to be called &#xA;     *   when the event occurs.&#xA;     * @param useCaptureIf true, &lt;code>useCapture&lt;/code> indicates that the &#xA;     *   user wishes to initiate capture. After initiating capture, all &#xA;     *   events of the specified type will be dispatched to the registered &#xA;     *   &lt;code>EventListener&lt;/code> before being dispatched to any &#xA;     *   &lt;code>EventTargets&lt;/code> beneath them in the tree. Events which &#xA;     *   are bubbling upward through the tree will not trigger an &#xA;     *   &lt;code>EventListener&lt;/code> designated to use capture.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="removeEventListener">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="type">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../../java/lang/String.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="listener">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="EventListener.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="useCapture">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method allows the removal of event listeners from the event &#xA;     * target. If an &lt;code>EventListener&lt;/code> is removed from an &#xA;     * &lt;code>EventTarget&lt;/code> while it is processing an event, it will not &#xA;     * be triggered by the current actions. &lt;code>EventListener&lt;/code>s can &#xA;     * never be invoked after being removed.&#xA;     * &lt;br>Calling &lt;code>removeEventListener&lt;/code> with arguments which do &#xA;     * not identify any currently registered &lt;code>EventListener&lt;/code> on &#xA;     * the &lt;code>EventTarget&lt;/code> has no effect.&#xA;     * @param typeSpecifies the event type of the &lt;code>EventListener&lt;/code> &#xA;     *   being removed. &#xA;     * @param listenerThe &lt;code>EventListener&lt;/code> parameter indicates the &#xA;     *   &lt;code>EventListener &lt;/code> to be removed. &#xA;     * @param useCaptureSpecifies whether the &lt;code>EventListener&lt;/code> &#xA;     *   being removed was registered as a capturing listener or not. If a &#xA;     *   listener was registered twice, one with capture and one without, &#xA;     *   each must be removed separately. Removal of a capturing listener &#xA;     *   does not affect a non-capturing version of the same listener, and &#xA;     *   vice versa. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispatchEvent">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="evt">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="Event.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="EventException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This method allows the dispatch of events into the implementations &#xA;     * event model. Events dispatched in this manner will have the same &#xA;     * capturing and bubbling behavior as events dispatched directly by the &#xA;     * implementation. The target of the event is the &#xA;     * &lt;code> EventTarget&lt;/code> on which &lt;code>dispatchEvent&lt;/code> is &#xA;     * called. &#xA;     * @param evtSpecifies the event type, behavior, and contextual &#xA;     *   information to be used in processing the event.&#xA;     * @return The return value of &lt;code>dispatchEvent&lt;/code> indicates &#xA;     *   whether any of the listeners which handled the event called &#xA;     *   &lt;code>preventDefault&lt;/code>. If &lt;code>preventDefault&lt;/code> was &#xA;     *   called the value is false, else the value is true. &#xA;     * @exception EventException&#xA;     *   UNSPECIFIED_EVENT_TYPE_ERR: Raised if the &lt;code>Event&lt;/code>'s type &#xA;     *   was not specified by initializing the event before &#xA;     *   &lt;code>dispatchEvent&lt;/code> was called. Specification of the &#xA;     *   &lt;code>Event&lt;/code>'s type as &lt;code>null&lt;/code> or an empty string &#xA;     *   will also trigger this exception.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; *  The &lt;code>EventTarget&lt;/code> interface is implemented by all &#xA; * &lt;code>Nodes&lt;/code> in an implementation which supports the DOM Event &#xA; * Model. Therefore, this interface can be obtained by using &#xA; * binding-specific casting methods on an instance of the &lt;code>Node&lt;/code> &#xA; * interface. The interface allows registration and removal of &#xA; * &lt;code>EventListeners&lt;/code> on an &lt;code>EventTarget&lt;/code> and dispatch &#xA; * of events to that &lt;code>EventTarget&lt;/code>.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113'>Document Object Model (DOM) Level 2 Events Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
