<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/literals ../../../../java.ecore#/9 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="NodeFilter.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>traversal</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="NodeFilter">
    <members xsi:type="members:Field" name="FILTER_ACCEPT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Constants returned by acceptNode</comments>
        <comments>/**&#xA;     * Accept the node. Navigation methods defined for &#xA;     * &lt;code>NodeIterator&lt;/code> or &lt;code>TreeWalker&lt;/code> will return this &#xA;     * node.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FILTER_REJECT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Reject the node. Navigation methods defined for &#xA;     * &lt;code>NodeIterator&lt;/code> or &lt;code>TreeWalker&lt;/code> will not return &#xA;     * this node. For &lt;code>TreeWalker&lt;/code>, the children of this node &#xA;     * will also be rejected. &lt;code>NodeIterators&lt;/code> treat this as a &#xA;     * synonym for &lt;code>FILTER_SKIP&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="FILTER_SKIP">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="3"/>
      <typeReference xsi:type="types:Short"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Skip this single node. Navigation methods defined for &#xA;     * &lt;code>NodeIterator&lt;/code> or &lt;code>TreeWalker&lt;/code> will not return &#xA;     * this node. For both &lt;code>NodeIterator&lt;/code> and &#xA;     * &lt;code>TreeWalker&lt;/code>, the children of this node will still be &#xA;     * considered. &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ALL">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4294967295"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>// Constants for whatToShow</comments>
        <comments>/**&#xA;     * Show all &lt;code>Nodes&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ELEMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>Element&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ATTRIBUTE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>Attr&lt;/code> nodes. This is meaningful only when creating an &#xA;     * &lt;code>NodeIterator&lt;/code> or &lt;code>TreeWalker&lt;/code> with an &#xA;     * attribute node as its &lt;code>root&lt;/code>; in this case, it means that &#xA;     * the attribute node will appear in the first position of the iteration &#xA;     * or traversal. Since attributes are never children of other nodes, &#xA;     * they do not appear when traversing over the document tree.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_TEXT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="4"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>Text&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_CDATA_SECTION">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="8"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>CDATASection&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ENTITY_REFERENCE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="16"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>EntityReference&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_ENTITY">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="32"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>Entity&lt;/code> nodes. This is meaningful only when creating &#xA;     * an &lt;code>NodeIterator&lt;/code> or &lt;code>TreeWalker&lt;/code> with an &#xA;     * &lt;code>Entity&lt;/code> node as its &lt;code>root&lt;/code>; in this case, it &#xA;     * means that the &lt;code>Entity&lt;/code> node will appear in the first &#xA;     * position of the traversal. Since entities are not part of the &#xA;     * document tree, they do not appear when traversing over the document &#xA;     * tree.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_PROCESSING_INSTRUCTION">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="64"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>ProcessingInstruction&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_COMMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="128"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>Comment&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_DOCUMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="256"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>Document&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_DOCUMENT_TYPE">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="512"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>DocumentType&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_DOCUMENT_FRAGMENT">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="1024"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>DocumentFragment&lt;/code> nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="SHOW_NOTATION">
      <initialValue xsi:type="literals:HexIntegerLiteral" hexValue="2048"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Show &lt;code>Notation&lt;/code> nodes. This is meaningful only when creating &#xA;     * an &lt;code>NodeIterator&lt;/code> or &lt;code>TreeWalker&lt;/code> with a &#xA;     * &lt;code>Notation&lt;/code> node as its &lt;code>root&lt;/code>; in this case, it &#xA;     * means that the &lt;code>Notation&lt;/code> node will appear in the first &#xA;     * position of the traversal. Since notations are not part of the &#xA;     * document tree, they do not appear when traversing over the document &#xA;     * tree.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="acceptNode">
      <typeReference xsi:type="types:Short"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="n">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Test whether a specified node is visible in the logical view of a &#xA;     * &lt;code>TreeWalker&lt;/code> or &lt;code>NodeIterator&lt;/code>. This function &#xA;     * will be called by the implementation of &lt;code>TreeWalker&lt;/code> and &#xA;     * &lt;code>NodeIterator&lt;/code>; it is not normally called directly from &#xA;     * user code. (Though you could do so if you wanted to use the same &#xA;     * filter to guide your own application logic.)&#xA;     * @param n The node to check to see if it passes the filter or not.&#xA;     * @return A constant to determine whether the node is accepted, &#xA;     *   rejected, or skipped, as defined above.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * Filters are objects that know how to &quot;filter out&quot; nodes. If a &#xA; * &lt;code>NodeIterator&lt;/code> or &lt;code>TreeWalker&lt;/code> is given a &#xA; * &lt;code>NodeFilter&lt;/code>, it applies the filter before it returns the next &#xA; * node. If the filter says to accept the node, the traversal logic returns &#xA; * it; otherwise, traversal looks for the next node and pretends that the &#xA; * node that was rejected was not there.&#xA; * &lt;p>The DOM does not provide any filters. &lt;code>NodeFilter&lt;/code> is just an &#xA; * interface that users can implement to provide their own filters. &#xA; * &lt;p>&lt;code>NodeFilters&lt;/code> do not need to know how to traverse from node &#xA; * to node, nor do they need to know anything about the data structure that &#xA; * is being traversed. This makes it very easy to write filters, since the &#xA; * only thing they have to know how to do is evaluate a single node. One &#xA; * filter may be used with a number of different kinds of traversals, &#xA; * encouraging code reuse.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
