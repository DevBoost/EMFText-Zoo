<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../../java.ecore#/13 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="DocumentTraversal.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>traversal</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="DocumentTraversal">
    <members xsi:type="members:InterfaceMethod" name="createNodeIterator">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="NodeIterator.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="NodeFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entityReferenceExpansion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a new &lt;code>NodeIterator&lt;/code> over the subtree rooted at the &#xA;     * specified node.&#xA;     * @param root The node which will be iterated together with its &#xA;     *   children. The &lt;code>NodeIterator&lt;/code> is initially positioned &#xA;     *   just before this node. The &lt;code>whatToShow&lt;/code> flags and the &#xA;     *   filter, if any, are not considered when setting this position. The &#xA;     *   root must not be &lt;code>null&lt;/code>.&#xA;     * @param whatToShow This flag specifies which node types may appear in &#xA;     *   the logical view of the tree presented by the &#xA;     *   &lt;code>NodeIterator&lt;/code>. See the description of &#xA;     *   &lt;code>NodeFilter&lt;/code> for the set of possible &lt;code>SHOW_&lt;/code> &#xA;     *   values.These flags can be combined using &lt;code>OR&lt;/code>.&#xA;     * @param filter The &lt;code>NodeFilter&lt;/code> to be used with this &#xA;     *   &lt;code>NodeIterator&lt;/code>, or &lt;code>null&lt;/code> to indicate no &#xA;     *   filter.&#xA;     * @param entityReferenceExpansion The value of this flag determines &#xA;     *   whether entity reference nodes are expanded.&#xA;     * @return The newly created &lt;code>NodeIterator&lt;/code>.&#xA;     * @exception DOMException&#xA;     *   NOT_SUPPORTED_ERR: Raised if the specified &lt;code>root&lt;/code> is &#xA;     *   &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="createTreeWalker">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="TreeWalker.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="root">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="whatToShow">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="filter">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="NodeFilter.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="entityReferenceExpansion">
        <typeReference xsi:type="types:Boolean"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Create a new &lt;code>TreeWalker&lt;/code> over the subtree rooted at the &#xA;     * specified node.&#xA;     * @param root The node which will serve as the &lt;code>root&lt;/code> for the &#xA;     *   &lt;code>TreeWalker&lt;/code>. The &lt;code>whatToShow&lt;/code> flags and the &#xA;     *   &lt;code>NodeFilter&lt;/code> are not considered when setting this value; &#xA;     *   any node type will be accepted as the &lt;code>root&lt;/code>. The &#xA;     *   &lt;code>currentNode&lt;/code> of the &lt;code>TreeWalker&lt;/code> is &#xA;     *   initialized to this node, whether or not it is visible. The &#xA;     *   &lt;code>root&lt;/code> functions as a stopping point for traversal &#xA;     *   methods that look upward in the document structure, such as &#xA;     *   &lt;code>parentNode&lt;/code> and nextNode. The &lt;code>root&lt;/code> must &#xA;     *   not be &lt;code>null&lt;/code>.&#xA;     * @param whatToShow This flag specifies which node types may appear in &#xA;     *   the logical view of the tree presented by the &#xA;     *   &lt;code>TreeWalker&lt;/code>. See the description of &#xA;     *   &lt;code>NodeFilter&lt;/code> for the set of possible &lt;code>SHOW_&lt;/code> &#xA;     *   values.These flags can be combined using &lt;code>OR&lt;/code>.&#xA;     * @param filter The &lt;code>NodeFilter&lt;/code> to be used with this &#xA;     *   &lt;code>TreeWalker&lt;/code>, or &lt;code>null&lt;/code> to indicate no filter.&#xA;     * @param entityReferenceExpansion If this flag is false, the contents of &#xA;     *   &lt;code>EntityReference&lt;/code> nodes are not presented in the logical &#xA;     *   view.&#xA;     * @return The newly created &lt;code>TreeWalker&lt;/code>.&#xA;     * @exception DOMException&#xA;     *    NOT_SUPPORTED_ERR: Raised if the specified &lt;code>root&lt;/code> is &#xA;     *   &lt;code>null&lt;/code>.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>DocumentTraversal&lt;/code> contains methods that create &#xA; * &lt;code>NodeIterators&lt;/code> and &lt;code>TreeWalkers&lt;/code> to traverse a &#xA; * node and its children in document order (depth first, pre-order &#xA; * traversal, which is equivalent to the order in which the start tags occur &#xA; * in the text representation of the document). In DOMs which support the &#xA; * Traversal feature, &lt;code>DocumentTraversal&lt;/code> will be implemented by &#xA; * the same objects that implement the Document interface.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
