<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../../java.ecore#/7 http://www.emftext.org/java/members ../../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../../java.ecore#/11 http://www.emftext.org/java/types ../../../../java.ecore#/16" name="NodeIterator.java">
  <comments>/*&#xA; * Copyright (c) 2000 World Wide Web Consortium,&#xA; * (Massachusetts Institute of Technology, Institut National de&#xA; * Recherche en Informatique et en Automatique, Keio University). All&#xA; * Rights Reserved. This program is distributed under the W3C's Software&#xA; * Intellectual Property License. This program is distributed in the&#xA; * hope that it will be useful, but WITHOUT ANY WARRANTY; without even&#xA; * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR&#xA; * PURPOSE.&#xA; * See W3C License http://www.w3.org/Consortium/Legal/ for more details.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>w3c</namespaces>
  <namespaces>dom</namespaces>
  <namespaces>traversal</namespaces>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>org</namespaces>
    <namespaces>w3c</namespaces>
    <namespaces>dom</namespaces>
    <classifier xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="NodeIterator">
    <members xsi:type="members:InterfaceMethod" name="getRoot">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The root node of the &lt;code>NodeIterator&lt;/code>, as specified when it &#xA;     * was created.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getWhatToShow">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * This attribute determines which node types are presented via the &#xA;     * &lt;code>NodeIterator&lt;/code>. The available set of constants is defined &#xA;     * in the &lt;code>NodeFilter&lt;/code> interface.  Nodes not accepted by &#xA;     * &lt;code>whatToShow&lt;/code> will be skipped, but their children may still &#xA;     * be considered. Note that this skip takes precedence over the filter, &#xA;     * if any. &#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getFilter">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="NodeFilter.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * The &lt;code>NodeFilter&lt;/code> used to screen nodes.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getExpandEntityReferences">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     *  The value of this flag determines whether the children of entity &#xA;     * reference nodes are visible to the &lt;code>NodeIterator&lt;/code>. If &#xA;     * false, these children  and their descendants will be rejected. Note &#xA;     * that this rejection takes precedence over &lt;code>whatToShow&lt;/code> and &#xA;     * the filter. Also note that this is currently the only situation where &#xA;     * &lt;code>NodeIterators&lt;/code> may reject a complete subtree rather than &#xA;     * skipping individual nodes. &#xA;     * &lt;br>&#xA;     * &lt;br> To produce a view of the document that has entity references &#xA;     * expanded and does not expose the entity reference node itself, use &#xA;     * the &lt;code>whatToShow&lt;/code> flags to hide the entity reference node &#xA;     * and set &lt;code>expandEntityReferences&lt;/code> to true when creating the &#xA;     * &lt;code>NodeIterator&lt;/code>. To produce a view of the document that has &#xA;     * entity reference nodes but no entity expansion, use the &#xA;     * &lt;code>whatToShow&lt;/code> flags to show the entity reference node and &#xA;     * set &lt;code>expandEntityReferences&lt;/code> to false.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="nextNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the next node in the set and advances the position of the &#xA;     * &lt;code>NodeIterator&lt;/code> in the set. After a &#xA;     * &lt;code>NodeIterator&lt;/code> is created, the first call to &#xA;     * &lt;code>nextNode()&lt;/code> returns the first node in the set.&#xA;     * @return The next &lt;code>Node&lt;/code> in the set being iterated over, or &#xA;     *   &lt;code>null&lt;/code> if there are no more members in that set.&#xA;     * @exception DOMException&#xA;     *   INVALID_STATE_ERR: Raised if this method is called after the &#xA;     *   &lt;code>detach&lt;/code> method was invoked.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="previousNode">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="../Node.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../DOMException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the previous node in the set and moves the position of the &#xA;     * &lt;code>NodeIterator&lt;/code> backwards in the set.&#xA;     * @return The previous &lt;code>Node&lt;/code> in the set being iterated over, &#xA;     *   or &lt;code>null&lt;/code> if there are no more members in that set. &#xA;     * @exception DOMException&#xA;     *   INVALID_STATE_ERR: Raised if this method is called after the &#xA;     *   &lt;code>detach&lt;/code> method was invoked.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="detach">
      <typeReference xsi:type="types:Void"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Detaches the &lt;code>NodeIterator&lt;/code> from the set which it iterated &#xA;     * over, releasing any computational resources and placing the &#xA;     * &lt;code>NodeIterator&lt;/code> in the INVALID state. After &#xA;     * &lt;code>detach&lt;/code> has been invoked, calls to &lt;code>nextNode&lt;/code> &#xA;     * or &lt;code>previousNode&lt;/code> will raise the exception &#xA;     * INVALID_STATE_ERR.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * &lt;code>NodeIterators&lt;/code> are used to step through a set of nodes, e.g. &#xA; * the set of nodes in a &lt;code>NodeList&lt;/code>, the document subtree &#xA; * governed by a particular &lt;code>Node&lt;/code>, the results of a query, or &#xA; * any other set of nodes. The set of nodes to be iterated is determined by &#xA; * the implementation of the &lt;code>NodeIterator&lt;/code>. DOM Level 2 &#xA; * specifies a single &lt;code>NodeIterator&lt;/code> implementation for &#xA; * document-order traversal of a document subtree. Instances of these &#xA; * &lt;code>NodeIterators&lt;/code> are created by calling &#xA; * &lt;code>DocumentTraversal&lt;/code>&lt;code>.createNodeIterator()&lt;/code>.&#xA; * &lt;p>See also the &lt;a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification&lt;/a>.&#xA; * @since DOM Level 2&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
