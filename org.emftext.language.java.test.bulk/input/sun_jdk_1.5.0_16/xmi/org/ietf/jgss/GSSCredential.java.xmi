<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:literals="http://www.emftext.org/java/literals" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/literals ../../../java.ecore#/9 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/types ../../../java.ecore#/16" name="GSSCredential.java">
  <comments>/*&#xA; * @(#)GSSCredential.java&#x9;1.8 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>ietf</namespaces>
  <namespaces>jgss</namespaces>
  <classifiers xsi:type="classifiers:Interface" name="GSSCredential">
    <members xsi:type="members:Field" name="INITIATE_AND_ACCEPT">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Credential usage flag requesting that it be usable&#xA;     * for both context initiation and acceptance.&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="INITIATE_ONLY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="1"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Credential usage flag requesting that it be usable&#xA;     * for context initiation only.&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="ACCEPT_ONLY">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="2"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Credential usage flag requesting that it be usable&#xA;     * for context acceptance only.&#xA;     * &#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="DEFAULT_LIFETIME">
      <initialValue xsi:type="literals:DecimalIntegerLiteral" decimalValue="0"/>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * A lifetime constant representing the default credential lifetime. This &#xA;     * value it set to 0.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="INDEFINITE_LIFETIME">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:IdentifierReference">
          <target xsi:type="members:Field" href="../../../java/lang/Integer.class.xmi#//@classifiers.0/@members.1"/>
        </next>
        <target xsi:type="classifiers:Class" href="../../../java/lang/Integer.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * A lifetime constant representing indefinite credential lifetime.&#xA;     * This value must is set to the maximum integer value in Java -&#xA;     * {@link java.lang.Integer#MAX_VALUE Integer.MAX_VALUE}.&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="dispose">
      <typeReference xsi:type="types:Void"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Releases any sensitive information that the GSSCredential object may&#xA;     * be containing.  Applications should call this method as soon as the&#xA;     * credential is no longer needed to minimize the time any sensitive&#xA;     * information is maintained.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="GSSName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     *  Retrieves the name of the entity that the credential asserts.&#xA;     *&#xA;     * @return a GSSName representing the entity&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getName">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Interface" href="GSSName.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mech">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Retrieves a Mechanism Name of the entity that the credential&#xA;     * asserts. This is equivalent to calling {@link&#xA;     * GSSName#canonicalize(Oid) canonicalize} on the value returned by&#xA;     * the other form of {@link #getName() getName}.&#xA;     * &#xA;     * @param mech the Oid of the mechanism for which the Mechanism Name&#xA;     * should be returned.&#xA;     * @return a GSSName representing the entity canonicalized for the&#xA;     * desired mechanism&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#BAD_MECH GSSException.BAD_MECH},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemainingLifetime">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns the remaining lifetime in seconds for a credential.  The&#xA;     * remaining lifetime is the minimum lifetime amongst all of the underlying&#xA;     * mechanism specific credential elements.&#xA;     *&#xA;     * @return the minimum remaining lifetime in seconds for this&#xA;     * credential. A return value of {@link #INDEFINITE_LIFETIME&#xA;     * INDEFINITE_LIFETIME} indicates that the credential does&#xA;     * not expire. A return value of 0 indicates that the credential is&#xA;     * already expired.&#xA;     *&#xA;     * @see #getRemainingInitLifetime(Oid)&#xA;     * @see #getRemainingAcceptLifetime(Oid)&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemainingInitLifetime">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mech">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns the lifetime in seconds for the credential to remain capable&#xA;     * of initiating security contexts using the specified mechanism. This&#xA;     * method queries the initiator credential element that belongs to the&#xA;     * specified mechanism.&#xA;     *&#xA;     * @return the number of seconds remaining in the life of this credential&#xA;     * element. A return value of {@link #INDEFINITE_LIFETIME&#xA;     * INDEFINITE_LIFETIME} indicates that the credential element does not&#xA;     * expire.  A return value of 0 indicates that the credential element is&#xA;     * already expired.&#xA;     * &#xA;     * @param mech the Oid of the mechanism whose intiator credential element&#xA;     * should be queried.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#BAD_MECH GSSException.BAD_MECH},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getRemainingAcceptLifetime">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mech">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns the lifetime in seconds for the credential to remain capable&#xA;     * of accepting security contexts using the specified mechanism. This&#xA;     * method queries the acceptor credential element that belongs to the&#xA;     * specified mechanism.&#xA;     *&#xA;     * @return the number of seconds remaining in the life of this credential&#xA;     * element. A return value of {@link #INDEFINITE_LIFETIME&#xA;     * INDEFINITE_LIFETIME} indicates that the credential element does not&#xA;     * expire.  A return value of 0 indicates that the credential element is&#xA;     * already expired.&#xA;     * &#xA;     * @param mech the Oid of the mechanism whose acceptor credential element&#xA;     * should be queried.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#BAD_MECH GSSException.BAD_MECH},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUsage">
      <typeReference xsi:type="types:Int"/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns the credential usage mode. In other words, it&#xA;     * tells us if this credential can be used for initiating or accepting&#xA;     * security contexts. It does not tell us which mechanism(s) has to be&#xA;     * used in order to do so. It is expected that an application will allow&#xA;     * the GSS-API to pick a default mechanism after calling this method.&#xA;     *&#xA;     * @return The return value will be one of {@link #INITIATE_ONLY&#xA;     * INITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link&#xA;     * #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getUsage">
      <typeReference xsi:type="types:Int"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mech">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns the credential usage mode for a specific mechanism. In other&#xA;     * words, it tells us if this credential can be used &#xA;     * for initiating or accepting security contexts with a given underlying&#xA;     * mechanism.&#xA;     *&#xA;     * @return The return value will be one of {@link #INITIATE_ONLY&#xA;     * INITIATE_ONLY}, {@link #ACCEPT_ONLY ACCEPT_ONLY}, and {@link&#xA;     * #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT}.&#xA;     * @param mech the Oid of the mechanism whose credentials usage mode is&#xA;     * to be determined.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#BAD_MECH GSSException.BAD_MECH},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getMechs">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns a list of mechanisms supported by this credential. It does&#xA;     * not tell us which ones can be used to initiate&#xA;     * contexts and which ones can be used to accept contexts. The&#xA;     * application must call the {@link #getUsage(Oid) getUsage} method with&#xA;     * each of the returned Oid's to determine the possible modes of&#xA;     * usage.&#xA;     *&#xA;     * @return an array of Oid's corresponding to the supported mechanisms.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="add">
      <typeReference xsi:type="types:Void"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="name">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Interface" href="GSSName.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="initLifetime">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="acceptLifetime">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mech">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <parameters xsi:type="parameters:OrdinaryParameter" name="usage">
        <typeReference xsi:type="types:Int"/>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Adds a mechanism specific credential-element to an existing&#xA;     * credential.  This method allows the construction of credentials, one&#xA;     * mechanism at a time.&lt;p>&#xA;     *&#xA;     * This routine is envisioned to be used mainly by context acceptors&#xA;     * during the creation of acceptor credentials which are to be used&#xA;     * with a variety of clients using different security mechanisms.&lt;p>&#xA;     *&#xA;     * This routine adds the new credential element &quot;in-place&quot;.  To add the&#xA;     * element in a new credential, first call &lt;code>clone&lt;/code> to obtain a&#xA;     * copy of this credential, then call its &lt;code>add&lt;/code> method.&lt;p>&#xA;     *&#xA;     * As always, GSS-API implementations must impose a local access-control&#xA;     * policy on callers to prevent unauthorized callers from acquiring&#xA;     * credentials to which they are not entitled.&#xA;     *&#xA;     * Non-default values for initLifetime and acceptLifetime cannot always&#xA;     * be honored by the underlying mechanisms, thus callers should be&#xA;     * prepared to call {@link #getRemainingInitLifetime(Oid)&#xA;     * getRemainingInitLifetime} and {@link #getRemainingAcceptLifetime(Oid)&#xA;     * getRemainingAcceptLifetime} on the credential.&#xA;     *&#xA;     * @param name the name of the principal for whom this credential is to&#xA;     * be acquired.  Use &lt;code>null&lt;/code> to specify the default&#xA;     * principal.&#xA;     * @param initLifetime the number of seconds that the credential element&#xA;     * should remain valid for initiating of security contexts. Use {@link&#xA;     * GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}&#xA;     * to request that the credentials have the maximum permitted lifetime&#xA;     * for this.  Use {@link GSSCredential#DEFAULT_LIFETIME&#xA;     * GSSCredential.DEFAULT_LIFETIME} to request default credential lifetime &#xA;     * for this.&#xA;     * @param acceptLifetime the number of seconds that the credential&#xA;     * element should remain valid for accepting security contexts. Use {@link&#xA;     * GSSCredential#INDEFINITE_LIFETIME GSSCredential.INDEFINITE_LIFETIME}&#xA;     * to request that the credentials have the maximum permitted lifetime&#xA;     * for this.  Use {@link GSSCredential#DEFAULT_LIFETIME&#xA;     * GSSCredential.DEFAULT_LIFETIME} to request default credential lifetime &#xA;     * for this.&#xA;     * @param mech the mechanism over which the credential is to be acquired.&#xA;     * @param usage the usage mode that this credential&#xA;     * element should add to the credential. The value&#xA;     * of this parameter must be one of: &#xA;     * {@link #INITIATE_AND_ACCEPT INITIATE_AND_ACCEPT},&#xA;     * {@link #ACCEPT_ONLY ACCEPT_ONLY}, and&#xA;     * {@link #INITIATE_ONLY INITIATE_ONLY}.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#DUPLICATE_ELEMENT &#xA;     *                          GSSException.DUPLICATE_ELEMENT},&#xA;     *         {@link GSSException#BAD_MECH GSSException.BAD_MECH},&#xA;     *         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},&#xA;     *         {@link GSSException#NO_CRED GSSException.NO_CRED},&#xA;     *         {@link GSSException#CREDENTIALS_EXPIRED &#xA;     *                                  GSSException.CREDENTIALS_EXPIRED},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="another">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Tests if this GSSCredential asserts the same entity as the supplied&#xA;     * object.  The two credentials must be acquired over the same&#xA;     * mechanisms and must refer to the same principal.  &#xA;     *&#xA;     * @return &lt;code>true&lt;/code> if the two GSSCredentials assert the same&#xA;     * entity; &lt;code>false&lt;/code> otherwise.&#xA;     * @param another another GSSCredential for comparison to this one&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hashcode value for this GSSCredential.&#xA;     *&#xA;     * @return a hashCode value&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**&#xA; * This interface encapsulates the GSS-API credentials for an entity.  A&#xA; * credential contains all the necessary cryptographic information to&#xA; * enable the creation of a context on behalf of the entity that it&#xA; * represents.  It may contain multiple, distinct, mechanism specific&#xA; * credential elements, each containing information for a specific&#xA; * security mechanism, but all referring to the same entity. A credential&#xA; * may be used to perform context initiation, acceptance, or both.&lt;p>&#xA; *&#xA; * Credentials are instantiated using one of the&#xA; * &lt;code>createCredential&lt;/code> methods in the {@link GSSManager&#xA; * GSSManager} class. GSS-API credential creation is not&#xA; * intended to provide a &quot;login to the network&quot; function, as such a&#xA; * function would involve the creation of new credentials rather than&#xA; * merely acquiring a handle to existing credentials. The&#xA; * &lt;a href=package-summary.html#useSubjectCredsOnly>section on credential&#xA; * acquisition&lt;/a> in the package level description describes&#xA; * how existing credentials are acquired in the Java 2 platform. GSS-API &#xA; * implementations must impose a local access-control policy on callers to&#xA; * prevent unauthorized callers from acquiring credentials to which they&#xA; * are not entitled. &lt;p>&#xA; *&#xA; * Applications will create a credential object passing the desired&#xA; * parameters.  The application can then use the query methods to obtain&#xA; * specific information about the instantiated credential object.&#xA; * When the credential is no longer needed, the application should call&#xA; * the {@link #dispose() dispose} method to release any resources held by&#xA; * the credential object and to destroy any cryptographically sensitive&#xA; * information.&lt;p>&#xA; *&#xA; * This example code demonstrates the creation of a GSSCredential&#xA; * implementation for a specific entity, querying of its fields, and its&#xA; * release when it is no longer needed:&lt;p>&#xA; * &lt;pre>&#xA; *    GSSManager manager = GSSManager.getInstance();&#xA; *&#xA; *    // start by creating a name object for the entity&#xA; *    GSSName name = manager.createName(&quot;myusername&quot;, GSSName.NT_USER_NAME);&#xA; *&#xA; *    // now acquire credentials for the entity&#xA; *    GSSCredential cred = manager.createCredential(name,&#xA; *                    GSSCredential.ACCEPT_ONLY);&#xA; *&#xA; *    // display credential information - name, remaining lifetime,&#xA; *    // and the mechanisms it has been acquired over&#xA; *    System.out.println(cred.getName().toString());&#xA; *    System.out.println(cred.getRemainingLifetime());&#xA; *&#xA; *    Oid [] mechs = cred.getMechs();&#xA; *    if (mechs != null) {&#xA; *            for (int i = 0; i &lt; mechs.length; i++)&#xA; *                    System.out.println(mechs[i].toString());&#xA; *    }&#xA; *&#xA; *    // release system resources held by the credential&#xA; *    cred.dispose();&#xA; * &lt;/pre>&#xA; *&#xA; * @see GSSManager#createCredential(int)&#xA; * @see GSSManager#createCredential(GSSName, int, Oid, int)&#xA; * @see GSSManager#createCredential(GSSName, int, Oid[], int)&#xA; * @see #dispose()&#xA; *&#xA; * @author Mayank Upadhyay&#xA; * @version 1.8, 12/19/03&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
    <extends xsi:type="types:NamespaceClassifierReference">
      <classifierReferences>
        <target xsi:type="classifiers:Interface" href="../../../java/lang/Cloneable.class.xmi#//@classifiers.0"/>
      </classifierReferences>
    </extends>
  </classifiers>
</containers:CompilationUnit>
