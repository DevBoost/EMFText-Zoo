<?xml version="1.0" encoding="ASCII"?>
<containers:CompilationUnit xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:classifiers="http://www.emftext.org/java/classifiers" xmlns:containers="http://www.emftext.org/java/containers" xmlns:imports="http://www.emftext.org/java/imports" xmlns:members="http://www.emftext.org/java/members" xmlns:modifiers="http://www.emftext.org/java/modifiers" xmlns:parameters="http://www.emftext.org/java/parameters" xmlns:references="http://www.emftext.org/java/references" xmlns:types="http://www.emftext.org/java/types" xsi:schemaLocation="http://www.emftext.org/java/classifiers ../../../java.ecore#/2 http://www.emftext.org/java/containers ../../../java.ecore#/4 http://www.emftext.org/java/imports ../../../java.ecore#/7 http://www.emftext.org/java/members ../../../java.ecore#/10 http://www.emftext.org/java/modifiers ../../../java.ecore#/11 http://www.emftext.org/java/parameters ../../../java.ecore#/13 http://www.emftext.org/java/references ../../../java.ecore#/14 http://www.emftext.org/java/types ../../../java.ecore#/16" name="GSSName.java">
  <comments>/*&#xA; * @(#)GSSName.java&#x9;1.7 03/12/19&#xA; *&#xA; * Copyright 2004 Sun Microsystems, Inc. All rights reserved.&#xA; * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&#xA; */</comments>
  <namespaces>org</namespaces>
  <namespaces>ietf</namespaces>
  <namespaces>jgss</namespaces>
  <imports xsi:type="imports:PackageImport">
    <namespaces>sun</namespaces>
    <namespaces>security</namespaces>
    <namespaces>jgss</namespaces>
    <namespaces>spi</namespaces>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Class" href="../../../java/util/Vector.class.xmi#//@classifiers.0"/>
  </imports>
  <imports xsi:type="imports:ClassifierImport">
    <namespaces>java</namespaces>
    <namespaces>util</namespaces>
    <classifier xsi:type="classifiers:Interface" href="../../../java/util/Enumeration.class.xmi#//@classifiers.0"/>
  </imports>
  <classifiers xsi:type="classifiers:Interface" name="GSSName">
    <members xsi:type="members:Field" name="NT_HOSTBASED_SERVICE">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Oid.class.xmi#//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:StringReference" value="1.3.6.1.5.6.2"/>
        </next>
        <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Oid indicating a host-based service name form.  It is used to&#xA;     * represent services associated with host computers.  This name form&#xA;     * is constructed using two elements, &quot;service&quot; and &quot;hostname&quot;, as&#xA;     * follows: service@hostname.&lt;p>&#xA;     *&#xA;     * It represents the following Oid value:&lt;br>&#xA;     * &lt;code>{ 1(iso), 3(org), 6(dod), 1(internet), 5(security),&#xA;     * 6(nametypes), 2(gss-host-based-services) }&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NT_USER_NAME">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Oid.class.xmi#//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:StringReference" value="1.2.840.113554.1.2.1.1"/>
        </next>
        <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Name type to indicate a named user on a local system.&lt;p>&#xA;     * It represents the following Oid value:&lt;br>&#xA;     *  &lt;code>{ iso(1) member-body(2) United&#xA;     * States(840) mit(113554) infosys(1) gssapi(2) generic(1) user_name(1)&#xA;     * }&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NT_MACHINE_UID_NAME">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Oid.class.xmi#//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:StringReference" value="1.2.840.113554.1.2.1.2"/>
        </next>
        <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name type to indicate a numeric user identifier corresponding to a&#xA;     * user on a local system. (e.g. Uid).&lt;p>&#xA;     *&#xA;     *  It represents the following Oid value:&lt;br>&#xA;     * &lt;code>{ iso(1) member-body(2) United States(840) mit(113554)&#xA;     * infosys(1) gssapi(2) generic(1) machine_uid_name(2) }&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NT_STRING_UID_NAME">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Oid.class.xmi#//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:StringReference" value="1.2.840.113554.1.2.1.3"/>
        </next>
        <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Name type to indicate a string of digits representing the numeric&#xA;     * user identifier of a user on a local system.&lt;p>&#xA;     *&#xA;     * It represents the following Oid value:&lt;br>&#xA;     * &lt;code>{ iso(1) member-body(2) United&#xA;     * States(840) mit(113554) infosys(1) gssapi(2) generic(1)&#xA;     * string_uid_name(3) }&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NT_ANONYMOUS">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Oid.class.xmi#//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:StringReference" value="1.3.6.1.5.6.3"/>
        </next>
        <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Name type for representing an anonymous entity.&lt;p>&#xA;     * It represents the following Oid value:&lt;br>&#xA;     * &lt;code>{ 1(iso), 3(org), 6(dod), 1(internet),&#xA;     * 5(security), 6(nametypes), 3(gss-anonymous-name) }&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:Field" name="NT_EXPORT_NAME">
      <initialValue xsi:type="references:IdentifierReference">
        <next xsi:type="references:MethodCall">
          <target xsi:type="members:ClassMethod" href="Oid.class.xmi#//@classifiers.0/@members.5"/>
          <arguments xsi:type="references:StringReference" value="1.3.6.1.5.6.4"/>
        </next>
        <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
      </initialValue>
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Name type used to indicate an exported name produced by the export&#xA;     * method.&lt;p>&#xA;     *&#xA;     * It represents the following Oid value:&lt;br> &lt;code>{ 1(iso),&#xA;     * 3(org), 6(dod), 1(internet), 5(security), 6(nametypes),&#xA;     * 4(gss-api-exported-name) }&lt;/code>&#xA;     */</comments>
      </annotationsAndModifiers>
      <annotationsAndModifiers xsi:type="modifiers:Static"/>
      <annotationsAndModifiers xsi:type="modifiers:Final"/>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="another">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences target="//@classifiers.0"/>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Compares two &lt;code>GSSName&lt;/code> objects to determine if they refer to the&#xA;     * same entity.&#xA;     * &#xA;     * @param another the &lt;code>GSSName&lt;/code> to compare this name with&#xA;     * @return true if the two names contain at least one primitive element&#xA;     * in common. If either of the names represents an anonymous entity, the&#xA;     * method will return false.&#xA;     *&#xA;     * @throws GSSException when the names cannot be compared, containing the following&#xA;     * major error codes: &#xA;     *         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="equals">
      <typeReference xsi:type="types:Boolean"/>
      <parameters xsi:type="parameters:OrdinaryParameter" name="another">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="../../../java/lang/Object.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Compares this &lt;code>GSSName&lt;/code> object to another Object that might be a&#xA;     * &lt;code>GSSName&lt;/code>. The behaviour is exactly the same as in {@link&#xA;     * #equals(GSSName) equals} except that no GSSException is thrown;&#xA;     * instead, false will be returned in the situation where an error&#xA;     * occurs.&#xA;     * @return true if the object to compare to is also a &lt;code>GSSName&lt;/code> and the two &#xA;     * names refer to the same entity.&#xA;     * @param another the object to compare this name to&#xA;     * @see #equals(GSSName)&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="hashCode">
      <typeReference xsi:type="types:Int"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**&#xA;     * Returns a hashcode value for this GSSName.&#xA;     *&#xA;     * @return a hashCode value&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="canonicalize">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences target="//@classifiers.0"/>
      </typeReference>
      <parameters xsi:type="parameters:OrdinaryParameter" name="mech">
        <typeReference xsi:type="types:NamespaceClassifierReference">
          <classifierReferences>
            <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
          </classifierReferences>
        </typeReference>
      </parameters>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**   &#xA;     * Creates a name that is canonicalized for some&#xA;     * mechanism.&#xA;     *&#xA;     * @return a &lt;code>GSSName&lt;/code> that contains just one primitive&#xA;     * element representing this name in a canonicalized form for the desired&#xA;     * mechanism.&#xA;     * @param mech the oid for the mechanism for which the canonical form of&#xA;     * the name is requested.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#BAD_MECH GSSException.BAD_MECH},&#xA;     *         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},&#xA;     *         {@link GSSException#BAD_NAME GSSException.BAD_NAME},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="export">
      <typeReference xsi:type="types:Byte"/>
      <arrayDimensionsBefore/>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns a canonical contiguous byte representation of a mechanism name &#xA;     * (MN), suitable for direct, byte by byte comparison by authorization&#xA;     * functions.  If the name is not an MN, implementations may throw a&#xA;     * GSSException with the NAME_NOT_MN status code.  If an implementation&#xA;     * chooses not to throw an exception, it should use some system specific&#xA;     * default mechanism to canonicalize the name and then export&#xA;     * it. Structurally, an exported name object consists of a header&#xA;     * containing an OID identifying the mechanism that authenticated the&#xA;     * name, and a trailer containing the name itself, where the syntax of&#xA;     * the trailer is defined by the individual mechanism specification. The&#xA;     * format of the header of the output buffer is specified in RFC 2743.&lt;p> &#xA;     *&#xA;     * The exported name is useful when used in large access control lists&#xA;     * where the overhead of creating a &lt;code>GSSName&lt;/code> object on each&#xA;     * name and invoking the equals method on each name from the ACL may be&#xA;     * prohibitive.&lt;p>&#xA;     *&#xA;     * Exported names may be re-imported by using the byte array factory&#xA;     * method {@link GSSManager#createName(byte[], Oid)&#xA;     * GSSManager.createName} and specifying the NT_EXPORT_NAME as the name&#xA;     * type object identifier. The resulting &lt;code>GSSName&lt;/code> name will&#xA;     * also be a MN.&lt;p>  &#xA;     * @return a byte[] containing the exported name. RFC 2743 defines the&#xA;     * &quot;Mechanism-Independent Exported Name Object Format&quot; for these bytes.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#BAD_NAME GSSException.BAD_NAME},&#xA;     *         {@link GSSException#BAD_NAMETYPE GSSException.BAD_NAMETYPE},&#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="toString">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="../../../java/lang/String.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns a textual representation of the &lt;code>GSSName&lt;/code> object.  To retrieve&#xA;     * the printed name format, which determines the syntax of the returned&#xA;     * string, use the {@link #getStringNameType() getStringNameType}&#xA;     * method.&#xA;     *&#xA;     * @return a String representing this name in printable form.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="getStringNameType">
      <typeReference xsi:type="types:NamespaceClassifierReference">
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="Oid.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </typeReference>
      <exceptions>
        <classifierReferences>
          <target xsi:type="classifiers:Class" href="GSSException.class.xmi#//@classifiers.0"/>
        </classifierReferences>
      </exceptions>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/**    &#xA;     * Returns the name type of the printable&#xA;     * representation of this name that can be obtained from the &lt;code>&#xA;     * toString&lt;/code> method.&#xA;     *&#xA;     * @return an Oid representing the namespace of the name returned&#xA;     * from the toString method.&#xA;     *&#xA;     * @throws GSSException containing the following &#xA;     * major error codes: &#xA;     *         {@link GSSException#FAILURE GSSException.FAILURE}&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isAnonymous">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Tests if this name object represents an anonymous entity.&#xA;     *&#xA;     * @return true if this is an anonymous name, false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <members xsi:type="members:InterfaceMethod" name="isMN">
      <typeReference xsi:type="types:Boolean"/>
      <annotationsAndModifiers xsi:type="modifiers:Public">
        <comments>/** &#xA;     * Tests if this name object represents a Mechanism Name (MN). An MN is &#xA;     * a GSSName the contains exactly one mechanism's primitive name&#xA;     * element.&#xA;     *&#xA;     * @return true if this is an MN, false otherwise.&#xA;     */</comments>
      </annotationsAndModifiers>
    </members>
    <annotationsAndModifiers xsi:type="modifiers:Public">
      <comments>/**  &#xA; * This interface encapsulates a single GSS-API principal entity. The&#xA; * application obtains an implementation of this interface &#xA; * through one of the &lt;code>createName&lt;/code> methods that exist in the {@link&#xA; * GSSManager GSSManager} class. Conceptually a GSSName contains many&#xA; * representations of the entity or many primitive name elements, one for&#xA; * each supported underlying mechanism. In GSS terminology, a GSSName that&#xA; * contains an element from just one mechanism is called a Mechanism Name&#xA; * (MN)&lt;p>&#xA; * &#xA; * Since different authentication mechanisms may employ different&#xA; * namespaces for identifying their principals, GSS-API's naming support is&#xA; * necessarily complex in multi-mechanism environments (or even in some&#xA; * single-mechanism environments where the underlying mechanism supports&#xA; * multiple namespaces). Different name formats and their definitions are&#xA; * identified with {@link Oid Oid's} and some standard types&#xA; * are defind in this interface. The format of the names can be derived&#xA; * based on the unique &lt;code>Oid&lt;/code> of its name type.&lt;p>&#xA; *&#xA; * Included below are code examples utilizing the &lt;code>GSSName&lt;/code> interface.&#xA; * The code below creates a &lt;code>GSSName&lt;/code>, converts it to an MN, performs a&#xA; * comparison, obtains a printable representation of the name, exports it&#xA; * to a byte array and then re-imports to obtain a&#xA; * new &lt;code>GSSName&lt;/code>.&lt;p>&#xA; * &lt;pre>&#xA; *      GSSManager manager = GSSManager.getInstance();&#xA; *&#xA; *      // create a host based service name&#xA; *      GSSName name = manager.createName(&quot;service@host&quot;,&#xA; *                   GSSName.NT_HOSTBASED_SERVICE);&#xA; *&#xA; *      Oid krb5 = new Oid(&quot;1.2.840.113554.1.2.2&quot;);&#xA; *&#xA; *      GSSName mechName = name.canonicalize(krb5);&#xA; *   &#xA; *      // the above two steps are equivalent to the following&#xA; *      GSSName mechName = manager.createName(&quot;service@host&quot;,&#xA; *                      GSSName.NT_HOSTBASED_SERVICE, krb5);&#xA; *   &#xA; *      // perform name comparison&#xA; *      if (name.equals(mechName))&#xA; *              print(&quot;Names are equals.&quot;);&#xA; *   &#xA; *      // obtain textual representation of name and its printable&#xA; *      // name type&#xA; *      print(mechName.toString() +&#xA; *                      mechName.getStringNameType().toString());&#xA; *   &#xA; *      // export and re-import the name&#xA; *      byte [] exportName = mechName.export();&#xA; *   &#xA; *      // create a new name object from the exported buffer&#xA; *      GSSName newName = manager.createName(exportName,&#xA; *                      GSSName.NT_EXPORT_NAME);&#xA; *   &#xA; * &lt;/pre>&#xA; * @see #export()&#xA; * @see #equals(GSSName)&#xA; * @see GSSManager#createName(String, Oid)&#xA; * @see GSSManager#createName(String, Oid, Oid)&#xA; * @see GSSManager#createName(byte[], Oid)&#xA; *&#xA; * @author Mayank Upadhyay&#xA; * @version 1.7, 12/19/03&#xA; * @since 1.4&#xA; */</comments>
    </annotationsAndModifiers>
  </classifiers>
</containers:CompilationUnit>
